-- View: changelog.account_changelog_recent
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `account_changelog_recent` AS select `account_changelog`.`id` AS `id`,`account_changelog`.`server_ts` AS `server_ts`,`account_changelog`.`account` AS `account`,`account_changelog`.`email` AS `email`,`account_changelog`.`employee` AS `employee`,`account_changelog`.`user_type` AS `user_type`,`account_changelog`.`note` AS `note`,`account_changelog`.`status` AS `status`,`account_changelog`.`created_on` AS `created_on`,`account_changelog`.`created_by` AS `created_by`,`account_changelog`.`modified_on` AS `modified_on`,`account_changelog`.`modified_by` AS `modified_by`,`account_changelog`.`first_name` AS `first_name`,`account_changelog`.`last_name` AS `last_name`,`account_changelog`.`employee_id` AS `employee_id`,`account_changelog`.`account_type` AS `account_type`,`account_changelog`.`mail_groups` AS `mail_groups`,`account_changelog`.`is_in_workspace` AS `is_in_workspace` from `account_changelog` order by `account_changelog`.`server_ts` desc limit 100

-- View: compliance.all_processing_processing_packages
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `all_processing_processing_packages` AS select `td`.`metrc_tag` AS `metrc_tag`,sum(`td`.`quantity`) AS `sum(``td``.quantity)` from `processing`.`trimming_details` `td` group by `td`.`metrc_tag` order by `td`.`metrc_tag` desc

-- View: compliance.packages_throught_the_apps
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `packages_throught_the_apps` AS select `td`.`metrc_tag` AS `trimming_details_tag`,sum(`td`.`quantity`) AS `trimming_details_q`,`bd`.`metrc_tag` AS `buck`,sum(`bd`.`quantity`) AS `buck_q`,`sd`.`metrc_tag` AS `sort`,sum(`sd`.`quantity`) AS `sort_q`,`proc`.`metrc_tag` AS `processing_tag`,max(`proc`.`quantity`) AS `max_processing_q` from (((`processing`.`trimming_details` `td` left join `processing`.`bucked_details` `bd` on((`td`.`metrc_tag` = `bd`.`metrc_tag`))) left join `processing`.`sorter_details` `sd` on((`td`.`metrc_tag` = `sd`.`metrc_tag`))) left join `processing`.`processing` `proc` on((`td`.`metrc_tag` = `proc`.`metrc_tag`))) group by `td`.`metrc_tag` order by `td`.`metrc_tag` desc

-- View: compliance.source_packages
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `source_packages` AS select `td`.`source_metrc_tag` AS `source`,`td`.`metrc_tag` AS `metrc_tag`,sum(`td`.`quantity`) AS `sum(``td``.quantity)` from `processing`.`processing` `td` group by `td`.`source_metrc_tag`,`td`.`metrc_tag` order by `td`.`metrc_tag` desc

-- View: compliance.trimming_detail_package
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_detail_package` AS select `td`.`trimming_batch_id` AS `trimming_batch_id`,`tb`.`harvesting_id` AS `harvesting_id`,`tb`.`metrc_tag` AS `parent_metrc_tag`,`td`.`metrc_tag` AS `metrc_tag`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S')) then `td`.`quantity` else 0 end)) AS `sml_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `c_flower_output`,sum((case when (`td`.`category_type_id` = 'SK-CTP-56d3') then `td`.`quantity` else 0 end)) AS `trim_output` from (`processing`.`trimming_details` `td` left join `processing`.`trimming_batch` `tb` on((`tb`.`id` = `td`.`trimming_batch_id`))) group by `td`.`trimming_batch_id`,`td`.`metrc_tag`

-- View: cultivation.2023_clone_inventory
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `2023_clone_inventory` AS select `cl`.`metrc_package_tag` AS `metrc_package_tag`,`cl`.`quantity` AS `quantity`,`b`.`name` AS `batch_name`,`b`.`property_id` AS `property_id`,`b`.`date` AS `date`,`b`.`week` AS `week`,`b`.`year` AS `year`,`b`.`year_week` AS `year_week`,`b`.`license_id` AS `license_id`,`b`.`strain_id` AS `strain_id`,`b`.`test_id` AS `test_id`,`l`.`location_string` AS `location_string`,`cl`.`location_name` AS `room`,`cl`.`hardening_date` AS `hardening_date` from ((`clones` `cl` left join `pacstone`.`batch` `b` on((convert(`b`.`id` using utf8mb4) = `cl`.`batch_id`))) left join `pacstone`.`location` `l` on((`cl`.`location_id` = convert(`l`.`id` using utf8mb4)))) where (`b`.`year` = '2023')

-- View: cultivation.active_veg_batch
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `active_veg_batch` AS select `vb`.`metrc_plant_tag` AS `metrc_plant_tag`,`vb`.`plant_count` AS `plant_count`,`b`.`name` AS `batch_name`,`b`.`property_id` AS `property_id`,`b`.`date` AS `date`,`b`.`week` AS `week`,`b`.`year` AS `year`,`b`.`year_week` AS `year_week`,`b`.`license_id` AS `license_id`,`b`.`strain_id` AS `strain_id`,`b`.`test_id` AS `test_id`,`c`.`name` AS `canopy_name`,`vb`.`plant_class` AS `plant_class`,`v`.`location_string` AS `location_string` from (((`veg_batch` `vb` left join `veg` `v` on((`v`.`id` = `vb`.`veg_id`))) left join `pacstone`.`batch` `b` on((convert(`b`.`id` using utf8mb4) = `v`.`batch_id`))) left join `pacstone`.`canopy` `c` on((`b`.`location_id` = convert(`c`.`location_id` using utf8mb4)))) where (`vb`.`status` = 'Active')

-- View: cultivation.active_veg_batch2
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `active_veg_batch2` AS select `vb`.`metrc_plant_tag` AS `metrc_plant_tag`,`vb`.`plant_count` AS `plant_count`,`b`.`name` AS `batch_name`,`b`.`property_id` AS `property_id`,`b`.`date` AS `date`,`b`.`week` AS `week`,`b`.`year` AS `year`,`b`.`year_week` AS `year_week`,`b`.`license_id` AS `license_id`,`b`.`strain_id` AS `strain_id`,`b`.`test_id` AS `test_id`,`c`.`name` AS `canopy_name`,`vb`.`plant_class` AS `plant_class`,`v`.`location_string` AS `location_string` from (((`veg_batch` `vb` left join `veg` `v` on((`v`.`id` = `vb`.`veg_id`))) left join `pacstone`.`batch` `b` on((convert(`b`.`id` using utf8mb4) = `v`.`batch_id`))) left join `pacstone`.`canopy` `c` on((`b`.`location_id` = convert(`c`.`location_id` using utf8mb4)))) where (`vb`.`status` = 'Active')

-- View: cultivation.clone_inventory
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `clone_inventory` AS select `cl`.`metrc_package_tag` AS `metrc_package_tag`,`cl`.`quantity` AS `quantity`,`b`.`name` AS `batch_name`,`b`.`property_id` AS `property_id`,`b`.`date` AS `date`,`b`.`week` AS `week`,`b`.`year` AS `year`,`b`.`year_week` AS `year_week`,`b`.`license_id` AS `license_id`,`b`.`strain_id` AS `strain_id`,`b`.`test_id` AS `test_id`,`l`.`location_string` AS `location_string`,`cl`.`location_name` AS `room`,`cl`.`hardening_date` AS `hardening_date` from ((`clones` `cl` left join `pacstone`.`batch` `b` on((convert(`b`.`id` using utf8mb4) = `cl`.`batch_id`))) left join `pacstone`.`location` `l` on((`cl`.`location_id` = convert(`l`.`id` using utf8mb4)))) where (`cl`.`status` = 'Active')

-- View: cultivation.crop_totals
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `crop_totals` AS with `cte` as (select `harvesting`.`crop_id` AS `crop_id`,sum(if(regexp_like(`harvesting`.`harvest_id`,'-M$'),0,`harvesting`.`plant_count_harvested`)) AS `plant_count_harvested_sum`,sum(if(regexp_like(`harvesting`.`harvest_id`,'-M$'),0,`harvesting`.`plant_count_received`)) AS `plant_count_received_sum`,sum(`harvesting`.`wet`) AS `wet_sum`,sum(`harvesting`.`waste`) AS `waste_sum`,count(0) AS `harvesting_record_count`,sum(if(regexp_like(`harvesting`.`harvest_id`,'-M$'),0,1)) AS `harvesting_full_record_count`,sum(if(regexp_like(`harvesting`.`harvest_id`,'-M$'),1,0)) AS `harvesting_manicure_record_count` from `harvesting` group by `harvesting`.`crop_id`) select `c`.`id` AS `crop_id`,`c`.`label` AS `label`,`c`.`strain` AS `strain`,`c`.`harvest_year` AS `harvest_year`,`c`.`harvest_week` AS `harvest_week`,`c`.`harvest_year_week` AS `harvest_year_week`,`c`.`property` AS `property`,`cte`.`plant_count_harvested_sum` AS `plant_count_harvested_sum`,`cte`.`plant_count_received_sum` AS `plant_count_received_sum`,`cte`.`wet_sum` AS `wet_sum`,`cte`.`waste_sum` AS `waste_sum`,`cte`.`harvesting_record_count` AS `harvesting_record_count`,`cte`.`harvesting_full_record_count` AS `harvesting_full_record_count`,`cte`.`harvesting_manicure_record_count` AS `harvesting_manicure_record_count` from (`crop` `c` join `cte` on((`c`.`id` = `cte`.`crop_id`)))

-- View: cultivation.crop_totals_flower
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `crop_totals_flower` AS select `c`.`id` AS `crop_id`,`c`.`label` AS `label`,`c`.`strain` AS `strain`,`c`.`harvest_year` AS `harvest_year`,`c`.`harvest_week` AS `harvest_week`,`c`.`harvest_year_week` AS `harvest_year_week`,`c`.`property` AS `property`,`h`.`plant_count_harvested_sum` AS `plant_count_harvested_sum`,`h`.`plant_count_received_sum` AS `plant_count_received_sum`,`h`.`wet_sum` AS `wet_sum`,`h`.`waste_sum` AS `waste_sum`,`h`.`harvesting_record_count` AS `harvesting_record_count`,`h`.`harvesting_manicure_record_count` AS `harvesting_manicure_record_count`,`f`.`flowering_plant_count_sum_all` AS `flowering_plant_count_sum_all`,`f`.`flowering_plant_count_sum_w/o_M` AS `flowering_plant_count_sum_w/o_M`,`f`.`flowering_record_count` AS `flowering_record_count`,`f`.`flowering_manicure_record_count` AS `flowering_manicure_record_count` from ((`crop` `c` join `harvesting_by_crop` `h` on((`h`.`crop_id_h` = `c`.`id`))) join `flowering_by_crop` `f` on((`f`.`crop_id_f` = `c`.`id`)))

-- View: cultivation.cultivation_inventory
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `cultivation_inventory` AS select `t`.`metrc_plant_tag` AS `metrc_plant_tag`,`t`.`plant_count` AS `plant_count`,`t`.`batch_name` AS `batch_name`,`t`.`property_id` AS `property_id`,`t`.`date` AS `date`,`t`.`week` AS `week`,`t`.`year` AS `year`,`t`.`year_week` AS `year_week`,`t`.`license_id` AS `license_id`,`t`.`strain_id` AS `strain_id`,`t`.`test_id` AS `test_id`,`t`.`canopy_name` AS `canopy_name`,`t`.`location_string` AS `location_string`,`ps`.`category` AS `category` from ((select `active_veg_batch`.`metrc_plant_tag` AS `metrc_plant_tag`,`active_veg_batch`.`plant_count` AS `plant_count`,`active_veg_batch`.`batch_name` AS `batch_name`,`active_veg_batch`.`property_id` AS `property_id`,`active_veg_batch`.`date` AS `date`,`active_veg_batch`.`week` AS `week`,`active_veg_batch`.`year` AS `year`,`active_veg_batch`.`year_week` AS `year_week`,`active_veg_batch`.`license_id` AS `license_id`,`active_veg_batch`.`strain_id` AS `strain_id`,`active_veg_batch`.`test_id` AS `test_id`,`active_veg_batch`.`canopy_name` AS `canopy_name`,`active_veg_batch`.`location_string` AS `location_string` from `active_veg_batch` union select NULL AS `NULL`,`flower_view`.`plant_count` AS `plant_count`,`flower_view`.`flowering_id` AS `flowering_id`,`flower_view`.`property_id` AS `property_id`,`flower_view`.`date` AS `date`,`flower_view`.`week_num` AS `week_num`,`flower_view`.`year_num` AS `year_num`,concat(`flower_view`.`year_num`,right(concat('0',`flower_view`.`week_num`),2)) AS `CONCAT(year_num,week_num)`,`flower_view`.`license_id` AS `license_id`,`flower_view`.`strain_id` AS `strain_id`,`flower_view`.`test_id` AS `test_id`,`flower_view`.`canopy` AS `canopy_name`,`flower_view`.`location_string` AS `location_string` from `flower_view` union select `clone_inventory`.`metrc_package_tag` AS `metrc_package_tag`,`clone_inventory`.`quantity` AS `quantity`,`clone_inventory`.`batch_name` AS `batch_name`,`clone_inventory`.`property_id` AS `property_id`,`clone_inventory`.`date` AS `date`,`clone_inventory`.`week` AS `week`,`clone_inventory`.`year` AS `year`,`clone_inventory`.`year_week` AS `year_week`,`clone_inventory`.`license_id` AS `license_id`,`clone_inventory`.`strain_id` AS `strain_id`,`clone_inventory`.`test_id` AS `test_id`,NULL AS `NULL`,`clone_inventory`.`location_string` AS `location_string` from `clone_inventory`) `t` left join `pacstone`.`plant_strain` `ps` on((convert(`ps`.`id` using utf8mb4) = `t`.`strain_id`)))

-- View: cultivation.cultivation_overview
CREATE ALGORITHM=UNDEFINED DEFINER=`muro`@`%` SQL SECURITY DEFINER VIEW `cultivation_overview` AS select `clo`.`date` AS `clone_date`,`clo`.`strain_id` AS `clone_strain`,`clo`.`quantity` AS `clone_plants`,`bat`.`name` AS `veg_batch_group_name`,`bat`.`strain_id` AS `batch_group_strain`,`bat`.`week` AS `batch_week`,coalesce(`vgb_sum`.`plant_count`,0) AS `vgb_plant_count_sum`,sum((case when (`vgb`.`action` = 'Transferred') then `vgb`.`plant_count` else 0 end)) AS `transferred_plant_count_sum`,sum((case when (`vgb`.`action` = 'Plant Waste') then `vgb`.`plant_count` else 0 end)) AS `wasted_plant_count_sum`,`ptr`.`strain_id` AS `received_strain`,`pto`.`strain_id` AS `order_strain`,`pto`.`plant_count` AS `order_plants`,`flw`.`flowering_id` AS `flowering_name`,`flw`.`week_num` AS `flowering_week`,`flw`.`strain_id` AS `flowering_strain`,`flw`.`plant_count` AS `flowering_plants`,`hrv`.`harvest_id` AS `harvest_name`,`hrv`.`week_num` AS `harvest_week`,`hrv`.`strain_id` AS `harvest_strain`,`hrv`.`plant_count_harvested` AS `harvested_plants`,`hrv`.`plant_count_received` AS `harvested_plants_received` from (((((((((`harvesting` `hrv` left join `flowering` `flw` on((`hrv`.`flowering_id` = `flw`.`id`))) left join `transfers`.`plant_transfer_order` `pto` on((`flw`.`transfer_order_id` = `pto`.`id`))) left join `transfers`.`plant_tags_received` `ptr` on((`pto`.`id` = `ptr`.`transfer_order_id`))) left join `transfers`.`plant_transfer_trip_detail` `ttd` on((`ptr`.`transfer_trip_detail_id` = `ttd`.`id`))) left join `veg_batch` `vgb` on((`ttd`.`inventory_id` = `vgb`.`id`))) left join `veg` on((`vgb`.`veg_id` = `veg`.`id`))) left join (select `vgb`.`veg_id` AS `veg_id`,sum(`vgb`.`plant_count`) AS `plant_count` from `veg_batch` `vgb` group by `vgb`.`veg_id`) `vgb_sum` on((`veg`.`id` = `vgb_sum`.`veg_id`))) left join `pacstone`.`batch` `bat` on((`veg`.`batch_id` = convert(`bat`.`id` using utf8mb4)))) left join `clones` `clo` on((convert(`bat`.`id` using utf8mb4) = `clo`.`batch_id`))) where (`flw`.`harvest_date` >= (now() - interval 1 year)) group by `clo`.`date`,`clo`.`strain_id`,`clo`.`quantity`,`hrv`.`harvest_id`,`bat`.`name`,`bat`.`strain_id`,`bat`.`week`,`vgb_sum`.`plant_count`,`ptr`.`strain_id`,`pto`.`strain_id`,`pto`.`plant_count`,`flw`.`flowering_id`,`flw`.`week_num`,`flw`.`strain_id`,`flw`.`plant_count`,`hrv`.`week_num`,`hrv`.`strain_id`,`hrv`.`plant_count_harvested`,`hrv`.`plant_count_received` order by `clo`.`date`

-- View: cultivation.flower_historical_records
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `flower_historical_records` AS select `f`.`flowering_id` AS `flowering_id`,`c`.`name` AS `canopy`,`c`.`location_string` AS `location_string`,`f`.`property_id` AS `property_id`,`f`.`test_id` AS `test_id`,`f`.`date` AS `date`,`f`.`week_num` AS `week_num`,`f`.`year_num` AS `year_num`,`f`.`license_id` AS `license_id`,`f`.`strain_id` AS `strain_id`,`f`.`location_3` AS `location_3`,`f`.`location_5` AS `location_5`,`f`.`plant_count` AS `plant_count`,`f`.`harvest_date` AS `harvest_date`,`f`.`harvest_id` AS `harvest_id`,`f`.`status` AS `status` from (`flowering` `f` left join `pacstone`.`canopy` `c` on((`f`.`canopy_id` = convert(`c`.`id` using utf8mb4)))) where (year(`f`.`date`) > 2020)

-- View: cultivation.flower_inventory
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `flower_inventory` AS select `f`.`flowering_id` AS `flowering_id`,`f`.`canopy_id` AS `canopy_id`,`f`.`property_id` AS `property_id`,`f`.`test_id` AS `test_id`,`f`.`date` AS `Planted Date`,`f`.`week_num` AS `week_num`,`f`.`year_num` AS `year_num`,`f`.`license_id` AS `license_id`,`f`.`strain_id` AS `strain_id`,`ps`.`strain_code` AS `Strain Code`,`ps`.`name` AS `Strain Name`,`f`.`location_3` AS `location_3`,`f`.`location_5` AS `location_5`,`f`.`plant_count` AS `plant_count`,`f`.`harvest_date` AS `harvest_date`,week(`f`.`harvest_date`,0) AS `harvest_week`,`f`.`harvest_id` AS `harvest_id`,`f`.`status` AS `status` from (`flowering` `f` left join `pacstone`.`plant_strain` `ps` on((`f`.`strain_id` = `ps`.`id`))) where ((`f`.`status` = 'Active') and ((`f`.`harvest_date` > now()) or (`f`.`harvest_date` is null))) order by `f`.`date` desc,`ps`.`strain_code`

-- View: cultivation.flower_schedule
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `flower_schedule` AS select `f`.`flowering_id` AS `flowering_id`,`f`.`canopy_id` AS `canopy_id`,`f`.`property_id` AS `property_id`,`f`.`test_id` AS `test_id`,`f`.`date` AS `date`,`f`.`week_num` AS `week_num`,`f`.`year_num` AS `year_num`,`f`.`license_id` AS `license_id`,`f`.`strain_id` AS `strain_id`,`f`.`location_3` AS `location_3`,`f`.`location_5` AS `location_5`,`f`.`plant_count` AS `plant_count`,`f`.`harvest_date` AS `harvest_date`,week(`f`.`harvest_date`,0) AS `harvest_week`,`f`.`harvest_id` AS `harvest_id`,`f`.`status` AS `status` from `flowering` `f` where (((year(`f`.`date`) > 2021) and (`f`.`harvest_date` > now())) or (`f`.`harvest_date` is null))

-- View: cultivation.flower_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `flower_view` AS select `f`.`flowering_id` AS `flowering_id`,`c`.`name` AS `canopy`,`c`.`location_string` AS `location_string`,`f`.`property_id` AS `property_id`,`f`.`test_id` AS `test_id`,`f`.`date` AS `date`,`f`.`week_num` AS `week_num`,`f`.`year_num` AS `year_num`,`f`.`license_id` AS `license_id`,`f`.`strain_id` AS `strain_id`,`f`.`location_3` AS `location_3`,`f`.`location_5` AS `location_5`,`f`.`plant_count` AS `plant_count`,`f`.`harvest_date` AS `harvest_date`,`f`.`harvest_id` AS `harvest_id`,`f`.`status` AS `status` from (`flowering` `f` left join `pacstone`.`canopy` `c` on((`f`.`canopy_id` = convert(`c`.`id` using utf8mb4)))) where ((year(`f`.`date`) > 2019) and (`f`.`status` = 'Active'))

-- View: cultivation.flowering_base
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `flowering_base` AS select `f`.`id` AS `id`,`f`.`flowering_id` AS `flowering_id`,`f`.`plant_count` AS `plant_count`,`f`.`action` AS `action` from `flowering` `f` where ((`f`.`action` <> 'Deleted') and (`f`.`action` <> 'Duplicated'))

-- View: cultivation.flowering_by_crop
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `flowering_by_crop` AS select `flowering`.`crop_id` AS `crop_id_f`,sum(`flowering`.`plant_count`) AS `flowering_plant_count_sum_all`,sum(if(regexp_like(`flowering`.`harvest_id`,'-M$'),0,`flowering`.`plant_count`)) AS `flowering_plant_count_sum_w/o_M`,count(0) AS `flowering_record_count`,sum(if(regexp_like(`flowering`.`harvest_id`,'-M$'),1,0)) AS `flowering_manicure_record_count` from `flowering` where (`flowering`.`action` <> 'Deleted') group by `flowering`.`crop_id`

-- View: cultivation.harvest_base
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `harvest_base` AS select `h`.`id` AS `id`,`h`.`harvest_id` AS `harvest_id`,concat(`h`.`property_id`,'-',right(concat('0',`h`.`week_num`),2),'-',`h`.`year_num`,'-',`h`.`strain_id`,'-',right(`h`.`license_id`,5)) AS `harvest_base_name`,`h`.`property_id` AS `property_id`,`h`.`date` AS `date`,`h`.`week_num` AS `week_num`,`h`.`year_num` AS `year_num`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `year_week`,`h`.`license_id` AS `license_id`,`h`.`strain_id` AS `strain_id`,`h`.`test_id` AS `test_id`,`h`.`plant_count_harvested` AS `plant_count_harvested`,`h`.`wet` AS `wet_weight`,`h`.`waste` AS `wet_waste_weight`,`h`.`harvest_type` AS `harvest_type`,`h`.`processing_metrc_id` AS `processing_metrc_id`,`h`.`status` AS `status` from `harvesting` `h` where ((`h`.`action` <> 'Deleted') and (`h`.`action` <> 'Duplicated')) order by `h`.`year_num` desc,`h`.`week_num` desc,`h`.`strain_id` desc,`h`.`property_id` desc

-- View: cultivation.harvest_prod_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `harvest_prod_view` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`id` AS `harvesting_id`,`h`.`processing_metrc_id` AS `metrc_tag`,'Harvest' AS `process`,`h`.`id` AS `batch_id`,`h`.`date` AS `date`,'Finished' AS `batch_status`,`f`.`flowering_id` AS `flowering_id_name`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,`h`.`license_id` AS `license_id`,`h`.`strain_id` AS `strain_id`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,'Fresh Cannabis Plant' AS `category`,if(((`h`.`harvest_type` = 'Manicure') or (`h`.`harvest_type` = 'Fresh Frozen')),'Buds','Plants') AS `category_type`,NULL AS `product_size`,NULL AS `product_grade`,if(((`h`.`harvest_type` = 'Manicure') or (`h`.`harvest_type` = 'Fresh Frozen')),NULL,sum(`f`.`plant_count`)) AS `flower_plant_count`,if(((`h`.`harvest_type` = 'Manicure') or (`h`.`harvest_type` = 'Fresh Frozen')),NULL,sum(`h`.`plant_count_harvested`)) AS `harvest_plant_count`,NULL AS `input_quantity`,sum(`h`.`wet`) AS `output_quantity` from ((`harvesting` `h` left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) left join `flowering` `f` on((`f`.`id` = `h`.`flowering_id`))) where (`h`.`wet` > 0) group by `h`.`id`,`h`.`processing_metrc_id`,`h`.`test_id`,`h`.`harvest_id`,`h`.`date`,`h`.`property_id`,`h`.`strain_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`h`.`id`,`h`.`flowering_id`,`f`.`flowering_id` order by `h`.`date`

-- View: cultivation.harvest_schedule
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `harvest_schedule` AS select `f`.`flowering_id` AS `flowering_id`,`f`.`canopy_id` AS `canopy_id`,`f`.`property_id` AS `property_id`,`f`.`test_id` AS `test_id`,`f`.`date` AS `Planted Date`,`f`.`week_num` AS `week_num`,`f`.`year_num` AS `year_num`,`f`.`license_id` AS `license_id`,`f`.`strain_id` AS `strain_id`,`ps`.`strain_code` AS `Strain Code`,`ps`.`name` AS `Strain Name`,`f`.`location_3` AS `location_3`,`f`.`location_5` AS `location_5`,`f`.`plant_count` AS `plant_count`,`f`.`harvest_date` AS `harvest_date`,week(`f`.`harvest_date`,0) AS `harvest_week`,`f`.`harvest_id` AS `harvest_id`,`f`.`status` AS `status` from (`flowering` `f` left join `pacstone`.`plant_strain` `ps` on((`f`.`strain_id` = `ps`.`id`))) where ((`f`.`status` = 'Active') and (`f`.`harvest_date` > now())) order by `f`.`date` desc,`ps`.`strain_code`

-- View: cultivation.harvest_view
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `harvest_view` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`property_id` AS `property_id`,`h`.`test_id` AS `test_id`,`h`.`date` AS `date`,`h`.`week_num` AS `week_num`,`h`.`year_num` AS `year_num`,`h`.`license_id` AS `license_id`,`h`.`strain_id` AS `strain_id`,`h`.`plant_count_harvested` AS `plant_count_harvested`,`h`.`plant_count_received` AS `plant_count_received`,`h`.`wet` AS `wet`,`h`.`waste` AS `waste`,`h`.`harvest_metrc_id` AS `harvest_metrc_id`,`h`.`processing_metrc_id` AS `processing_metrc_id`,`h`.`metrc_harvest_name` AS `metrc_name`,`f`.`plant_count` AS `planted_count` from (`harvesting` `h` left join `flowering` `f` on((`h`.`flowering_id` = `f`.`id`))) where (year(`h`.`date`) > 2019) order by `h`.`date` desc

-- View: cultivation.harvest_view_detail
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `harvest_view_detail` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`property_id` AS `property_id`,`h`.`test_id` AS `test_id`,`h`.`date` AS `date`,`h`.`week_num` AS `week_num`,`h`.`year_num` AS `year_num`,`h`.`license_id` AS `license_id`,`h`.`strain_id` AS `strain_id`,`h`.`plant_count_harvested` AS `plant_count_harvested`,`h`.`plant_count_received` AS `plant_count_received`,`h`.`wet` AS `wet`,`h`.`waste` AS `waste`,`h`.`harvest_metrc_id` AS `harvest_metrc_id`,`h`.`processing_metrc_id` AS `processing_metrc_id`,`h`.`metrc_harvest_name` AS `metrc_name`,`f`.`plant_count` AS `planted_count`,`f`.`date` AS `date_planted`,`f`.`harvest_date` AS `date_harvested`,(to_days(`f`.`harvest_date`) - to_days(`f`.`date`)) AS `flowering_days` from (`harvesting` `h` left join `flowering` `f` on((`h`.`flowering_id` = `f`.`id`))) where (year(`h`.`date`) > 2019)

-- View: cultivation.harvest_view_year
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `harvest_view_year` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`property_id` AS `property_id`,`h`.`test_id` AS `test_id`,`h`.`date` AS `date`,`h`.`week_num` AS `week_num`,`h`.`year_num` AS `year_num`,`h`.`license_id` AS `license_id`,`h`.`strain_id` AS `strain_id`,`h`.`plant_count_harvested` AS `plant_count_harvested`,`h`.`plant_count_received` AS `plant_count_received`,`h`.`wet` AS `wet`,`h`.`waste` AS `waste`,`h`.`harvest_metrc_id` AS `harvest_metrc_id`,`h`.`processing_metrc_id` AS `processing_metrc_id`,`h`.`metrc_harvest_name` AS `metrc_name`,`f`.`plant_count` AS `planted_count` from (`harvesting` `h` left join `flowering` `f` on((`h`.`flowering_id` = `f`.`id`))) where (`h`.`date` >= (curdate() - interval 365 day)) order by `h`.`date` desc

-- View: cultivation.harvest_weight_csv
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `harvest_weight_csv` AS select max(`f`.`transfer_order_id`) AS `transfer_order_id`,max(`f`.`id`) AS `flowering_id`,max(`h`.`id`) AS `harvesting_id`,max(`f`.`flowering_id`) AS `flowering_name`,max(`h`.`harvest_id`) AS `harvest_name`,nullif((sum(`h`.`wet`) / sum(`h`.`plant_count_harvested`)),0) AS `ave_by_plant`,`p`.`metrc_id` AS `metrc_transfer_tag`,`m`.`metrc_id` AS `metrc_plant_tag`,(case when (`subquery`.`total_wet` > 0) then round(nullif((((rand() * ((1.082 * `subquery`.`total_wet`) - (0.98 * `subquery`.`total_wet`))) + (0.98 * `subquery`.`total_wet`)) / sum(`h`.`plant_count_harvested`)),0),3) else 1.0 end) AS `weight_by_plant`,'Pounds' AS `uom`,'Harvest Storage' AS `location`,max(`h`.`metrc_harvest_name`) AS `metrc_harvest_name`,NULL AS `blank`,max(`h`.`date`) AS `harvest_date` from ((((`pacstone`.`metrc_tag_list` `m` left join `flowering` `f` on((`f`.`transfer_order_id` = `m`.`plant_transfer_order_id`))) left join `harvesting` `h` on((`f`.`id` = `h`.`flowering_id`))) left join `harvest_metrc_packages` `p` on((`h`.`id` = `p`.`harvesting_id`))) left join (select `h`.`metrc_harvest_name` AS `metrc_harvest_name`,sum(`h`.`wet`) AS `total_wet`,sum(`h`.`plant_count_harvested`) AS `total_plants` from `harvesting` `h` where (`h`.`date` >= (curdate() - interval 6 day)) group by `h`.`metrc_harvest_name`) `subquery` on((`h`.`metrc_harvest_name` = `subquery`.`metrc_harvest_name`))) where ((`m`.`table_from` = 'plant_tags_received') and (`m`.`status` is null) and (`m`.`action` is null) and (`h`.`date` >= (curdate() - interval 6 day)) and (`h`.`wet` > 0) and (`h`.`harvest_type` <> 'Manicure')) group by `m`.`metrc_id`,`f`.`transfer_order_id`,`h`.`flowering_id`,`h`.`date`,`subquery`.`total_wet`,`h`.`metrc_harvest_name`,`h`.`wet`,`h`.`plant_count_harvested`,`p`.`metrc_id`,`h`.`id` order by `h`.`date` desc,`m`.`metrc_id`

-- View: cultivation.harvest_weight_ref
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `harvest_weight_ref` AS select max(`rec`.`transfer_order_id`) AS `transfer_order_id`,max(`f`.`id`) AS `flowering_id`,max(`h`.`id`) AS `harvesting_id`,max(`f`.`flowering_id`) AS `flowering_name`,max(`h`.`harvest_id`) AS `harvest_name`,nullif((sum(`h`.`wet`) / sum(`h`.`plant_count_harvested`)),0) AS `ave_by_plant`,`p`.`metrc_id` AS `harvest_metrc_tag`,`m`.`metrc_id` AS `metrc_id`,(case when (`subquery`.`total_wet` > 0) then round(nullif((((rand() * ((1.082 * `subquery`.`total_wet`) - (0.98 * `subquery`.`total_wet`))) + (0.98 * `subquery`.`total_wet`)) / sum(`h`.`plant_count_harvested`)),0),3) else 1.0 end) AS `weight_by_plant`,'Pounds' AS `uom`,'Harvest Storage' AS `location`,max(`h`.`metrc_harvest_name`) AS `metrc_harvest_name`,NULL AS `blank`,max(`h`.`date`) AS `harvest_date` from (((((`pacstone`.`metrc_tag_list` `m` left join `transfers`.`plant_tags_received` `rec` on((`m`.`source_id` = `rec`.`id`))) left join `flowering` `f` on((`f`.`transfer_order_id` = `rec`.`transfer_order_id`))) left join `harvesting` `h` on((`f`.`id` = `h`.`flowering_id`))) left join `harvest_metrc_packages` `p` on((`h`.`id` = `p`.`harvesting_id`))) left join (select `h`.`metrc_harvest_name` AS `metrc_harvest_name`,sum(`h`.`wet`) AS `total_wet`,sum(`h`.`plant_count_harvested`) AS `total_plants` from `harvesting` `h` where (`h`.`date` >= (curdate() - interval 10 day)) group by `h`.`metrc_harvest_name`) `subquery` on((`h`.`metrc_harvest_name` = `subquery`.`metrc_harvest_name`))) where ((`m`.`table_from` = 'plant_tags_received') and (`m`.`status` is null) and (`h`.`date` >= (curdate() - interval 10 day)) and (`h`.`harvest_type` <> 'Manicure')) group by `m`.`metrc_id`,`rec`.`id`,`f`.`transfer_order_id`,`h`.`flowering_id`,`h`.`date`,`subquery`.`total_wet`,`h`.`metrc_harvest_name`,`h`.`wet`,`h`.`plant_count_harvested`,`p`.`metrc_id`,`h`.`id` order by `h`.`date` desc,`m`.`metrc_id`

-- View: cultivation.harvesting_by_crop
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `harvesting_by_crop` AS select `harvesting`.`crop_id` AS `crop_id_h`,sum(if(regexp_like(`harvesting`.`harvest_id`,'-M$'),0,`harvesting`.`plant_count_harvested`)) AS `plant_count_harvested_sum`,sum(if(regexp_like(`harvesting`.`harvest_id`,'-M$'),0,`harvesting`.`plant_count_received`)) AS `plant_count_received_sum`,sum(`harvesting`.`wet`) AS `wet_sum`,sum(`harvesting`.`waste`) AS `waste_sum`,count(0) AS `harvesting_record_count`,sum(if(regexp_like(`harvesting`.`harvest_id`,'-M$'),1,0)) AS `harvesting_manicure_record_count` from `harvesting` where (`harvesting`.`action` <> 'Deleted') group by `harvesting`.`crop_id`

-- View: cultivation.harvesting_ref
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `harvesting_ref` AS select `h`.`id` AS `id`,`h`.`crop_id` AS `crop_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`metrc_harvest_name` AS `metrc_harvest_name`,`c`.`label` AS `crop_name`,`h`.`property_id` AS `property_id`,`h`.`date` AS `date`,`h`.`week_num` AS `week_num`,`h`.`year_num` AS `year_num`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `year_week`,`h`.`license_id` AS `license_id`,`h`.`strain_id` AS `strain_id`,`h`.`test_id` AS `test_id`,`h`.`harvest_metrc_id` AS `harvest_metrc_id`,`h`.`processing_metrc_id` AS `processing_metrc_id`,`h`.`plant_count_harvested` AS `plant_count_harvested`,`h`.`wet` AS `wet`,`h`.`waste` AS `waste`,`h`.`plant_count_received` AS `plant_count_received`,`h`.`status` AS `status`,`h`.`harvest_type` AS `harvest_type` from (`harvesting` `h` left join `crop` `c` on((`c`.`id` = `h`.`crop_id`))) where (((`h`.`action` <> 'Deleted') and (`h`.`action` <> 'Duplicated')) or (`h`.`action` is null))

-- View: cultivation.last_eight_week_plant_count
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `last_eight_week_plant_count` AS select `schedule_view`.`year_num` AS `year_num`,`schedule_view`.`week_num` AS `week_num`,`schedule_view`.`strain_id` AS `strain_id`,max(`schedule_view`.`transfer_type`) AS `transfer_type`,max(`schedule_view`.`year_week`) AS `year_week`,sum(`schedule_view`.`plant_count`) AS `total_plant_count`,max(`schedule_view`.`strain_category`) AS `strain_category` from `schedule_view` where ((`schedule_view`.`transfer_type` = 'Veg to Flower') and (((`schedule_view`.`year_num` = year((now() - interval 1 week))) and (`schedule_view`.`week_num` between week((now() - interval 8 week),3) and (week(now(),3) - 1))) or ((`schedule_view`.`year_num` = (year((now() - interval 1 week)) - 1)) and (`schedule_view`.`week_num` > (52 - (8 - week(now(),3)))) and (`schedule_view`.`week_num` <= 52)))) group by `schedule_view`.`year_num`,`schedule_view`.`week_num`,`schedule_view`.`strain_id` order by `year_week` desc

-- View: cultivation.last_week_plant_count
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `last_week_plant_count` AS select `schedule_view`.`strain_id` AS `strain_id`,max(`schedule_view`.`transfer_type`) AS `transfer_type`,max(`schedule_view`.`year_num`) AS `year_num`,max(`schedule_view`.`week_num`) AS `week_num`,max(`schedule_view`.`year_week`) AS `year_week`,sum(`schedule_view`.`plant_count`) AS `total_plant_count`,max(`schedule_view`.`strain_category`) AS `strain_category` from `schedule_view` where ((`schedule_view`.`transfer_type` = 'Veg to Flower') and (`schedule_view`.`week_num` = week((now() - interval 1 week),3)) and (`schedule_view`.`year_num` = year((now() - interval 1 week)))) group by `schedule_view`.`strain_id`

-- View: cultivation.metrc_flowering_tags
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `metrc_flowering_tags` AS select `m`.`id` AS `id`,`m`.`source_id` AS `source_id`,`m`.`metrc_id` AS `metrc_id`,`m`.`created_on` AS `created_on` from `pacstone`.`metrc_tag_list` `m` where ((`m`.`table_from` = 'plant_tags_received') and (cast(`m`.`created_on` as date) >= (curdate() - 5)))

-- View: cultivation.processing_report_test_view
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `processing_report_test_view` AS select `h`.`harvest_id` AS `harvest_id`,`h`.`processing_metrc_id` AS `processing_metrc_id`,`b`.`plant_count` AS `plant_count`,`b`.`wet_weight` AS `wet_weight` from (`harvesting` `h` join (select sum(`hh`.`plant_count_harvested`) AS `plant_count`,sum(`hh`.`wet`) AS `wet_weight`,`hh`.`harvest_id` AS `bhid`,`hh`.`processing_metrc_id` AS `bpmid` from `harvesting` `hh` group by `hh`.`harvest_id`,`hh`.`processing_metrc_id`) `b` on(((`b`.`bhid` = `h`.`harvest_id`) and (`b`.`bpmid` = `h`.`processing_metrc_id`)))) group by `h`.`harvest_id`,`h`.`processing_metrc_id`

-- View: cultivation.schedule_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `schedule_view` AS select `ps`.`id` AS `schedule_id`,`psd`.`id` AS `detail_id`,`ps`.`transfer_type` AS `transfer_type`,`ps`.`year_num` AS `year_num`,`ps`.`week_num` AS `week_num`,concat(`ps`.`year_num`,right(concat('0',`ps`.`week_num`),2)) AS `year_week`,`c`.`name` AS `name`,`c`.`capacity` AS `capacity`,`c`.`location_string` AS `location_string`,`c`.`property_id` AS `property_id`,`c`.`cannabis_license_id` AS `cannabis_license_id`,`psd`.`strain_id` AS `strain_id`,`psd`.`date` AS `date`,`psd`.`plant_count` AS `plant_count`,`psd`.`priority` AS `priority`,`psd`.`action` AS `status`,`s`.`category` AS `strain_category` from (((`plant_schedule` `ps` left join `plant_schedule_detail` `psd` on((`ps`.`id` = `psd`.`plant_schedule_id`))) left join `pacstone`.`canopy` `c` on((`psd`.`canopy_id` = convert(`c`.`id` using utf8mb4)))) left join `pacstone`.`plant_strain` `s` on((`psd`.`strain_id` = convert(`s`.`id` using utf8mb4)))) where (`psd`.`action` <> 'Deleted')

-- View: cultivation.veg_active_inventory
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `veg_active_inventory` AS select `b`.`name` AS `name`,`b`.`date` AS `date`,`b`.`property_id` AS `property_id`,`b`.`week` AS `week`,`b`.`year` AS `year`,`b`.`year_week` AS `year_week`,`b`.`strain_id` AS `strain_id`,`b`.`license_id` AS `license_id`,`b`.`test_id` AS `test_id`,`b`.`location_string` AS `location_string`,`v`.`plant_count` AS `plant_count`,`v`.`flat_plant_count` AS `plants_per_batch`,`v`.`flats` AS `total_batch_count`,`v`.`action` AS `action` from (`veg` `v` left join `pacstone`.`batch` `b` on((`v`.`batch_id` = convert(`b`.`id` using utf8mb4)))) where (`v`.`status` = 'Active')

-- View: cultivation.veg_batch_class
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `veg_batch_class` AS select `vb`.`id` AS `id`,`vb`.`veg_id` AS `veg_id`,`vb`.`metrc_plant_tag` AS `metrc_plant_tag`,`vb`.`plant_count` AS `plant_count`,`vb`.`note` AS `veg_batch_note`,`vb`.`action` AS `veg_batch_action`,`vb`.`created_on` AS `created_on`,`vb`.`plant_class` AS `plant_class`,`v`.`batch_id` AS `batch_id`,`b`.`name` AS `veg_batch_name`,`b`.`property_id` AS `property_id`,`b`.`week` AS `week`,`b`.`year` AS `year`,`b`.`strain_id` AS `strain_id`,`b`.`license_id` AS `license_id`,`b`.`location_id` AS `location_id`,`b`.`location_string` AS `location_string` from ((`veg_batch` `vb` left join `veg` `v` on((`v`.`id` = `vb`.`veg_id`))) left join `pacstone`.`batch` `b` on((`v`.`batch_id` = `b`.`id`))) where (`vb`.`plant_class` is not null)

-- View: cultivation.veg_dead_plants
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `veg_dead_plants` AS select `b`.`name` AS `veg_name`,`b`.`date` AS `veg_date`,`b`.`property_id` AS `property_id`,`b`.`week` AS `week`,`b`.`year` AS `year`,`b`.`year_week` AS `year_week`,`b`.`strain_id` AS `strain_id`,`b`.`license_id` AS `license_id`,`b`.`location_string` AS `location_string`,`vb`.`metrc_plant_tag` AS `metrc_plant_tag`,`vb`.`plant_count` AS `plant_count`,`vb`.`item` AS `item`,`vb`.`modified_type` AS `reason`,cast(`vb`.`modified_on` as date) AS `reported_date`,week(`vb`.`modified_on`,0) AS `reported_week` from ((`veg_batch` `vb` left join `veg` `v` on((`v`.`id` = `vb`.`veg_id`))) left join `pacstone`.`batch` `b` on((`v`.`batch_id` = convert(`b`.`id` using utf8mb4)))) where ((`vb`.`action` = 'Plant Waste') and (`vb`.`metrc_plant_tag` is not null) and (`vb`.`modified_on` > (curdate() - interval 22 day)))

-- View: cultivation.veg_historical_records
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `veg_historical_records` AS select `vb`.`metrc_plant_tag` AS `metrc_plant_tag`,`vb`.`plant_count` AS `plant_count`,`b`.`name` AS `batch_name`,`b`.`property_id` AS `property_id`,`b`.`date` AS `date`,`b`.`week` AS `week`,`b`.`year` AS `year`,`b`.`year_week` AS `year_week`,`b`.`license_id` AS `license_id`,`b`.`strain_id` AS `strain_id`,`b`.`test_id` AS `test_id`,`c`.`name` AS `canopy_name`,`vb`.`plant_class` AS `plant_class`,`v`.`location_string` AS `location_string` from (((`veg_batch` `vb` left join `veg` `v` on((`v`.`id` = `vb`.`veg_id`))) left join `pacstone`.`batch` `b` on((convert(`b`.`id` using utf8mb4) = `v`.`batch_id`))) left join `pacstone`.`canopy` `c` on((`b`.`location_id` = convert(`c`.`location_id` using utf8mb4))))

-- View: cultivation.waste_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `waste_view` AS select `w`.`id` AS `id`,`w`.`source_id` AS `source_id`,`w`.`date` AS `date`,`w`.`metrc_id` AS `metrc_id`,`w`.`stage_id` AS `stage_id`,`w`.`source_metrc_id` AS `source_metrc_id`,`w`.`metrc_item_id` AS `metrc_item_id`,`w`.`metrc_item_name` AS `metrc_item_name`,`w`.`waste_method_name` AS `waste_method_name`,`w`.`mixed_material` AS `mixed_material`,`w`.`uom` AS `uom`,`w`.`quantity` AS `quantity`,`w`.`reason_name` AS `reason_name`,`w`.`note` AS `note`,`w`.`status` AS `status`,`w`.`action` AS `action`,`w`.`user` AS `user`,`w`.`created_by` AS `created_by`,`w`.`created_on` AS `created_on`,`w`.`modified_by` AS `modified_by`,`w`.`modified_on` AS `modified_on`,`w`.`flag` AS `flag`,`w`.`trigger` AS `trigger`,`w`.`reason_detail` AS `reason_detail`,`w`.`clone_id` AS `clone_id`,`w`.`veg_id` AS `veg_id`,`w`.`flowering_id` AS `flowering_id`,`w`.`harvest_id` AS `harvest_id`,`w`.`batch_id` AS `batch_id`,`s`.`id` AS `strain_id`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name` from (`cultivation_waste` `w` left join `pacstone`.`plant_strain` `s` on((`w`.`metrc_item_name` like concat('%',`s`.`name`,'%')))) where (`w`.`quantity` > 0) order by `w`.`date` desc

-- View: datastudio.batch_latest_quarter
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY INVOKER VIEW `batch_latest_quarter` AS with `last_3_months` as (select `processing_finished_weeks`.`year_week` AS `year_week` from `processing_finished_weeks` limit 12) select `batch_stats_view`.`flowering_id` AS `flowering_id`,`batch_stats_view`.`flowering_app_id` AS `flowering_app_id`,`batch_stats_view`.`property_id` AS `property_id`,`batch_stats_view`.`test_id` AS `test_id`,`batch_stats_view`.`flowering_date` AS `flowering_date`,`batch_stats_view`.`flowering_week` AS `flowering_week`,`batch_stats_view`.`flowering_year_week` AS `flowering_year_week`,`batch_stats_view`.`flowering_year` AS `flowering_year`,`batch_stats_view`.`license_id` AS `license_id`,`batch_stats_view`.`strain_id` AS `strain_id`,`batch_stats_view`.`house` AS `house`,`batch_stats_view`.`valve` AS `valve`,`batch_stats_view`.`flowering_plant_count` AS `flowering_plant_count`,`batch_stats_view`.`harvest_id` AS `harvest_id`,`batch_stats_view`.`harvest_date` AS `harvest_date`,`batch_stats_view`.`harvest_week` AS `harvest_week`,`batch_stats_view`.`harvest_year` AS `harvest_year`,`batch_stats_view`.`harvest_year_week` AS `harvest_year_week`,`batch_stats_view`.`harvest_metrc_id` AS `harvest_metrc_id`,`batch_stats_view`.`processing_metrc_id` AS `processing_metrc_id`,`batch_stats_view`.`metrc_name` AS `metrc_name`,`batch_stats_view`.`plant_count_harvested` AS `plant_count_harvested`,`batch_stats_view`.`plant_count_received` AS `plant_count_received`,`batch_stats_view`.`wet_weight` AS `wet_weight`,`batch_stats_view`.`waste_wet_weight` AS `waste_wet_weight`,`batch_stats_view`.`total_wet_weight` AS `total_wet_weight`,`batch_stats_view`.`estimated_flowering_m2` AS `estimated_flowering_m2`,`batch_stats_view`.`flowering_plants_m2` AS `flowering_plants_m2`,`batch_stats_view`.`harvest_plants_m2` AS `harvest_plants_m2`,`batch_stats_view`.`wet_weight_m2` AS `wet_weight_m2`,`batch_stats_view`.`waste_wet_weight_m2` AS `waste_wet_weight_m2`,`batch_stats_view`.`dry_weight` AS `dry_weight`,`batch_stats_view`.`drying_moisture_loss` AS `drying_moisture_loss`,`batch_stats_view`.`bucked_weight` AS `bucked_weight`,`batch_stats_view`.`bucking_waste` AS `bucking_waste`,`batch_stats_view`.`tzero_a` AS `tzero_a`,`batch_stats_view`.`tzero_b` AS `tzero_b`,`batch_stats_view`.`retrim_in` AS `retrim_in`,`batch_stats_view`.`tzero_a_b_retrim` AS `tzero_a_b_retrim`,`batch_stats_view`.`tzero_c` AS `tzero_c`,`batch_stats_view`.`tzero_waste` AS `tzero_waste`,`batch_stats_view`.`tzero_trim` AS `tzero_trim`,`batch_stats_view`.`tzero_oz_plant` AS `tzero_oz_plant`,`batch_stats_view`.`tzero_oz_m2` AS `tzero_oz_m2`,`batch_stats_view`.`tzero_shrink` AS `tzero_shrink`,`batch_stats_view`.`retrim_a` AS `retrim_a`,`batch_stats_view`.`retrim_b` AS `retrim_b`,`batch_stats_view`.`retrim_c` AS `retrim_c`,`batch_stats_view`.`b_revision_in` AS `b_revision_in`,`batch_stats_view`.`c_revision_in` AS `c_revision_in`,`batch_stats_view`.`b_revision_a` AS `b_revision_a`,`batch_stats_view`.`b_revision_b` AS `b_revision_b`,`batch_stats_view`.`b_revision_c` AS `b_revision_c`,`batch_stats_view`.`c_revision_a` AS `c_revision_a`,`batch_stats_view`.`c_revision_b` AS `c_revision_b`,`batch_stats_view`.`c_revision_c` AS `c_revision_c`,`batch_stats_view`.`processing_grade_a` AS `processing_grade_a`,`batch_stats_view`.`processing_grade_b` AS `processing_grade_b`,`batch_stats_view`.`processing_grade_c` AS `processing_grade_c`,`batch_stats_view`.`processing_shake` AS `processing_shake`,`batch_stats_view`.`processing_waste` AS `processing_waste`,`batch_stats_view`.`processing_oz_plant` AS `processing_oz_plant`,`batch_stats_view`.`processing_oz_m2` AS `processing_oz_m2`,`batch_stats_view`.`processing_shrink` AS `processing_shrink`,`batch_stats_view`.`tzero_flower_status` AS `tzero_flower_status` from `batch_stats_view` where (concat(`batch_stats_view`.`harvest_year`,'-',`batch_stats_view`.`harvest_week`) in (select `last_3_months`.`year_week` from `last_3_months`) and (`batch_stats_view`.`tzero_flower_status` = 'Finished'))

-- View: datastudio.batch_stats_view
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `batch_stats_view` AS select `c`.`flowering_id` AS `flowering_id`,`c`.`flowering_app_id` AS `flowering_app_id`,`c`.`property_id` AS `property_id`,`c`.`test_id` AS `test_id`,`c`.`flowering_date` AS `flowering_date`,`c`.`flowering_week` AS `flowering_week`,`c`.`flowering_year` AS `flowering_year`,`c`.`year_week` AS `flowering_year_week`,`c`.`license_id` AS `license_id`,`c`.`strain_id` AS `strain_id`,`c`.`house` AS `house`,`c`.`valve` AS `valve`,`c`.`flowering_plant_count` AS `flowering_plant_count`,`c`.`harvest_id` AS `harvest_id`,`c`.`harvest_date` AS `harvest_date`,`c`.`harvest_week` AS `harvest_week`,`c`.`harvest_year` AS `harvest_year`,`c`.`harvest_year_week` AS `harvest_year_week`,`c`.`harvest_metrc_id` AS `harvest_metrc_id`,`c`.`processing_metrc_id` AS `processing_metrc_id`,`c`.`metrc_name` AS `metrc_name`,`c`.`plant_count_harvested` AS `plant_count_harvested`,`c`.`plant_count_received` AS `plant_count_received`,`c`.`wet_weight` AS `wet_weight`,`c`.`waste_weight` AS `waste_wet_weight`,(`c`.`wet_weight` + `c`.`waste_weight`) AS `total_wet_weight`,`c`.`estimated_flowering_m2` AS `estimated_flowering_m2`,(`c`.`flowering_plant_count` / `c`.`estimated_flowering_m2`) AS `flowering_plants_m2`,(`c`.`plant_count_harvested` / `c`.`estimated_flowering_m2`) AS `harvest_plants_m2`,(`c`.`wet_weight` / `c`.`estimated_flowering_m2`) AS `wet_weight_m2`,(`c`.`waste_weight` / `c`.`estimated_flowering_m2`) AS `waste_wet_weight_m2`,`p`.`dry_weight` AS `dry_weight`,(`c`.`wet_weight` - `p`.`dry_weight`) AS `drying_moisture_loss`,`p`.`bucked_weight` AS `bucked_weight`,(`p`.`dry_weight` - `p`.`bucked_weight`) AS `bucking_waste`,`p`.`tzero_a` AS `tzero_a`,`p`.`tzero_b` AS `tzero_b`,`p`.`retrim_in` AS `retrim_in`,`p`.`tzero_a_b_retrim` AS `tzero_a_b_retrim`,`p`.`tzero_c` AS `tzero_c`,`p`.`tzero_waste` AS `tzero_waste`,`p`.`tzero_trim` AS `tzero_trim`,`p`.`tzero_oz_plant` AS `tzero_oz_plant`,((`p`.`tzero_a_b_retrim` * 16) / `c`.`estimated_flowering_m2`) AS `tzero_oz_m2`,`p`.`tzero_shrink` AS `tzero_shrink`,`p`.`retrim_a` AS `retrim_a`,`p`.`retrim_b` AS `retrim_b`,`p`.`retrim_c` AS `retrim_c`,`p`.`b_revision_in` AS `b_revision_in`,`p`.`c_revision_in` AS `c_revision_in`,`p`.`b_revision_a` AS `b_revision_a`,`p`.`b_revision_b` AS `b_revision_b`,`p`.`b_revision_c` AS `b_revision_c`,`p`.`c_revision_a` AS `c_revision_a`,`p`.`c_revision_b` AS `c_revision_b`,`p`.`c_revision_c` AS `c_revision_c`,`p`.`grade_a` AS `processing_grade_a`,`p`.`grade_b` AS `processing_grade_b`,`p`.`grade_c` AS `processing_grade_c`,`p`.`shake` AS `processing_shake`,`p`.`waste_batch` AS `processing_waste`,`p`.`oz_per_plant` AS `processing_oz_plant`,(((`p`.`grade_a` + `p`.`grade_b`) * 16) / `c`.`estimated_flowering_m2`) AS `processing_oz_m2`,`p`.`processing_shrink` AS `processing_shrink`,`p`.`tzero_flower_status` AS `tzero_flower_status` from (`cultivation_view` `c` left join `processing` `p` on((`c`.`flowering_app_id` = convert(`p`.`flowering_id` using utf8mb4)))) where (`c`.`harvest_year` > 2019)

-- View: datastudio.crop_details_metrics
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `crop_details_metrics` AS select `t`.`processing_metrc_id` AS `processing_metrc_id`,`t`.`harvest_id` AS `harvest_id`,`t`.`harvest_base_name` AS `harvest_base_name`,`t`.`strain_id` AS `strain_id`,`ps`.`name` AS `strain_name`,`t`.`property_id` AS `property_id`,`t`.`harvest_date` AS `harvest_date`,`t`.`harvest_week` AS `harvest_week`,`t`.`harvest_year` AS `harvest_year`,`t`.`harvest_year_week` AS `harvest_year_week`,`t`.`license_id` AS `license_id`,`t`.`test_id` AS `test_id`,`t`.`planted_count` AS `planted_count`,if((`t`.`harvest_type` = 'manicure'),0,(`t`.`planted_count` - `t`.`harvested_count`)) AS `plants_lost`,`t`.`harvested_count` AS `harvested_count`,`t`.`wet_weight` AS `wet_weight`,`t`.`wet_waste_weight` AS `wet_waste_weight`,if((`t`.`wet_weight` = 0),0,(`t`.`wet_waste_weight` / `t`.`wet_weight`)) AS `wet_waste_pct`,if((`t`.`planted_count` = 0),0,((`t`.`wet_weight` / `t`.`planted_count`) * 16)) AS `wet_weight_oz_plant`,if((`t`.`harvested_count` = 0),0,((`t`.`wet_weight` / `t`.`harvested_count`) * 16)) AS `wet_weight_oz_plant_h`,`t`.`dry_weight` AS `dry_weight`,(`t`.`wet_weight` - `t`.`dry_weight`) AS `drying_loss`,if((`t`.`wet_weight` = 0),0,(1 - (`t`.`dry_weight` / `t`.`wet_weight`))) AS `drying_loss_pct`,if((`t`.`planted_count` = 0),0,((`t`.`dry_weight` / `t`.`planted_count`) * 16)) AS `dry_weight_oz_plant`,if((`t`.`harvested_count` = 0),0,((`t`.`dry_weight` / `t`.`harvested_count`) * 16)) AS `dry_weight_oz_plant_h`,`t`.`bucked_weight` AS `bucked_weight`,(`t`.`dry_weight` - `t`.`bucked_weight`) AS `bucked_waste`,if((`t`.`dry_weight` = 0),0,(1 - (`t`.`bucked_weight` / `t`.`dry_weight`))) AS `bucked_waste_pct`,if((`t`.`planted_count` = 0),0,((`t`.`bucked_weight` / `t`.`planted_count`) * 16)) AS `bucked_weight_oz_plant`,if((`t`.`harvested_count` = 0),0,((`t`.`bucked_weight` / `t`.`harvested_count`) * 16)) AS `bucked_weight_oz_plant_h`,`t`.`tzero_a` AS `tzero_a`,`t`.`tzero_b` AS `tzero_b`,(`t`.`tzero_a` + `t`.`tzero_b`) AS `tzero_ab`,if((`t`.`bucked_weight` = 0),0,((`t`.`tzero_a` + `t`.`tzero_b`) / `t`.`bucked_weight`)) AS `tzero_ab_yield_pct`,if((`t`.`planted_count` = 0),0,(((`t`.`tzero_a` + `t`.`tzero_b`) / `t`.`planted_count`) * 16)) AS `tzero_ab_oz_plant`,if((`t`.`harvested_count` = 0),0,(((`t`.`tzero_a` + `t`.`tzero_b`) / `t`.`harvested_count`) * 16)) AS `tzero_ab_oz_plant_h`,`t`.`tzero_c` AS `tzero_c`,((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) AS `tzero_abc`,if((`t`.`bucked_weight` = 0),0,(((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) / `t`.`bucked_weight`)) AS `tzero_abc_yield_pct`,if((`t`.`planted_count` = 0),0,((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) / `t`.`planted_count`) * 16)) AS `tzero_abc_oz_plant`,if((`t`.`harvested_count` = 0),0,((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) / `t`.`harvested_count`) * 16)) AS `tzero_abc_oz_plant_h`,`t`.`tzero_trim` AS `tzero_trim`,`t`.`tzero_shake` AS `tzero_shake`,((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`) AS `tzero_abc_trim_shake`,`t`.`tzero_waste` AS `tzero_waste`,(((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`) + `t`.`tzero_waste`) AS `tzero_total`,(`t`.`bucked_weight` - (((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`) + `t`.`tzero_waste`)) AS `tzero_misc_loss`,if((`t`.`bucked_weight` = 0),0,((`t`.`bucked_weight` - (((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`) + `t`.`tzero_waste`)) / `t`.`bucked_weight`)) AS `tzero_misc_loss_pct`,(`t`.`bucked_weight` - ((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`)) AS `tzero_total_loss`,if((`t`.`bucked_weight` = 0),0,((`t`.`bucked_weight` - ((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`)) / `t`.`bucked_weight`)) AS `tzero_total_loss_pct`,if((`t`.`planted_count` = 0),0,((`t`.`tzero_trim` / `t`.`planted_count`) * 16)) AS `tzero_trim_oz_plant`,if((`t`.`harvested_count` = 0),0,((`t`.`tzero_trim` / `t`.`harvested_count`) * 16)) AS `tzero_trim_oz_plant_h`,if((`t`.`bucked_weight` = 0),0,(`t`.`tzero_trim` / `t`.`bucked_weight`)) AS `total_batch_trim_pct`,if((`t`.`wet_weight` = 0),0,(1 - (((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`) / `t`.`wet_weight`))) AS `total_batch_weight_loss_pct` from (`harvest_base_processing_sorter` `t` left join `pacstone`.`plant_strain` `ps` on((`ps`.`id` = `t`.`strain_id`))) where (`t`.`tzero_status` = 'completed')

-- View: datastudio.crop_metrics
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `crop_metrics` AS select `t`.`harvest_base_name` AS `harvest_base_name`,`t`.`strain_id` AS `strain_id`,`ps`.`name` AS `strain_name`,`t`.`property_id` AS `property_id`,`t`.`harvest_date` AS `harvest_date`,`t`.`harvest_week` AS `harvest_week`,`t`.`harvest_year` AS `harvest_year`,`t`.`harvest_year_week` AS `harvest_year_week`,`t`.`license_id` AS `license_id`,`t`.`planted_count` AS `planted_count`,(`t`.`planted_count` - `t`.`harvested_count`) AS `plants_lost`,`t`.`harvested_count` AS `harvested_count`,`t`.`wet_weight` AS `wet_weight`,`t`.`wet_waste_weight` AS `wet_waste_weight`,if((`t`.`wet_weight` = 0),0,(`t`.`wet_waste_weight` / `t`.`wet_weight`)) AS `wet_waste_pct`,if((`t`.`planted_count` = 0),0,((`t`.`wet_weight` / `t`.`planted_count`) * 16)) AS `wet_weight_oz_plant`,if((`t`.`harvested_count` = 0),0,((`t`.`wet_weight` / `t`.`harvested_count`) * 16)) AS `wet_weight_oz_plant_h`,`t`.`dry_weight` AS `dry_weight`,(`t`.`wet_weight` - `t`.`dry_weight`) AS `drying_loss`,if((`t`.`wet_weight` = 0),0,(1 - (`t`.`dry_weight` / `t`.`wet_weight`))) AS `drying_loss_pct`,if((`t`.`planted_count` = 0),0,((`t`.`dry_weight` / `t`.`planted_count`) * 16)) AS `dry_weight_oz_plant`,if((`t`.`harvested_count` = 0),0,((`t`.`dry_weight` / `t`.`harvested_count`) * 16)) AS `dry_weight_oz_plant_h`,`t`.`bucked_weight` AS `bucked_weight`,(`t`.`dry_weight` - `t`.`bucked_weight`) AS `bucked_waste`,if((`t`.`dry_weight` = 0),0,(1 - (`t`.`bucked_weight` / `t`.`dry_weight`))) AS `bucked_waste_pct`,if((`t`.`planted_count` = 0),0,((`t`.`bucked_weight` / `t`.`planted_count`) * 16)) AS `bucked_weight_oz_plant`,if((`t`.`harvested_count` = 0),0,((`t`.`bucked_weight` / `t`.`harvested_count`) * 16)) AS `bucked_weight_oz_plant_h`,`t`.`tzero_a` AS `tzero_a`,`t`.`tzero_b` AS `tzero_b`,(`t`.`tzero_a` + `t`.`tzero_b`) AS `tzero_ab`,if((`t`.`bucked_weight` = 0),0,((`t`.`tzero_a` + `t`.`tzero_b`) / `t`.`bucked_weight`)) AS `tzero_ab_yield_pct`,if((`t`.`planted_count` = 0),0,(((`t`.`tzero_a` + `t`.`tzero_b`) / `t`.`planted_count`) * 16)) AS `tzero_ab_oz_plant`,if((`t`.`harvested_count` = 0),0,(((`t`.`tzero_a` + `t`.`tzero_b`) / `t`.`harvested_count`) * 16)) AS `tzero_ab_oz_plant_h`,`t`.`tzero_c` AS `tzero_c`,((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) AS `tzero_abc`,if((`t`.`bucked_weight` = 0),0,(((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) / `t`.`bucked_weight`)) AS `tzero_abc_yield_pct`,if((`t`.`planted_count` = 0),0,((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) / `t`.`planted_count`) * 16)) AS `tzero_abc_oz_plant`,if((`t`.`harvested_count` = 0),0,((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) / `t`.`harvested_count`) * 16)) AS `tzero_abc_oz_plant_h`,`t`.`tzero_trim` AS `tzero_trim`,`t`.`tzero_shake` AS `tzero_shake`,((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`) AS `tzero_abc_trim_shake`,`t`.`tzero_waste` AS `tzero_waste`,(((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`) + `t`.`tzero_waste`) AS `tzero_total`,(`t`.`bucked_weight` - (((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`) + `t`.`tzero_waste`)) AS `tzero_misc_loss`,if((`t`.`bucked_weight` = 0),0,((`t`.`bucked_weight` - (((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`) + `t`.`tzero_waste`)) / `t`.`bucked_weight`)) AS `tzero_misc_loss_pct`,(`t`.`bucked_weight` - ((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`)) AS `tzero_total_loss`,if((`t`.`bucked_weight` = 0),0,((`t`.`bucked_weight` - ((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`)) / `t`.`bucked_weight`)) AS `tzero_total_loss_pct`,if((`t`.`planted_count` = 0),0,((`t`.`tzero_trim` / `t`.`planted_count`) * 16)) AS `tzero_trim_oz_plant`,if((`t`.`harvested_count` = 0),0,((`t`.`tzero_trim` / `t`.`harvested_count`) * 16)) AS `tzero_trim_oz_plant_h`,if((`t`.`bucked_weight` = 0),0,(`t`.`tzero_trim` / `t`.`bucked_weight`)) AS `total_batch_trim_pct`,if((`t`.`wet_weight` = 0),0,(((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`) / `t`.`wet_weight`)) AS `total_batch_weight_loss_pct`,if((`t`.`planted_count` = 0),0,least(4,ceiling((abs((((`t`.`wet_weight` / `t`.`planted_count`) * 16) - (select `crop_metric_threshold`.`m` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'wet_oz')))) / (select `crop_metric_threshold`.`mad` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'wet_oz')))))) AS `wet_oz_deviation`,if((`t`.`planted_count` = 0),0,least(4,ceiling((abs((((`t`.`dry_weight` / `t`.`planted_count`) * 16) - (select `crop_metric_threshold`.`m` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'dry_oz')))) / (select `crop_metric_threshold`.`mad` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'dry_oz')))))) AS `dry_oz_deviation`,if((`t`.`planted_count` = 0),0,least(4,ceiling((abs((((`t`.`bucked_weight` / `t`.`planted_count`) * 16) - (select `crop_metric_threshold`.`m` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'buck_oz')))) / (select `crop_metric_threshold`.`mad` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'buck_oz')))))) AS `buck_oz_deviation`,if((`t`.`planted_count` = 0),0,least(4,ceiling((abs(((((`t`.`tzero_a` + `t`.`tzero_b`) / `t`.`planted_count`) * 16) - (select `crop_metric_threshold`.`m` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'flower_ab_oz')))) / (select `crop_metric_threshold`.`mad` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'flower_ab_oz')))))) AS `flower_ab_oz_deviation`,if((`t`.`planted_count` = 0),0,least(4,ceiling((abs((((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) / `t`.`planted_count`) * 16) - (select `crop_metric_threshold`.`m` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'flower_abc_oz')))) / (select `crop_metric_threshold`.`mad` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'flower_abc_oz')))))) AS `flower_abc_oz_deviation`,if((`t`.`planted_count` = 0),0,least(4,ceiling((abs((((`t`.`tzero_trim` / `t`.`planted_count`) * 16) - (select `crop_metric_threshold`.`m` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'trim_oz')))) / (select `crop_metric_threshold`.`mad` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'trim_oz')))))) AS `trim_oz_deviation`,if((`t`.`wet_weight` = 0),0,least(4,ceiling((abs(((1 - (`t`.`dry_weight` / `t`.`wet_weight`)) - (select `crop_metric_threshold`.`m` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'dry_loss_pct')))) / (select `crop_metric_threshold`.`mad` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'dry_loss_pct')))))) AS `dry_loss_pct_deviation`,if((`t`.`dry_weight` = 0),0,least(4,ceiling((abs(((1 - (`t`.`bucked_weight` / `t`.`dry_weight`)) - (select `crop_metric_threshold`.`m` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'buck_loss_pct')))) / (select `crop_metric_threshold`.`mad` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'buck_loss_pct')))))) AS `buck_loss_pct_deviation`,if((`t`.`bucked_weight` = 0),0,least(4,ceiling((abs((((`t`.`bucked_weight` - ((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`)) / `t`.`bucked_weight`) - (select `crop_metric_threshold`.`m` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'trim_loss_pct')))) / (select `crop_metric_threshold`.`mad` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'trim_loss_pct')))))) AS `trim_loss_pct_deviation` from (`crop_rollup` `t` left join `pacstone`.`plant_strain` `ps` on((`ps`.`id` = `t`.`strain_id`))) where (`t`.`crop_status` = 'complete')

-- View: datastudio.crop_rollup
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `crop_rollup` AS select `harvest_base_processing_sorter`.`harvest_base_name` AS `harvest_base_name`,max(`harvest_base_processing_sorter`.`strain_id`) AS `strain_id`,'strain_name' AS `strain_name`,substring_index(`harvest_base_processing_sorter`.`harvest_base_name`,'-',1) AS `property_id`,max(`harvest_base_processing_sorter`.`harvest_date`) AS `harvest_date`,substring_index(substring_index(`harvest_base_processing_sorter`.`harvest_base_name`,'-',2),'-',-(1)) AS `harvest_week`,substring_index(substring_index(`harvest_base_processing_sorter`.`harvest_base_name`,'-',3),'-',-(1)) AS `harvest_year`,concat(substring_index(substring_index(`harvest_base_processing_sorter`.`harvest_base_name`,'-',3),'-',-(1)),substring_index(substring_index(`harvest_base_processing_sorter`.`harvest_base_name`,'-',2),'-',-(1))) AS `harvest_year_week`,max(`harvest_base_processing_sorter`.`license_id`) AS `license_id`,count(0) AS `record_count`,if((count(0) = 1),sum(`harvest_base_processing_sorter`.`planted_count`),sum(if((`harvest_base_processing_sorter`.`harvest_type` = 'manicure'),0,`harvest_base_processing_sorter`.`planted_count`))) AS `planted_count`,sum(`harvest_base_processing_sorter`.`harvested_count`) AS `harvested_count`,sum(`harvest_base_processing_sorter`.`wet_weight`) AS `wet_weight`,sum(`harvest_base_processing_sorter`.`wet_waste_weight`) AS `wet_waste_weight`,sum(`harvest_base_processing_sorter`.`dry_weight`) AS `dry_weight`,sum(`harvest_base_processing_sorter`.`bucked_weight`) AS `bucked_weight`,sum(`harvest_base_processing_sorter`.`tzero_a`) AS `tzero_a`,sum(`harvest_base_processing_sorter`.`tzero_b`) AS `tzero_b`,sum(`harvest_base_processing_sorter`.`tzero_c`) AS `tzero_c`,sum(`harvest_base_processing_sorter`.`tzero_trim`) AS `tzero_trim`,sum(`harvest_base_processing_sorter`.`tzero_shake`) AS `tzero_shake`,sum(`harvest_base_processing_sorter`.`tzero_waste`) AS `tzero_waste`,if((sum(if((`harvest_base_processing_sorter`.`tzero_status` = 'completed'),1,0)) = count(0)),'Complete','In Progress') AS `crop_status` from `harvest_base_processing_sorter` group by `harvest_base_processing_sorter`.`harvest_base_name`

-- View: datastudio.cultivation_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `cultivation_view` AS select `f`.`flowering_id` AS `flowering_id`,`f`.`id` AS `flowering_app_id`,`f`.`property_id` AS `property_id`,`f`.`test_id` AS `test_id`,`f`.`date` AS `flowering_date`,`f`.`week_num` AS `flowering_week`,`f`.`year_num` AS `flowering_year`,concat(`f`.`year_num`,right(concat('0',`f`.`week_num`),2)) AS `year_week`,`f`.`license_id` AS `license_id`,`f`.`strain_id` AS `strain_id`,`f`.`location_3` AS `house`,`f`.`location_5` AS `valve`,`f`.`plant_count` AS `flowering_plant_count`,`f`.`action` AS `flowering_action`,`c`.`name` AS `name`,`c`.`capacity` AS `capacity`,`c`.`m2` AS `m2`,`c`.`location_string` AS `location_string`,`h`.`harvest_id` AS `harvest_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_metrc_id` AS `harvest_metrc_id`,`h`.`processing_metrc_id` AS `processing_metrc_id`,`h`.`metrc_harvest_name` AS `metrc_name`,`h`.`plant_count_harvested` AS `plant_count_harvested`,`h`.`plant_count_received` AS `plant_count_received`,`h`.`wet` AS `wet_weight`,`h`.`waste` AS `waste_weight`,`h`.`action` AS `harvest_action`,week((`f`.`date` + interval 56 day),3) AS `estimated_harvest_week`,round(((`f`.`plant_count` * `c`.`m2`) / `c`.`capacity`),2) AS `estimated_flowering_m2` from ((`cultivation`.`flowering` `f` left join `pacstone`.`canopy` `c` on((convert(`c`.`id` using utf8mb4) = `f`.`canopy_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`flowering_id` = `f`.`id`))) where ((year(`h`.`date`) > 2019) and (`h`.`action` <> 'Deleted') and (`f`.`action` <> 'Deleted') and (`f`.`action` <> 'Duplicated'))

-- View: datastudio.dtc_inventory_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `dtc_inventory_view` AS select `pi`.`id` AS `id`,`pi`.`date` AS `date`,`pi`.`metrc_id` AS `metrc_id`,`pi`.`harvest_id` AS `harvest_id`,`pi`.`strain` AS `strain`,`pi`.`strain_type` AS `strain_type`,`pi`.`license` AS `license`,`pi`.`brand` AS `brand`,`pi`.`category` AS `category`,`pi`.`type` AS `type`,`pi`.`package_size` AS `package_size`,`pi`.`quantity` AS `quantity`,`pi`.`thc` AS `thc`,`pi`.`weight` AS `weight`,`pi`.`property` AS `property`,`pi`.`room` AS `room`,`pi`.`room_area` AS `room_area`,`pi`.`status` AS `status`,`pi`.`note` AS `note`,`pi`.`server_ts` AS `server_ts`,`pi`.`thc_coa` AS `thc_coa` from `packing`.`product_inventory` `pi` where ((`pi`.`room_area` = 'DTC') and (`pi`.`status` = 'Active'))

-- View: datastudio.harvest_base_marc
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `harvest_base_marc` AS select `hbr`.`flowering_id` AS `flowering_id`,concat(concat(concat(concat(concat(concat(concat(concat(`hbr`.`property_id`,'-'),right(concat('0',`hbr`.`week_num`),2)),'-'),`hbr`.`year_num`),'-'),`hbr`.`strain_id`),'-'),right(`hbr`.`license_id`,5)) AS `harvest_base_name` from (select `cultivation`.`harvesting`.`flowering_id` AS `flowering_id`,`cultivation`.`harvesting`.`property_id` AS `property_id`,`cultivation`.`harvesting`.`week_num` AS `week_num`,`cultivation`.`harvesting`.`year_num` AS `year_num`,`cultivation`.`harvesting`.`license_id` AS `license_id`,`cultivation`.`harvesting`.`strain_id` AS `strain_id`,`cultivation`.`harvesting`.`harvest_type` AS `harvest_type`,`cultivation`.`harvesting`.`plant_count_harvested` AS `plant_count_harvested`,row_number() OVER (PARTITION BY `cultivation`.`harvesting`.`flowering_id` ORDER BY (case when (`cultivation`.`harvesting`.`harvest_type` = 'full') then 0 when (`cultivation`.`harvesting`.`harvest_type` = 'partial') then 1 else 2 end),`cultivation`.`harvesting`.`plant_count_harvested` )  AS `rn` from `cultivation`.`harvesting`) `hbr` where (`hbr`.`rn` = 1)

-- View: datastudio.harvest_base_processing
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `harvest_base_processing` AS select `h`.`processing_metrc_id` AS `processing_metrc_id`,max(`h`.`harvest_id`) AS `harvest_id`,max(`h`.`harvest_base_name`) AS `harvest_base_name`,max(`h`.`crop_name`) AS `crop_name`,max(`h`.`property_id`) AS `property_id`,max(`h`.`date`) AS `harvest_date`,max(`h`.`week_num`) AS `harvest_week`,max(`h`.`year_num`) AS `harvest_year`,max(`h`.`harvest_year_week`) AS `harvest_year_week`,max(`h`.`license_id`) AS `license_id`,max(`h`.`strain_id`) AS `strain_id`,max(`h`.`test_id`) AS `test_id`,max(`h`.`harvest_type`) AS `harvest_type`,max(`h`.`harvest_status`) AS `harvest_status`,`sub`.`planted_count` AS `planted_count`,`sub`.`sum_plant_count_harvested` AS `harvested_count`,`sub`.`wet_weight` AS `wet_weight`,`sub`.`wet_waste_weight` AS `wet_waste_weight`,max(`db`.`total_weight`) AS `dry_weight`,max(`bw`.`bucked_weight`) AS `bucked_weight`,(case when (max(`tzb`.`tzero_finish_time`) is not null) then 'Completed' when (max(`tzb`.`tzero_finish_time`) is null) then (case when `h`.`processing_metrc_id` not in (select distinct `tzero_batch_temp`.`transfer_metrc_id` from `tzero_batch_temp`) then 'In Queue' else 'In Progress' end) else '-' end) AS `tzero_status`,max((`fl`.`tzero_a` + `fl`.`retrim_a`)) AS `tzero_a`,max((`fl`.`b_from_b` + `fl`.`b_from_c`)) AS `tzero_b`,max((`ml`.`c_from_b` + `ml`.`c_from_c`)) AS `tzero_mold`,max(`trim`.`tzero_trim`) AS `tzero_trim`,max(`ss`.`tzero_shake`) AS `tzero_shake`,max(`ws`.`tzero_waste`) AS `tzero_waste` from (((((((((`harvest_base_view` `h` join (select `harvest_base_view`.`processing_metrc_id` AS `processing_metrc_id`,sum(`harvest_base_view`.`harvested_count`) AS `sum_plant_count_harvested`,sum(`harvest_base_view`.`wet_weight`) AS `wet_weight`,sum(`harvest_base_view`.`wet_waste_weight`) AS `wet_waste_weight`,max(`harvest_base_view`.`harvest_base_name`) AS `harvest_base_name`,sum(`harvest_base_view`.`planted_count`) AS `planted_count`,max(`harvest_base_view`.`harvest_status`) AS `harvest_status`,max(`harvest_base_view`.`crop_name`) AS `crop_name`,max(`harvest_base_view`.`harvest_type`) AS `harvest_type` from `harvest_base_view` group by `harvest_base_view`.`processing_metrc_id`) `sub` on((`h`.`processing_metrc_id` = `sub`.`processing_metrc_id`))) left join (select `dry_plant_batches_temp`.`harvest_metrc_id` AS `harvest_metrc_id`,sum(`dry_plant_batches_temp`.`total_weight`) AS `total_weight` from `dry_plant_batches_temp` group by `dry_plant_batches_temp`.`harvest_metrc_id`) `db` on((`h`.`processing_metrc_id` = convert(`db`.`harvest_metrc_id` using utf8mb4)))) left join (select `bucked_batches_temp`.`harvest_metrc_id` AS `harvest_metrc_id`,sum(`bucked_batches_temp`.`total_weight`) AS `bucked_weight` from `bucked_batches_temp` group by `bucked_batches_temp`.`harvest_metrc_id`) `bw` on((`h`.`processing_metrc_id` = convert(`bw`.`harvest_metrc_id` using utf8mb4)))) left join (select `tzero_flower_temp`.`transfer_metrc_id` AS `transfer_metrc_id`,sum(`tzero_flower_temp`.`weight`) AS `tzero_flower`,sum(if(((`tzero_flower_temp`.`clasification` = 'Flower') and (`tzero_flower_temp`.`grade` = 'A')),`tzero_flower_temp`.`weight`,0)) AS `tzero_a`,sum(if(((`tzero_flower_temp`.`clasification` = 'Retrim') and (`tzero_flower_temp`.`grade` = 'A')),`tzero_flower_temp`.`weight`,0)) AS `retrim_a`,sum(if(((`tzero_flower_temp`.`clasification` = 'B') and (`tzero_flower_temp`.`grade` = 'B')),`tzero_flower_temp`.`weight`,0)) AS `b_from_b`,sum(if(((`tzero_flower_temp`.`clasification` = 'C') and (`tzero_flower_temp`.`grade` = 'B')),`tzero_flower_temp`.`weight`,0)) AS `b_from_c`,max(`tzero_flower_temp`.`clasification`) AS `clasification`,max(`tzero_flower_temp`.`grade`) AS `grade` from `tzero_flower_temp` group by `tzero_flower_temp`.`transfer_metrc_id`) `fl` on((`h`.`processing_metrc_id` = convert(`fl`.`transfer_metrc_id` using utf8mb4)))) left join (select `tzero_trim_temp`.`transfer_metrc_id` AS `transfer_metrc_id`,sum(`tzero_trim_temp`.`weight`) AS `tzero_trim` from `tzero_trim_temp` group by `tzero_trim_temp`.`transfer_metrc_id`) `trim` on((`h`.`processing_metrc_id` = convert(`trim`.`transfer_metrc_id` using utf8mb4)))) left join (select `tzero_waste_temp`.`transfer_metrc_id` AS `transfer_metrc_id`,sum(`tzero_waste_temp`.`weight`) AS `tzero_waste` from `tzero_waste_temp` group by `tzero_waste_temp`.`transfer_metrc_id`) `ws` on((`h`.`processing_metrc_id` = convert(`ws`.`transfer_metrc_id` using utf8mb4)))) left join (select `tzero_batch_temp`.`transfer_metrc_id` AS `transfer_metrc_id`,max(`tzero_batch_temp`.`batch_finish_timestamp`) AS `tzero_finish_time` from `tzero_batch_temp` group by `tzero_batch_temp`.`transfer_metrc_id`) `tzb` on((`h`.`processing_metrc_id` = convert(`tzb`.`transfer_metrc_id` using utf8mb4)))) left join (select `tzero_shake_temp`.`transfer_metrc_id` AS `transfer_metrc_id`,sum(`tzero_shake_temp`.`weight`) AS `tzero_shake` from `tzero_shake_temp` group by `tzero_shake_temp`.`transfer_metrc_id`) `ss` on((`h`.`processing_metrc_id` = convert(`ss`.`transfer_metrc_id` using utf8mb4)))) left join (select `tzero_mold_temp`.`transfer_metrc_id` AS `transfer_metrc_id`,sum(if(((`tzero_mold_temp`.`clasification` = 'B') and (`tzero_mold_temp`.`grade` = 'C')),`tzero_mold_temp`.`weight`,0)) AS `c_from_b`,sum(if(((`tzero_mold_temp`.`clasification` = 'C') and (`tzero_mold_temp`.`grade` = 'C')),`tzero_mold_temp`.`weight`,0)) AS `c_from_c`,max(`tzero_mold_temp`.`clasification`) AS `clasification`,max(`tzero_mold_temp`.`grade`) AS `grade` from `tzero_mold_temp` group by `tzero_mold_temp`.`transfer_metrc_id`) `ml` on((`h`.`processing_metrc_id` = convert(`ml`.`transfer_metrc_id` using utf8mb4)))) group by `h`.`processing_metrc_id`

-- View: datastudio.harvest_base_processing_sorter
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `harvest_base_processing_sorter` AS select `h`.`processing_metrc_id` AS `processing_metrc_id`,max(`h`.`harvest_id`) AS `harvest_id`,max(`h`.`harvest_base_name`) AS `harvest_base_name`,max(`h`.`crop_name`) AS `crop_name`,max(`h`.`property_id`) AS `property_id`,max(`h`.`date`) AS `harvest_date`,max(`h`.`week_num`) AS `harvest_week`,max(`h`.`year_num`) AS `harvest_year`,max(`h`.`harvest_year_week`) AS `harvest_year_week`,max(`h`.`license_id`) AS `license_id`,max(`h`.`strain_id`) AS `strain_id`,max(`h`.`test_id`) AS `test_id`,max(`h`.`harvest_type`) AS `harvest_type`,max(`h`.`harvest_status`) AS `harvest_status`,`sub`.`planted_count` AS `planted_count`,ifnull(`sub`.`sum_plant_count_harvested`,0) AS `harvested_count`,`sub`.`wet_weight` AS `wet_weight`,ifnull(`sub`.`wet_waste_weight`,0) AS `wet_waste_weight`,ifnull(max(`db`.`total_weight`),0) AS `dry_weight`,ifnull(max(`bw`.`bucked_weight`),0) AS `bucked_weight`,(case when (max(`tzb`.`tzero_finish_time`) is not null) then 'Completed' when (max(`tzb`.`tzero_finish_time`) is null) then (case when `h`.`processing_metrc_id` not in (select distinct `tzero_batch_temp`.`transfer_metrc_id` from `tzero_batch_temp`) then 'In Queue' else 'In Progress' end) else '-' end) AS `tzero_status`,(((max(ifnull(`fl`.`tzero_a`,0)) + max(ifnull(`re`.`retrim_a`,0))) + max(ifnull(`fl`.`a_from_b`,0))) + max(ifnull(`fl`.`a_from_c`,0))) AS `tzero_a`,max((ifnull(`fl`.`b_from_b`,0) + ifnull(`fl`.`b_from_c`,0))) AS `tzero_b`,max((ifnull(`ml`.`c_from_b`,0) + ifnull(`ml`.`c_from_c`,0))) AS `tzero_c`,(((((max(ifnull(`fl`.`tzero_a`,0)) + max(ifnull(`re`.`retrim_a`,0))) + max(ifnull(`fl`.`a_from_b`,0))) + max(ifnull(`fl`.`a_from_c`,0))) + ifnull(max((`fl`.`b_from_b` + `fl`.`b_from_c`)),0)) + ifnull(max((`ml`.`c_from_b` + `ml`.`c_from_c`)),0)) AS `tzero_abc`,ifnull(max(`trim`.`tzero_trim`),0) AS `tzero_trim`,ifnull(max(`ss`.`tzero_shake`),0) AS `tzero_shake`,ifnull(max(`ws`.`tzero_waste`),0) AS `tzero_waste`,(case when (max(`sor`.`record_count`) is null) then 'In Queue' when (max(`sor`.`record_count`) = max(`sor`.`finished_count`)) then 'Completed' else 'In Progress' end) AS `sorter_status`,max(`sor`.`input_weight`) AS `sorter_input`,max(`sor`.`unsorted`) AS `unsorted`,max(`sor`.`sorter_bigs`) AS `sorter_bigs`,max(`sor`.`sorter_mediums`) AS `sorter_mediums`,max(`sor`.`sorter_smalls`) AS `sorter_smalls`,max(`sor`.`sorter_micro_smalls`) AS `sorter_micro_smalls`,max(`sor`.`sorter_mold`) AS `sorter_mold`,max(`sor`.`sorter_kief`) AS `sorter_kief`,max(`sor`.`sorter_trim`) AS `sorter_trim`,max(`sor`.`sorter_shake`) AS `sorter_shake`,max(`sor`.`sorter_waste`) AS `sorter_waste` from (((((((((((`harvest_base_view` `h` join (select `harvest_base_view`.`processing_metrc_id` AS `processing_metrc_id`,sum(`harvest_base_view`.`harvested_count`) AS `sum_plant_count_harvested`,sum(`harvest_base_view`.`wet_weight`) AS `wet_weight`,sum(`harvest_base_view`.`wet_waste_weight`) AS `wet_waste_weight`,max(`harvest_base_view`.`harvest_base_name`) AS `harvest_base_name`,sum(`harvest_base_view`.`planted_count`) AS `planted_count`,max(`harvest_base_view`.`harvest_status`) AS `harvest_status`,max(`harvest_base_view`.`crop_name`) AS `crop_name`,max(`harvest_base_view`.`harvest_type`) AS `harvest_type` from `harvest_base_view` group by `harvest_base_view`.`processing_metrc_id`) `sub` on((`h`.`processing_metrc_id` = `sub`.`processing_metrc_id`))) left join (select `dry_plant_batches_temp`.`harvest_metrc_id` AS `harvest_metrc_id`,sum(`dry_plant_batches_temp`.`total_weight`) AS `total_weight` from `dry_plant_batches_temp` group by `dry_plant_batches_temp`.`harvest_metrc_id`) `db` on((`h`.`processing_metrc_id` = `db`.`harvest_metrc_id`))) left join (select `bucked_batches_temp`.`harvest_metrc_id` AS `harvest_metrc_id`,sum(`bucked_batches_temp`.`total_weight`) AS `bucked_weight` from `bucked_batches_temp` group by `bucked_batches_temp`.`harvest_metrc_id`) `bw` on((`h`.`processing_metrc_id` = `bw`.`harvest_metrc_id`))) left join (select `tzero_flower_temp`.`transfer_metrc_id` AS `transfer_metrc_id`,sum(`tzero_flower_temp`.`weight`) AS `tzero_flower`,sum(if(((`tzero_flower_temp`.`clasification` = 'Flower') and (`tzero_flower_temp`.`grade` = 'A')),`tzero_flower_temp`.`weight`,0)) AS `tzero_a`,sum(if(((`tzero_flower_temp`.`clasification` = 'B') and (`tzero_flower_temp`.`grade` = 'A')),`tzero_flower_temp`.`weight`,0)) AS `a_from_b`,sum(if(((`tzero_flower_temp`.`clasification` = 'C') and (`tzero_flower_temp`.`grade` = 'A')),`tzero_flower_temp`.`weight`,0)) AS `a_from_c`,sum(if(((`tzero_flower_temp`.`clasification` = 'B') and (`tzero_flower_temp`.`grade` = 'B')),`tzero_flower_temp`.`weight`,0)) AS `b_from_b`,sum(if(((`tzero_flower_temp`.`clasification` = 'C') and (`tzero_flower_temp`.`grade` = 'B')),`tzero_flower_temp`.`weight`,0)) AS `b_from_c`,max(`tzero_flower_temp`.`clasification`) AS `clasification`,max(`tzero_flower_temp`.`grade`) AS `grade` from `tzero_flower_temp` group by `tzero_flower_temp`.`transfer_metrc_id`) `fl` on((`h`.`processing_metrc_id` = `fl`.`transfer_metrc_id`))) left join (select `tzero_trim_temp`.`transfer_metrc_id` AS `transfer_metrc_id`,sum(`tzero_trim_temp`.`weight`) AS `tzero_trim` from `tzero_trim_temp` group by `tzero_trim_temp`.`transfer_metrc_id`) `trim` on((`h`.`processing_metrc_id` = `trim`.`transfer_metrc_id`))) left join (select `tzero_waste_temp`.`transfer_metrc_id` AS `transfer_metrc_id`,sum(`tzero_waste_temp`.`weight`) AS `tzero_waste` from `tzero_waste_temp` group by `tzero_waste_temp`.`transfer_metrc_id`) `ws` on((`h`.`processing_metrc_id` = `ws`.`transfer_metrc_id`))) left join (select `tzero_batch_temp`.`transfer_metrc_id` AS `transfer_metrc_id`,max(`tzero_batch_temp`.`batch_finish_timestamp`) AS `tzero_finish_time` from `tzero_batch_temp` group by `tzero_batch_temp`.`transfer_metrc_id`) `tzb` on((`h`.`processing_metrc_id` = `tzb`.`transfer_metrc_id`))) left join (select `tzero_shake_temp`.`transfer_metrc_id` AS `transfer_metrc_id`,sum(`tzero_shake_temp`.`weight`) AS `tzero_shake` from `tzero_shake_temp` group by `tzero_shake_temp`.`transfer_metrc_id`) `ss` on((`h`.`processing_metrc_id` = `ss`.`transfer_metrc_id`))) left join (select `tzero_mold_temp`.`transfer_metrc_id` AS `transfer_metrc_id`,sum(if(((`tzero_mold_temp`.`clasification` = 'B') and (`tzero_mold_temp`.`grade` = 'C')),`tzero_mold_temp`.`weight`,0)) AS `c_from_b`,sum(if(((`tzero_mold_temp`.`clasification` = 'C') and (`tzero_mold_temp`.`grade` = 'C')),`tzero_mold_temp`.`weight`,0)) AS `c_from_c`,max(`tzero_mold_temp`.`clasification`) AS `clasification`,max(`tzero_mold_temp`.`grade`) AS `grade` from `tzero_mold_temp` group by `tzero_mold_temp`.`transfer_metrc_id`) `ml` on((`h`.`processing_metrc_id` = `ml`.`transfer_metrc_id`))) left join (select `sorter_batch_temp`.`transfer_metrc_id` AS `transfer_metrc_id`,sum(`sorter_batch_temp`.`regs`) AS `unsorted`,sum(`sorter_batch_temp`.`input_weight`) AS `input_weight`,sum(`sorter_batch_temp`.`bigs`) AS `sorter_bigs`,sum(`sorter_batch_temp`.`mediums`) AS `sorter_mediums`,sum(`sorter_batch_temp`.`smalls`) AS `sorter_smalls`,sum(`sorter_batch_temp`.`micro_smalls`) AS `sorter_micro_smalls`,sum(`sorter_batch_temp`.`mold`) AS `sorter_mold`,sum(`sorter_batch_temp`.`kief`) AS `sorter_kief`,sum(`sorter_batch_temp`.`shake`) AS `sorter_shake`,sum(`sorter_batch_temp`.`trim`) AS `sorter_trim`,sum(`sorter_batch_temp`.`waste`) AS `sorter_waste`,max(`sorter_batch_temp`.`finished_time`) AS `sorter_finished_time`,sum(if((`sorter_batch_temp`.`finished_time` is null),0,1)) AS `finished_count`,count(0) AS `record_count` from `sorter_batch_temp` group by `sorter_batch_temp`.`transfer_metrc_id`) `sor` on((`h`.`processing_metrc_id` = `sor`.`transfer_metrc_id`))) left join (select `tzero_retrim_temp`.`transfer_metrc_id` AS `transfer_metrc_id`,sum(if((`tzero_retrim_temp`.`grade` = 'A'),`tzero_retrim_temp`.`weight`,0)) AS `retrim_a`,sum(if((`tzero_retrim_temp`.`grade` = 'B'),`tzero_retrim_temp`.`weight`,0)) AS `retrim_b`,max(`tzero_retrim_temp`.`grade`) AS `grade` from `tzero_retrim_temp` group by `tzero_retrim_temp`.`transfer_metrc_id`) `re` on((`h`.`processing_metrc_id` = `re`.`transfer_metrc_id`))) group by `h`.`processing_metrc_id`

-- View: datastudio.harvest_base_view
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `harvest_base_view` AS with `h2` as (select `cultivation`.`harvesting`.`flowering_id` AS `flowering_id`,`cultivation`.`harvesting`.`property_id` AS `property_id`,`cultivation`.`harvesting`.`week_num` AS `week_num`,`cultivation`.`harvesting`.`year_num` AS `year_num`,`cultivation`.`harvesting`.`license_id` AS `license_id`,`cultivation`.`harvesting`.`strain_id` AS `strain_id`,`cultivation`.`harvesting`.`harvest_type` AS `harvest_type`,`cultivation`.`harvesting`.`plant_count_harvested` AS `plant_count_harvested`,row_number() OVER (PARTITION BY `cultivation`.`harvesting`.`flowering_id` ORDER BY (case when (`cultivation`.`harvesting`.`harvest_type` = 'full') then 0 when (`cultivation`.`harvesting`.`harvest_type` = 'partial') then 1 else 2 end),`cultivation`.`harvesting`.`plant_count_harvested` )  AS `rn` from `cultivation`.`harvesting`) select `f`.`id` AS `flowering_id`,`cr`.`label` AS `crop_name`,`h`.`harvest_id` AS `harvest_id`,concat(`h2`.`property_id`,'-',right(concat('0',`h2`.`week_num`),2),'-',`h2`.`year_num`,'-',`h2`.`strain_id`,'-',right(`h2`.`license_id`,5)) AS `harvest_base_name`,`h`.`strain_id` AS `strain_id`,`h`.`property_id` AS `property_id`,`h`.`year_num` AS `year_num`,`h`.`week_num` AS `week_num`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`date` AS `date`,`h`.`license_id` AS `license_id`,`h`.`test_id` AS `test_id`,`h`.`harvest_type` AS `harvest_type`,(case when ((`h`.`plant_count_harvested` is not null) and (`h`.`date` <= curdate())) then 'Completed' when ((`h`.`plant_count_harvested` is null) and (`h`.`date` <= curdate())) then 'In Progress' when (`h`.`date` > curdate()) then 'In Queue' else '-' end) AS `harvest_status`,`h`.`processing_metrc_id` AS `processing_metrc_id`,`f`.`plant_count` AS `planted_count`,`h`.`plant_count_harvested` AS `harvested_count`,`h`.`wet` AS `wet_weight`,`h`.`waste` AS `wet_waste_weight` from (((`cultivation`.`harvesting` `h` join `cultivation`.`flowering` `f` on((`h`.`flowering_id` = `f`.`id`))) left join `cultivation`.`crop` `cr` on((`h`.`crop_id` = `cr`.`id`))) left join `h2` on(((`h`.`flowering_id` = `h2`.`flowering_id`) and (`h2`.`rn` = 1)))) where ((((`h`.`action` <> 'Deleted') and (`h`.`action` <> 'Duplicated')) or (`h`.`action` is null)) and (`h`.`year_num` > 2020))

-- View: datastudio.harvest_yield_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `harvest_yield_view` AS select `f`.`id` AS `id`,`f`.`veg_id` AS `veg_id`,`f`.`canopy_id` AS `canopy_id`,`f`.`test_id` AS `test_id`,`f`.`flowering_id` AS `flowering_id`,`f`.`property_id` AS `property_id`,`f`.`date` AS `date`,`f`.`week_num` AS `week_num`,`f`.`year_num` AS `year_num`,concat(`f`.`year_num`,right(concat('0',`f`.`week_num`),2)) AS `year_week`,`f`.`license_id` AS `license_id`,`f`.`strain_id` AS `strain_id`,`f`.`location_3` AS `location_3`,`f`.`location_5` AS `location_5`,coalesce(`h`.`plant_count_harvested`,`f`.`plant_count`) AS `plant_count`,`f`.`note` AS `note`,`f`.`harvest_date` AS `harvest_date`,`f`.`harvest_id` AS `harvest_id`,`f`.`status` AS `status`,`f`.`action` AS `action`,`f`.`created_on` AS `created_on`,`f`.`created_by` AS `created_by`,`f`.`modified_on` AS `modified_on`,`f`.`modified_by` AS `modified_by`,`c`.`name` AS `name`,`c`.`capacity` AS `capacity`,`c`.`m2` AS `m2`,`c`.`metrc_initial` AS `metrc_initial`,`c`.`location_string` AS `location_string`,`hwy`.`bucked_coefficient` AS `bucked_coefficient`,`hwy`.`flower_coefficient` AS `flower_coefficient`,`hwy`.`trim_coefficient` AS `trim_coefficient`,week(`f`.`harvest_date`,3) AS `harvest_date_week`,week((`f`.`date` + interval if((`f`.`property_id` = 'EB'),52,56) day),3) AS `future_week`,if((`f`.`harvest_date` is null),year((`f`.`date` + interval if((`f`.`property_id` = 'EB'),52,56) day)),year(`f`.`harvest_date`)) AS `harvest_year`,round(((`f`.`plant_count` * `c`.`m2`) / `c`.`capacity`),2) AS `harvest_estimated_m2`,round((((`f`.`plant_count` * `c`.`m2`) / `c`.`capacity`) * `hwy`.`flower_coefficient`),2) AS `harvest_estimated_oz` from (((`cultivation`.`flowering` `f` left join `pacstone`.`canopy` `c` on((convert(`c`.`id` using utf8mb4) = `f`.`canopy_id`))) left join `pacstone`.`harvest_week_yield` `hwy` on((`hwy`.`harvest_week` = week(coalesce(`f`.`harvest_date`,(`f`.`date` + interval if((`f`.`property_id` = 'EB'),52,56) day)),3)))) left join `cultivation`.`harvesting` `h` on((`h`.`flowering_id` = `f`.`id`))) where ((if((`f`.`harvest_date` is null),year((`f`.`date` + interval if((`f`.`property_id` = 'EB'),52,56) day)),year(`f`.`harvest_date`)) > 2019) and (`h`.`action` <> 'Deleted') and (`f`.`action` <> 'Deleted') and (`f`.`action` <> 'Duplicated') and (coalesce(`h`.`plant_count_harvested`,`f`.`plant_count`) <> 0))

-- View: datastudio.irrigation
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `irrigation` AS select `testing_irrigation`.`irrigation_data`.`id` AS `id`,`testing_irrigation`.`irrigation_data`.`time_stamp` AS `TimeStamp`,`testing_irrigation`.`irrigation_data`.`account` AS `Account`,`testing_irrigation`.`irrigation_data`.`user_id` AS `User`,`testing_irrigation`.`irrigation_data`.`date` AS `Date`,`testing_irrigation`.`irrigation_data`.`week_num` AS `Week`,`testing_irrigation`.`irrigation_data`.`property_id` AS `Property`,`testing_irrigation`.`irrigation_data`.`location_id` AS `location_id`,`l`.`location_string` AS `Location`,`testing_irrigation`.`irrigation_data`.`location_scan` AS `LocationScan`,`testing_irrigation`.`irrigation_data`.`location_type` AS `location_type`,`lt`.`type` AS `Location Type`,`testing_irrigation`.`irrigation_data`.`location_level2` AS `Greenhouse`,`testing_irrigation`.`irrigation_data`.`location_level3` AS `location_level3`,`testing_irrigation`.`irrigation_data`.`location_level4` AS `location_level4`,`testing_irrigation`.`irrigation_data`.`location_level5` AS `location_level5`,`testing_irrigation`.`irrigation_data`.`location_level6` AS `location_level6`,`testing_irrigation`.`irrigation_data`.`location_level7` AS `location_level7`,`testing_irrigation`.`irrigation_data`.`ec_dripper` AS `EC_Dripper`,`testing_irrigation`.`irrigation_data`.`ec_drain` AS `EC_Drain`,`testing_irrigation`.`irrigation_data`.`ph_dripper` AS `pH_Dripper`,`testing_irrigation`.`irrigation_data`.`ph_drain` AS `pH_Drain`,`testing_irrigation`.`irrigation_data`.`volume_irrigation` AS `DripVol`,`testing_irrigation`.`irrigation_data`.`volume_drainage` AS `DrainVol`,`testing_irrigation`.`irrigation_data`.`percent_drainage` AS `Overdrain`,`testing_irrigation`.`irrigation_data`.`qty_drip_plant` AS `QtyDripPerPlant`,`testing_irrigation`.`irrigation_data`.`qty_plant_drain` AS `QtyPlantPerDrain`,`testing_irrigation`.`irrigation_data`.`notes` AS `notes`,`testing_irrigation`.`irrigation_data`.`field_2` AS `Strain` from ((`testing_irrigation`.`irrigation_data` join `pacstone`.`location` `l` on((`l`.`id` = convert(`testing_irrigation`.`irrigation_data`.`location_id` using utf8mb4)))) join `pacstone`.`location_type` `lt` on((`lt`.`id` = convert(`testing_irrigation`.`irrigation_data`.`location_type` using utf8mb4))))

-- View: datastudio.meadow_inventory
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `meadow_inventory` AS select `pi`.`id` AS `id`,`pi`.`parent_id` AS `parent_id`,`pi`.`date` AS `date`,`pi`.`metrc_id` AS `metrc_id`,`pi`.`process` AS `process`,`pi`.`harvest_id` AS `harvest_id`,`pi`.`harvest_property` AS `harvest_property`,`pi`.`harvest_date` AS `harvest_date`,`pi`.`harvest_week` AS `harvest_week`,`pi`.`harvest_year` AS `harvest_year`,`pi`.`strain` AS `strain`,`pi`.`strain_type` AS `strain_type`,`pi`.`license` AS `license`,`pi`.`brand` AS `brand`,`pi`.`category` AS `category`,`pi`.`type` AS `type`,`pi`.`size` AS `size`,`pi`.`package_size` AS `package_size`,`pi`.`package_units` AS `package_units`,`pi`.`quantity` AS `quantity`,`pi`.`grade` AS `grade`,`pi`.`color` AS `color`,`pi`.`thc` AS `thc`,`pi`.`weight` AS `weight`,`pi`.`uom` AS `uom`,`pi`.`location_id` AS `location_id`,`pi`.`property` AS `property`,`pi`.`room` AS `room`,`pi`.`room_area` AS `room_area`,`pi`.`room_change_reason` AS `room_change_reason`,`pi`.`status` AS `status`,`pi`.`process_status` AS `process_status`,`pi`.`created_on` AS `created_on`,`pi`.`created_by` AS `created_by`,`pi`.`modify_on` AS `modify_on`,`pi`.`modify_by` AS `modify_by`,`pi`.`note` AS `note`,`pi`.`flag` AS `flag`,`pi`.`trigger` AS `trigger`,`pi`.`source_id` AS `source_id`,`pi`.`source_ids` AS `source_ids`,`pi`.`modified_type` AS `modified_type`,`pi`.`server_ts` AS `server_ts`,`pi`.`production_batch` AS `production_batch`,`pi`.`case_id` AS `case_id`,`pi`.`lucid_id` AS `lucid_id`,`pi`.`package_id` AS `package_id`,`pi`.`packed_date` AS `packed_date`,`pi`.`source_metrc_id` AS `source_metrc_id`,`pi`.`source_batch_id` AS `source_batch_id`,`pi`.`external_batch_id` AS `external_batch_id`,`pi`.`thc_coa` AS `thc_coa`,`pi`.`packing_stage` AS `packing_stage`,`pi`.`metrc_location` AS `metrc_location`,`pi`.`old_room` AS `old_room` from `packing`.`product_inventory` `pi` where ((`pi`.`room` = '928201') and (`pi`.`status` = 'Active') and (`pi`.`property` = 'SP'))

-- View: datastudio.old_processing_testview
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `old_processing_testview` AS select `h`.`harvest_id` AS `harvest_id`,`h`.`processing_metrc_id` AS `processing_metrc_id`,`b`.`plant_count` AS `plant_count`,`b`.`wet_weight` AS `wet_weight` from (`cultivation`.`harvesting` `h` join (select sum(`hh`.`plant_count_harvested`) AS `plant_count`,sum(`hh`.`wet`) AS `wet_weight`,`hh`.`harvest_id` AS `bhid`,`hh`.`processing_metrc_id` AS `bpmid` from `cultivation`.`harvesting` `hh` group by `hh`.`harvest_id`,`hh`.`processing_metrc_id`) `b` on(((`b`.`bhid` = `h`.`harvest_id`) and (`b`.`bpmid` = `h`.`processing_metrc_id`)))) group by `h`.`harvest_id`,`h`.`processing_metrc_id`

-- View: datastudio.packing_active_inv_jsonArray
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `packing_active_inv_jsonArray` AS select json_array('id','harvest_date','metrc_id','harvest_id','harvest_property','harvest_week','harvest_year','packed_date','strain','strain_type','license','brand','category','grade','type','package_size','size','quantity','thc','weight','property','room','room_area','status','note','thc_coa','process','process_status','sku_id','sku_name','kss_id','sku','production_batch','test_result_date') AS `Name_exp_1` union select json_array(`paiv`.`id`,`paiv`.`harvest_date`,`paiv`.`metrc_id`,`paiv`.`harvest_id`,`paiv`.`harvest_property`,`paiv`.`harvest_week`,`paiv`.`harvest_year`,`paiv`.`packed_date`,`paiv`.`strain`,`paiv`.`strain_type`,`paiv`.`license`,`paiv`.`brand`,`paiv`.`category`,`paiv`.`grade`,`paiv`.`type`,`paiv`.`package_size`,`paiv`.`size`,`paiv`.`quantity`,`paiv`.`thc`,`paiv`.`weight`,`paiv`.`property`,`paiv`.`room`,`paiv`.`room_area`,`paiv`.`status`,`paiv`.`note`,`paiv`.`thc_coa`,`paiv`.`process`,`paiv`.`process_status`,`paiv`.`sku_id`,`paiv`.`sku_name`,`paiv`.`kss_id`,`paiv`.`sku`,`paiv`.`production_batch`,`paiv`.`test_result_date`) AS `Name_exp_2` from `packing_active_inventory_view` `paiv`

-- View: datastudio.packing_active_inventory_view
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `packing_active_inventory_view` AS select `pi`.`id` AS `id`,`pi`.`harvest_date` AS `harvest_date`,`pi`.`metrc_id` AS `metrc_id`,`pi`.`harvest_id` AS `harvest_id`,`pi`.`harvest_property` AS `harvest_property`,`pi`.`harvest_week` AS `harvest_week`,`pi`.`harvest_year` AS `harvest_year`,`pi`.`packed_date` AS `packed_date`,`pi`.`strain` AS `strain`,`pi`.`strain_type` AS `strain_type`,`pi`.`license` AS `license`,`pi`.`brand` AS `brand`,`pi`.`category` AS `category`,`pi`.`grade` AS `grade`,`pi`.`type` AS `type`,`pi`.`package_size` AS `package_size`,`pi`.`size` AS `size`,`pi`.`quantity` AS `quantity`,`pi`.`thc` AS `thc`,`pi`.`weight` AS `weight`,`pi`.`property` AS `property`,if((`pi`.`property` = 'SP'),`ml`.`Name`,`pi`.`room`) AS `room`,`pi`.`room_area` AS `room_area`,`pi`.`status` AS `status`,`pi`.`note` AS `note`,`pi`.`thc_coa` AS `thc_coa`,`pi`.`process` AS `process`,`pi`.`process_status` AS `process_status`,`pi`.`sku_id` AS `sku_id`,`sku`.`name` AS `sku_name`,`sku`.`kss_id` AS `kss_id`,`sku`.`sku` AS `sku`,`pi`.`production_batch` AS `production_batch`,(case when (`pi`.`property` = 'SP') then (select max(`cte`.`test_result_date`) from `lab_testing`.`sample_latest_coa` `cte` where (`cte`.`source_batch_id` = `pi`.`source_batch_id`)) when (`pi`.`property` = 'CS') then (select max(`cte`.`test_result_date`) from `lab_testing`.`sample_latest_coa` `cte` where (`cte`.`parent_id` = `pi`.`parent_id`)) else NULL end) AS `test_result_date` from ((`packing`.`product_inventory` `pi` left join `product_sku`.`sku_view` `sku` on((`sku`.`id` = `pi`.`sku_id`))) left join `metrc`.`locations` `ml` on((`ml`.`Id` = `pi`.`room`))) where (`pi`.`status` = 'Active')

-- View: datastudio.packing_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `packing_view` AS select `packing`.`id` AS `id`,`packing`.`delivered_date` AS `Delivered date`,`packing`.`transfer_metrc_id` AS `Transfer Metrc ID`,`packing`.`harvest_id` AS `Harvest ID`,`packing`.`property` AS `Property`,`packing`.`harvest_week` AS `Harvest week`,`packing`.`harvest_year` AS `Harvest year`,`packing`.`strain` AS `Strain`,`packing`.`license_number` AS `License`,`packing`.`batch_type` AS `Batch type`,`packing`.`delivered_weight` AS `Delivered`,`packing`.`received_weight` AS `Received`,`packing`.`delivered_bins` AS `Delivered bins`,`packing`.`received_bins` AS `Received bins`,`packing`.`quality_flower` AS `Quality Flower`,`packing`.`quality_trim` AS `Quality Trim`,`packing`.`quality_mold` AS `Quality Mold`,`packing`.`all_correct` AS `All correct`,`packing`.`field_1` AS `Harvest date`,`packing`.`field_2` AS `Waste metrc`,`packing`.`field_3` AS `Status`,`packing`.`field_4` AS `Product`,`packing`.`year_week` AS `Year-Week`,`packing`.`processing_flower` AS `Processed`,`packing`.`transfer_shrink_percent` AS `Transfer Shrink %`,`packing`.`sorter_regs` AS `Sorter - Regs`,`packing`.`sorter_bigs` AS `Sorter - Bigs`,`packing`.`sorter_smalls` AS `Sorter - Smalls`,`packing`.`sorter_shake` AS `Sorter - Shake`,`packing`.`sorter_trim` AS `Sorter - Trim`,`packing`.`sorter_waste` AS `Sorter - Waste`,`packing`.`sorter_kief` AS `Sorter - Kief`,`packing`.`sorter_total` AS `Total sorted`,`packing`.`sorter_moisture_loss_percent` AS `Sorter Moisture Loss %`,`packing`.`to_pack_flower` AS `To Flower Packing`,`packing`.`to_pack_prerroll` AS `To Pre-roll Packing`,`packing`.`in_queue` AS `Flower TBD`,`packing`.`sorter_flower` AS `Sorter - Flower`,`packing`.`sorter_byproducts` AS `Sorter - Byproducts`,`packing`.`plant_count` AS `Plant count`,`packing`.`flower_produced` AS `Produced Flower`,`packing`.`preroll_produced` AS `Produced Pre-roll`,`packing`.`sorter_regs_percent` AS `Sorter  - Regs %`,`packing`.`sorter_bigs_percent` AS `Sorter - Bigs %`,`packing`.`sorter_smalls_percent` AS `Sorter - Smalls %`,`packing`.`sorter_shake_percent` AS `Sorter - Shake %`,`packing`.`sorter_trim_percent` AS `Sorter - Trim %`,`packing`.`sorter_kief_percent` AS `Sorter - Kief %`,`packing`.`sorter_waste_percent` AS `Sorter - Waste %`,`packing`.`sorter_mold` AS `Sorter - Mold`,`packing`.`sorter_mold_percent` AS `Sorter - Mold %`,`packing`.`sorter_flower_percent` AS `Sorter - Flower %`,`packing`.`sorter_byproducts_percent` AS `Sorter - Byproducts %`,`packing`.`flower_packing_shrink` AS `Flower produced shrink %`,`packing`.`preroll_packing_shrink` AS `Pre-roll produced shrink %`,`packing`.`to_wholesale_flower` AS `To Wholesale`,`packing`.`in_storage` AS `In Storage`,`packing`.`produced_shrink` AS `Produced shrink %`,`packing`.`byproducts_packing` AS `Packing - Byproducts`,`packing`.`produced_total` AS `Total produced`,`packing`.`sorter_oz_plant` AS `Sorter - oz/plant`,`packing`.`packing_oz_plant` AS `Packing - oz/plant`,`packing`.`qty_sorter_batches` AS `Sorter - Qty batches`,`packing`.`qty_packed_batches` AS `Packed - Qty batches`,`packing`.`qty_sold_batches` AS `Sold - Qty batches`,`packing`.`waste_packing` AS `Packing - Waste`,`packing`.`shake_packing` AS `Packing - Shake`,`packing`.`mold_packing` AS `Packing - Mold`,`packing`.`bg_packing` AS `Packing - BG`,`packing`.`flower_packed` AS `Packed Flower`,`packing`.`preroll_packed` AS `Packed Pre-roll`,`packing`.`packed` AS `Total packed` from `packing`

-- View: datastudio.process_bucking_details
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `process_bucking_details` AS select `pd`.`processing_metrc_id` AS `processing_metrc_id`,`pd`.`harvest_id` AS `harvest_id`,`pd`.`harvest_base_name` AS `harvest_base_name`,`pd`.`strain_id` AS `strain_id`,`pd`.`strain_name` AS `strain_name`,`pd`.`property_id` AS `property_id`,`pd`.`harvest_date` AS `harvest_date`,`pd`.`harvest_week` AS `harvest_week`,`pd`.`harvest_year` AS `harvest_year`,`pd`.`harvest_year_week` AS `harvest_year_week`,`pd`.`license_id` AS `license_id`,`pd`.`test_id` AS `test_id`,`pd`.`planted_count` AS `planted_count`,`pd`.`harvested_count` AS `harvested_count`,`pd`.`dry_weight` AS `dry_weight`,`pd`.`bucked_weight` AS `bucked_weight`,`pd`.`bucked_waste` AS `bucked_waste`,`pd`.`bucked_waste_pct` AS `bucked_waste_pct`,`pd`.`bucked_weight_oz_plant` AS `bucked_weight_oz_plant`,`pd`.`bucked_weight_oz_plant_h` AS `bucked_weight_oz_plant_h`,`pd`.`buck_loss_pct_deviation` AS `buck_loss_pct_deviation` from `process_details_metrics_MV` `pd`

-- View: datastudio.process_details_metrics
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `process_details_metrics` AS select `t`.`processing_metrc_id` AS `processing_metrc_id`,`t`.`harvest_id` AS `harvest_id`,`t`.`harvest_base_name` AS `harvest_base_name`,`t`.`strain_id` AS `strain_id`,`ps`.`name` AS `strain_name`,`t`.`property_id` AS `property_id`,`t`.`harvest_date` AS `harvest_date`,`t`.`harvest_week` AS `harvest_week`,`t`.`harvest_year` AS `harvest_year`,`t`.`harvest_year_week` AS `harvest_year_week`,`t`.`license_id` AS `license_id`,`t`.`test_id` AS `test_id`,`t`.`planted_count` AS `planted_count`,if((`t`.`harvest_type` = 'manicure'),0,(`t`.`planted_count` - `t`.`harvested_count`)) AS `plants_lost`,`t`.`harvested_count` AS `harvested_count`,`t`.`wet_weight` AS `wet_weight`,`t`.`wet_waste_weight` AS `wet_waste_weight`,if((`t`.`wet_weight` = 0),0,(`t`.`wet_waste_weight` / `t`.`wet_weight`)) AS `wet_waste_pct`,if((`t`.`planted_count` = 0),0,((`t`.`wet_weight` / `t`.`planted_count`) * 16)) AS `wet_weight_oz_plant`,if((`t`.`harvested_count` = 0),0,((`t`.`wet_weight` / `t`.`harvested_count`) * 16)) AS `wet_weight_oz_plant_h`,`t`.`dry_weight` AS `dry_weight`,(`t`.`wet_weight` - `t`.`dry_weight`) AS `drying_loss`,if((`t`.`wet_weight` = 0),0,(1 - (`t`.`dry_weight` / `t`.`wet_weight`))) AS `drying_loss_pct`,if((`t`.`planted_count` = 0),0,((`t`.`dry_weight` / `t`.`planted_count`) * 16)) AS `dry_weight_oz_plant`,if((`t`.`harvested_count` = 0),0,((`t`.`dry_weight` / `t`.`harvested_count`) * 16)) AS `dry_weight_oz_plant_h`,`t`.`bucked_weight` AS `bucked_weight`,(`t`.`dry_weight` - `t`.`bucked_weight`) AS `bucked_waste`,if((`t`.`dry_weight` = 0),0,(1 - (`t`.`bucked_weight` / `t`.`dry_weight`))) AS `bucked_waste_pct`,if((`t`.`planted_count` = 0),0,((`t`.`bucked_weight` / `t`.`planted_count`) * 16)) AS `bucked_weight_oz_plant`,if((`t`.`harvested_count` = 0),0,((`t`.`bucked_weight` / `t`.`harvested_count`) * 16)) AS `bucked_weight_oz_plant_h`,`t`.`tzero_a` AS `tzero_a`,`t`.`tzero_b` AS `tzero_b`,(`t`.`tzero_a` + `t`.`tzero_b`) AS `tzero_ab`,if((`t`.`bucked_weight` = 0),0,((`t`.`tzero_a` + `t`.`tzero_b`) / `t`.`bucked_weight`)) AS `tzero_ab_yield_pct`,if((`t`.`planted_count` = 0),0,(((`t`.`tzero_a` + `t`.`tzero_b`) / `t`.`planted_count`) * 16)) AS `tzero_ab_oz_plant`,if((`t`.`harvested_count` = 0),0,(((`t`.`tzero_a` + `t`.`tzero_b`) / `t`.`harvested_count`) * 16)) AS `tzero_ab_oz_plant_h`,`t`.`tzero_c` AS `tzero_c`,((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) AS `tzero_abc`,if((`t`.`bucked_weight` = 0),0,(((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) / `t`.`bucked_weight`)) AS `tzero_abc_yield_pct`,if((`t`.`planted_count` = 0),0,((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) / `t`.`planted_count`) * 16)) AS `tzero_abc_oz_plant`,if((`t`.`harvested_count` = 0),0,((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) / `t`.`harvested_count`) * 16)) AS `tzero_abc_oz_plant_h`,`t`.`tzero_trim` AS `tzero_trim`,`t`.`tzero_shake` AS `tzero_shake`,((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`) AS `tzero_abc_trim_shake`,`t`.`tzero_waste` AS `tzero_waste`,(((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`) + `t`.`tzero_waste`) AS `tzero_total`,(`t`.`bucked_weight` - (((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`) + `t`.`tzero_waste`)) AS `tzero_misc_loss`,if((`t`.`bucked_weight` = 0),0,((`t`.`bucked_weight` - (((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`) + `t`.`tzero_waste`)) / `t`.`bucked_weight`)) AS `tzero_misc_loss_pct`,(`t`.`bucked_weight` - ((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`)) AS `tzero_total_loss`,if((`t`.`bucked_weight` = 0),0,((`t`.`bucked_weight` - ((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`)) / `t`.`bucked_weight`)) AS `tzero_total_loss_pct`,if((`t`.`planted_count` = 0),0,((`t`.`tzero_trim` / `t`.`planted_count`) * 16)) AS `tzero_trim_oz_plant`,if((`t`.`harvested_count` = 0),0,((`t`.`tzero_trim` / `t`.`harvested_count`) * 16)) AS `tzero_trim_oz_plant_h`,if((`t`.`bucked_weight` = 0),0,(`t`.`tzero_trim` / `t`.`bucked_weight`)) AS `total_batch_trim_pct`,if((`t`.`wet_weight` = 0),0,(1 - (((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`) / `t`.`wet_weight`))) AS `total_batch_weight_loss_pct` from (`harvest_base_processing_sorter` `t` left join `pacstone`.`plant_strain` `ps` on((`ps`.`id` = `t`.`strain_id`))) where (`t`.`harvest_status` = 'Completed')

-- View: datastudio.process_drying_details
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `process_drying_details` AS select `pd`.`processing_metrc_id` AS `processing_metrc_id`,`pd`.`harvest_id` AS `harvest_id`,`pd`.`harvest_base_name` AS `harvest_base_name`,`pd`.`strain_id` AS `strain_id`,`pd`.`strain_name` AS `strain_name`,`pd`.`property_id` AS `property_id`,`pd`.`harvest_date` AS `harvest_date`,`pd`.`harvest_week` AS `harvest_week`,`pd`.`harvest_year` AS `harvest_year`,`pd`.`harvest_year_week` AS `harvest_year_week`,`pd`.`license_id` AS `license_id`,`pd`.`test_id` AS `test_id`,`pd`.`planted_count` AS `planted_count`,`pd`.`plants_lost` AS `plants_lost`,`pd`.`harvested_count` AS `harvested_count`,`pd`.`wet_weight` AS `wet_weight`,`pd`.`dry_weight` AS `dry_weight`,`pd`.`drying_loss` AS `drying_loss`,`pd`.`drying_loss_pct` AS `drying_loss_pct`,`pd`.`dry_weight_oz_plant` AS `dry_weight_oz_plant`,`pd`.`dry_weight_oz_plant_h` AS `dry_weight_oz_plant_h`,`pd`.`bucked_weight` AS `bucked_weight` from `process_details_metrics_MV` `pd` where (`pd`.`dry_weight` > 0)

-- View: datastudio.process_harvest_details
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `process_harvest_details` AS select `pd`.`processing_metrc_id` AS `processing_metrc_id`,`pd`.`harvest_id` AS `harvest_id`,`pd`.`harvest_base_name` AS `harvest_base_name`,`pd`.`strain_id` AS `strain_id`,`pd`.`strain_name` AS `strain_name`,`pd`.`property_id` AS `property_id`,`pd`.`harvest_date` AS `harvest_date`,`pd`.`harvest_week` AS `harvest_week`,`pd`.`harvest_year` AS `harvest_year`,`pd`.`harvest_year_week` AS `harvest_year_week`,`pd`.`license_id` AS `license_id`,`pd`.`test_id` AS `test_id`,`pd`.`planted_count` AS `planted_count`,`pd`.`plants_lost` AS `plants_lost`,`pd`.`harvested_count` AS `harvested_count`,`pd`.`wet_weight` AS `wet_weight`,`pd`.`wet_waste_weight` AS `wet_waste_weight`,`pd`.`wet_waste_pct` AS `wet_waste_pct`,`pd`.`wet_weight_oz_plant` AS `wet_weight_oz_plant`,`pd`.`wet_weight_oz_plant_h` AS `wet_weight_oz_plant_h`,`pd`.`dry_weight` AS `dry_weight` from `process_details_metrics_MV` `pd`

-- View: datastudio.process_metrics
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `process_metrics` AS select `t`.`harvest_base_name` AS `harvest_base_name`,`t`.`strain_id` AS `strain_id`,`ps`.`name` AS `strain_name`,`t`.`property_id` AS `property_id`,`t`.`harvest_date` AS `harvest_date`,`t`.`harvest_week` AS `harvest_week`,`t`.`harvest_year` AS `harvest_year`,`t`.`harvest_year_week` AS `harvest_year_week`,`t`.`license_id` AS `license_id`,`t`.`planted_count` AS `planted_count`,(`t`.`planted_count` - `t`.`harvested_count`) AS `plants_lost`,`t`.`harvested_count` AS `harvested_count`,`t`.`wet_weight` AS `wet_weight`,`t`.`wet_waste_weight` AS `wet_waste_weight`,if((`t`.`wet_weight` = 0),0,(`t`.`wet_waste_weight` / `t`.`wet_weight`)) AS `wet_waste_pct`,if((`t`.`planted_count` = 0),0,((`t`.`wet_weight` / `t`.`planted_count`) * 16)) AS `wet_weight_oz_plant`,if((`t`.`harvested_count` = 0),0,((`t`.`wet_weight` / `t`.`harvested_count`) * 16)) AS `wet_weight_oz_plant_h`,`t`.`dry_weight` AS `dry_weight`,(`t`.`wet_weight` - `t`.`dry_weight`) AS `drying_loss`,if((`t`.`wet_weight` = 0),0,(1 - (`t`.`dry_weight` / `t`.`wet_weight`))) AS `drying_loss_pct`,if((`t`.`planted_count` = 0),0,((`t`.`dry_weight` / `t`.`planted_count`) * 16)) AS `dry_weight_oz_plant`,if((`t`.`harvested_count` = 0),0,((`t`.`dry_weight` / `t`.`harvested_count`) * 16)) AS `dry_weight_oz_plant_h`,`t`.`bucked_weight` AS `bucked_weight`,(`t`.`dry_weight` - `t`.`bucked_weight`) AS `bucked_waste`,if((`t`.`dry_weight` = 0),0,(1 - (`t`.`bucked_weight` / `t`.`dry_weight`))) AS `bucked_waste_pct`,if((`t`.`planted_count` = 0),0,((`t`.`bucked_weight` / `t`.`planted_count`) * 16)) AS `bucked_weight_oz_plant`,if((`t`.`harvested_count` = 0),0,((`t`.`bucked_weight` / `t`.`harvested_count`) * 16)) AS `bucked_weight_oz_plant_h`,`t`.`tzero_a` AS `tzero_a`,`t`.`tzero_b` AS `tzero_b`,(`t`.`tzero_a` + `t`.`tzero_b`) AS `tzero_ab`,if((`t`.`bucked_weight` = 0),0,((`t`.`tzero_a` + `t`.`tzero_b`) / `t`.`bucked_weight`)) AS `tzero_ab_yield_pct`,if((`t`.`planted_count` = 0),0,(((`t`.`tzero_a` + `t`.`tzero_b`) / `t`.`planted_count`) * 16)) AS `tzero_ab_oz_plant`,if((`t`.`harvested_count` = 0),0,(((`t`.`tzero_a` + `t`.`tzero_b`) / `t`.`harvested_count`) * 16)) AS `tzero_ab_oz_plant_h`,`t`.`tzero_c` AS `tzero_c`,((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) AS `tzero_abc`,if((`t`.`bucked_weight` = 0),0,(((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) / `t`.`bucked_weight`)) AS `tzero_abc_yield_pct`,if((`t`.`planted_count` = 0),0,((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) / `t`.`planted_count`) * 16)) AS `tzero_abc_oz_plant`,if((`t`.`harvested_count` = 0),0,((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) / `t`.`harvested_count`) * 16)) AS `tzero_abc_oz_plant_h`,`t`.`tzero_trim` AS `tzero_trim`,`t`.`tzero_shake` AS `tzero_shake`,((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`) AS `tzero_abc_trim_shake`,`t`.`tzero_waste` AS `tzero_waste`,(((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`) + `t`.`tzero_waste`) AS `tzero_total`,(`t`.`bucked_weight` - (((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`) + `t`.`tzero_waste`)) AS `tzero_misc_loss`,if((`t`.`bucked_weight` = 0),0,((`t`.`bucked_weight` - (((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`) + `t`.`tzero_waste`)) / `t`.`bucked_weight`)) AS `tzero_misc_loss_pct`,(`t`.`bucked_weight` - ((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`)) AS `tzero_total_loss`,if((`t`.`bucked_weight` = 0),0,((`t`.`bucked_weight` - ((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`)) / `t`.`bucked_weight`)) AS `tzero_total_loss_pct`,if((`t`.`planted_count` = 0),0,((`t`.`tzero_trim` / `t`.`planted_count`) * 16)) AS `tzero_trim_oz_plant`,if((`t`.`harvested_count` = 0),0,((`t`.`tzero_trim` / `t`.`harvested_count`) * 16)) AS `tzero_trim_oz_plant_h`,if((`t`.`bucked_weight` = 0),0,(`t`.`tzero_trim` / `t`.`bucked_weight`)) AS `total_batch_trim_pct`,if((`t`.`wet_weight` = 0),0,(((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`) / `t`.`wet_weight`)) AS `total_batch_weight_loss_pct`,if((`t`.`planted_count` = 0),0,least(4,ceiling((abs((((`t`.`wet_weight` / `t`.`planted_count`) * 16) - (select `crop_metric_threshold`.`m` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'wet_oz')))) / (select `crop_metric_threshold`.`mad` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'wet_oz')))))) AS `wet_oz_deviation`,if((`t`.`planted_count` = 0),0,least(4,ceiling((abs((((`t`.`dry_weight` / `t`.`planted_count`) * 16) - (select `crop_metric_threshold`.`m` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'dry_oz')))) / (select `crop_metric_threshold`.`mad` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'dry_oz')))))) AS `dry_oz_deviation`,if((`t`.`planted_count` = 0),0,least(4,ceiling((abs((((`t`.`bucked_weight` / `t`.`planted_count`) * 16) - (select `crop_metric_threshold`.`m` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'buck_oz')))) / (select `crop_metric_threshold`.`mad` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'buck_oz')))))) AS `buck_oz_deviation`,if((`t`.`planted_count` = 0),0,least(4,ceiling((abs(((((`t`.`tzero_a` + `t`.`tzero_b`) / `t`.`planted_count`) * 16) - (select `crop_metric_threshold`.`m` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'flower_ab_oz')))) / (select `crop_metric_threshold`.`mad` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'flower_ab_oz')))))) AS `flower_ab_oz_deviation`,if((`t`.`planted_count` = 0),0,least(4,ceiling((abs((((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) / `t`.`planted_count`) * 16) - (select `crop_metric_threshold`.`m` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'flower_abc_oz')))) / (select `crop_metric_threshold`.`mad` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'flower_abc_oz')))))) AS `flower_abc_oz_deviation`,if((`t`.`planted_count` = 0),0,least(4,ceiling((abs((((`t`.`tzero_trim` / `t`.`planted_count`) * 16) - (select `crop_metric_threshold`.`m` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'trim_oz')))) / (select `crop_metric_threshold`.`mad` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'trim_oz')))))) AS `trim_oz_deviation`,if((`t`.`wet_weight` = 0),0,least(4,ceiling((abs(((1 - (`t`.`dry_weight` / `t`.`wet_weight`)) - (select `crop_metric_threshold`.`m` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'dry_loss_pct')))) / (select `crop_metric_threshold`.`mad` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'dry_loss_pct')))))) AS `dry_loss_pct_deviation`,if((`t`.`dry_weight` = 0),0,least(4,ceiling((abs(((1 - (`t`.`bucked_weight` / `t`.`dry_weight`)) - (select `crop_metric_threshold`.`m` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'buck_loss_pct')))) / (select `crop_metric_threshold`.`mad` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'buck_loss_pct')))))) AS `buck_loss_pct_deviation`,if((`t`.`bucked_weight` = 0),0,least(4,ceiling((abs((((`t`.`bucked_weight` - ((((`t`.`tzero_a` + `t`.`tzero_b`) + `t`.`tzero_c`) + `t`.`tzero_trim`) + `t`.`tzero_shake`)) / `t`.`bucked_weight`) - (select `crop_metric_threshold`.`m` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'trim_loss_pct')))) / (select `crop_metric_threshold`.`mad` from `crop_metric_threshold` where (`crop_metric_threshold`.`id` = 'trim_loss_pct')))))) AS `trim_loss_pct_deviation` from (`crop_rollup` `t` left join `pacstone`.`plant_strain` `ps` on((`ps`.`id` = `t`.`strain_id`)))

-- View: datastudio.process_trimming_details
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `process_trimming_details` AS select `pd`.`processing_metrc_id` AS `processing_metrc_id`,`pd`.`harvest_id` AS `harvest_id`,`pd`.`harvest_base_name` AS `harvest_base_name`,`pd`.`strain_id` AS `strain_id`,`pd`.`strain_name` AS `strain_name`,`pd`.`property_id` AS `property_id`,`pd`.`harvest_date` AS `harvest_date`,`pd`.`harvest_week` AS `harvest_week`,`pd`.`harvest_year` AS `harvest_year`,`pd`.`harvest_year_week` AS `harvest_year_week`,`pd`.`license_id` AS `license_id`,`pd`.`test_id` AS `test_id`,`pd`.`planted_count` AS `planted_count`,`pd`.`harvested_count` AS `harvested_count`,`pd`.`bucked_weight` AS `bucked_weight`,`pd`.`tzero_a` AS `tzero_a`,`pd`.`tzero_b` AS `tzero_b`,`pd`.`tzero_ab` AS `tzero_ab`,`pd`.`tzero_ab_yield_pct` AS `tzero_ab_yield_pct`,`pd`.`tzero_ab_oz_plant` AS `tzero_ab_oz_plant`,`pd`.`tzero_ab_oz_plant_h` AS `tzero_ab_oz_plant_h`,`pd`.`tzero_c` AS `tzero_c`,`pd`.`tzero_abc` AS `tzero_abc`,`pd`.`tzero_abc_yield_pct` AS `tzero_abc_yield_pct`,`pd`.`tzero_abc_oz_plant` AS `tzero_abc_oz_plant`,`pd`.`tzero_abc_oz_plant_h` AS `tzero_abc_oz_plant_h`,`pd`.`tzero_trim` AS `tzero_trim`,`pd`.`tzero_shake` AS `tzero_shake`,`pd`.`tzero_abc_trim_shake` AS `tzero_abc_trim_shake`,`pd`.`tzero_waste` AS `tzero_waste`,`pd`.`tzero_total` AS `tzero_total`,`pd`.`tzero_misc_loss` AS `tzero_misc_loss`,`pd`.`tzero_misc_loss_pct` AS `tzero_misc_loss_pct`,`pd`.`tzero_total_loss` AS `tzero_total_loss`,`pd`.`tzero_total_loss_pct` AS `tzero_total_loss_pct`,`pd`.`tzero_trim_oz_plant` AS `tzero_trim_oz_plant`,`pd`.`tzero_trim_oz_plant_h` AS `tzero_trim_oz_plant_h`,`pd`.`total_batch_trim_pct` AS `total_batch_trim_pct`,`pd`.`total_batch_weight_loss_pct` AS `total_batch_weight_loss_pct`,`pd`.`trim_loss_pct_deviation` AS `trim_loss_pct_deviation` from `process_details_metrics_MV` `pd`

-- View: datastudio.processing_aggregation_test_v2
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `processing_aggregation_test_v2` AS select max(`cultivation`.`harvesting`.`harvest_id`) AS `HarvestID`,`cultivation`.`harvesting`.`processing_metrc_id` AS `processing_metrc_id`,sum(`cultivation`.`harvesting`.`wet`) AS `WetWeight`,max(`cultivation`.`harvesting`.`strain_id`) AS `strain`,sum(`cultivation`.`harvesting`.`plant_count_harvested`) AS `plant_count` from `cultivation`.`harvesting` group by `cultivation`.`harvesting`.`harvest_id`,`cultivation`.`harvesting`.`processing_metrc_id`

-- View: datastudio.processing_delta_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `processing_delta_view` AS select `p`.`strain_id` AS `strain_id`,`p`.`harvest_week` AS `week_num`,`p`.`harvest_year` AS `year_num`,`p`.`year_week` AS `year_week`,`p`.`harvest_date` AS `harvest_date`,`p`.`property` AS `property_id`,`p`.`harvest_id` AS `harvest_id`,`p`.`plant_count` AS `plant_count`,(((((`p`.`big_a_flower_output` + `p`.`reg_a_flower_output`) + `p`.`sml_a_flower_output`) + `p`.`b_flower_output`) + `p`.`retrim_a_output`) + `p`.`retrim_b_output`) AS `tzero_a_b_retrim`,(`p`.`c_flower_output` + `p`.`retrim_c_output`) AS `tzero_c`,`p`.`trim_output` AS `tzero_trim`,`p`.`sugar_shake_output` AS `tzero_shake`,`p`.`total_waste_output` AS `tzero_waste`,((`p`.`input_qty` - `p`.`output_qty`) / `p`.`input_qty`) AS `tzero_shrink`,`p`.`process_action` AS `tzero_flower_status`,if((`p`.`harvest_year` = 2021),((((((`p`.`big_a_flower_output` + `p`.`reg_a_flower_output`) + `p`.`sml_a_flower_output`) + `p`.`b_flower_output`) + `p`.`retrim_a_output`) + `p`.`retrim_b_output`) * 16),0) AS `2021_total_oz`,if((`p`.`harvest_year` = 2021),`p`.`plant_count`,0) AS `2021_plants`,if((`p`.`harvest_year` = 2022),((((((`p`.`big_a_flower_output` + `p`.`reg_a_flower_output`) + `p`.`sml_a_flower_output`) + `p`.`b_flower_output`) + `p`.`retrim_a_output`) + `p`.`retrim_b_output`) * 16),0) AS `2022_total_oz`,if((`p`.`harvest_year` = 2022),`p`.`plant_count`,0) AS `2022_plants`,if((`p`.`harvest_year` = 2023),((((((`p`.`big_a_flower_output` + `p`.`reg_a_flower_output`) + `p`.`sml_a_flower_output`) + `p`.`b_flower_output`) + `p`.`retrim_a_output`) + `p`.`retrim_b_output`) * 16),0) AS `2023_total_oz`,if((`p`.`harvest_year` = 2023),`p`.`plant_count`,0) AS `2023_plants`,if((`p`.`harvest_year` = 2024),((((((`p`.`big_a_flower_output` + `p`.`reg_a_flower_output`) + `p`.`sml_a_flower_output`) + `p`.`b_flower_output`) + `p`.`retrim_a_output`) + `p`.`retrim_b_output`) * 16),0) AS `2024_total_oz`,if((`p`.`harvest_year` = 2024),`p`.`plant_count`,0) AS `2024_plants` from `processing`.`trimming_t0_report` `p` where (`p`.`harvest_week` in (select `trimming_t0_report`.`harvest_week` from `processing`.`trimming_t0_report` group by `trimming_t0_report`.`harvest_week`) and (right(`p`.`harvest_id`,2) <> '-M'))

-- View: datastudio.processing_finished_weeks
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `processing_finished_weeks` AS select `processing`.`week_num` AS `week_num`,`processing`.`year_num` AS `year_num`,concat(`processing`.`year_num`,'-',`processing`.`week_num`) AS `year_week` from `processing` group by `processing`.`week_num`,`processing`.`year_num` having (sum(if(((`processing`.`tzero_flower_status` <> 'Finished') and (right(`processing`.`harvest_id`,2) <> '-M')),1,0)) = 0) order by `processing`.`year_num` desc,`processing`.`week_num` desc

-- View: datastudio.processing_last_completed_week
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `processing_last_completed_week` AS select `processing_delta_view`.`strain_id` AS `strain_id`,`processing_delta_view`.`week_num` AS `week_num`,`processing_delta_view`.`year_num` AS `year_num`,`processing_delta_view`.`year_week` AS `year_week`,`processing_delta_view`.`harvest_date` AS `harvest_date`,`processing_delta_view`.`harvest_id` AS `harvest_id`,`processing_delta_view`.`plant_count` AS `planted_count`,`processing_delta_view`.`property_id` AS `property_id` from `processing_delta_view` where ((select max(`processing_delta_view`.`year_week`) from `processing_delta_view`) in (`processing_delta_view`.`year_week`,(`processing_delta_view`.`year_week` + 100),(`processing_delta_view`.`year_week` + 200)))

-- View: datastudio.processing_latest_week
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `processing_latest_week` AS select `processing_delta_view`.`strain_id` AS `strain_id`,`processing_delta_view`.`week_num` AS `week_num`,`processing_delta_view`.`year_num` AS `year_num`,`processing_delta_view`.`year_week` AS `year_week`,`processing_delta_view`.`harvest_date` AS `harvest_date`,`processing_delta_view`.`harvest_id` AS `harvest_id`,`processing_delta_view`.`plant_count` AS `plant_count`,`processing_delta_view`.`tzero_a_b_retrim` AS `tzero_a_b_retrim`,`processing_delta_view`.`tzero_c` AS `tzero_c`,`processing_delta_view`.`tzero_trim` AS `tzero_trim`,`processing_delta_view`.`tzero_waste` AS `tzero_waste`,`processing_delta_view`.`tzero_shrink` AS `tzero_shrink`,`processing_delta_view`.`tzero_flower_status` AS `tzero_flower_status`,`processing_delta_view`.`2021_total_oz` AS `2021_total_oz`,`processing_delta_view`.`2022_total_oz` AS `2022_total_oz`,`processing_delta_view`.`2023_total_oz` AS `2023_total_oz`,`processing_delta_view`.`2021_plants` AS `2021_plants`,`processing_delta_view`.`2022_plants` AS `2022_plants`,`processing_delta_view`.`2023_plants` AS `2023_plants`,`processing_delta_view`.`property_id` AS `property_id` from `processing_delta_view` where ((select max(`processing_delta_view`.`year_week`) from `processing_delta_view`) in (`processing_delta_view`.`year_week`,(`processing_delta_view`.`year_week` + 100),(`processing_delta_view`.`year_week` + 200)))

-- View: datastudio.processing_view
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `processing_view` AS select `processing`.`id` AS `id`,`processing`.`test_id` AS `test_id`,`processing`.`harvest_id` AS `HarvestID`,`processing`.`flowering_id` AS `flowering_id`,`processing`.`property_id` AS `Property`,`processing`.`date` AS `HarvestDate`,`processing`.`week_num` AS `HarvestWeek`,`processing`.`year_num` AS `HarvestYear`,`processing`.`license_id` AS `License`,`processing`.`strain_id` AS `Strain`,`processing`.`plant_count` AS `plant_count`,`processing`.`wet_weight` AS `Wet_Weight`,`processing`.`dry_weight` AS `Dry`,`processing`.`bucked_weight` AS `Bucked`,`processing`.`tzero_a` AS `TzeroA`,`processing`.`tzero_b` AS `TzeroB`,`processing`.`retrim_in` AS `TZeroA_Retrim`,`processing`.`tzero_a_b_retrim` AS `Tzero_A+B_Retrim`,`processing`.`tzero_c` AS `TzeroC`,`processing`.`tzero_waste` AS `Tzero_Waste`,`processing`.`tzero_trim` AS `Tzero_Trim`,`processing`.`tzero_oz_plant` AS `TZero_oz/plant`,`processing`.`tzero_shrink` AS `TZero_Shrink`,`processing`.`retrim_a` AS `RetrimA`,`processing`.`retrim_b` AS `RetrimB`,`processing`.`retrim_c` AS `RetrimC`,`processing`.`b_revision_in` AS `b_revision_in`,`processing`.`c_revision_in` AS `c_revision_in`,`processing`.`b_revision_a` AS `b_revision_a`,`processing`.`b_revision_b` AS `b_revision_b`,`processing`.`b_revision_c` AS `b_revision_c`,`processing`.`c_revision_a` AS `c_revision_a`,`processing`.`c_revision_b` AS `c_revision_b`,`processing`.`c_revision_c` AS `c_revision_c`,`processing`.`grade_a` AS `GradeA`,`processing`.`grade_b` AS `GradeB`,`processing`.`grade_c` AS `GradeC`,`processing`.`shake` AS `Shake`,`processing`.`waste_batch` AS `Waste`,`processing`.`ratio_tzero_flower` AS `Ratio_Tzero_A+B`,`processing`.`ratio_retrim_in` AS `Ratio_Retrim`,`processing`.`ratio_tzero_trim` AS `Ratio_Tzero_Trim`,`processing`.`ratio_tzero_mold` AS `Ratio_Tzero_C`,`processing`.`ratio_tzero_waste` AS `Ratio_Tzero_Waste`,`processing`.`oz_per_plant` AS `oz/plant`,`processing`.`ratio_grade_a_b` AS `ratio_grade_a_b`,`processing`.`ratio_grade_c` AS `ratio_grade_c`,`processing`.`ratio_waste` AS `ratio_waste`,`processing`.`ratio_shake` AS `ratio_shake`,`processing`.`processing_shrink` AS `Processing_Shrink`,`processing`.`dry_status` AS `dry_status`,`processing`.`bucked_status` AS `bucked_status`,`processing`.`tzero_flower_status` AS `tzero_flower_status`,`processing`.`tzero_trim_status` AS `tzero_trim_status`,`processing`.`retrim_status` AS `retrim_status`,`processing`.`revisions_status` AS `revisions_status`,`processing`.`batch_status` AS `batch_status`,`processing`.`post_drying_loss` AS `post_drying_loss`,`processing`.`post_bucking_loss` AS `post_bucking_loss`,`processing`.`post_tzero_loss` AS `post_tzero_loss`,`processing`.`overall_loss` AS `overall_loss`,`processing`.`post_drying_loss_percent` AS `post_drying_loss_percent`,`processing`.`post_bucking_loss_percent` AS `post_bucking_loss_percent`,`processing`.`overall_bucking_loss_percent` AS `overall_bucking_loss_percent`,`processing`.`post_tzero_loss_percent` AS `post_tzero_loss_percent`,`processing`.`overall_loss_percent` AS `overall_loss_percent`,`processing`.`overall_post_tzero_loss_percent` AS `overall_post_tzero_loss_percent`,`processing`.`batch_m2` AS `batch_m2`,`processing`.`plant_m2` AS `plant_m2`,`processing`.`oz_m2` AS `oz_m2`,`processing`.`temp` AS `temp` from `processing`

-- View: datastudio.production_summary
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `production_summary` AS select `bp`.`flowering_batch` AS `flowering_batch`,`bp`.`harvest_batch` AS `harvest_batch`,`bp`.`test_id` AS `test_id`,`bp`.`harvest_batch_test_id` AS `harvest_batch_test_id`,`bp`.`property_id` AS `property_id`,`bp`.`strain_id` AS `strain_id`,`bp`.`strain_name` AS `strain_name`,`bp`.`core_strain` AS `core_strain`,`bp`.`harvest_date` AS `harvest_date`,`bp`.`harvest_week` AS `harvest_week`,`bp`.`harvest_quarter` AS `harvest_quarter`,`bp`.`harvest_year` AS `harvest_year`,`bp`.`harvested_count` AS `harvested_count`,`bp`.`input_date_tzero` AS `input_date_tzero`,`bp`.`input_tzero` AS `input_tzero`,`bp`.`output_tzero` AS `output_tzero`,`bp`.`total_a_bigs` AS `total_a_bigs`,`bp`.`total_a_mids` AS `total_a_mids`,`bp`.`total_a_smalls` AS `total_a_smalls`,`bp`.`total_a_micros` AS `total_a_micros`,`bp`.`total_a_regs` AS `total_a_regs`,`bp`.`total_b` AS `total_b`,`bp`.`total_c` AS `total_c`,`bp`.`total_shake` AS `total_shake`,`bp`.`total_trim` AS `total_trim`,`bp`.`total_kief` AS `total_kief`,`bp`.`total_waste` AS `total_waste`,`bp`.`total` AS `total`,`bp`.`pct_completed` AS `pct_completed`,`bp`.`oz_plant_h` AS `ab_oz_plant`,round(((`bp`.`total_a_bigs` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `bigs_a_oz_plant`,round(((`bp`.`total_a_mids` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `mids_a_oz_plant`,round(((`bp`.`total_a_smalls` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `smalls_a_oz_plant`,round(((`bp`.`total_a_micros` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `micros_a_oz_plant`,round(((`bp`.`total_a_regs` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `regs_a_oz_plant`,round(((`bp`.`total_b` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `b_oz_plant`,round(((`bp`.`total_c` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `c_oz_plant`,round(((`bp`.`total_shake` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `shake_oz_plant`,round(((`bp`.`total_a_bigs` * 100) / `bp`.`total`),2) AS `bigs_a_pct`,round(((`bp`.`total_a_mids` * 100) / `bp`.`total`),2) AS `mids_a_pct`,round(((`bp`.`total_a_smalls` * 100) / `bp`.`total`),2) AS `smalls_a_pct`,round(((`bp`.`total_a_micros` * 100) / `bp`.`total`),2) AS `micros_a_pct`,round(((`bp`.`total_a_regs` * 100) / `bp`.`total`),2) AS `regs_a_pct`,round(((`bp`.`total_b` * 100) / `bp`.`total`),2) AS `b_pct`,round(((`bp`.`total_c` * 100) / `bp`.`total`),2) AS `c_pct`,round(((`bp`.`total_trim` * 100) / `bp`.`total`),2) AS `trim_pct`,round(((`bp`.`total_shake` * 100) / `bp`.`total`),2) AS `shake_pct`,round(((`bp`.`total_kief` * 100) / `bp`.`total`),2) AS `kief_pct`,round(((`bp`.`total_waste` * 100) / `bp`.`total`),2) AS `waste_pct` from `processing`.`batch_production_harvest_flat_MV` `bp` where (`bp`.`pct_completed` > 92.5) order by `bp`.`harvest_year` desc,`bp`.`harvest_week` desc,`bp`.`strain_id`,`bp`.`harvest_batch`

-- View: datastudio.production_summary_2022
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `production_summary_2022` AS select `bp`.`flowering_batch` AS `flowering_batch`,`bp`.`harvest_batch` AS `harvest_batch`,`bp`.`test_id` AS `test_id`,`bp`.`harvest_batch_test_id` AS `harvest_batch_test_id`,`bp`.`property_id` AS `property_id`,`bp`.`strain_id` AS `strain_id`,`bp`.`strain_name` AS `strain_name`,`bp`.`core_strain` AS `core_strain`,`bp`.`harvest_week` AS `harvest_week`,`bp`.`harvest_quarter` AS `harvest_quarter`,`bp`.`harvest_year` AS `harvest_year`,`bp`.`harvested_count` AS `harvested_count`,`bp`.`input_date_tzero` AS `input_date_tzero`,`bp`.`input_tzero` AS `input_tzero`,`bp`.`output_tzero` AS `output_tzero`,`bp`.`total_a_bigs` AS `total_a_bigs`,`bp`.`total_a_mids` AS `total_a_mids`,`bp`.`total_a_smalls` AS `total_a_smalls`,`bp`.`total_a_micros` AS `total_a_micros`,`bp`.`total_a_regs` AS `total_a_regs`,`bp`.`total_b` AS `total_b`,`bp`.`total_c` AS `total_c`,`bp`.`total_shake` AS `total_shake`,`bp`.`total_trim` AS `total_trim`,`bp`.`total_kief` AS `total_kief`,`bp`.`total_waste` AS `total_waste`,`bp`.`total` AS `total`,`bp`.`pct_completed` AS `pct_completed`,`bp`.`oz_plant_h` AS `ab_oz_plant`,round(((`bp`.`total_a_bigs` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `bigs_a_oz_plant`,round(((`bp`.`total_a_mids` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `mids_a_oz_plant`,round(((`bp`.`total_a_smalls` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `smalls_a_oz_plant`,round(((`bp`.`total_a_micros` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `micros_a_oz_plant`,round(((`bp`.`total_a_regs` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `regs_a_oz_plant`,round(((`bp`.`total_b` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `b_oz_plant`,round(((`bp`.`total_c` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `c_oz_plant`,round(((`bp`.`total_shake` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `shake_oz_plant`,round(((`bp`.`total_a_bigs` * 100) / `bp`.`total`),2) AS `bigs_a_pct`,round(((`bp`.`total_a_mids` * 100) / `bp`.`total`),2) AS `mids_a_pct`,round(((`bp`.`total_a_smalls` * 100) / `bp`.`total`),2) AS `smalls_a_pct`,round(((`bp`.`total_a_micros` * 100) / `bp`.`total`),2) AS `micros_a_pct`,round(((`bp`.`total_a_regs` * 100) / `bp`.`total`),2) AS `regs_a_pct`,round(((`bp`.`total_b` * 100) / `bp`.`total`),2) AS `b_pct`,round(((`bp`.`total_c` * 100) / `bp`.`total`),2) AS `c_pct`,round(((`bp`.`total_trim` * 100) / `bp`.`total`),2) AS `trim_pct`,round(((`bp`.`total_shake` * 100) / `bp`.`total`),2) AS `shake_pct`,round(((`bp`.`total_kief` * 100) / `bp`.`total`),2) AS `kief_pct`,round(((`bp`.`total_waste` * 100) / `bp`.`total`),2) AS `waste_pct` from `processing`.`batch_production_harvest_2022` `bp` where ((`bp`.`pct_completed` > 92.5) and (`bp`.`pct_completed` < 121)) order by `bp`.`harvest_year` desc,`bp`.`harvest_week` desc,`bp`.`harvest_batch`

-- View: datastudio.production_summary_2023
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `production_summary_2023` AS select `bp`.`flowering_batch` AS `flowering_batch`,`bp`.`harvest_batch` AS `harvest_batch`,`bp`.`test_id` AS `test_id`,`bp`.`harvest_batch_test_id` AS `harvest_batch_test_id`,`bp`.`property_id` AS `property_id`,`bp`.`strain_id` AS `strain_id`,`bp`.`strain_name` AS `strain_name`,`bp`.`core_strain` AS `core_strain`,`bp`.`harvest_week` AS `harvest_week`,`bp`.`harvest_quarter` AS `harvest_quarter`,`bp`.`harvest_year` AS `harvest_year`,`bp`.`harvested_count` AS `harvested_count`,`bp`.`input_date_tzero` AS `input_date_tzero`,`bp`.`input_tzero` AS `input_tzero`,`bp`.`output_tzero` AS `output_tzero`,`bp`.`total_a_bigs` AS `total_a_bigs`,`bp`.`total_a_mids` AS `total_a_mids`,`bp`.`total_a_smalls` AS `total_a_smalls`,`bp`.`total_a_micros` AS `total_a_micros`,`bp`.`total_a_regs` AS `total_a_regs`,`bp`.`total_b` AS `total_b`,`bp`.`total_c` AS `total_c`,`bp`.`total_shake` AS `total_shake`,`bp`.`total_trim` AS `total_trim`,`bp`.`total_kief` AS `total_kief`,`bp`.`total_waste` AS `total_waste`,`bp`.`total` AS `total`,`bp`.`pct_completed` AS `pct_completed`,`bp`.`oz_plant_h` AS `ab_oz_plant`,round(((`bp`.`total_a_bigs` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `bigs_a_oz_plant`,round(((`bp`.`total_a_mids` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `mids_a_oz_plant`,round(((`bp`.`total_a_smalls` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `smalls_a_oz_plant`,round(((`bp`.`total_a_micros` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `micros_a_oz_plant`,round(((`bp`.`total_a_regs` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `regs_a_oz_plant`,round(((`bp`.`total_b` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `b_oz_plant`,round(((`bp`.`total_c` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `c_oz_plant`,round(((`bp`.`total_shake` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `shake_oz_plant`,round(((`bp`.`total_a_bigs` * 100) / `bp`.`total`),2) AS `bigs_a_pct`,round(((`bp`.`total_a_mids` * 100) / `bp`.`total`),2) AS `mids_a_pct`,round(((`bp`.`total_a_smalls` * 100) / `bp`.`total`),2) AS `smalls_a_pct`,round(((`bp`.`total_a_micros` * 100) / `bp`.`total`),2) AS `micros_a_pct`,round(((`bp`.`total_a_regs` * 100) / `bp`.`total`),2) AS `regs_a_pct`,round(((`bp`.`total_b` * 100) / `bp`.`total`),2) AS `b_pct`,round(((`bp`.`total_c` * 100) / `bp`.`total`),2) AS `c_pct`,round(((`bp`.`total_trim` * 100) / `bp`.`total`),2) AS `trim_pct`,round(((`bp`.`total_shake` * 100) / `bp`.`total`),2) AS `shake_pct`,round(((`bp`.`total_kief` * 100) / `bp`.`total`),2) AS `kief_pct`,round(((`bp`.`total_waste` * 100) / `bp`.`total`),2) AS `waste_pct` from `processing`.`batch_production_harvest_flat_MV` `bp` where ((`bp`.`harvest_year` = 2023) and (`bp`.`pct_completed` > 92.5) and (`bp`.`pct_completed` < 121)) order by `bp`.`harvest_year` desc,`bp`.`harvest_week` desc,`bp`.`harvest_batch`

-- View: datastudio.production_summary_last_12weeks
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `production_summary_last_12weeks` AS select `bp`.`flowering_batch` AS `flowering_batch`,`bp`.`harvest_batch` AS `harvest_batch`,`bp`.`test_id` AS `test_id`,`bp`.`harvest_batch_test_id` AS `harvest_batch_test_id`,`bp`.`property_id` AS `property_id`,`bp`.`strain_id` AS `strain_id`,`bp`.`strain_name` AS `strain_name`,`bp`.`core_strain` AS `core_strain`,`bp`.`harvest_date` AS `harvest_date`,`bp`.`harvest_week` AS `harvest_week`,`bp`.`harvest_quarter` AS `harvest_quarter`,`bp`.`harvest_year` AS `harvest_year`,`bp`.`harvested_count` AS `harvested_count`,`bp`.`input_date_tzero` AS `input_date_tzero`,`bp`.`input_tzero` AS `input_tzero`,`bp`.`output_tzero` AS `output_tzero`,`bp`.`total_a_bigs` AS `total_a_bigs`,`bp`.`total_a_mids` AS `total_a_mids`,`bp`.`total_a_smalls` AS `total_a_smalls`,`bp`.`total_a_micros` AS `total_a_micros`,`bp`.`total_a_regs` AS `total_a_regs`,`bp`.`total_b` AS `total_b`,`bp`.`total_c` AS `total_c`,`bp`.`total_shake` AS `total_shake`,`bp`.`total_trim` AS `total_trim`,`bp`.`total_kief` AS `total_kief`,`bp`.`total_waste` AS `total_waste`,`bp`.`total` AS `total`,`bp`.`pct_completed` AS `pct_completed`,`bp`.`oz_plant_h` AS `ab_oz_plant`,round(((`bp`.`total_a_bigs` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `bigs_a_oz_plant`,round(((`bp`.`total_a_mids` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `mids_a_oz_plant`,round(((`bp`.`total_a_smalls` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `smalls_a_oz_plant`,round(((`bp`.`total_a_micros` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `micros_a_oz_plant`,round(((`bp`.`total_a_regs` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `regs_a_oz_plant`,round(((`bp`.`total_b` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `b_oz_plant`,round(((`bp`.`total_c` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `c_oz_plant`,round(((`bp`.`total_shake` * 16) / nullif(`bp`.`harvested_count`,0)),3) AS `shake_oz_plant`,round(((`bp`.`total_a_bigs` * 100) / `bp`.`total`),2) AS `bigs_a_pct`,round(((`bp`.`total_a_mids` * 100) / `bp`.`total`),2) AS `migs_a_pct`,round(((`bp`.`total_a_smalls` * 100) / `bp`.`total`),2) AS `smalls_a_pct`,round(((`bp`.`total_a_micros` * 100) / `bp`.`total`),2) AS `micros_a_pct`,round(((`bp`.`total_a_regs` * 100) / `bp`.`total`),2) AS `regs_a_pct`,round(((`bp`.`total_b` * 100) / `bp`.`total`),2) AS `b_pct`,round(((`bp`.`total_c` * 100) / `bp`.`total`),2) AS `c_pct`,round(((`bp`.`total_trim` * 100) / `bp`.`total`),2) AS `trim_pct`,round(((`bp`.`total_shake` * 100) / `bp`.`total`),2) AS `shake_pct`,round(((`bp`.`total_kief` * 100) / `bp`.`total`),2) AS `kief_pct`,round(((`bp`.`total_waste` * 100) / `bp`.`total`),2) AS `waste_pct` from `processing`.`batch_production_harvest_flat_MV` `bp` where (`bp`.`harvest_date` >= (select (max(`processing`.`batch_production_harvest_flat_MV`.`harvest_date`) - interval 12 week) from `processing`.`batch_production_harvest_flat_MV`)) order by `bp`.`harvest_year` desc,`bp`.`harvest_week` desc,`bp`.`harvest_batch`

-- View: datastudio.veg_active
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `veg_active` AS select `v`.`id` AS `id`,`v`.`source_id` AS `source_id`,`v`.`hardening_id` AS `hardening_id`,`v`.`batch_id` AS `batch_id`,`v`.`batch_name` AS `batch_name`,`v`.`test_id` AS `test_id`,`v`.`date` AS `date`,`v`.`location_id` AS `location_id`,`v`.`location_string` AS `location_string`,`v`.`metrc_plant_tag_first` AS `metrc_plant_tag_first`,`v`.`metrc_plant_tag_last` AS `metrc_plant_tag_last`,`v`.`plant_count` AS `plant_count`,`v`.`flat_plant_count` AS `flat_plant_count`,`v`.`flats` AS `flats`,`v`.`trays` AS `trays`,`v`.`flowering_date` AS `flowering_date`,`v`.`flowering_batch_name` AS `flowering_batch_name`,`v`.`note` AS `note`,`v`.`status` AS `status`,`v`.`action` AS `action`,`v`.`modified_type` AS `modified_type`,`v`.`created_on` AS `created_on`,`v`.`created_by` AS `created_by`,`v`.`modified_on` AS `modified_on`,`v`.`modified_by` AS `modified_by`,`v`.`flag` AS `flag`,`v`.`trigger` AS `trigger` from `cultivation`.`veg` `v` where (`v`.`status` = 'Active')

-- View: datastudio.wholesale_order_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `wholesale_order_view` AS select `wi`.`metrc_id` AS `metrc_id`,`wi`.`harvest_id` AS `harvest_id`,`wi`.`strain_id` AS `strain_id`,`wi`.`product_category` AS `product_category`,`wi`.`product_type` AS `product_type`,`wi`.`color` AS `color`,`wi`.`weight` AS `weight`,`wi`.`action` AS `action`,`ws`.`vendor_id` AS `vendor_id`,`ws`.`unique_id` AS `unique_id`,`ws`.`est_pickup_date` AS `est_pickup_date`,`ws`.`manifest_id` AS `manifest_id`,`co`.`name` AS `name` from ((`wholesale`.`wholesale_order_item` `wi` left join `wholesale`.`wholesale_order` `ws` on((`ws`.`id` = `wi`.`id_sales_order`))) left join `crm`.`company_org` `co` on((`ws`.`vendor_id` = convert(`co`.`id` using utf8mb4)))) where ((`wi`.`action` = 'Sold') or (`wi`.`action` = 'Accepted'))

-- View: lab_testing.sample_latest_coa
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `sample_latest_coa` AS select max(`sample`.`test_result_date`) AS `test_result_date`,`sample`.`parent_id` AS `parent_id`,`sample`.`source_batch_id` AS `source_batch_id` from `sample` where regexp_like(`sample`.`testing_purpose`,'COA') group by `sample`.`parent_id`,`sample`.`source_batch_id`

-- View: lab_testing.samples_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `samples_view` AS select `s`.`id` AS `id`,`s`.`source_metrc_id` AS `source_metrc_id`,`s`.`sample_metrc_id` AS `sample_metrc_id`,`s`.`weight` AS `quantity`,`pacstone`.`uom`.`name` AS `uom`,`s`.`product_type` AS `sample_type`,`s`.`harvest_id` AS `harvest_id`,`s`.`property` AS `property`,`s`.`harvest_week` AS `harvest_week`,`s`.`harvest_year` AS `harvest_year`,`s`.`strain` AS `strain`,`s`.`short_license` AS `short_license`,`s`.`pickup_date` AS `pickup_date`,`s`.`batch_id` AS `sample_batch_id`,`s`.`sample_name` AS `sample_name`,`s`.`laboratory_name` AS `laboratory_name`,`s`.`lab_sample_id` AS `lab_sample_id`,`s`.`testing_purpose` AS `testing_purpose`,`s`.`test_type` AS `test_type`,`s`.`testing_property` AS `testing_property`,`s`.`testing_license_type` AS `testing_license_type`,`s`.`testing_business_entity` AS `testing_business_entity`,`s`.`testing_license` AS `testing_license`,`s`.`link_result` AS `link_lab_results`,`s`.`test_result_date` AS `test_result_date`,`s`.`thc_result` AS `thc_result`,`s`.`cbd_result` AS `cbd_result`,`s`.`cb_result` AS `cb_result`,`s`.`microbial_result` AS `microbial_result`,`s`.`moisture_result` AS `moisture_result`,`s`.`mold_result` AS `mold_result`,`s`.`microextraction_result` AS `microextraction_result`,`s`.`source_batch_id` AS `source_batch_id`,`s`.`general_notes` AS `general_notes` from (`sample` `s` left join `pacstone`.`uom` on((`s`.`uom_id` = convert(`pacstone`.`uom`.`id` using utf8mb4))))

-- View: metrc.clone_inventory
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `clone_inventory` AS select `m`.`Id` AS `Id`,`m`.`Label` AS `Label`,`m`.`Quantity` AS `Quantity`,`m`.`ItemProductCategoryName` AS `ItemProductCategoryName`,`m`.`ItemName` AS `ItemName`,`m`.`Note` AS `Note`,`m`.`PackagedDate` AS `PackagedDate` from `package` `m` where ((`m`.`SourcePackageCount` > 0) and (`m`.`License` = 'CCL18-0002677') and (`m`.`FinishedDate` is null))

-- View: metrc.delivery
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `delivery` AS select `tdp`.`PackageId` AS `PackageId`,`tdp`.`PackageLabel` AS `PackageLabel`,`tdp`.`PackageType` AS `PackageType`,`tdp`.`ItemId` AS `ItemId`,`tdp`.`ProductName` AS `ProductName`,`tdp`.`ItemName` AS `ItemName`,`tdp`.`ProductCategoryName` AS `ProductCategoryName`,`tdp`.`ItemCategoryName` AS `ItemCategoryName`,`tdp`.`ItemStrainName` AS `ItemStrainName`,`tdp`.`ShipmentPackageState` AS `ShipmentPackageState`,`tdp`.`ShippedQuantity` AS `ShippedQuantity`,`tdp`.`ShippedUnitOfMeasureName` AS `ShippedUnitOfMeasureName`,`tdp`.`ReceivedQuantity` AS `ReceivedQuantity`,`tdp`.`ReceivedUnitOfMeasureName` AS `ReceivedUnitOfMeasureName`,`tdp`.`License` AS `License`,`t`.`ReceivedDateTime` AS `ReceivedDateTime`,`t`.`ManifestNumber` AS `ManifestNumber`,`t`.`ShipperFacilityLicenseNumber` AS `ShipperFacilityLicenseNumber`,`t`.`ShipperFacilityName` AS `ShipperFacilityName` from (`transfers_deliveries_packages` `tdp` join `transfers` `t` on((`t`.`Id` = `tdp`.`TransferId`)))

-- View: metrc.item
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `item` AS select `item_join_strain`.`Id` AS `Id`,`item_join_strain`.`Name` AS `Name`,`item_join_strain`.`ProductCategoryName` AS `ProductCategoryName`,`item_join_strain`.`ProductCategoryType` AS `ProductCategoryType`,`item_join_strain`.`QuantityType` AS `QuantityType`,`item_join_strain`.`DefaultLabTestingState` AS `DefaultLabTestingState`,`item_join_strain`.`UnitOfMeasureName` AS `UnitOfMeasureName`,`item_join_strain`.`ApprovalStatus` AS `ApprovalStatus`,`item_join_strain`.`ApprovalStatusDateTime` AS `ApprovalStatusDateTime`,`item_join_strain`.`StrainId2` AS `StrainId`,`item_join_strain`.`StrainName2` AS `StrainName`,`item_join_strain`.`AdministrationMethod` AS `AdministrationMethod`,`item_join_strain`.`UnitCbdPercent` AS `UnitCbdPercent`,`item_join_strain`.`UnitCbdContent` AS `UnitCbdContent`,`item_join_strain`.`UnitCbdContentUnitOfMeasureName` AS `UnitCbdContentUnitOfMeasureName`,`item_join_strain`.`UnitCbdContentDose` AS `UnitCbdContentDose`,`item_join_strain`.`UnitCbdContentDoseUnitOfMeasureName` AS `UnitCbdContentDoseUnitOfMeasureName`,`item_join_strain`.`UnitThcPercent` AS `UnitThcPercent`,`item_join_strain`.`UnitThcContent` AS `UnitThcContent`,`item_join_strain`.`UnitThcContentUnitOfMeasureName` AS `UnitThcContentUnitOfMeasureName`,`item_join_strain`.`UnitThcContentDose` AS `UnitThcContentDose`,`item_join_strain`.`UnitThcContentDoseUnitOfMeasureName` AS `UnitThcContentDoseUnitOfMeasureName`,`item_join_strain`.`UnitVolume` AS `UnitVolume`,`item_join_strain`.`UnitVolumeUnitOfMeasureName` AS `UnitVolumeUnitOfMeasureName`,`item_join_strain`.`UnitWeight` AS `UnitWeight`,`item_join_strain`.`UnitWeightUnitOfMeasureName` AS `UnitWeightUnitOfMeasureName`,`item_join_strain`.`ServingSize` AS `ServingSize`,`item_join_strain`.`SupplyDurationDays` AS `SupplyDurationDays`,`item_join_strain`.`NumberOfDoses` AS `NumberOfDoses`,`item_join_strain`.`UnitQuantity` AS `UnitQuantity`,`item_join_strain`.`UnitQuantityUnitOfMeasureName` AS `UnitQuantityUnitOfMeasureName`,`item_join_strain`.`PublicIngredients` AS `PublicIngredients`,`item_join_strain`.`Description` AS `Description`,`item_join_strain`.`IsUsed` AS `IsUsed`,`item_join_strain`.`License` AS `License` from `item_join_strain` where ((`item_join_strain`.`rowNum` = 1) or (`item_join_strain`.`rowNum` is null))

-- View: metrc.item2
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `item2` AS select `item_join_strain`.`Id` AS `Id`,`item_join_strain`.`Name` AS `Name`,`item_join_strain`.`ProductCategoryName` AS `ProductCategoryName`,`item_join_strain`.`ProductCategoryType` AS `ProductCategoryType`,`item_join_strain`.`QuantityType` AS `QuantityType`,`item_join_strain`.`DefaultLabTestingState` AS `DefaultLabTestingState`,`item_join_strain`.`UnitOfMeasureName` AS `UnitOfMeasureName`,`item_join_strain`.`ApprovalStatus` AS `ApprovalStatus`,`item_join_strain`.`ApprovalStatusDateTime` AS `ApprovalStatusDateTime`,`item_join_strain`.`StrainId2` AS `StrainId`,`item_join_strain`.`StrainName2` AS `StrainName`,`item_join_strain`.`AdministrationMethod` AS `AdministrationMethod`,`item_join_strain`.`UnitCbdPercent` AS `UnitCbdPercent`,`item_join_strain`.`UnitCbdContent` AS `UnitCbdContent`,`item_join_strain`.`UnitCbdContentUnitOfMeasureName` AS `UnitCbdContentUnitOfMeasureName`,`item_join_strain`.`UnitCbdContentDose` AS `UnitCbdContentDose`,`item_join_strain`.`UnitCbdContentDoseUnitOfMeasureName` AS `UnitCbdContentDoseUnitOfMeasureName`,`item_join_strain`.`UnitThcPercent` AS `UnitThcPercent`,`item_join_strain`.`UnitThcContent` AS `UnitThcContent`,`item_join_strain`.`UnitThcContentUnitOfMeasureName` AS `UnitThcContentUnitOfMeasureName`,`item_join_strain`.`UnitThcContentDose` AS `UnitThcContentDose`,`item_join_strain`.`UnitThcContentDoseUnitOfMeasureName` AS `UnitThcContentDoseUnitOfMeasureName`,`item_join_strain`.`UnitVolume` AS `UnitVolume`,`item_join_strain`.`UnitVolumeUnitOfMeasureName` AS `UnitVolumeUnitOfMeasureName`,`item_join_strain`.`UnitWeight` AS `UnitWeight`,`item_join_strain`.`UnitWeightUnitOfMeasureName` AS `UnitWeightUnitOfMeasureName`,`item_join_strain`.`ServingSize` AS `ServingSize`,`item_join_strain`.`SupplyDurationDays` AS `SupplyDurationDays`,`item_join_strain`.`NumberOfDoses` AS `NumberOfDoses`,`item_join_strain`.`UnitQuantity` AS `UnitQuantity`,`item_join_strain`.`UnitQuantityUnitOfMeasureName` AS `UnitQuantityUnitOfMeasureName`,`item_join_strain`.`PublicIngredients` AS `PublicIngredients`,`item_join_strain`.`Description` AS `Description`,`item_join_strain`.`IsUsed` AS `IsUsed`,`item_join_strain`.`License` AS `License` from `item_join_strain` where ((`item_join_strain`.`rowNum` = 1) or (`item_join_strain`.`rowNum` is null))

-- View: metrc.item_join_strain
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `item_join_strain` AS select `mi`.`Id` AS `Id`,`mi`.`Name` AS `Name`,`mi`.`ProductCategoryName` AS `ProductCategoryName`,`mi`.`ProductCategoryType` AS `ProductCategoryType`,`mi`.`QuantityType` AS `QuantityType`,`mi`.`DefaultLabTestingState` AS `DefaultLabTestingState`,`mi`.`UnitOfMeasureName` AS `UnitOfMeasureName`,`mi`.`ApprovalStatus` AS `ApprovalStatus`,`mi`.`ApprovalStatusDateTime` AS `ApprovalStatusDateTime`,`mi`.`StrainId` AS `StrainId`,`mi`.`StrainName` AS `StrainName`,`mi`.`AdministrationMethod` AS `AdministrationMethod`,`mi`.`UnitCbdPercent` AS `UnitCbdPercent`,`mi`.`UnitCbdContent` AS `UnitCbdContent`,`mi`.`UnitCbdContentUnitOfMeasureName` AS `UnitCbdContentUnitOfMeasureName`,`mi`.`UnitCbdContentDose` AS `UnitCbdContentDose`,`mi`.`UnitCbdContentDoseUnitOfMeasureName` AS `UnitCbdContentDoseUnitOfMeasureName`,`mi`.`UnitThcPercent` AS `UnitThcPercent`,`mi`.`UnitThcContent` AS `UnitThcContent`,`mi`.`UnitThcContentUnitOfMeasureName` AS `UnitThcContentUnitOfMeasureName`,`mi`.`UnitThcContentDose` AS `UnitThcContentDose`,`mi`.`UnitThcContentDoseUnitOfMeasureName` AS `UnitThcContentDoseUnitOfMeasureName`,`mi`.`UnitVolume` AS `UnitVolume`,`mi`.`UnitVolumeUnitOfMeasureName` AS `UnitVolumeUnitOfMeasureName`,`mi`.`UnitWeight` AS `UnitWeight`,`mi`.`UnitWeightUnitOfMeasureName` AS `UnitWeightUnitOfMeasureName`,`mi`.`ServingSize` AS `ServingSize`,`mi`.`SupplyDurationDays` AS `SupplyDurationDays`,`mi`.`NumberOfDoses` AS `NumberOfDoses`,`mi`.`UnitQuantity` AS `UnitQuantity`,`mi`.`UnitQuantityUnitOfMeasureName` AS `UnitQuantityUnitOfMeasureName`,`mi`.`PublicIngredients` AS `PublicIngredients`,`mi`.`Description` AS `Description`,`mi`.`IsUsed` AS `IsUsed`,`mi`.`License` AS `License`,if((`mi`.`StrainId` is not null),`mi`.`StrainId`,`ms`.`Id`) AS `StrainId2`,if((`mi`.`StrainId` is not null),`mi`.`StrainName`,`ms`.`Name`) AS `StrainName2`,row_number() OVER (PARTITION BY `mi`.`Id` ORDER BY char_length(regexp_substr(`mi`.`Name`,`ms`.`Name`)) desc )  AS `rowNum` from (`items` `mi` left join `strains` `ms` on((regexp_like(`mi`.`Name`,`ms`.`Name`) and (`mi`.`License` = `ms`.`License`) and (`mi`.`StrainId` is null))))

-- View: metrc.meadow_inventory
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `meadow_inventory` AS select `m`.`Id` AS `id`,`m`.`Label` AS `metrc_tag`,`m`.`Quantity` AS `quantity`,`m`.`UnitOfMeasureAbbreviation` AS `uom`,`m`.`PackagedDate` AS `packed_date`,`m`.`ProductionBatchNumber` AS `production_number`,`m`.`ItemName` AS `item_name`,`m`.`ItemStrainName` AS `metrc_strain_name`,max(`pi`.`strain`) AS `strain`,(case when ((max(`pi`.`brand`) is not null) and (max(`pi`.`brand`) <> '')) then max(`pi`.`brand`) when (`m`.`ItemName` like '%Pacific Stone%') then 'BD-001' when (`m`.`ItemName` like '%time machine%') then 'BD-002' else NULL end) AS `brand`,coalesce(max(`pi`.`category`),`m`.`ItemProductCategoryName`) AS `category_id`,coalesce(max(`pi`.`type`),`m`.`ItemProductCategoryType`) AS `category_type_id`,max(`pi`.`package_id`) AS `package_id`,coalesce(max(`pi`.`package_size`),`m`.`ItemUnitWeight`) AS `package_size_id`,max(`pi`.`thc`) AS `thc_label`,max(`pi`.`thc_coa`) AS `thc_coa`,max(`pi`.`metrc_location`) AS `room`,max(`pi`.`case_id`) AS `case_id`,max(`pi`.`lucid_id`) AS `lucid_id`,max(`pi`.`note`) AS `notes` from (`packages` `m` left join `packing`.`product_inventory` `pi` on((`m`.`Label` = `pi`.`metrc_id`))) where ((`m`.`LocationId` = 928201) and (`m`.`Quantity` > 0) and (`m`.`Status` = 'Active')) group by `m`.`Id`,`m`.`Label`,`m`.`Quantity`,`m`.`UnitOfMeasureAbbreviation`,`m`.`PackagedDate`,`m`.`ProductionBatchNumber`,`m`.`ItemName`

-- View: metrc.metrc_location
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `metrc_location` AS select `locations`.`Id` AS `Id`,`locations`.`Name` AS `Name`,`locations`.`LocationTypeId` AS `LocationTypeId`,`locations`.`LocationTypeName` AS `LocationTypeName`,`locations`.`ForPlantBatches` AS `ForPlantBatches`,`locations`.`ForPlants` AS `ForPlants`,`locations`.`ForHarvests` AS `ForHarvests`,`locations`.`ForPackages` AS `ForPackages`,`locations`.`License` AS `License` from `locations`

-- View: metrc.metric_location
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `metric_location` AS select `locations`.`Id` AS `Id`,`locations`.`Name` AS `Name`,`locations`.`LocationTypeId` AS `LocationTypeId`,`locations`.`LocationTypeName` AS `LocationTypeName`,`locations`.`ForPlantBatches` AS `ForPlantBatches`,`locations`.`ForPlants` AS `ForPlants`,`locations`.`ForHarvests` AS `ForHarvests`,`locations`.`ForPackages` AS `ForPackages`,`locations`.`License` AS `License` from `locations`

-- View: metrc.package
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `package` AS select `mp`.`Id` AS `Id`,`mp`.`Label` AS `Label`,`mp`.`PackageType` AS `PackageType`,`mp`.`SourceHarvestCount` AS `SourceHarvestCount`,`mp`.`SourcePackageCount` AS `SourcePackageCount`,`mp`.`SourceProcessingJobCount` AS `SourceProcessingJobCount`,`mp`.`SourceHarvestNames` AS `SourceHarvestNames`,`mp`.`LocationId` AS `LocationId`,`mp`.`LocationName` AS `LocationName`,`mp`.`LocationTypeName` AS `LocationTypeName`,`mp`.`Quantity` AS `Quantity`,`mp`.`UnitOfMeasureName` AS `UnitOfMeasureName`,`mp`.`UnitOfMeasureAbbreviation` AS `UnitOfMeasureAbbreviation`,`mp`.`PatientLicenseNumber` AS `PatientLicenseNumber`,`mp`.`ItemFromFacilityLicenseNumber` AS `ItemFromFacilityLicenseNumber`,`mp`.`ItemFromFacilityName` AS `ItemFromFacilityName`,`mp`.`Note` AS `Note`,`mp`.`PackagedDate` AS `PackagedDate`,`mp`.`InitialLabTestingState` AS `InitialLabTestingState`,`mp`.`LabTestingState` AS `LabTestingState`,`mp`.`LabTestingStateDate` AS `LabTestingStateDate`,`mp`.`IsProductionBatch` AS `IsProductionBatch`,`mp`.`ProductionBatchNumber` AS `ProductionBatchNumber`,`mp`.`SourceProductionBatchNumbers` AS `SourceProductionBatchNumbers`,`mp`.`IsTradeSample` AS `IsTradeSample`,`mp`.`IsTradeSamplePersistent` AS `IsTradeSamplePersistent`,`mp`.`SourcePackageIsTradeSample` AS `SourcePackageIsTradeSample`,`mp`.`IsDonation` AS `IsDonation`,`mp`.`IsDonationPersistent` AS `IsDonationPersistent`,`mp`.`SourcePackageIsDonation` AS `SourcePackageIsDonation`,`mp`.`IsTestingSample` AS `IsTestingSample`,`mp`.`IsProcessValidationTestingSample` AS `IsProcessValidationTestingSample`,`mp`.`ProductRequiresRemediation` AS `ProductRequiresRemediation`,`mp`.`ContainsRemediatedProduct` AS `ContainsRemediatedProduct`,`mp`.`RemediationDate` AS `RemediationDate`,`mp`.`ReceivedDateTime` AS `ReceivedDateTime`,`mp`.`ReceivedFromManifestNumber` AS `ReceivedFromManifestNumber`,`mp`.`ReceivedFromFacilityLicenseNumber` AS `ReceivedFromFacilityLicenseNumber`,`mp`.`ReceivedFromFacilityName` AS `ReceivedFromFacilityName`,`mp`.`IsOnHold` AS `IsOnHold`,`mp`.`ArchivedDate` AS `ArchivedDate`,`mp`.`FinishedDate` AS `FinishedDate`,`mp`.`LastModified` AS `LastModified`,`mp`.`Item` AS `Item`,`mp`.`License` AS `License`,json_unquote(json_extract(`mp`.`Item`,'$.Id')) AS `ItemId`,json_unquote(json_extract(`mp`.`Item`,'$.Name')) AS `ItemName`,json_unquote(json_extract(`mp`.`Item`,'$.QuantityType')) AS `ItemQuantityType`,json_unquote(json_extract(`mp`.`Item`,'$.UnitWeight')) AS `ItemUnitWeight`,json_unquote(json_extract(`mp`.`Item`,'$.UnitWeightUnitOfMeasureName')) AS `ItemUOM`,json_unquote(json_extract(`mp`.`Item`,'$.ProductCategoryName')) AS `ItemProductCategoryName`,json_unquote(json_extract(`mp`.`Item`,'$.ProductCategoryType')) AS `ItemProductCategoryType`,json_unquote(json_extract(`mp`.`Item`,'$.StrainName')) AS `ItemStrainName` from `packages` `mp`

-- View: metrc.package_sp_active
CREATE ALGORITHM=TEMPTABLE DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `package_sp_active` AS select `packages`.`Label` AS `Label`,`packages`.`PackageType` AS `PackageType`,`packages`.`LocationId` AS `LocationId`,`packages`.`Quantity` AS `Quantity`,`packages`.`UnitOfMeasureName` AS `UnitOfMeasureName`,`packages`.`UnitOfMeasureAbbreviation` AS `UnitOfMeasureAbbreviation`,`packages`.`Note` AS `Note`,`packages`.`PackagedDate` AS `PackagedDate`,`packages`.`LastModified` AS `LastModified`,json_unquote(json_extract(`packages`.`Item`,'$.Id')) AS `ItemId`,json_unquote(json_extract(`packages`.`Item`,'$.Name')) AS `ItemName`,json_unquote(json_extract(`packages`.`Item`,'$.QuantityType')) AS `ItemQuantityType`,json_unquote(json_extract(`packages`.`Item`,'$.UnitWeight')) AS `ItemUnitWeight`,json_unquote(json_extract(`packages`.`Item`,'$.UnitWeightUnitOfMeasureName')) AS `ItemUOM`,json_unquote(json_extract(`packages`.`Item`,'$.ProductCategoryName')) AS `ItemProductCategoryName`,json_unquote(json_extract(`packages`.`Item`,'$.ProductCategoryType')) AS `ItemProductCategoryType`,json_unquote(json_extract(`packages`.`Item`,'$.StrainName')) AS `ItemStrainName`,`packages`.`License` AS `License` from `packages` where ((`packages`.`License` = 'C12-0000295-LIC') and (`packages`.`ArchivedDate` is null) and (`packages`.`IsTestingSample` <> 'true') and (`packages`.`FinishedDate` is null))

-- View: metrc.packages_sp_active
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `packages_sp_active` AS select `packages`.`Id` AS `Id`,`packages`.`Label` AS `Label`,`packages`.`PackageType` AS `PackageType`,`packages`.`LocationId` AS `LocationId`,`packages`.`Quantity` AS `Quantity`,`packages`.`UnitOfMeasureName` AS `UnitOfMeasureName`,`packages`.`UnitOfMeasureAbbreviation` AS `UnitOfMeasureAbbreviation`,`packages`.`Note` AS `Note`,`packages`.`PackagedDate` AS `PackagedDate`,`packages`.`LastModified` AS `LastModified`,`packages`.`ItemId` AS `ItemId`,`packages`.`ItemName` AS `ItemName`,`packages`.`ItemQuantityType` AS `ItemQuantityType`,`packages`.`ItemUnitWeight` AS `ItemUnitWeight`,`packages`.`ItemUOM` AS `ItemUOM`,`packages`.`ItemProductCategoryName` AS `ItemProductCategoryName`,`packages`.`ItemProductCategoryType` AS `ItemProductCategoryType`,`packages`.`ItemStrainName` AS `ItemStrainName`,`packages`.`License` AS `License` from `packages` where ((`packages`.`Status` = 'Active') and (`packages`.`License` = 'C12-0000295-LIC') and (`packages`.`IsTestingSample` <> 'true'))

-- View: metrc.processing_items
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `processing_items` AS select `items`.`Id` AS `Id`,`items`.`Name` AS `Name`,`items`.`ProductCategoryName` AS `ProductCategoryName`,`items`.`ProductCategoryType` AS `ProductCategoryType`,`items`.`QuantityType` AS `QuantityType`,`items`.`DefaultLabTestingState` AS `DefaultLabTestingState`,`items`.`UnitOfMeasureName` AS `UnitOfMeasureName`,`items`.`ApprovalStatus` AS `ApprovalStatus`,`items`.`ApprovalStatusDateTime` AS `ApprovalStatusDateTime`,`items`.`StrainId` AS `StrainId`,`items`.`StrainName` AS `StrainName`,`items`.`AdministrationMethod` AS `AdministrationMethod`,`items`.`UnitCbdPercent` AS `UnitCbdPercent`,`items`.`UnitCbdContent` AS `UnitCbdContent`,`items`.`UnitCbdContentUnitOfMeasureName` AS `UnitCbdContentUnitOfMeasureName`,`items`.`UnitCbdContentDose` AS `UnitCbdContentDose`,`items`.`UnitCbdContentDoseUnitOfMeasureName` AS `UnitCbdContentDoseUnitOfMeasureName`,`items`.`UnitThcPercent` AS `UnitThcPercent`,`items`.`UnitThcContent` AS `UnitThcContent`,`items`.`UnitThcContentUnitOfMeasureName` AS `UnitThcContentUnitOfMeasureName`,`items`.`UnitThcContentDose` AS `UnitThcContentDose`,`items`.`UnitThcContentDoseUnitOfMeasureName` AS `UnitThcContentDoseUnitOfMeasureName`,`items`.`UnitVolume` AS `UnitVolume`,`items`.`UnitVolumeUnitOfMeasureName` AS `UnitVolumeUnitOfMeasureName`,`items`.`UnitWeight` AS `UnitWeight`,`items`.`UnitWeightUnitOfMeasureName` AS `UnitWeightUnitOfMeasureName`,`items`.`ServingSize` AS `ServingSize`,`items`.`SupplyDurationDays` AS `SupplyDurationDays`,`items`.`NumberOfDoses` AS `NumberOfDoses`,`items`.`UnitQuantity` AS `UnitQuantity`,`items`.`UnitQuantityUnitOfMeasureName` AS `UnitQuantityUnitOfMeasureName`,`items`.`PublicIngredients` AS `PublicIngredients`,`items`.`Description` AS `Description`,`items`.`ProductImages` AS `ProductImages`,`items`.`LabelImages` AS `LabelImages`,`items`.`PackagingImages` AS `PackagingImages`,`items`.`IsUsed` AS `IsUsed`,`items`.`License` AS `License`,`items`.`IsExpirationDateRequired` AS `IsExpirationDateRequired`,`items`.`IsSellByDateRequired` AS `IsSellByDateRequired`,`items`.`IsUseByDateRequired` AS `IsUseByDateRequired`,`items`.`ItemBrandId` AS `ItemBrandId`,`items`.`ItemBrandName` AS `ItemBrandName`,`items`.`Allergens` AS `Allergens`,`items`.`ProductPhotoDescription` AS `ProductPhotoDescription`,`items`.`LabelPhotoDescription` AS `LabelPhotoDescription`,`items`.`PackagingPhotoDescription` AS `PackagingPhotoDescription`,`items`.`HasExpirationDate` AS `HasExpirationDate`,`items`.`HasSellByDate` AS `HasSellByDate`,`items`.`HasUseByDate` AS `HasUseByDate`,`items`.`ProductPDFDocuments` AS `ProductPDFDocuments` from `items` where ((`items`.`QuantityType` = 'WeightBased') and (not((`items`.`Name` like '%Sample%'))) and (not((`items`.`ProductCategoryName` like '%Fresh%'))))

-- View: metrc.sp_package_not_in_product_inventory
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `sp_package_not_in_product_inventory` AS select '' AS `Id`,'please update app' AS `Label`,'' AS `PackageType`,'' AS `SourceHarvestCount`,'' AS `SourcePackageCount`,'' AS `SourceProcessingJobCount`,'' AS `SourceHarvestNames`,'' AS `LocationId`,'' AS `LocationName`,'' AS `LocationTypeName`,'' AS `Quantity`,'' AS `UnitOfMeasureName`,'' AS `UnitOfMeasureAbbreviation`,'' AS `PatientLicenseNumber`,'' AS `ItemFromFacilityLicenseNumber`,'' AS `ItemFromFacilityName`,'' AS `Note`,'' AS `PackagedDate`,'' AS `InitialLabTestingState`,'' AS `LabTestingState`,'' AS `LabTestingStateDate`,'' AS `IsProductionBatch`,'' AS `ProductionBatchNumber`,'' AS `SourceProductionBatchNumbers`,'' AS `IsTradeSample`,'' AS `IsTradeSamplePersistent`,'' AS `SourcePackageIsTradeSample`,'' AS `IsDonation`,'' AS `IsDonationPersistent`,'' AS `SourcePackageIsDonation`,'' AS `IsTestingSample`,'' AS `IsProcessValidationTestingSample`,'' AS `ProductRequiresRemediation`,'' AS `ContainsRemediatedProduct`,'' AS `RemediationDate`,'' AS `ReceivedDateTime`,'' AS `ReceivedFromManifestNumber`,'' AS `ReceivedFromFacilityLicenseNumber`,'' AS `ReceivedFromFacilityName`,'' AS `IsOnHold`,'' AS `ArchivedDate`,'' AS `FinishedDate`,'' AS `LastModified`,'' AS `Item`,'' AS `License`,'' AS `ItemName`,'' AS `ItemQuantityType`,'' AS `ItemUnitWeight`,'' AS `ItemUOM`,'' AS `ItemProductCategoryName`,'' AS `ItemProductCategoryType`,'' AS `ItemStrainName`

-- View: metrc.strain_comparison
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `strain_comparison` AS select `ms`.`Id` AS `Id_metrc`,`ms`.`Name` AS `Name_metrc`,`ps`.`id` AS `id`,`ps`.`name` AS `name`,`ps`.`pacific_stone_label` AS `pacific_stone_label`,`ps`.`time_machine_label` AS `time_machine_label`,`ms`.`TestingStatus` AS `TestingStatus`,`ms`.`ThcLevel` AS `ThcLevel`,`ms`.`CbdLevel` AS `CbdLevel`,`ms`.`IndicaPercentage` AS `IndicaPercentage`,`ms`.`SativaPercentage` AS `SativaPercentage`,`ms`.`IsUsed` AS `IsUsed`,`ms`.`Genetics` AS `Genetics`,`ms`.`License` AS `License`,`ps`.`category` AS `category`,`ps`.`category_code` AS `category_code`,`ps`.`description` AS `description`,`ps`.`range_thc_low` AS `range_thc_low`,`ps`.`range_thc_high` AS `range_thc_high`,`ps`.`range_cbd_low` AS `range_cbd_low`,`ps`.`range_cbd_high` AS `range_cbd_high`,`ps`.`range_cbd` AS `range_cbd`,`ps`.`range_thc` AS `range_thc`,`ps`.`status` AS `status`,`ps`.`created_on` AS `created_on`,`ps`.`created_by` AS `created_by`,`ps`.`modified_on` AS `modified_on`,`ps`.`modified_by` AS `modified_by`,`ps`.`trigger` AS `trigger`,`ps`.`flag` AS `flag`,`ps`.`note` AS `note`,`ps`.`f1` AS `f1`,`ps`.`f2` AS `f2`,`ps`.`f3` AS `f3`,`ps`.`f4` AS `f4`,`ps`.`f5` AS `f5` from (`strains` `ms` left join `pacstone`.`plant_strain` `ps` on((`ms`.`Name` in (convert(`ps`.`id` using utf8mb4),convert(`ps`.`name` using utf8mb4),convert(`ps`.`pacific_stone_label` using utf8mb4),convert(`ps`.`time_machine_label` using utf8mb4))))) where (`ps`.`status` = 'Active') union select `ms`.`Id` AS `Id_metrc`,`ms`.`Name` AS `Name_metrc`,`ps`.`id` AS `id`,`ps`.`name` AS `name`,`ps`.`pacific_stone_label` AS `pacific_stone_label`,`ps`.`time_machine_label` AS `time_machine_label`,`ms`.`TestingStatus` AS `TestingStatus`,`ms`.`ThcLevel` AS `ThcLevel`,`ms`.`CbdLevel` AS `CbdLevel`,`ms`.`IndicaPercentage` AS `IndicaPercentage`,`ms`.`SativaPercentage` AS `SativaPercentage`,`ms`.`IsUsed` AS `IsUsed`,`ms`.`Genetics` AS `Genetics`,`ms`.`License` AS `License`,`ps`.`category` AS `category`,`ps`.`category_code` AS `category_code`,`ps`.`description` AS `description`,`ps`.`range_thc_low` AS `range_thc_low`,`ps`.`range_thc_high` AS `range_thc_high`,`ps`.`range_cbd_low` AS `range_cbd_low`,`ps`.`range_cbd_high` AS `range_cbd_high`,`ps`.`range_cbd` AS `range_cbd`,`ps`.`range_thc` AS `range_thc`,`ps`.`status` AS `status`,`ps`.`created_on` AS `created_on`,`ps`.`created_by` AS `created_by`,`ps`.`modified_on` AS `modified_on`,`ps`.`modified_by` AS `modified_by`,`ps`.`trigger` AS `trigger`,`ps`.`flag` AS `flag`,`ps`.`note` AS `note`,`ps`.`f1` AS `f1`,`ps`.`f2` AS `f2`,`ps`.`f3` AS `f3`,`ps`.`f4` AS `f4`,`ps`.`f5` AS `f5` from (`pacstone`.`plant_strain` `ps` left join `strains` `ms` on((`ms`.`Name` in (convert(`ps`.`id` using utf8mb4),convert(`ps`.`name` using utf8mb4),convert(`ps`.`pacific_stone_label` using utf8mb4),convert(`ps`.`time_machine_label` using utf8mb4))))) where (`ps`.`status` = 'Active')

-- View: notion.ps_accounts
CREATE ALGORITHM=UNDEFINED DEFINER=`appsheet`@`%` SQL SECURITY DEFINER VIEW `ps_accounts` AS select `sales`.`kss_customer`.`id` AS `id`,`sales`.`kss_customer`.`CustomerID` AS `CustomerID`,`sales`.`kss_customer`.`Company` AS `Company`,`sales`.`kss_customer`.`Phone` AS `Phone`,`sales`.`kss_customer`.`Email` AS `Email`,`sales`.`kss_customer`.`Address` AS `Address`,`sales`.`kss_customer`.`City` AS `City`,`sales`.`kss_customer`.`PostalCode` AS `PostalCode`,`sales`.`kss_customer`.`OpenDate` AS `OpenDate`,`sales`.`kss_customer`.`StateLicenseNum` AS `StateLicenseNum`,`sales`.`kss_customer`.`ChainID` AS `ChainID`,`sales`.`kss_customer`.`Chain - Customer` AS `Chain - Customer`,`sales`.`kss_customer`.`Distro Accounts Count of Doors` AS `Distro Accounts Count of Doors`,`sales`.`kss_customer`.`SalesmanUserID` AS `SalesmanUserID`,`sales`.`kss_customer`.`PrimaryUserID` AS `PrimaryUserID`,`sales`.`kss_customer`.`CountyID` AS `CountyID`,`sales`.`kss_customer`.`TerritoryID` AS `TerritoryID`,`sales`.`kss_customer`.`LocationID` AS `LocationID`,`sales`.`kss_customer`.`AreaID` AS `AreaID`,`sales`.`kss_customer`.`JurisdictionID` AS `JurisdictionID`,`sales`.`kss_customer`.`AccountStatus` AS `AccountStatus`,`sales`.`kss_customer`.`CustomerAccountType` AS `CustomerAccountType`,`sales`.`kss_customer`.`CustomerTypeID` AS `CustomerTypeID`,`sales`.`kss_customer`.`EthnicityID` AS `EthnicityID`,`sales`.`kss_customer`.`IndVolume` AS `IndVolume`,`sales`.`kss_customer`.`AR Account Limit` AS `AR Account Limit` from `sales`.`kss_customer`

-- View: packing.all_products
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `all_products` AS select `pc`.`category` AS `category`,`pc`.`category_type` AS `category_type`,`pc`.`brand` AS `brand`,`pc`.`package` AS `package`,`pc`.`package_size` AS `package_size`,`pc`.`status` AS `status` from `product_sku`.`product_combination` `pc` union select `ct`.`category_id` AS `category_id`,`ct`.`id` AS `id`,'' AS `Name_exp_9`,'' AS `Name_exp_10`,'' AS `Name_exp_11`,'' AS `Name_exp_12` from `product_sku`.`category_type` `ct`

-- View: packing.cs_inventory_view
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `cs_inventory_view` AS select `pi`.`id` AS `id`,`pi`.`metrc_id` AS `metrc_id`,`pi`.`harvest_id` AS `harvest_id`,`pi`.`strain` AS `strain`,`pi`.`category` AS `category`,`pi`.`type` AS `type`,`pi`.`thc` AS `thc`,`pi`.`weight` AS `weight`,`pi`.`room` AS `room`,`pi`.`process_status` AS `process_status`,`pi`.`server_ts` AS `server_ts` from `product_inventory` `pi` where (((`pi`.`property` = 'CS') and (`pi`.`status` = 'Active') and (`pi`.`category` <> 'Pre-roll') and (`pi`.`type` <> 'Pouch') and (`pi`.`process_status` = 'Storage')) or (`pi`.`process_status` = 'Wholesale'))

-- View: packing.employee_performance_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `employee_performance_view` AS select `e`.`Employee Name` AS `employee_name`,`ent`.`date` AS `date`,week(`ent`.`date`,0) AS `week`,year(`ent`.`date`) AS `year`,`a`.`name` AS `activity`,(sum(`ent`.`minutes_no_breaks`) / 60) AS `total_hours`,sum((`ent`.`quantity` * `ent`.`ratio`)) AS `total_quantity` from ((`packing_kpi_employee` `e` left join `packing_kpi_entries` `ent` on((`e`.`Employee ID` = `ent`.`employee_id`))) left join `packing_kpi_activity` `a` on((`ent`.`activity` = `a`.`id`))) where ((`e`.`status` = 'Active') and (`ent`.`approved_on` is not null)) group by `e`.`Employee Name`,`ent`.`date`,`a`.`name` order by `ent`.`date` desc

-- View: packing.kpi_production_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `kpi_production_view` AS select `e`.`Employee Name` AS `employee_name`,`e`.`Group` AS `employee_group`,(case when (`e`.`Group` = 'A') then '1st' when (`e`.`Group` = 'B') then '1st' when (`e`.`Group` = 'C') then '1st' when (`e`.`Group` = 'D') then '1st' when ((`e`.`Group` = 'E') and (`e`.`Work Schedule Start` = '1:00:00 PM')) then '2nd' when ((`e`.`Group` = 'E') and (`e`.`Work Schedule Start` = '12:30:00 PM')) then '2nd' when ((`e`.`Group` = 'E') and (`e`.`Work Schedule Start` = '5:00:00 PM')) then '3rd' when ((`e`.`Group` = 'E') and (`e`.`Work Schedule Start` = '5:05:00 PM')) then '3rd' when ((`e`.`Group` = 'E') and (`e`.`Work Schedule Start` = '4:30:00 PM')) then '3rd' when (`e`.`Group` = 'F') then '1st' else NULL end) AS `employee_shift`,`e`.`status` AS `employee_status`,`ent`.`date` AS `date`,week(`ent`.`date`,0) AS `week`,monthname(`ent`.`date`) AS `month`,year(`ent`.`date`) AS `year`,`a`.`name` AS `activity`,`ent`.`start_time` AS `start_time`,`ent`.`stop_time` AS `stop_time`,`ent`.`duration_minus_breaks_pauses` AS `duration`,(`ent`.`minutes_no_breaks` / 60) AS `total_hours`,`ent`.`quantity` AS `quantity`,`ent`.`ratio` AS `ratio`,(`ent`.`quantity` * `ent`.`ratio`) AS `total_units`,round(((`ent`.`quantity` * `ent`.`ratio`) / (`ent`.`minutes_no_breaks` / 60)),2) AS `units_per_hour`,`ent`.`metrc_tag` AS `metrc_tag` from ((`packing_kpi_entries` `ent` left join `packing_kpi_employee` `e` on((`e`.`Employee ID` = `ent`.`employee_id`))) left join `packing_kpi_activity` `a` on((`ent`.`activity` = `a`.`id`))) where ((`ent`.`approved_on` is not null) and (year(`ent`.`date`) > 2020)) order by `ent`.`date` desc

-- View: packing.meadow_combined
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `meadow_combined` AS select 'please update app' AS `brand`,'' AS `metrc_id`,'' AS `strain`,'' AS `type`,'' AS `quantity`,'' AS `UOM`,'' AS `weight`,'' AS `room`,'' AS `ItemName`

-- View: packing.packaged_inventory
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `packaged_inventory` AS select `product_inventory`.`id` AS `id`,`product_inventory`.`parent_id` AS `parent_id`,`product_inventory`.`date` AS `date`,`product_inventory`.`metrc_id` AS `metrc_id`,`product_inventory`.`process` AS `process`,`product_inventory`.`harvest_id` AS `harvest_id`,`product_inventory`.`harvest_property` AS `harvest_property`,`product_inventory`.`harvest_date` AS `harvest_date`,`product_inventory`.`harvest_week` AS `harvest_week`,`product_inventory`.`harvest_year` AS `harvest_year`,`product_inventory`.`strain` AS `strain`,`product_inventory`.`strain_type` AS `strain_type`,`product_inventory`.`license` AS `license`,`product_inventory`.`brand` AS `brand`,`product_inventory`.`category` AS `category`,`product_inventory`.`type` AS `type`,`product_inventory`.`size` AS `size`,`product_inventory`.`package_size` AS `package_size`,`product_inventory`.`package_units` AS `package_units`,`product_inventory`.`quantity` AS `quantity`,`product_inventory`.`grade` AS `grade`,`product_inventory`.`color` AS `color`,`product_inventory`.`thc` AS `thc`,`product_inventory`.`weight` AS `weight`,`product_inventory`.`uom` AS `uom`,`product_inventory`.`location_id` AS `location_id`,`product_inventory`.`property` AS `property`,`product_inventory`.`room` AS `room`,`product_inventory`.`room_area` AS `room_area`,`product_inventory`.`room_change_reason` AS `room_change_reason`,`product_inventory`.`status` AS `status`,`product_inventory`.`process_status` AS `process_status`,`product_inventory`.`created_on` AS `created_on`,`product_inventory`.`created_by` AS `created_by`,`product_inventory`.`modify_on` AS `modify_on`,`product_inventory`.`modify_by` AS `modify_by`,`product_inventory`.`note` AS `note`,`product_inventory`.`flag` AS `flag`,`product_inventory`.`trigger` AS `trigger`,`product_inventory`.`source_id` AS `source_id`,`product_inventory`.`source_ids` AS `source_ids`,`product_inventory`.`modified_type` AS `modified_type`,`product_inventory`.`server_ts` AS `server_ts`,`product_inventory`.`production_batch` AS `production_batch`,`product_inventory`.`case_id` AS `case_id`,`product_inventory`.`lucid_id` AS `lucid_id`,`product_inventory`.`package_id` AS `package_id`,`product_inventory`.`packed_date` AS `packed_date`,`product_inventory`.`source_metrc_id` AS `source_metrc_id`,`product_inventory`.`source_batch_id` AS `source_batch_id`,`product_inventory`.`external_batch_id` AS `external_batch_id`,`product_inventory`.`thc_coa` AS `thc_coa`,`product_inventory`.`packing_stage` AS `packing_stage`,`product_inventory`.`metrc_location` AS `metrc_location`,`product_inventory`.`old_room` AS `old_room` from `product_inventory` where ((`product_inventory`.`status` = 'Active') and ((`product_inventory`.`type` = 'Pouch') or (`product_inventory`.`type` = 'Tube') or (`product_inventory`.`type` = 'Jar') or (`product_inventory`.`type` = 'Case') or (`product_inventory`.`type` = 'Cartridge') or (`product_inventory`.`type` = 'Disposable Vaporizer')))

-- View: packing.packing_temp_active
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `packing_temp_active` AS select cast(`pa`.`created_on` as date) AS `date`,(case when (`pa`.`pallet_metrc_id` is not null) then `pa`.`pallet_metrc_id` else `pa`.`flower_metrc_id` end) AS `metr_id`,`pa`.`process_status` AS `process`,'Packing' AS `stage`,`pa`.`harvest_id` AS `harvest_id`,`pa`.`property` AS `harvest_property`,`pa`.`harvest_date` AS `harvest_date`,`pa`.`harvest_week` AS `harvest_week`,`pa`.`harvest_year` AS `harvest_year`,concat(`pa`.`harvest_year`,right(concat('0',`pa`.`harvest_week`),2)) AS `harvest_year_week`,`pa`.`strain` AS `strain`,`s`.`name` AS `strain_name`,`s`.`category` AS `strain_category`,`pa`.`short_license` AS `license`,`pa`.`field_5` AS `brand`,`pa`.`action` AS `product_category`,'Buds' AS `product_category_type`,`pa`.`type` AS `package_type`,`ps`.`code` AS `package_size_code`,`pa`.`weight` AS `package_size`,NULL AS `package_units`,NULL AS `packing_group`,(case when (`pa`.`final_unit_quantity` is not null) then 'Each' else 'Pound' end) AS `uom`,(case when (`pa`.`final_unit_quantity` is not null) then `pa`.`final_unit_quantity` when (`pa`.`prepacking_weight` is not null) then `pa`.`prepacking_weight` else `pa`.`batch_weight` end) AS `quantity`,`sku`.`sku` AS `sku`,`sku`.`name` AS `sku_name`,`sku`.`class` AS `sku_class`,`sku`.`kss_id` AS `kss_id`,`pa`.`packed_date` AS `packed_date`,`pa`.`production_number` AS `production_batch`,(case when ((`pa`.`batch_flower_size` = 'R') or (`pa`.`batch_flower_size` = 'B') or (`pa`.`batch_flower_size` = 'M') or (`pa`.`batch_flower_size` = 'S') or (`pa`.`batch_flower_size` = 'MS')) then `pa`.`batch_flower_size` else NULL end) AS `flower_size`,`pa`.`grade` AS `product_grade`,`pa`.`thc_result` AS `thc_label`,NULL AS `thc_coa`,(select max(`lab`.`test_result_date`) from `lab_testing`.`sample_latest_coa` `lab` where (`lab`.`source_batch_id` = `pa`.`f7`)) AS `test_result_date`,'CS' AS `location`,NULL AS `metrc_room`,NULL AS `room_area`,`pa`.`field_6` AS `case_id`,`pa`.`field_4` AS `lucid_id`,`pa`.`f7` AS `source_batch_id`,`pa`.`transfer_metrc_id` AS `source_metrc_id`,`pa`.`general_notes` AS `note` from ((((`packing_temp` `pa` left join `pacstone`.`plant_strain` `s` on((convert(`s`.`id` using utf8mb4) = `pa`.`strain`))) left join `product_sku`.`package_size` `ps` on((convert(`ps`.`size` using utf8mb4) = `pa`.`weight`))) left join `product_sku`.`sku_view` `sku` on((`sku`.`id` = `pa`.`sku_id`))) left join `lab_testing`.`sample_latest_coa` `lab` on((`lab`.`source_batch_id` = `pa`.`f7`))) where (`pa`.`status` = 'Active')

-- View: packing.pi_active
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `pi_active` AS select `pi`.`date` AS `date`,`pi`.`metrc_id` AS `metrc_id`,`pi`.`process` AS `process`,`pi`.`packing_stage` AS `stage`,`h`.`harvest_id` AS `harvest_id`,`pi`.`harvest_property` AS `harvest_property`,`pi`.`harvest_date` AS `harvest_date`,`pi`.`harvest_week` AS `harvest_week`,`pi`.`harvest_year` AS `harvest_year`,concat(`pi`.`harvest_year`,right(concat('0',`pi`.`harvest_week`),2)) AS `harvest_year_week`,`s`.`id` AS `strain`,`s`.`name` AS `strain_name`,`s`.`category` AS `strain_category`,`pi`.`license` AS `license`,`b`.`name` AS `brand`,`cat`.`name` AS `product_category`,`caty`.`name` AS `product_category_type`,`pa`.`name` AS `package_type`,`ps`.`code` AS `package_size_code`,`ps`.`size` AS `package_size`,`pi`.`package_units` AS `package_units`,`pi`.`packing_group_id` AS `packing_group`,`pacstone`.`uom`.`name` AS `uom`,`pi`.`quantity` AS `quantity`,`sku`.`sku` AS `sku`,`sku`.`name` AS `sku_name`,`pi`.`sku_class` AS `sku_class`,`sku`.`kss_id` AS `kss_id`,`pi`.`packed_date` AS `packed_date`,`pi`.`production_batch` AS `production_batch`,`pi`.`size` AS `flower_size`,`pi`.`grade` AS `product_grade`,`pi`.`thc` AS `thc_label`,`pi`.`thc_coa` AS `thc_coa`,(select max(`lab`.`test_result_date`) from `lab_testing`.`sample_latest_coa` `lab` where (`lab`.`source_batch_id` = `pi`.`source_batch_id`)) AS `test_result_date`,`pi`.`property` AS `location`,`ml`.`Name` AS `metrc_room`,`pi`.`room_area` AS `room_area`,`pi`.`case_id` AS `case_id`,`pi`.`lucid_id` AS `lucid_id`,`pi`.`source_batch_id` AS `source_batch_id`,`pi`.`source_metrc_id` AS `source_metrc_id`,`pi`.`note` AS `note` from ((((((((((((`product_inventory` `pi` left join `pacstone`.`plant_strain` `s` on((convert(`s`.`id` using utf8mb4) = `pi`.`strain`))) left join `pacstone`.`brand` `b` on((convert(`b`.`id` using utf8mb4) = `pi`.`brand`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `pi`.`category`))) left join `product_sku`.`category_type` `caty` on((convert(`caty`.`id` using utf8mb4) = `pi`.`type`))) left join `product_sku`.`package` `pa` on((`pa`.`id` = `pi`.`package_id`))) left join `product_sku`.`package_size` `ps` on((`ps`.`id` = `pi`.`package_size`))) left join `product_sku`.`packing_group` `pg` on((`pg`.`id` = `pi`.`packing_group_id`))) left join `pacstone`.`uom` on((convert(`pacstone`.`uom`.`id` using utf8mb4) = `pi`.`uom`))) left join `product_sku`.`sku_view` `sku` on((`sku`.`id` = `pi`.`sku_id`))) left join `metrc`.`metrc_location` `ml` on((`ml`.`Id` = `pi`.`room`))) left join `cultivation`.`harvesting_ref` `h` on((`h`.`id` = `pi`.`harvest_id`))) left join `lab_testing`.`sample_latest_coa` `lab` on((`lab`.`source_batch_id` = `pi`.`source_batch_id`))) where ((`pi`.`status` = 'Active') and (`pi`.`room` <> '928201'))

-- View: packing.prerroll_production_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `prerroll_production_view` AS select `e`.`Employee Name` AS `employee_name`,`e`.`Group` AS `employee_group`,(case when (`e`.`Group` = 'A') then '1st' when (`e`.`Group` = 'B') then '1st' when (`e`.`Group` = 'C') then '1st' when (`e`.`Group` = 'D') then '1st' when ((`e`.`Group` = 'E') and (`e`.`Work Schedule Start` = '1:00:00 PM')) then '2nd' when ((`e`.`Group` = 'E') and (`e`.`Work Schedule Start` = '12:30:00 PM')) then '2nd' when ((`e`.`Group` = 'E') and (`e`.`Work Schedule Start` = '5:00:00 PM')) then '3rd' when ((`e`.`Group` = 'E') and (`e`.`Work Schedule Start` = '5:05:00 PM')) then '3rd' when ((`e`.`Group` = 'E') and (`e`.`Work Schedule Start` = '4:30:00 PM')) then '3rd' when (`e`.`Group` = 'F') then '1st' else NULL end) AS `employee_shift`,`e`.`status` AS `employee_status`,`ent`.`date` AS `date`,week(`ent`.`date`,0) AS `week`,monthname(`ent`.`date`) AS `month`,year(`ent`.`date`) AS `year`,`a`.`name` AS `activity`,sum((`ent`.`minutes_no_breaks` / 60)) AS `total_hours`,sum(`ent`.`quantity`) AS `quantity`,max(`ent`.`ratio`) AS `ratio`,sum((`ent`.`quantity` * `ent`.`ratio`)) AS `total_units`,round(sum(((`ent`.`quantity` * `ent`.`ratio`) / 14)),2) AS `total_cases` from ((`packing_kpi_entries` `ent` left join `packing_kpi_employee` `e` on((`e`.`Employee ID` = `ent`.`employee_id`))) left join `packing_kpi_activity` `a` on((`ent`.`activity` = `a`.`id`))) where ((`a`.`name` = 'Haciendo cigarro') and (`ent`.`approved_on` is not null) and (year(`ent`.`date`) > 2020)) group by `e`.`Employee Name`,`ent`.`date`,`a`.`name`,`e`.`Group`,`e`.`Work Schedule Start`,`e`.`status` order by `ent`.`date` desc

-- View: packing.product_inventory_active
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `product_inventory_active` AS select `product_inventory`.`id` AS `id`,`product_inventory`.`parent_id` AS `parent_id`,`product_inventory`.`date` AS `date`,`product_inventory`.`metrc_id` AS `metrc_id`,`product_inventory`.`process` AS `process`,`product_inventory`.`harvest_id` AS `harvest_id`,`product_inventory`.`harvest_property` AS `harvest_property`,`product_inventory`.`harvest_date` AS `harvest_date`,`product_inventory`.`harvest_week` AS `harvest_week`,`product_inventory`.`harvest_year` AS `harvest_year`,`product_inventory`.`strain` AS `strain`,`product_inventory`.`strain_type` AS `strain_type`,`product_inventory`.`license` AS `license`,`product_inventory`.`brand` AS `brand`,`product_inventory`.`category` AS `category`,`product_inventory`.`type` AS `type`,`product_inventory`.`size` AS `size`,`product_inventory`.`package_size` AS `package_size`,`product_inventory`.`package_units` AS `package_units`,`product_inventory`.`quantity` AS `quantity`,`product_inventory`.`grade` AS `grade`,`product_inventory`.`color` AS `color`,`product_inventory`.`thc` AS `thc`,`product_inventory`.`weight` AS `weight`,`product_inventory`.`uom` AS `uom`,`product_inventory`.`location_id` AS `location_id`,`product_inventory`.`property` AS `property`,`product_inventory`.`room` AS `room`,`product_inventory`.`room_area` AS `room_area`,`product_inventory`.`room_change_reason` AS `room_change_reason`,`product_inventory`.`status` AS `status`,`product_inventory`.`process_status` AS `process_status`,`product_inventory`.`created_on` AS `created_on`,`product_inventory`.`created_by` AS `created_by`,`product_inventory`.`modify_on` AS `modify_on`,`product_inventory`.`modify_by` AS `modify_by`,`product_inventory`.`note` AS `note`,`product_inventory`.`flag` AS `flag`,`product_inventory`.`trigger` AS `trigger`,`product_inventory`.`source_id` AS `source_id`,`product_inventory`.`source_ids` AS `source_ids`,`product_inventory`.`modified_type` AS `modified_type`,`product_inventory`.`server_ts` AS `server_ts`,`product_inventory`.`production_batch` AS `production_batch`,`product_inventory`.`case_id` AS `case_id`,`product_inventory`.`lucid_id` AS `lucid_id`,`product_inventory`.`package_id` AS `package_id`,`product_inventory`.`packed_date` AS `packed_date`,`product_inventory`.`source_metrc_id` AS `source_metrc_id`,`product_inventory`.`source_batch_id` AS `source_batch_id`,`product_inventory`.`external_batch_id` AS `external_batch_id`,`product_inventory`.`thc_coa` AS `thc_coa`,`product_inventory`.`packing_stage` AS `packing_stage`,`product_inventory`.`metrc_location` AS `metrc_location`,`product_inventory`.`old_room` AS `old_room` from `product_inventory` where (`product_inventory`.`status` = 'Active')

-- View: packing.product_inventory_report
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `product_inventory_report` AS select concat('pi_',row_number() OVER () ) AS `id`,`pi_active`.`date` AS `date`,`pi_active`.`metrc_id` AS `metrc_id`,`pi_active`.`process` AS `process`,`pi_active`.`stage` AS `stage`,`pi_active`.`harvest_id` AS `harvest_id`,`pi_active`.`harvest_property` AS `harvest_property`,`pi_active`.`harvest_date` AS `harvest_date`,`pi_active`.`harvest_week` AS `harvest_week`,`pi_active`.`harvest_year` AS `harvest_year`,`pi_active`.`harvest_year_week` AS `harvest_year_week`,`pi_active`.`strain` AS `strain`,`pi_active`.`strain_name` AS `strain_name`,`pi_active`.`strain_category` AS `strain_category`,`pi_active`.`license` AS `license`,`pi_active`.`brand` AS `brand`,`pi_active`.`product_category` AS `product_category`,`pi_active`.`product_category_type` AS `product_category_type`,`pi_active`.`package_type` AS `package_type`,`pi_active`.`package_size_code` AS `package_size_code`,`pi_active`.`package_size` AS `package_size`,`pi_active`.`package_units` AS `package_units`,`pi_active`.`packing_group` AS `packing_group`,`pi_active`.`uom` AS `uom`,`pi_active`.`quantity` AS `quantity`,`pi_active`.`sku` AS `sku`,`pi_active`.`sku_name` AS `sku_name`,`pi_active`.`sku_class` AS `sku_class`,`pi_active`.`kss_id` AS `kss_id`,`pi_active`.`packed_date` AS `packed_date`,`pi_active`.`production_batch` AS `production_batch`,`pi_active`.`flower_size` AS `flower_size`,`pi_active`.`product_grade` AS `product_grade`,`pi_active`.`thc_label` AS `thc_label`,`pi_active`.`thc_coa` AS `thc_coa`,`pi_active`.`test_result_date` AS `test_result_date`,`pi_active`.`location` AS `location`,`pi_active`.`metrc_room` AS `metrc_room`,`pi_active`.`room_area` AS `room_area`,`pi_active`.`case_id` AS `case_id`,`pi_active`.`lucid_id` AS `lucid_id`,`pi_active`.`source_batch_id` AS `source_batch_id`,`pi_active`.`source_metrc_id` AS `source_metrc_id`,`pi_active`.`note` AS `note` from `pi_active` union select concat('pp_',row_number() OVER () ) AS `id`,`packing_temp_active`.`date` AS `date`,`packing_temp_active`.`metr_id` AS `metr_id`,`packing_temp_active`.`process` AS `process`,`packing_temp_active`.`stage` AS `stage`,`packing_temp_active`.`harvest_id` AS `harvest_id`,`packing_temp_active`.`harvest_property` AS `harvest_property`,`packing_temp_active`.`harvest_date` AS `harvest_date`,`packing_temp_active`.`harvest_week` AS `harvest_week`,`packing_temp_active`.`harvest_year` AS `harvest_year`,`packing_temp_active`.`harvest_year_week` AS `harvest_year_week`,`packing_temp_active`.`strain` AS `strain`,`packing_temp_active`.`strain_name` AS `strain_name`,`packing_temp_active`.`strain_category` AS `strain_category`,`packing_temp_active`.`license` AS `license`,`packing_temp_active`.`brand` AS `brand`,`packing_temp_active`.`product_category` AS `product_category`,`packing_temp_active`.`product_category_type` AS `product_category_type`,`packing_temp_active`.`package_type` AS `package_type`,`packing_temp_active`.`package_size_code` AS `package_size_code`,`packing_temp_active`.`package_size` AS `package_size`,`packing_temp_active`.`package_units` AS `package_units`,`packing_temp_active`.`packing_group` AS `packing_group`,`packing_temp_active`.`uom` AS `uom`,`packing_temp_active`.`quantity` AS `quantity`,`packing_temp_active`.`sku` AS `sku`,`packing_temp_active`.`sku_name` AS `sku_name`,`packing_temp_active`.`sku_class` AS `sku_class`,`packing_temp_active`.`kss_id` AS `kss_id`,`packing_temp_active`.`packed_date` AS `packed_date`,`packing_temp_active`.`production_batch` AS `production_batch`,`packing_temp_active`.`flower_size` AS `flower_size`,`packing_temp_active`.`product_grade` AS `product_grade`,`packing_temp_active`.`thc_label` AS `thc_label`,`packing_temp_active`.`thc_coa` AS `thc_coa`,`packing_temp_active`.`test_result_date` AS `test_result_date`,`packing_temp_active`.`location` AS `location`,`packing_temp_active`.`metrc_room` AS `metrc_room`,`packing_temp_active`.`room_area` AS `room_area`,`packing_temp_active`.`case_id` AS `case_id`,`packing_temp_active`.`lucid_id` AS `lucid_id`,`packing_temp_active`.`source_batch_id` AS `source_batch_id`,`packing_temp_active`.`source_metrc_id` AS `source_metrc_id`,`packing_temp_active`.`note` AS `note` from `packing_temp_active` order by `date` desc

-- View: packing.product_inventory_report_jsonArray
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `product_inventory_report_jsonArray` AS select json_array('id','date','metrc_id','process','stage','harvest_id','harvest_property','harvest_date','harvest_week','harvest_year','harvest_year_week','strain','strain_name','strain_category','license','brand','product_category','product_category_type','package_type','package_size_code','package_size','package_units','packing_group','uom','quantity','sku','sku_name','sku_class','kss_id','packed_date','production_batch','flower_size','product_grade','thc_label','thc_coa','test_result_date','location','metrc_room','room_area','case_id','lucid_id','source_batch_id','source_metrc_id','note') AS `h` union select json_array(`pir`.`id`,`pir`.`date`,`pir`.`metrc_id`,`pir`.`process`,`pir`.`stage`,`pir`.`harvest_id`,`pir`.`harvest_property`,`pir`.`harvest_date`,`pir`.`harvest_week`,`pir`.`harvest_year`,`pir`.`harvest_year_week`,`pir`.`strain`,`pir`.`strain_name`,`pir`.`strain_category`,`pir`.`license`,`pir`.`brand`,`pir`.`product_category`,`pir`.`product_category_type`,`pir`.`package_type`,`pir`.`package_size_code`,`pir`.`package_size`,`pir`.`package_units`,`pir`.`packing_group`,`pir`.`uom`,`pir`.`quantity`,`pir`.`sku`,`pir`.`sku_name`,`pir`.`sku_class`,`pir`.`kss_id`,`pir`.`packed_date`,`pir`.`production_batch`,`pir`.`flower_size`,`pir`.`product_grade`,`pir`.`thc_label`,`pir`.`thc_coa`,`pir`.`test_result_date`,`pir`.`location`,`pir`.`metrc_room`,`pir`.`room_area`,`pir`.`case_id`,`pir`.`lucid_id`,`pir`.`source_batch_id`,`pir`.`source_metrc_id`,`pir`.`note`) AS `d` from `product_inventory_report` `pir`

-- View: packing.sp_inv_vs_metrc
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `sp_inv_vs_metrc` AS select `mp`.`Id` AS `Id_Metrc`,`mp`.`Label` AS `Label`,`mp`.`PackageType` AS `PackageType`,`mp`.`SourceHarvestCount` AS `SourceHarvestCount`,`mp`.`SourcePackageCount` AS `SourcePackageCount`,`mp`.`SourceProcessingJobCount` AS `SourceProcessingJobCount`,`mp`.`SourceHarvestNames` AS `SourceHarvestNames`,`mp`.`LocationId` AS `LocationId`,`mp`.`LocationName` AS `LocationName`,`mp`.`LocationTypeName` AS `LocationTypeName`,`mp`.`Quantity` AS `Quantity_Metrc`,`mp`.`UnitOfMeasureName` AS `UnitOfMeasureName`,`mp`.`UnitOfMeasureAbbreviation` AS `UnitOfMeasureAbbreviation`,`mp`.`PatientLicenseNumber` AS `PatientLicenseNumber`,`mp`.`ItemFromFacilityLicenseNumber` AS `ItemFromFacilityLicenseNumber`,`mp`.`ItemFromFacilityName` AS `ItemFromFacilityName`,`mp`.`Note` AS `Note_Metrc`,`mp`.`PackagedDate` AS `PackagedDate`,`mp`.`InitialLabTestingState` AS `InitialLabTestingState`,`mp`.`LabTestingState` AS `LabTestingState`,`mp`.`LabTestingStateDate` AS `LabTestingStateDate`,`mp`.`IsProductionBatch` AS `IsProductionBatch`,`mp`.`ProductionBatchNumber` AS `ProductionBatchNumber`,`mp`.`SourceProductionBatchNumbers` AS `SourceProductionBatchNumbers`,`mp`.`IsTradeSample` AS `IsTradeSample`,`mp`.`IsTradeSamplePersistent` AS `IsTradeSamplePersistent`,`mp`.`SourcePackageIsTradeSample` AS `SourcePackageIsTradeSample`,`mp`.`IsDonation` AS `IsDonation`,`mp`.`IsDonationPersistent` AS `IsDonationPersistent`,`mp`.`SourcePackageIsDonation` AS `SourcePackageIsDonation`,`mp`.`IsTestingSample` AS `IsTestingSample`,`mp`.`IsProcessValidationTestingSample` AS `IsProcessValidationTestingSample`,`mp`.`ProductRequiresRemediation` AS `ProductRequiresRemediation`,`mp`.`ContainsRemediatedProduct` AS `ContainsRemediatedProduct`,`mp`.`RemediationDate` AS `RemediationDate`,`mp`.`ReceivedDateTime` AS `ReceivedDateTime`,`mp`.`ReceivedFromManifestNumber` AS `ReceivedFromManifestNumber`,`mp`.`ReceivedFromFacilityLicenseNumber` AS `ReceivedFromFacilityLicenseNumber`,`mp`.`ReceivedFromFacilityName` AS `ReceivedFromFacilityName`,`mp`.`IsOnHold` AS `IsOnHold`,`mp`.`ArchivedDate` AS `ArchivedDate`,`mp`.`FinishedDate` AS `FinishedDate`,`mp`.`LastModified` AS `LastModified`,`mp`.`Item` AS `Item`,`mp`.`License` AS `License_Metrc`,`mp`.`ItemName` AS `ItemName`,`mp`.`ItemQuantityType` AS `ItemQuantityType`,`mp`.`ItemUnitWeight` AS `ItemUnitWeight`,`mp`.`ItemUOM` AS `ItemUOM`,`mp`.`ItemProductCategoryName` AS `ItemProductCategoryName`,`mp`.`ItemProductCategoryType` AS `ItemProductCategoryType`,`mp`.`ItemStrainName` AS `ItemStrainName`,round((case when (`mp`.`UnitOfMeasureName` = 'Pounds') then `mp`.`Quantity` when (`mp`.`UnitOfMeasureName` = 'Grams') then (`mp`.`Quantity` / 453.592) when (`mp`.`UnitOfMeasureName` = 'Each') then (case when (`mp`.`ItemUOM` = 'Grams') then ((`mp`.`Quantity` * `mp`.`ItemUnitWeight`) / 453.592) when (`mp`.`ItemUOM` = 'null') then (`mp`.`Quantity` / 453.592) end) end),2) AS `Weight_Metrc`,`pi`.`id` AS `id`,`pi`.`parent_id` AS `parent_id`,`pi`.`date` AS `date`,`pi`.`metrc_id` AS `metrc_id`,`pi`.`process` AS `process`,`pi`.`harvest_id` AS `harvest_id`,`pi`.`harvest_property` AS `harvest_property`,`pi`.`harvest_date` AS `harvest_date`,`pi`.`harvest_week` AS `harvest_week`,`pi`.`harvest_year` AS `harvest_year`,`pi`.`strain` AS `strain`,`pi`.`strain_type` AS `strain_type`,`pi`.`license` AS `license`,`pi`.`brand` AS `brand`,`pi`.`category` AS `category`,`pi`.`type` AS `type`,`pi`.`size` AS `size`,`pi`.`package_size` AS `package_size`,`pi`.`package_units` AS `package_units`,`pi`.`quantity` AS `quantity`,`pi`.`grade` AS `grade`,`pi`.`color` AS `color`,`pi`.`thc` AS `thc`,`pi`.`weight` AS `weight`,`pi`.`uom` AS `uom`,`pi`.`location_id` AS `location_id`,`pi`.`property` AS `property`,`pi`.`room` AS `room`,`pi`.`room_area` AS `room_area`,`pi`.`room_change_reason` AS `room_change_reason`,`pi`.`status` AS `status`,`pi`.`process_status` AS `process_status`,`pi`.`created_on` AS `created_on`,`pi`.`created_by` AS `created_by`,`pi`.`modify_on` AS `modify_on`,`pi`.`modify_by` AS `modify_by`,`pi`.`note` AS `note`,`pi`.`flag` AS `flag`,`pi`.`trigger` AS `trigger`,`pi`.`source_id` AS `source_id`,`pi`.`source_ids` AS `source_ids`,`pi`.`modified_type` AS `modified_type`,`pi`.`server_ts` AS `server_ts`,`pi`.`production_batch` AS `production_batch`,`pi`.`case_id` AS `case_id`,`pi`.`lucid_id` AS `lucid_id`,`pi`.`package_id` AS `package_id`,`pi`.`packed_date` AS `packed_date`,`pi`.`source_metrc_id` AS `source_metrc_id`,`pi`.`source_batch_id` AS `source_batch_id`,`pi`.`external_batch_id` AS `external_batch_id`,`pi`.`thc_coa` AS `thc_coa`,`pi`.`packing_stage` AS `packing_stage`,`ps`.`name` AS `strain_name_sp`,`ps`.`pacific_stone_label` AS `strain_name_sp_ps`,`ps`.`time_machine_label` AS `strain_name_sp_tm` from ((`metrc`.`package` `mp` join `product_inventory` `pi` on((convert(`mp`.`Label` using utf8mb4) = `pi`.`metrc_id`))) join `pacstone`.`plant_strain` `ps` on((`pi`.`strain` = convert(`ps`.`id` using utf8mb4)))) where ((`pi`.`status` = 'Active') and (`mp`.`ArchivedDate` is null) and (`mp`.`FinishedDate` is null))

-- View: packing.sp_inv_vs_metrc_discrepancies
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `sp_inv_vs_metrc_discrepancies` AS select (case when (`t`.`Quantity_Metrc` <> `t`.`quantity`) then 'Quantity' when (`t`.`LocationId` <> `t`.`room`) then 'Location' when ((`t`.`Weight_Metrc` <> `t`.`weight`) and (`t`.`UnitOfMeasureName` <> 'Each')) then 'Weight' when ((`t`.`ItemStrainName` <> 'null') and (`t`.`ItemStrainName` not in (convert(`t`.`strain_name_sp` using utf8mb4),convert(`t`.`strain_name_sp_ps` using utf8mb4),convert(`t`.`strain_name_sp_tm` using utf8mb4),`t`.`strain`))) then 'Strain' end) AS `Discrepancy`,`t`.`Id_Metrc` AS `Id_Metrc`,`t`.`Label` AS `Label`,`t`.`PackageType` AS `PackageType`,`t`.`SourceHarvestCount` AS `SourceHarvestCount`,`t`.`SourcePackageCount` AS `SourcePackageCount`,`t`.`SourceProcessingJobCount` AS `SourceProcessingJobCount`,`t`.`SourceHarvestNames` AS `SourceHarvestNames`,`t`.`LocationId` AS `LocationId`,`t`.`LocationName` AS `LocationName`,`t`.`LocationTypeName` AS `LocationTypeName`,`t`.`Quantity_Metrc` AS `Quantity_Metrc`,`t`.`UnitOfMeasureName` AS `UnitOfMeasureName`,`t`.`UnitOfMeasureAbbreviation` AS `UnitOfMeasureAbbreviation`,`t`.`PatientLicenseNumber` AS `PatientLicenseNumber`,`t`.`ItemFromFacilityLicenseNumber` AS `ItemFromFacilityLicenseNumber`,`t`.`ItemFromFacilityName` AS `ItemFromFacilityName`,`t`.`Note_Metrc` AS `Note_Metrc`,`t`.`PackagedDate` AS `PackagedDate`,`t`.`InitialLabTestingState` AS `InitialLabTestingState`,`t`.`LabTestingState` AS `LabTestingState`,`t`.`LabTestingStateDate` AS `LabTestingStateDate`,`t`.`IsProductionBatch` AS `IsProductionBatch`,`t`.`ProductionBatchNumber` AS `ProductionBatchNumber`,`t`.`SourceProductionBatchNumbers` AS `SourceProductionBatchNumbers`,`t`.`IsTradeSample` AS `IsTradeSample`,`t`.`IsTradeSamplePersistent` AS `IsTradeSamplePersistent`,`t`.`SourcePackageIsTradeSample` AS `SourcePackageIsTradeSample`,`t`.`IsDonation` AS `IsDonation`,`t`.`IsDonationPersistent` AS `IsDonationPersistent`,`t`.`SourcePackageIsDonation` AS `SourcePackageIsDonation`,`t`.`IsTestingSample` AS `IsTestingSample`,`t`.`IsProcessValidationTestingSample` AS `IsProcessValidationTestingSample`,`t`.`ProductRequiresRemediation` AS `ProductRequiresRemediation`,`t`.`ContainsRemediatedProduct` AS `ContainsRemediatedProduct`,`t`.`RemediationDate` AS `RemediationDate`,`t`.`ReceivedDateTime` AS `ReceivedDateTime`,`t`.`ReceivedFromManifestNumber` AS `ReceivedFromManifestNumber`,`t`.`ReceivedFromFacilityLicenseNumber` AS `ReceivedFromFacilityLicenseNumber`,`t`.`ReceivedFromFacilityName` AS `ReceivedFromFacilityName`,`t`.`IsOnHold` AS `IsOnHold`,`t`.`ArchivedDate` AS `ArchivedDate`,`t`.`FinishedDate` AS `FinishedDate`,`t`.`LastModified` AS `LastModified`,`t`.`Item` AS `Item`,`t`.`License_Metrc` AS `License_Metrc`,`t`.`ItemName` AS `ItemName`,`t`.`ItemQuantityType` AS `ItemQuantityType`,`t`.`ItemUnitWeight` AS `ItemUnitWeight`,`t`.`ItemUOM` AS `ItemUOM`,`t`.`ItemProductCategoryName` AS `ItemProductCategoryName`,`t`.`ItemProductCategoryType` AS `ItemProductCategoryType`,`t`.`ItemStrainName` AS `ItemStrainName`,`t`.`Weight_Metrc` AS `Weight_Metrc`,`t`.`id` AS `id`,`t`.`parent_id` AS `parent_id`,`t`.`date` AS `date`,`t`.`metrc_id` AS `metrc_id`,`t`.`process` AS `process`,`t`.`harvest_id` AS `harvest_id`,`t`.`harvest_property` AS `harvest_property`,`t`.`harvest_date` AS `harvest_date`,`t`.`harvest_week` AS `harvest_week`,`t`.`harvest_year` AS `harvest_year`,`t`.`strain` AS `strain`,`t`.`strain_type` AS `strain_type`,`t`.`license` AS `license`,`t`.`brand` AS `brand`,`t`.`category` AS `category`,`t`.`type` AS `type`,`t`.`size` AS `size`,`t`.`package_size` AS `package_size`,`t`.`package_units` AS `package_units`,`t`.`quantity` AS `quantity`,`t`.`grade` AS `grade`,`t`.`color` AS `color`,`t`.`thc` AS `thc`,`t`.`weight` AS `weight`,`t`.`uom` AS `uom`,`t`.`location_id` AS `location_id`,`t`.`property` AS `property`,`t`.`room` AS `room`,`t`.`room_area` AS `room_area`,`t`.`room_change_reason` AS `room_change_reason`,`t`.`status` AS `status`,`t`.`process_status` AS `process_status`,`t`.`created_on` AS `created_on`,`t`.`created_by` AS `created_by`,`t`.`modify_on` AS `modify_on`,`t`.`modify_by` AS `modify_by`,`t`.`note` AS `note`,`t`.`flag` AS `flag`,`t`.`trigger` AS `trigger`,`t`.`source_id` AS `source_id`,`t`.`source_ids` AS `source_ids`,`t`.`modified_type` AS `modified_type`,`t`.`server_ts` AS `server_ts`,`t`.`production_batch` AS `production_batch`,`t`.`case_id` AS `case_id`,`t`.`lucid_id` AS `lucid_id`,`t`.`package_id` AS `package_id`,`t`.`packed_date` AS `packed_date`,`t`.`source_metrc_id` AS `source_metrc_id`,`t`.`source_batch_id` AS `source_batch_id`,`t`.`external_batch_id` AS `external_batch_id`,`t`.`thc_coa` AS `thc_coa`,`t`.`packing_stage` AS `packing_stage`,`t`.`strain_name_sp` AS `strain_name_sp`,`t`.`strain_name_sp` AS `strain_name_sp_ps`,`t`.`strain_name_sp` AS `strain_name_sp_tm` from `sp_inv_vs_metrc` `t` where ((`t`.`property` = 'SP') and ((`t`.`LocationId` <> `t`.`room`) or ((`t`.`Quantity_Metrc` <> `t`.`quantity`) and (`t`.`LocationId` <> '928201') and (`t`.`room` <> '928201') and (`t`.`room_area` <> 'Meadow')) or ((((`t`.`Weight_Metrc` - `t`.`weight`) / `t`.`weight`) > 0.02) and (`t`.`UnitOfMeasureName` <> 'Each')) or ((`t`.`ItemStrainName` <> 'null') and (`t`.`ItemStrainName` not in (convert(`t`.`strain_name_sp` using utf8mb4),convert(`t`.`strain_name_sp_ps` using utf8mb4),convert(`t`.`strain_name_sp_tm` using utf8mb4),`t`.`strain`)))))

-- View: packing.sp_inv_vs_metrc_discrepancies2
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `sp_inv_vs_metrc_discrepancies2` AS select (case when (`t`.`Quantity_Metrc` <> `t`.`quantity`) then 'Quantity' when (`t`.`LocationId` <> `t`.`room`) then 'Location' when ((`t`.`Weight_Metrc` <> `t`.`weight`) and (`t`.`UnitOfMeasureName` <> 'Each')) then 'Weight' when ((`t`.`ItemStrainName` <> 'null') and (`t`.`ItemStrainName` not in (convert(`t`.`strain_name_sp` using utf8mb4),convert(`t`.`strain_name_sp_ps` using utf8mb4),convert(`t`.`strain_name_sp_tm` using utf8mb4),`t`.`strain`))) then 'Strain' end) AS `Discrepancy`,`t`.`Id_Metrc` AS `Id_Metrc`,`t`.`Label` AS `Label`,`t`.`PackageType` AS `PackageType`,`t`.`SourceHarvestCount` AS `SourceHarvestCount`,`t`.`SourcePackageCount` AS `SourcePackageCount`,`t`.`SourceProcessingJobCount` AS `SourceProcessingJobCount`,`t`.`SourceHarvestNames` AS `SourceHarvestNames`,`t`.`LocationId` AS `LocationId`,`t`.`LocationName` AS `LocationName`,`t`.`LocationTypeName` AS `LocationTypeName`,`t`.`Quantity_Metrc` AS `Quantity_Metrc`,`t`.`UnitOfMeasureName` AS `UnitOfMeasureName`,`t`.`UnitOfMeasureAbbreviation` AS `UnitOfMeasureAbbreviation`,`t`.`PatientLicenseNumber` AS `PatientLicenseNumber`,`t`.`ItemFromFacilityLicenseNumber` AS `ItemFromFacilityLicenseNumber`,`t`.`ItemFromFacilityName` AS `ItemFromFacilityName`,`t`.`Note_Metrc` AS `Note_Metrc`,`t`.`PackagedDate` AS `PackagedDate`,`t`.`InitialLabTestingState` AS `InitialLabTestingState`,`t`.`LabTestingState` AS `LabTestingState`,`t`.`LabTestingStateDate` AS `LabTestingStateDate`,`t`.`IsProductionBatch` AS `IsProductionBatch`,`t`.`ProductionBatchNumber` AS `ProductionBatchNumber`,`t`.`SourceProductionBatchNumbers` AS `SourceProductionBatchNumbers`,`t`.`IsTradeSample` AS `IsTradeSample`,`t`.`IsTradeSamplePersistent` AS `IsTradeSamplePersistent`,`t`.`SourcePackageIsTradeSample` AS `SourcePackageIsTradeSample`,`t`.`IsDonation` AS `IsDonation`,`t`.`IsDonationPersistent` AS `IsDonationPersistent`,`t`.`SourcePackageIsDonation` AS `SourcePackageIsDonation`,`t`.`IsTestingSample` AS `IsTestingSample`,`t`.`IsProcessValidationTestingSample` AS `IsProcessValidationTestingSample`,`t`.`ProductRequiresRemediation` AS `ProductRequiresRemediation`,`t`.`ContainsRemediatedProduct` AS `ContainsRemediatedProduct`,`t`.`RemediationDate` AS `RemediationDate`,`t`.`ReceivedDateTime` AS `ReceivedDateTime`,`t`.`ReceivedFromManifestNumber` AS `ReceivedFromManifestNumber`,`t`.`ReceivedFromFacilityLicenseNumber` AS `ReceivedFromFacilityLicenseNumber`,`t`.`ReceivedFromFacilityName` AS `ReceivedFromFacilityName`,`t`.`IsOnHold` AS `IsOnHold`,`t`.`ArchivedDate` AS `ArchivedDate`,`t`.`FinishedDate` AS `FinishedDate`,`t`.`LastModified` AS `LastModified`,`t`.`Item` AS `Item`,`t`.`License_Metrc` AS `License_Metrc`,`t`.`ItemName` AS `ItemName`,`t`.`ItemQuantityType` AS `ItemQuantityType`,`t`.`ItemUnitWeight` AS `ItemUnitWeight`,`t`.`ItemUOM` AS `ItemUOM`,`t`.`ItemProductCategoryName` AS `ItemProductCategoryName`,`t`.`ItemProductCategoryType` AS `ItemProductCategoryType`,`t`.`ItemStrainName` AS `ItemStrainName`,`t`.`Weight_Metrc` AS `Weight_Metrc`,`t`.`id` AS `id`,`t`.`parent_id` AS `parent_id`,`t`.`date` AS `date`,`t`.`metrc_id` AS `metrc_id`,`t`.`process` AS `process`,`t`.`harvest_id` AS `harvest_id`,`t`.`harvest_property` AS `harvest_property`,`t`.`harvest_date` AS `harvest_date`,`t`.`harvest_week` AS `harvest_week`,`t`.`harvest_year` AS `harvest_year`,`t`.`strain` AS `strain`,`t`.`strain_type` AS `strain_type`,`t`.`license` AS `license`,`t`.`brand` AS `brand`,`t`.`category` AS `category`,`t`.`type` AS `type`,`t`.`size` AS `size`,`t`.`package_size` AS `package_size`,`t`.`package_units` AS `package_units`,`t`.`quantity` AS `quantity`,`t`.`grade` AS `grade`,`t`.`color` AS `color`,`t`.`thc` AS `thc`,`t`.`weight` AS `weight`,`t`.`uom` AS `uom`,`t`.`location_id` AS `location_id`,`t`.`property` AS `property`,`t`.`room` AS `room`,`t`.`room_area` AS `room_area`,`t`.`room_change_reason` AS `room_change_reason`,`t`.`status` AS `status`,`t`.`process_status` AS `process_status`,`t`.`created_on` AS `created_on`,`t`.`created_by` AS `created_by`,`t`.`modify_on` AS `modify_on`,`t`.`modify_by` AS `modify_by`,`t`.`note` AS `note`,`t`.`flag` AS `flag`,`t`.`trigger` AS `trigger`,`t`.`source_id` AS `source_id`,`t`.`source_ids` AS `source_ids`,`t`.`modified_type` AS `modified_type`,`t`.`server_ts` AS `server_ts`,`t`.`production_batch` AS `production_batch`,`t`.`case_id` AS `case_id`,`t`.`lucid_id` AS `lucid_id`,`t`.`package_id` AS `package_id`,`t`.`packed_date` AS `packed_date`,`t`.`source_metrc_id` AS `source_metrc_id`,`t`.`source_batch_id` AS `source_batch_id`,`t`.`external_batch_id` AS `external_batch_id`,`t`.`thc_coa` AS `thc_coa`,`t`.`packing_stage` AS `packing_stage`,`t`.`strain_name_sp` AS `strain_name_sp`,`t`.`strain_name_sp` AS `strain_name_sp_ps`,`t`.`strain_name_sp` AS `strain_name_sp_tm` from `sp_inv_vs_metrc_MV` `t` where ((`t`.`property` = 'SP') and ((`t`.`LocationId` <> `t`.`room`) or ((`t`.`Quantity_Metrc` <> `t`.`quantity`) and (`t`.`LocationId` <> '928201') and (`t`.`room` <> '928201') and (`t`.`room_area` <> 'Meadow')) or ((((`t`.`Weight_Metrc` - `t`.`weight`) / `t`.`weight`) > 0.02) and (`t`.`UnitOfMeasureName` <> 'Each')) or ((`t`.`ItemStrainName` <> 'null') and (`t`.`ItemStrainName` not in (convert(`t`.`strain_name_sp` using utf8mb4),convert(`t`.`strain_name_sp_ps` using utf8mb4),convert(`t`.`strain_name_sp_tm` using utf8mb4),`t`.`strain`)))))

-- View: pacstone.active_cannabis_license
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `active_cannabis_license` AS select `cl`.`id` AS `id`,`cl`.`property` AS `property`,`cl`.`type` AS `type`,`cl`.`short_number` AS `short_number`,`cl`.`business_entity` AS `business_entity` from `cannabis_license` `cl` where (`cl`.`status` = 'Active')

-- View: pacstone.active_canopy
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `active_canopy` AS select `c`.`id` AS `id`,`c`.`name` AS `name`,`c`.`property_id` AS `property_id`,`c`.`cannabis_license_id` AS `cannabis_license_id`,`c`.`metrc_initial` AS `metrc_package_tag_initial`,`c`.`metrc_plant_tag_initial` AS `metrc_plant_tag_initial`,`c`.`location_id` AS `location_id`,`c`.`location_string` AS `location_string`,`c`.`capacity` AS `capacity` from `canopy` `c` where (`c`.`status` = 'Active')

-- View: pacstone.active_location
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `active_location` AS select `l`.`id` AS `id`,`l`.`location_level1` AS `location_level1`,`l`.`location_level3` AS `location_level3`,`l`.`location_level5` AS `location_level5`,`l`.`location_string` AS `location_string`,`l`.`location_class` AS `location_class` from `location` `l` where (`l`.`status` = 'active')

-- View: pacstone.active_property
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `active_property` AS select `p`.`id` AS `id`,`p`.`name` AS `name`,`p`.`operations` AS `operations` from `property` `p` where ((`p`.`status` = 'Active') and (`p`.`operations` is not null))

-- View: pacstone.active_strain
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `active_strain` AS select `ps`.`id` AS `id`,`ps`.`name` AS `name`,`ps`.`category` AS `category` from `plant_strain` `ps` where (`ps`.`status` = 'Active')

-- View: pacstone.active_strain_view
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `active_strain_view` AS select `ps`.`id` AS `id`,`ps`.`strain_code` AS `Code`,`ps`.`name` AS `Name`,`ps`.`version` AS `Version`,`ps`.`pacific_stone_label` AS `PS Brand Name`,`ps`.`time_machine_label` AS `TM Brand Name`,`ps`.`category` AS `Strain Type`,`ps`.`description` AS `Description`,(case when (`ps`.`core_strain` = '1') then 'TRUE' when (`ps`.`core_strain` = '0') then '' end) AS `Core Strain`,(case when (`ps`.`is_plant` = '1') then 'TRUE' end) AS `PLANT`,(case when (`ps`.`is_flavor` = '1') then 'TRUE' end) AS `FLAVOR`,(case when (`ps`.`is_sku` = '1') then 'TRUE' end) AS `SKU`,`ps`.`stage` AS `Strain Stage`,`ps`.`status` AS `Status`,`ps`.`note` AS `note`,`ps`.`uid` AS `uid`,`ps`.`parent_strain` AS `parent_strain`,`ps`.`flag` AS `flag`,`ps`.`gh_status` AS `gh_status`,`ps`.`in_bank` AS `Strain Bank` from `plant_strain` `ps` where (`ps`.`status` = 'Active') order by `ps`.`name`

-- View: pacstone.app_temp
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `app_temp` AS select `a`.`id` AS `id`,`a`.`stage` AS `stage`,`a`.`process` AS `process`,`a`.`category` AS `category`,`a`.`public_name` AS `public_name`,`a`.`app_name` AS `app_name`,`a`.`app_id` AS `app_id`,`a`.`logo` AS `logo`,`a`.`note` AS `note`,`a`.`note_doc` AS `note_doc`,`a`.`gdrive_folder` AS `gdrive_folder`,`a`.`pm_link` AS `pm_link`,`a`.`sheet1` AS `sheet1`,`a`.`sheet2` AS `sheet2`,`a`.`sheet3` AS `sheet3`,`a`.`sheet4` AS `sheet4`,`a`.`sheet5` AS `sheet5`,`a`.`status` AS `status`,`a`.`trigger` AS `trigger`,`a`.`gsheets` AS `gsheets`,`a`.`gsheethelp` AS `gsheethelp`,`a`.`appnamehelp` AS `appnamehelp`,`a`.`appnameimage` AS `appnameimage`,`a`.`appidhelp` AS `appidhelp`,`a`.`appidhelpimage` AS `appidhelpimage`,`a`.`savedlogos` AS `savedlogos`,`a`.`savedlogolinks` AS `savedlogolinks`,`a`.`gds_url` AS `gds_url`,`a`.`1` AS `1`,`a`.`2` AS `2`,`a`.`is_dev_only` AS `is_dev_only`,`a`.`version` AS `version`,`a`.`row_select_behavior` AS `row_select_behavior`,`a`.`created_on` AS `created_on`,`a`.`created_by` AS `created_by`,`a`.`modified_on` AS `modified_on`,`a`.`modified_by` AS `modified_by`,`a`.`starting_view` AS `starting_view`,`a`.`parent_app` AS `parent_app`,`a`.`launch_variable1` AS `launch_variable1` from `application` `a`

-- View: pacstone.assigned_role_app_variables
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `assigned_role_app_variables` AS select `assigned_role`.`id` AS `id`,`assigned_role`.`app_name` AS `app_name`,`assigned_role`.`account` AS `account`,`assigned_role`.`variable1` AS `variable1`,`assigned_role`.`for_all_apps` AS `for_all_apps` from `assigned_role`

-- View: pacstone.assigned_role_ro
CREATE ALGORITHM=UNDEFINED DEFINER=`appsheet`@`%` SQL SECURITY DEFINER VIEW `assigned_role_ro` AS select `assigned_role`.`id` AS `id`,`assigned_role`.`account` AS `account`,`assigned_role`.`app_name` AS `app_name`,`assigned_role`.`role` AS `role` from `assigned_role`

-- View: pacstone.brand_strain
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `brand_strain` AS select concat('BD-001-',`plant_strain`.`id`) AS `id`,'BD-001' AS `brand`,'PS' AS `brand_code`,'Pacific Stone' AS `brand_name`,`plant_strain`.`id` AS `plant_strain`,`plant_strain`.`pacific_stone_label` AS `plant_strain_name` from `plant_strain` where ((`plant_strain`.`pacific_stone_label` is not null) and (`plant_strain`.`status` = 'Active')) union select concat('BD-002-',`plant_strain`.`id`) AS `id`,'BD-002' AS `brand`,'TM' AS `brand_code`,'Time Machine' AS `brand_name`,`plant_strain`.`id` AS `plant_strain`,`plant_strain`.`time_machine_label` AS `plant_strain_name` from `plant_strain` where ((`plant_strain`.`time_machine_label` is not null) and (`plant_strain`.`status` = 'Active'))

-- View: pacstone.db_processlist
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `db_processlist` AS select `information_schema`.`PROCESSLIST`.`ID` AS `ID`,`information_schema`.`PROCESSLIST`.`USER` AS `USER`,`information_schema`.`PROCESSLIST`.`HOST` AS `HOST`,`information_schema`.`PROCESSLIST`.`DB` AS `DB`,`information_schema`.`PROCESSLIST`.`COMMAND` AS `COMMAND`,`information_schema`.`PROCESSLIST`.`TIME` AS `TIME`,`information_schema`.`PROCESSLIST`.`STATE` AS `STATE`,`information_schema`.`PROCESSLIST`.`INFO` AS `INFO` from `information_schema`.`PROCESSLIST` where (`information_schema`.`PROCESSLIST`.`COMMAND` <> 'Sleep') order by `information_schema`.`PROCESSLIST`.`TIME` desc

-- View: pacstone.employee_primary_property
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `employee_primary_property` AS select distinct `employee`.`primary_property` AS `primary_property` from `employee`

-- View: pacstone.license_entity
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `license_entity` AS select `al`.`id` AS `id`,`al`.`property` AS `property`,`al`.`type` AS `type`,`al`.`short_number` AS `short_number`,`al`.`business_entity` AS `business_entity`,`be`.`name` AS `name` from (`active_cannabis_license` `al` left join `business_entity` `be` on((`be`.`id` = `al`.`business_entity`)))

-- View: pacstone.paychex_org
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `paychex_org` AS select `o`.`name` AS `id`,`o`.`name` AS `name`,`o2`.`name` AS `parent` from (`utility`.`paychex_organization` `o` join `utility`.`paychex_organization` `o2` on((`o2`.`id` = `o`.`parent`)))

-- View: pacstone.table
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `table` AS select `tables`.`TABLE_SCHEMA` AS `database_name`,`tables`.`TABLE_NAME` AS `table_name`,`c`.`columns` AS `columns` from (`information_schema`.`TABLES` `tables` left join (select `COLUMNS`.`TABLE_NAME` AS `TABLE_NAME`,group_concat(`COLUMNS`.`COLUMN_NAME` separator ',') AS `columns` from `information_schema`.`COLUMNS` group by `COLUMNS`.`TABLE_NAME`) `c` on((`c`.`TABLE_NAME` = `tables`.`TABLE_NAME`))) where ((`tables`.`TABLE_TYPE` = 'BASE TABLE') and (`tables`.`TABLE_SCHEMA` not in ('information_schema','mysql','performance_schema','sys'))) order by `tables`.`TABLE_SCHEMA`,`tables`.`TABLE_NAME`

-- View: pacstone_dev.active_bin_weights
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `active_bin_weights` AS select `tw`.`timestamp` AS `time`,`tw`.`batch_id` AS `id`,`tw`.`batch_id` AS `batch_id`,round(sum(`tw`.`net_weight`),4) AS `total`,round(sum(`tw`.`tare_weight`),4) AS `tare weight` from `individual_weight_readings` `tw` where (`tw`.`status` = 'Active') group by `tw`.`timestamp`,`tw`.`batch_id`

-- View: pacstone_dev.active_sku_without_upc
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `active_sku_without_upc` AS select `product_sku`.`sku`.`id` AS `id`,concat(convert(`b`.`code` using utf8mb4),'-',convert(`s`.`id` using utf8mb4),'-',`c`.`code`,'-',`p`.`code`,'-',`ps`.`code`,(case when ((`product_sku`.`sku`.`class` = 'Retail') or (`product_sku`.`sku`.`class` is null)) then '' when (`product_sku`.`sku`.`class` = 'Promo') then '(P)' when (`product_sku`.`sku`.`class` = 'Sample') then '(S)' end)) AS `sku`,concat(convert(`b`.`name` using utf8mb4),' - ',convert((case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end) using utf8mb4),' - ',`c`.`name`,' ',`p`.`name`,' (',`ps`.`name`,')',(case when ((`product_sku`.`sku`.`class` = 'Retail') or (`product_sku`.`sku`.`class` is null)) then '' when (`product_sku`.`sku`.`class` = 'Promo') then ' (Promo)' when (`product_sku`.`sku`.`class` = 'Sample') then ' (Sample)' end)) AS `name`,`product_sku`.`sku`.`status` AS `status`,`product_sku`.`sku`.`upc` AS `upc`,`b`.`code` AS `brand_code`,`b`.`name` AS `brand_name`,`c`.`code` AS `category_code`,`c`.`name` AS `category_name`,`p`.`code` AS `package_code`,`p`.`name` AS `package_name`,`ps`.`code` AS `package_size_code`,`ps`.`name` AS `package_size_name`,`s`.`id` AS `strain_code`,(case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end) AS `strain_name`,`s`.`category` AS `strain_category`,`product_sku`.`sku`.`kss_id` AS `kss_id`,`product_sku`.`sku`.`class` AS `class` from (((((`product_sku`.`sku` left join `pacstone`.`brand` `b` on((`product_sku`.`sku`.`brand` = convert(`b`.`id` using utf8mb4)))) left join `product_sku`.`category` `c` on((`product_sku`.`sku`.`category` = `c`.`id`))) left join `product_sku`.`package` `p` on((`product_sku`.`sku`.`package` = `p`.`id`))) left join `product_sku`.`package_size` `ps` on((`product_sku`.`sku`.`package_size` = `ps`.`id`))) left join `pacstone`.`plant_strain` `s` on((`product_sku`.`sku`.`plant_strain` = convert(`s`.`id` using utf8mb4)))) where ((`product_sku`.`sku`.`status` = 'Active') and (`product_sku`.`sku`.`upc` is null))

-- View: pacstone_dev.batch_weight_times
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `batch_weight_times` AS select `tw`.`batch_id` AS `id`,`tw`.`batch_id` AS `batch_id`,if((`tw`.`status` = 'Active'),round(sum(`tw`.`net_weight`),2),0) AS `active_total`,round(sum(`tw`.`net_weight`),2) AS `total`,if((`tw`.`status` = 'Active'),count(`tw`.`net_weight`),0) AS `active_bin_count`,count(`tw`.`batch_id`) AS `bin_count`,timediff(max(`tw`.`timestamp`),min(`tw`.`timestamp`)) AS `timedif`,`tw`.`status` AS `status` from `individual_weight_readings` `tw` group by `tw`.`batch_id`,`tw`.`status`

-- View: pacstone_dev.bucking_adjustments
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `bucking_adjustments` AS select `pmpc`.`metrc_tag` AS `metrc_tag`,`pmpc`.`created_on` AS `created_on` from `processing_metrc_check` `pmpc` where (`pmpc`.`metrc_type_id` = 'Bucking Waste')

-- View: pacstone_dev.create_package_queue_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `create_package_queue_view` AS select `cp`.`Tag` AS `Tag`,`cp`.`Location` AS `Location`,`cp`.`Item` AS `Item`,`cp`.`Quantity` AS `Quantity`,`cp`.`UnitofMeasure` AS `UnitofMeasure`,`cp`.`PatientLicenseNumber` AS `PatientLicenseNumber`,`cp`.`Note` AS `Note`,`cp`.`IsProductionBatch` AS `IsProductionBatch`,`cp`.`ProductionBatchNumber` AS `ProductionBatchNumber`,`cp`.`IsDonation` AS `IsDonation`,`cp`.`IsTradeSample` AS `IsTradeSample`,`cp`.`ProductRequiresRemediation` AS `ProductRequiresRemediation`,`cp`.`UseSameItem` AS `UseSameItem`,`cp`.`ActualDate` AS `ActualDate`,`cp`.`ExpirationDate` AS `ExpirationDate`,`cp`.`SellByDate` AS `SellByDate`,`cp`.`UseByDate` AS `UseByDate`,`cp`.`RequiredLabTestBatches` AS `RequiredLabTestBatches`,group_concat(`i`.`Package_Parent`,', ',`i`.`Quantity`,' pounds' order by `i`.`Package_Parent` ASC separator '; ') AS `Ingredients` from (`create_package` `cp` left join `Ingredients` `i` on((`i`.`PackageID` = `cp`.`Ingredients`))) group by `cp`.`Tag`,`cp`.`Location`,`cp`.`Item`,`cp`.`Quantity`,`cp`.`UnitofMeasure`,`cp`.`PatientLicenseNumber`,`cp`.`Note`,`cp`.`ProductionBatchNumber`,`cp`.`IsProductionBatch`,`cp`.`IsDonation`,`cp`.`IsTradeSample`,`cp`.`ProductRequiresRemediation`,`cp`.`UseSameItem`,`cp`.`ActualDate`,`cp`.`ExpirationDate`,`cp`.`SellByDate`,`cp`.`UseByDate`,`cp`.`Ingredients`,`cp`.`RequiredLabTestBatches`

-- View: pacstone_dev.inactive_tag_weights
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `inactive_tag_weights` AS select `tw`.`batch_id` AS `id`,`tw`.`batch_id` AS `batch_id`,round(sum(`tw`.`net_weight`),4) AS `total`,count(`tw`.`batch_id`) AS `bin count` from `processing`.`scale_weights` `tw` group by `tw`.`batch_id`

-- View: pacstone_dev.metrc_package_timer
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `metrc_package_timer` AS select `processing_metrc_check`.`id` AS `id`,`processing_metrc_check`.`metrc_tag` AS `metrc_tag`,`processing_metrc_check`.`created_on` AS `created_on`,`processing_metrc_check`.`metrc_type_id` AS `metrc_type_id`,`processing_metrc_check`.`created_by` AS `created_by`,`processing_metrc_check`.`modified_on` AS `modified_on`,`processing_metrc_check`.`verified_on` AS `verified_on`,`processing_metrc_check`.`modified_by` AS `modified_by`,`processing_metrc_check`.`metrc_id` AS `metrc_id` from `processing_metrc_check` where (`processing_metrc_check`.`created_on` >= (now() - interval 31 hour))

-- View: pacstone_dev.moisture_adjustments
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `moisture_adjustments` AS select `pmpc`.`metrc_tag` AS `metrc_tag`,`pmpc`.`created_on` AS `created_on` from `processing_metrc_check` `pmpc` where (`pmpc`.`metrc_type_id` = 'Moisture Loss')

-- View: pacstone_dev.packages_not_made_from_harvests
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `packages_not_made_from_harvests` AS select max(`har`.`id`) AS `harvesting_id`,max(`har`.`harvest_id`) AS `harvest_batch`,max(`har`.`harvest_metrc_id`) AS `harvest_tag`,max(`har`.`processing_metrc_id`) AS `processing_tag`,max(`har`.`date`) AS `harvest_date`,max(`proc`.`date`) AS `date`,max(`proc`.`process_id`) AS `process`,max(`proc`.`action`) AS `action`,`proc`.`metrc_tag` AS `metrc_tag`,max(`proc`.`source_id`) AS `source_id_master`,max(`proc`.`id`) AS `proc_id`,`pmpc`.`created_on` AS `created_on_pmpc`,if((min(`c`.`name`) = 'Leaf'),'Trim',min(`c`.`name`)) AS `category`,max(`proc`.`verified_on`) AS `verified_on`,max(`source`.`source`) AS `source_tags`,max(`proc`.`quantity`) AS `Quantity` from ((((`processing`.`processing` `proc` left join `cultivation`.`harvesting` `har` on((`har`.`id` = `proc`.`harvesting_id`))) left join `product_sku`.`category` `c` on((`c`.`id` = `proc`.`category_id`))) left join `processing_metrc_check` `pmpc` on((`pmpc`.`metrc_tag` = `proc`.`metrc_tag`))) left join `compliance`.`source_packages` `source` on((`proc`.`metrc_tag` = `source`.`metrc_tag`))) where ((`proc`.`metrc_tag` is not null) and (`har`.`date` > 2023) and (`proc`.`metrc_tag` <> `har`.`processing_metrc_id`) and ((`pmpc`.`metrc_tag` is null) or (`pmpc`.`metrc_type_id` <> 'Create Package'))) group by `proc`.`metrc_tag`,`pmpc`.`created_on`

-- View: pacstone_dev.packages_off_harvests
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `packages_off_harvests` AS select max(`har`.`id`) AS `harvesting_id`,max(`har`.`harvest_id`) AS `harvest_batch`,max(`har`.`harvest_metrc_id`) AS `harvest_tag`,max(`har`.`processing_metrc_id`) AS `processing_tag`,max(`har`.`date`) AS `harvest_date`,max(`proc`.`date`) AS `date`,max(`proc`.`process_id`) AS `process`,max(`proc`.`action`) AS `action`,`proc`.`metrc_tag` AS `metrc_tag`,max(`proc`.`source_id`) AS `source_id_master`,`proc`.`id` AS `proc_id`,`pmpc`.`created_on` AS `created_on_pmpc`,if((min(`c`.`name`) = 'Leaf'),'Trim',min(`c`.`name`)) AS `category`,max(`proc`.`verified_on`) AS `verified_on`,max(`source`.`source`) AS `source_tags`,max(`proc`.`quantity`) AS `Quantity` from ((((`processing`.`processing` `proc` left join `cultivation`.`harvesting` `har` on((`har`.`id` = `proc`.`harvesting_id`))) left join `product_sku`.`category` `c` on((`c`.`id` = `proc`.`category_id`))) left join `processing_metrc_check` `pmpc` on((`pmpc`.`metrc_tag` = `proc`.`metrc_tag`))) left join `compliance`.`source_packages` `source` on((`proc`.`metrc_tag` = `source`.`metrc_tag`))) where ((`proc`.`metrc_tag` is not null) and (`har`.`date` > 2023)) group by `proc`.`metrc_tag`,`proc`.`id`,`pmpc`.`created_on`

-- View: pacstone_dev.processing_packages
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `processing_packages` AS select `td`.`metrc_tag` AS `metrc_tag`,sum(`td`.`quantity`) AS `Quantity` from `processing`.`trimming_details` `td` group by `td`.`metrc_tag` order by `td`.`metrc_tag` desc

-- View: pacstone_dev.source_id_to_tag
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `source_id_to_tag` AS select `proc`.`id` AS `id_master`,`proc`.`source_id` AS `source_id_master`,`proc`.`metrc_tag` AS `metrc_tag` from `processing`.`processing` `proc` where (not((`proc`.`id` like '%,%'))) group by `proc`.`id`,`proc`.`metrc_tag`

-- View: pacstone_dev.total_tag_weights
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `total_tag_weights` AS select `tw`.`batch_id` AS `id`,`tw`.`batch_id` AS `batch_id`,round(sum(`tw`.`net_weight`),4) AS `total`,count(`tw`.`batch_id`) AS `bin count` from `individual_weight_readings` `tw` where (`tw`.`status` = 'Active') group by `tw`.`batch_id`

-- View: pacstone_dev.tote_weight_tare_mean
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `tote_weight_tare_mean` AS select avg(`tw`.`tare_weight`) AS `average_tote_weight`,count(`tw`.`batch_id`) AS `bin count` from `processing`.`scale_weights` `tw` where (`tw`.`process_id` = 'MP-1000')

-- View: pacstone_inventory.iap_prod_materials_view
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `iap_prod_materials_view` AS select `item`.`id` AS `ID`,`item`.`name` AS `Item`,`item`.`version` AS `Version`,`item`.`status` AS `Status`,max(if((`ial`.`location` = 'prop02'),`ial`.`qty_base`,0)) AS `EB`,max(if((`ial`.`location` = 'prop01'),`ial`.`qty_base`,0)) AS `CS`,max(if((`ial`.`location` = 'prop04'),`ial`.`qty_base`,0)) AS `SP`,max(if((`ial`.`location` = '124e6f02'),`ial`.`qty_base`,0)) AS `DR`,max(if((`ial`.`location` = 'prop10'),`ial`.`qty_base`,0)) AS `IV`,max(if((`ial`.`location` = 'prop03'),`ial`.`qty_base`,0)) AS `MV`,max(if((`ial`.`location` = 'invVehicle'),`ial`.`qty_base`,0)) AS `Vehicle`,max(if((`ial`.`location` = 'invVendor'),`ial`.`qty_base`,0)) AS `Vendor`,sum(if((`ial`.`location` in ('prop02','prop01','124e6f02','prop10','prop03','prop04','invVehicle')),`ial`.`qty_base`,0)) AS `Inventory On Hand`,(sum(if((`ial`.`location` in ('prop02','prop01','124e6f02','prop10','prop03','prop04','invVehicle')),`ial`.`qty_base`,0)) + sum(if((`ial`.`location` = 'invVendor'),`ial`.`qty_base`,0))) AS `Total Inventory`,max(`item`.`cat1`) AS `cat1`,max(`item`.`cat2`) AS `cat2`,max(`item`.`cat3`) AS `cat3`,max(`item`.`cat4`) AS `cat4`,max(`item`.`cat5`) AS `cat5`,max(`item`.`cat6`) AS `cat6`,max(`item`.`cat7`) AS `cat7` from (`inventory_item` `item` left join `inventory_at_location` `ial` on((`item`.`id` = `ial`.`inventory_item`))) where ((`item`.`inventory_item_type` = 'prodMat01') and (`ial`.`status` = 'Active') and (`ial`.`qty_base` <> 0) and (`item`.`status` in ('Active','Pending Deactivation'))) group by `item`.`id` order by `item`.`name`

-- View: pacstone_inventory.iap_view
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `iap_view` AS select `s`.`Item` AS `Item`,`s`.`Item_Name` AS `Item_Name`,`s`.`Location` AS `Location`,`s`.`Total_Qty` AS `Total Qty`,concat((trim(round((`s`.`Total_Qty` / `p`.`qty_in_pile`),2)) + 0),' ',`p`.`label_plural`) AS `Qty Display` from ((select `ial`.`inventory_item` AS `Item`,max(`item`.`name`) AS `Item_Name`,sum(`ial`.`qty_base`) AS `Total_Qty`,(case when (`l`.`location_string` = 'VEHICLE') then 'VEHICLE' when (`l`.`location_string` = 'VENDOR') then 'VENDOR' else `l`.`location_level1` end) AS `Location` from ((`inventory_at_location` `ial` join `pacstone`.`location` `l` on((`ial`.`location` = `l`.`id`))) join `inventory_item` `item` on((`ial`.`inventory_item` = `item`.`id`))) where ((`ial`.`status` = 'Active') and (`ial`.`qty_base` <> 0) and (`item`.`status` in ('Active','Pending Deactivation'))) group by `ial`.`inventory_item`,(case when (`l`.`location_string` = 'VEHICLE') then 'VEHICLE' when (`l`.`location_string` = 'VENDOR') then 'VENDOR' else `l`.`location_level1` end)) `s` join `inventory_pile` `p` on(((`p`.`inventory_item` = `s`.`Item`) and (`p`.`is_primary_default` = 1))))

-- View: pacstone_inventory.item_use_by_location
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `item_use_by_location` AS select `pi`.`id` AS `id`,`pi`.`purchase_order` AS `purchase_order`,`pi`.`transaction_date` AS `transaction_date`,`pi`.`transaction_time` AS `transaction_time`,`pi`.`user` AS `user`,`pi`.`transaction_type` AS `transaction_type`,`tran`.`type` AS `Transaction_Type_Name`,`pi`.`label` AS `label`,`type`.`type` AS `item_type`,`pi`.`item_cat1` AS `item_cat1`,`pi`.`item_cat2` AS `item_cat2`,`pi`.`item_cat3` AS `item_cat3`,`pi`.`item_cat4` AS `item_cat4`,`pi`.`item_cat5` AS `item_cat5`,`pi`.`item_cat6` AS `item_cat6`,`pi`.`item_cat7` AS `item_cat7`,`type`.`type` AS `Item_Type_Name`,`pi`.`id` AS `Item_ID`,`item`.`name` AS `Item_Name`,`item`.`cat1` AS `Item_grouping_1`,`item`.`cat2` AS `Item_Description_2`,`item`.`cat3` AS `Item_Description_3`,`item`.`cat4` AS `Item_Description_4`,`item`.`cat5` AS `Item_Description_5`,`item`.`cat6` AS `Item_Description_6`,`item`.`cat7` AS `Item_Description_7`,`pi`.`inventory_vendor` AS `inventory_vendor`,`pi`.`inventory_pile` AS `inventory_pile`,`pile`.`qty_in_pile` AS `conatiner_size`,`pile`.`label` AS `pile_label`,`pi`.`pile_qty` AS `pile_qty`,`pi`.`base_qty` AS `base_qty`,`pi`.`audit_comment` AS `audit_comment`,`pi`.`property_for_purchase` AS `property_for_purchase`,`pi`.`location_debit` AS `location_debit`,if((`from`.`name` is null),'',`from`.`name`) AS `location_debit_name`,`pi`.`location_credit` AS `location_credit`,if((`too`.`name` is null),'',`too`.`name`) AS `location_credit_name`,`pi`.`inventory_at_location_debit` AS `inventory_at_location_debit`,`pi`.`inventory_at_location_credit` AS `inventory_at_location_credit`,`pi`.`trigger` AS `trigger`,`pi`.`status` AS `status`,`pi`.`created_on` AS `created_on`,`pi`.`created_by` AS `created_by`,`pi`.`modified_on` AS `modified_on`,`pi`.`modified_by` AS `modified_by`,`pi`.`inventory_available` AS `inventory_available`,`pi`.`flag` AS `flag`,`pi`.`note` AS `note`,`pi`.`reason` AS `reason`,`pi`.`inventory_request` AS `inventory_request`,`pi`.`est_delivery_date` AS `est_delivery_date`,`pi`.`3` AS `3`,`pi`.`4` AS `4`,`pi`.`5` AS `5`,`pi`.`add_or_remove` AS `add_or_remove`,`pi`.`delete_reason` AS `delete_reason`,`pi`.`freeze_item` AS `freeze_item`,`pi`.`audit_item` AS `audit_item` from ((((((`inventory_transaction` `pi` left join `inventory_item` `item` on((`pi`.`inventory_item` = `item`.`id`))) left join `inventory_item_type` `type` on((`pi`.`item_type` = `type`.`id`))) left join `inventory_pile` `pile` on((`pi`.`inventory_pile` = `pile`.`id`))) left join `transaction_type` `tran` on((`pi`.`transaction_type` = `tran`.`id`))) left join `pacstone`.`location` `from` on((`pi`.`location_debit` = `from`.`id`))) left join `pacstone`.`location` `too` on((`pi`.`location_credit` = `too`.`id`))) where ((`pi`.`transaction_date` is not null) and (`item`.`status` = 'Active')) order by `pi`.`created_on` desc

-- View: pacstone_inventory.production_items_active
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `production_items_active` AS select `inventory_item`.`id` AS `id`,`inventory_item`.`name` AS `name`,`inventory_item`.`status` AS `status`,`inventory_item`.`version` AS `version`,`inventory_item`.`version_description` AS `version_description`,`inventory_item`.`cat6` AS `Brand`,`inventory_item`.`cat1` AS `Category`,`inventory_item`.`cat2` AS `Package`,`inventory_item`.`cat3` AS `Item Detail`,`inventory_item`.`cat4` AS `Size`,`inventory_item`.`cat5` AS `Strain Type`,`inventory_item`.`cat0` AS `Custom Class`,`inventory_item`.`label` AS `label`,`inventory_item`.`description` AS `description`,`inventory_item`.`base_UOM` AS `base_UOM`,`inventory_item`.`notes` AS `notes`,`inventory_item`.`min_recommended` AS `min_recommended`,`inventory_item`.`min_required` AS `min_required`,`inventory_item`.`created_on` AS `created_on`,`inventory_item`.`created_by` AS `created_by` from `inventory_item` where ((`inventory_item`.`status` in ('Active','Pending Deactivation')) and (`inventory_item`.`inventory_item_type` = 'prodMat01')) order by `inventory_item`.`name`,`inventory_item`.`status`

-- View: pacstone_inventory.trans_test
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `trans_test` AS select `inventory_transaction`.`id` AS `id`,`inventory_transaction`.`purchase_order` AS `purchase_order`,`inventory_transaction`.`transaction_date` AS `transaction_date`,`inventory_transaction`.`transaction_time` AS `transaction_time`,`inventory_transaction`.`user` AS `user`,`inventory_transaction`.`transaction_type` AS `transaction_type`,`inventory_transaction`.`label` AS `label`,`inventory_transaction`.`do_not_unpack` AS `do_not_unpack`,`inventory_transaction`.`item_type` AS `item_type`,`inventory_transaction`.`item_cat1` AS `item_cat1`,`inventory_transaction`.`item_cat2` AS `item_cat2`,`inventory_transaction`.`item_cat3` AS `item_cat3`,`inventory_transaction`.`item_cat4` AS `item_cat4`,`inventory_transaction`.`item_cat5` AS `item_cat5`,`inventory_transaction`.`item_cat6` AS `item_cat6`,`inventory_transaction`.`item_cat7` AS `item_cat7`,`inventory_transaction`.`inventory_item` AS `inventory_item`,`inventory_transaction`.`inventory_vendor` AS `inventory_vendor`,`inventory_transaction`.`inventory_pile` AS `inventory_pile`,`inventory_transaction`.`pile_qty` AS `pile_qty`,`inventory_transaction`.`base_qty` AS `base_qty`,`inventory_transaction`.`audit_comment` AS `audit_comment`,`inventory_transaction`.`property_for_purchase` AS `property_for_purchase`,`inventory_transaction`.`location_debit` AS `location_debit`,`inventory_transaction`.`location_credit` AS `location_credit`,`inventory_transaction`.`inventory_at_location_debit` AS `inventory_at_location_debit`,`inventory_transaction`.`inventory_at_location_credit` AS `inventory_at_location_credit`,`inventory_transaction`.`trigger` AS `trigger`,`inventory_transaction`.`status` AS `status`,`inventory_transaction`.`created_on` AS `created_on`,`inventory_transaction`.`created_by` AS `created_by`,`inventory_transaction`.`modified_on` AS `modified_on`,`inventory_transaction`.`modified_by` AS `modified_by`,`inventory_transaction`.`inventory_available` AS `inventory_available`,`inventory_transaction`.`flag` AS `flag`,`inventory_transaction`.`note` AS `note`,`inventory_transaction`.`reason` AS `reason`,`inventory_transaction`.`inventory_request` AS `inventory_request`,`inventory_transaction`.`est_delivery_date` AS `est_delivery_date`,`inventory_transaction`.`3` AS `3`,`inventory_transaction`.`4` AS `4`,`inventory_transaction`.`5` AS `5`,`inventory_transaction`.`add_or_remove` AS `add_or_remove`,`inventory_transaction`.`delete_reason` AS `delete_reason`,`inventory_transaction`.`freeze_item` AS `freeze_item`,`inventory_transaction`.`audit_item` AS `audit_item` from `inventory_transaction`

-- View: pacstone_inventory.transaction_last7days
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `transaction_last7days` AS select `inventory_transaction`.`id` AS `id`,`inventory_transaction`.`purchase_order` AS `purchase_order`,`inventory_transaction`.`transaction_date` AS `transaction_date`,`inventory_transaction`.`transaction_time` AS `transaction_time`,`inventory_transaction`.`user` AS `user`,`inventory_transaction`.`transaction_type` AS `transaction_type`,`inventory_transaction`.`label` AS `label`,`inventory_transaction`.`do_not_unpack` AS `do_not_unpack`,`inventory_transaction`.`item_type` AS `item_type`,`inventory_transaction`.`item_cat1` AS `item_cat1`,`inventory_transaction`.`item_cat2` AS `item_cat2`,`inventory_transaction`.`item_cat3` AS `item_cat3`,`inventory_transaction`.`item_cat4` AS `item_cat4`,`inventory_transaction`.`item_cat5` AS `item_cat5`,`inventory_transaction`.`item_cat6` AS `item_cat6`,`inventory_transaction`.`item_cat7` AS `item_cat7`,`inventory_transaction`.`inventory_item` AS `inventory_item`,`inventory_transaction`.`inventory_vendor` AS `inventory_vendor`,`inventory_transaction`.`inventory_pile` AS `inventory_pile`,`inventory_transaction`.`pile_qty` AS `pile_qty`,`inventory_transaction`.`base_qty` AS `base_qty`,`inventory_transaction`.`audit_comment` AS `audit_comment`,`inventory_transaction`.`property_for_purchase` AS `property_for_purchase`,`inventory_transaction`.`location_debit` AS `location_debit`,`inventory_transaction`.`location_credit` AS `location_credit`,`inventory_transaction`.`inventory_at_location_debit` AS `inventory_at_location_debit`,`inventory_transaction`.`inventory_at_location_credit` AS `inventory_at_location_credit`,`inventory_transaction`.`trigger` AS `trigger`,`inventory_transaction`.`status` AS `status`,`inventory_transaction`.`created_on` AS `created_on`,`inventory_transaction`.`created_by` AS `created_by`,`inventory_transaction`.`modified_on` AS `modified_on`,`inventory_transaction`.`modified_by` AS `modified_by`,`inventory_transaction`.`inventory_available` AS `inventory_available`,`inventory_transaction`.`flag` AS `flag`,`inventory_transaction`.`note` AS `note`,`inventory_transaction`.`reason` AS `reason`,`inventory_transaction`.`inventory_request` AS `inventory_request`,`inventory_transaction`.`est_delivery_date` AS `est_delivery_date`,`inventory_transaction`.`3` AS `3`,`inventory_transaction`.`4` AS `4`,`inventory_transaction`.`5` AS `5`,`inventory_transaction`.`add_or_remove` AS `add_or_remove`,`inventory_transaction`.`delete_reason` AS `delete_reason`,`inventory_transaction`.`freeze_item` AS `freeze_item`,`inventory_transaction`.`audit_item` AS `audit_item` from `inventory_transaction` where (`inventory_transaction`.`transaction_date` > (curdate() - interval 7 day)) order by `inventory_transaction`.`created_on` desc

-- View: pacstone_inventory.transaction_po_view
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `transaction_po_view` AS select `ii`.`id` AS `Item ID`,`ii`.`name` AS `Item`,`it`.`id` AS `PO ID`,`it`.`transaction_date` AS `TransactionDate`,`it`.`transaction_time` AS `TransactionTime`,`tt`.`type` AS `TransactionType`,`iit`.`type` AS `ItemType`,concat(concat(`it`.`pile_qty`,' '),`ip`.`label_plural`) AS `Amount`,`it`.`base_qty` AS `Total Qty`,`it`.`est_delivery_date` AS `Est Delivery`,`ld`.`name` AS `From`,`lc`.`name` AS `To`,`it`.`note` AS `Note`,`it`.`running_balance` AS `RunningBalance` from ((((((`inventory_transaction` `it` left join `transaction_type` `tt` on((`tt`.`id` = `it`.`transaction_type`))) left join `inventory_item_type` `iit` on((`iit`.`id` = `it`.`item_type`))) left join `inventory_item` `ii` on((`ii`.`id` = `it`.`inventory_item`))) left join `inventory_pile` `ip` on((`ip`.`id` = `it`.`inventory_pile`))) left join `pacstone`.`location` `ld` on((`ld`.`id` = `it`.`location_debit`))) left join `pacstone`.`location` `lc` on((`lc`.`id` = `it`.`location_credit`))) where (`it`.`transaction_type` = 'transType007') order by `it`.`transaction_date` desc,`it`.`transaction_time` desc

-- View: pacstone_inventory.transaction_view
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `transaction_view` AS select `ii`.`id` AS `Item ID`,`ii`.`name` AS `Item`,`it`.`transaction_date` AS `TransactionDate`,`it`.`transaction_time` AS `TransactionTime`,`tt`.`type` AS `TransactionType`,`iit`.`type` AS `ItemType`,concat(concat(`it`.`pile_qty`,' '),`ip`.`label_plural`) AS `Amount`,`it`.`base_qty` AS `Total Qty`,`ld`.`name` AS `From`,`lc`.`name` AS `To`,`it`.`note` AS `Note`,`it`.`running_balance` AS `RunningBalance` from ((((((`inventory_transaction` `it` left join `transaction_type` `tt` on((`tt`.`id` = `it`.`transaction_type`))) left join `inventory_item_type` `iit` on((`iit`.`id` = `it`.`item_type`))) left join `inventory_item` `ii` on((`ii`.`id` = `it`.`inventory_item`))) left join `inventory_pile` `ip` on((`ip`.`id` = `it`.`inventory_pile`))) left join `pacstone`.`location` `ld` on((`ld`.`id` = `it`.`location_debit`))) left join `pacstone`.`location` `lc` on((`lc`.`id` = `it`.`location_credit`))) order by `it`.`transaction_date` desc,`it`.`transaction_time` desc

-- View: pacstone_sandbox.test_table_view
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `test_table_view` AS select `tt`.`id` AS `id`,`tt`.`name` AS `name`,`tt`.`text` AS `text`,`tt`.`number` AS `number`,`tt`.`datetimereg` AS `datetimereg`,`tt`.`datetimevarchar` AS `datetimevarchar`,`tt`.`decimal` AS `decimal`,`tt`.`server_ts` AS `server_ts` from `test_table` `tt`

-- View: pacstone_sandbox.tt_join_view
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `tt_join_view` AS select `t1`.`id` AS `id`,`t1`.`name` AS `name`,`t1`.`text` AS `text`,`t1`.`number` AS `number`,`t1`.`datetimereg` AS `datetimereg`,`t1`.`datetimevarchar` AS `datetimevarchar`,`t1`.`decimal` AS `decimal`,`t1`.`server_ts` AS `server_ts`,`t1`.`other_id` AS `other_id`,`t1`.`unique_label` AS `unique_label`,`t1`.`other` AS `other`,`t1`.`another` AS `another`,`t1`.`test_dec` AS `test_dec`,`t1`.`image` AS `image`,`t1`.`enum` AS `enum`,`t2`.`id2` AS `id2`,`t2`.`col2` AS `col2`,`t2`.`name2` AS `name2`,`t2`.`text2` AS `text2`,`t2`.`val2` AS `val2` from (`test_table` `t1` join `test_table2` `t2` on((convert(`t2`.`id2` using utf8mb4) = `t1`.`id`)))

-- View: pacstone_sandbox.tt_view_remove_cols
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `tt_view_remove_cols` AS select `test_table`.`id` AS `id`,`test_table`.`name` AS `name`,`test_table`.`text` AS `text`,`test_table`.`number` AS `number`,`test_table`.`datetimereg` AS `datetimereg`,`test_table`.`datetimevarchar` AS `datetimevarchar`,`test_table`.`decimal` AS `decimal`,`test_table`.`server_ts` AS `server_ts`,`test_table`.`other_id` AS `other_id`,`test_table`.`unique_label` AS `unique_label`,`test_table`.`other` AS `other`,`test_table`.`another` AS `another`,`test_table`.`test_dec` AS `test_dec`,`test_table`.`image` AS `image` from `test_table`

-- View: pacstone_sandbox.tt_view_w_calc_col
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `tt_view_w_calc_col` AS select `tt`.`id` AS `id`,`tt`.`decimal` AS `decimal`,(`tt`.`decimal` * 2) AS `calc` from `test_table` `tt` where (`tt`.`decimal` is not null)

-- View: pacstone_sandbox.up_test_view
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `up_test_view` AS select `test_table`.`id` AS `id`,`test_table`.`name` AS `name`,`test_table`.`text` AS `text`,`test_table`.`number` AS `number`,`test_table`.`datetimereg` AS `datetimereg`,`test_table`.`datetimevarchar` AS `datetimevarchar`,`test_table`.`decimal` AS `decimal`,`test_table`.`server_ts` AS `server_ts`,`test_table`.`other_id` AS `other_id`,`test_table`.`unique_label` AS `unique_label`,`test_table`.`other` AS `other`,`test_table`.`another` AS `another`,`test_table`.`test_dec` AS `test_dec`,`test_table`.`image` AS `image`,`test_table`.`enum` AS `enum`,`test_table`.`new_dec` AS `new_dec`,`test_table`.`json` AS `json` from `test_table`

-- View: philtest.total_tag_weights
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `total_tag_weights` AS select `tw`.`batch_id` AS `id`,`tw`.`batch_id` AS `batch_id`,sum(`tw`.`total_weight`) AS `total`,sum(`tw`.`bin_count`) AS `bin count` from `total_weights` `tw` group by `tw`.`batch_id`

-- View: processing.batch_production
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `batch_production` AS select `drying_prod_view`.`flowering_id` AS `flowering_id`,`drying_prod_view`.`harvesting_id` AS `harvesting_id`,`drying_prod_view`.`metrc_tag` AS `metrc_tag`,`drying_prod_view`.`process` AS `process`,`drying_prod_view`.`batch_id` AS `batch_id`,`drying_prod_view`.`date` AS `date`,`drying_prod_view`.`batch_status` AS `batch_status`,`drying_prod_view`.`flowering_id_name` AS `flowering_id_name`,`drying_prod_view`.`harvest_id` AS `harvest_id`,`drying_prod_view`.`test_id` AS `test_id`,if((`drying_prod_view`.`test_id` is null),`drying_prod_view`.`flowering_id_name`,concat(`drying_prod_view`.`flowering_id_name`,'-',`drying_prod_view`.`test_id`)) AS `flowering_crop`,if((`drying_prod_view`.`test_id` is null),`drying_prod_view`.`harvest_id`,concat(`drying_prod_view`.`harvest_id`,'-',`drying_prod_view`.`test_id`)) AS `harvest_name`,`drying_prod_view`.`property_id` AS `property_id`,`drying_prod_view`.`harvest_date` AS `harvest_date`,`drying_prod_view`.`harvest_week` AS `harvest_week`,`drying_prod_view`.`harvest_year` AS `harvest_year`,`drying_prod_view`.`harvest_year_week` AS `harvest_year_week`,`drying_prod_view`.`harvest_type` AS `harvest_type`,`drying_prod_view`.`flower_plant_count` AS `flower_plant_count`,`drying_prod_view`.`harvest_plant_count` AS `harvest_plant_count`,`drying_prod_view`.`strain_code` AS `strain_code`,`drying_prod_view`.`strain_name` AS `strain_name`,`drying_prod_view`.`category` AS `input_category`,`drying_prod_view`.`category_type` AS `input_category_type`,`drying_prod_view`.`product_size` AS `input_product_size`,`drying_prod_view`.`product_grade` AS `input_product_grade`,`drying_prod_view`.`input_quantity` AS `input_quantity`,`drying_prod_view`.`output_category` AS `output_category`,`drying_prod_view`.`output_category_type` AS `output_category_type`,NULL AS `output_size`,NULL AS `output_grade`,`drying_prod_view`.`output_quantity` AS `output_quantity` from `drying_prod_view` where (`drying_prod_view`.`harvest_year_week` > 202253) union all select `harvest_prod_view`.`flowering_id` AS `flowering_id`,`harvest_prod_view`.`harvesting_id` AS `harvesting_id`,`harvest_prod_view`.`metrc_tag` AS `metrc_tag`,`harvest_prod_view`.`process` AS `process`,`harvest_prod_view`.`batch_id` AS `batch_id`,`harvest_prod_view`.`date` AS `date`,`harvest_prod_view`.`batch_status` AS `batch_status`,`harvest_prod_view`.`flowering_id_name` AS `flowering_id_name`,`harvest_prod_view`.`harvest_id` AS `harvest_id`,`harvest_prod_view`.`test_id` AS `test_id`,if((`harvest_prod_view`.`test_id` is null),`harvest_prod_view`.`flowering_id_name`,concat(`harvest_prod_view`.`flowering_id_name`,'-',`harvest_prod_view`.`test_id`)) AS `flowering_crop`,if((`harvest_prod_view`.`test_id` is null),`harvest_prod_view`.`harvest_id`,concat(`harvest_prod_view`.`harvest_id`,'-',`harvest_prod_view`.`test_id`)) AS `harvest_name`,`harvest_prod_view`.`property_id` AS `property_id`,`harvest_prod_view`.`harvest_date` AS `harvest_date`,`harvest_prod_view`.`harvest_week` AS `harvest_week`,`harvest_prod_view`.`harvest_year` AS `harvest_year`,`harvest_prod_view`.`harvest_year_week` AS `harvest_year_week`,`harvest_prod_view`.`harvest_type` AS `harvest_type`,`harvest_prod_view`.`flower_plant_count` AS `flower_plant_count`,`harvest_prod_view`.`harvest_plant_count` AS `harvest_plant_count`,`harvest_prod_view`.`strain_code` AS `strain_code`,`harvest_prod_view`.`strain_name` AS `strain_name`,`harvest_prod_view`.`category` AS `input_category`,`harvest_prod_view`.`category_type` AS `input_category_type`,NULL AS `input_product_size`,NULL AS `input_product_grade`,NULL AS `input_quantity`,NULL AS `output_category`,NULL AS `output_category_type`,NULL AS `output_size`,NULL AS `output_grade`,`harvest_prod_view`.`output_quantity` AS `output_quantity` from `cultivation`.`harvest_prod_view` where (`harvest_prod_view`.`harvest_year_week` > 202253) union all select `bucking_prod_view`.`flowering_id` AS `flowering_id`,`bucking_prod_view`.`harvesting_id` AS `harvesting_id`,`bucking_prod_view`.`metrc_tag` AS `metrc_tag`,`bucking_prod_view`.`process` AS `process`,`bucking_prod_view`.`batch_id` AS `batch_id`,`bucking_prod_view`.`date` AS `date`,`bucking_prod_view`.`batch_status` AS `batch_status`,`bucking_prod_view`.`flowering_id_name` AS `flowering_id_name`,`bucking_prod_view`.`harvest_id` AS `harvest_id`,`bucking_prod_view`.`test_id` AS `test_id`,if((`bucking_prod_view`.`test_id` is null),`bucking_prod_view`.`flowering_id_name`,concat(`bucking_prod_view`.`flowering_id_name`,'-',`bucking_prod_view`.`test_id`)) AS `flowering_crop`,if((`bucking_prod_view`.`test_id` is null),`bucking_prod_view`.`harvest_id`,concat(`bucking_prod_view`.`harvest_id`,'-',`bucking_prod_view`.`test_id`)) AS `harvest_name`,`bucking_prod_view`.`property_id` AS `property_id`,`bucking_prod_view`.`harvest_date` AS `harvest_date`,`bucking_prod_view`.`harvest_week` AS `harvest_week`,`bucking_prod_view`.`harvest_year` AS `harvest_year`,`bucking_prod_view`.`harvest_year_week` AS `harvest_year_week`,`bucking_prod_view`.`harvest_type` AS `harvest_type`,`bucking_prod_view`.`flower_plant_count` AS `flower_plant_count`,`bucking_prod_view`.`harvest_plant_count` AS `harvest_plant_count`,`bucking_prod_view`.`strain_code` AS `strain_code`,`bucking_prod_view`.`strain_name` AS `strain_name`,`bucking_prod_view`.`category` AS `input_category`,`bucking_prod_view`.`category_type` AS `input_category_type`,`bucking_prod_view`.`product_size` AS `input_product_size`,`bucking_prod_view`.`product_grade` AS `input_product_grade`,`bucking_prod_view`.`input_quantity` AS `input_quantity`,`bucking_prod_view`.`output_category` AS `output_category`,`bucking_prod_view`.`output_category_type` AS `output_category_type`,NULL AS `output_size`,NULL AS `output_grade`,`bucking_prod_view`.`output_quantity` AS `output_quantity` from `bucking_prod_view` where (`bucking_prod_view`.`harvest_year_week` > 202253) union all select `trimming_prod_view`.`flowering_id` AS `flowering_id`,`trimming_prod_view`.`harvesting_id` AS `harvesting_id`,`trimming_prod_view`.`metrc_tag` AS `metrc_tag`,`trimming_prod_view`.`process` AS `process`,`trimming_prod_view`.`batch_id` AS `batch_id`,`trimming_prod_view`.`date` AS `date`,`trimming_prod_view`.`batch_status` AS `batch_status`,`trimming_prod_view`.`flowering_id_name` AS `flowering_id_name`,`trimming_prod_view`.`harvest_id` AS `harvest_id`,`trimming_prod_view`.`test_id` AS `test_id`,if((`trimming_prod_view`.`test_id` is null),`trimming_prod_view`.`flowering_id_name`,concat(`trimming_prod_view`.`flowering_id_name`,'-',`trimming_prod_view`.`test_id`)) AS `flowering_crop`,if((`trimming_prod_view`.`test_id` is null),`trimming_prod_view`.`harvest_id`,concat(`trimming_prod_view`.`harvest_id`,'-',`trimming_prod_view`.`test_id`)) AS `harvest_name`,`trimming_prod_view`.`property_id` AS `property_id`,`trimming_prod_view`.`harvest_date` AS `harvest_date`,`trimming_prod_view`.`harvest_week` AS `harvest_week`,`trimming_prod_view`.`harvest_year` AS `harvest_year`,`trimming_prod_view`.`harvest_year_week` AS `harvest_year_week`,`trimming_prod_view`.`harvest_type` AS `harvest_type`,`trimming_prod_view`.`flower_plant_count` AS `flower_plant_count`,`trimming_prod_view`.`harvest_plant_count` AS `harvest_plant_count`,`trimming_prod_view`.`strain_code` AS `strain_code`,`trimming_prod_view`.`strain_name` AS `strain_name`,`trimming_prod_view`.`input_category` AS `input_category`,`trimming_prod_view`.`input_category_type` AS `input_category_type`,`trimming_prod_view`.`input_product_size` AS `input_product_size`,`trimming_prod_view`.`input_product_grade` AS `input_product_grade`,`trimming_prod_view`.`input_quantity` AS `input_quantity`,`trimming_prod_view`.`output_category` AS `output_category`,`trimming_prod_view`.`output_category_type` AS `output_category_type`,`trimming_prod_view`.`output_size` AS `output_size`,`trimming_prod_view`.`output_grade` AS `output_grade`,`trimming_prod_view`.`output_quantity` AS `output_quantity` from `trimming_prod_view` where (`trimming_prod_view`.`harvest_year_week` > 202253) union all select `sorting_prod_view`.`flowering_id` AS `flowering_id`,`sorting_prod_view`.`harvesting_id` AS `harvesting_id`,`sorting_prod_view`.`metrc_tag` AS `metrc_tag`,`sorting_prod_view`.`process` AS `process`,`sorting_prod_view`.`batch_id` AS `batch_id`,`sorting_prod_view`.`date` AS `date`,`sorting_prod_view`.`batch_status` AS `batch_status`,`sorting_prod_view`.`flowering_id_name` AS `flowering_id_name`,`sorting_prod_view`.`harvest_id` AS `harvest_id`,`sorting_prod_view`.`test_id` AS `test_id`,if((`sorting_prod_view`.`test_id` is null),`sorting_prod_view`.`flowering_id_name`,concat(`sorting_prod_view`.`flowering_id_name`,'-',`sorting_prod_view`.`test_id`)) AS `flowering_crop`,if((`sorting_prod_view`.`test_id` is null),`sorting_prod_view`.`harvest_id`,concat(`sorting_prod_view`.`harvest_id`,'-',`sorting_prod_view`.`test_id`)) AS `harvest_name`,`sorting_prod_view`.`property_id` AS `property_id`,`sorting_prod_view`.`harvest_date` AS `harvest_date`,`sorting_prod_view`.`harvest_week` AS `harvest_week`,`sorting_prod_view`.`harvest_year` AS `harvest_year`,`sorting_prod_view`.`harvest_year_week` AS `harvest_year_week`,`sorting_prod_view`.`harvest_type` AS `harvest_type`,`sorting_prod_view`.`flower_plant_count` AS `flower_plant_count`,`sorting_prod_view`.`harvest_plant_count` AS `harvest_plant_count`,`sorting_prod_view`.`strain_code` AS `strain_code`,`sorting_prod_view`.`strain_name` AS `strain_name`,`sorting_prod_view`.`input_category` AS `input_category`,`sorting_prod_view`.`input_category_type` AS `input_category_type`,`sorting_prod_view`.`input_product_size` AS `input_product_size`,`sorting_prod_view`.`input_product_grade` AS `input_product_grade`,`sorting_prod_view`.`input_quantity` AS `input_quantity`,`sorting_prod_view`.`output_category` AS `output_category`,`sorting_prod_view`.`output_category_type` AS `output_category_type`,`sorting_prod_view`.`output_size` AS `output_size`,`sorting_prod_view`.`output_grade` AS `output_grade`,`sorting_prod_view`.`output_quantity` AS `output_quantity` from `sorting_prod_view` where (`sorting_prod_view`.`harvest_year_week` > 202253) union all select `processing_prod_view`.`flowering_id` AS `flowering_id`,`processing_prod_view`.`harvesting_id` AS `harvesting_id`,`processing_prod_view`.`metrc_tag` AS `metrc_tag`,`processing_prod_view`.`process` AS `process`,`processing_prod_view`.`batch_id` AS `batch_id`,`processing_prod_view`.`date` AS `date`,`processing_prod_view`.`batch_status` AS `batch_status`,`processing_prod_view`.`flowering_id_name` AS `flowering_id_name`,`processing_prod_view`.`harvest_id` AS `harvest_id`,`processing_prod_view`.`test_id` AS `test_id`,if((`processing_prod_view`.`test_id` is null),`processing_prod_view`.`flowering_id_name`,concat(`processing_prod_view`.`flowering_id_name`,'-',`processing_prod_view`.`test_id`)) AS `flowering_crop`,if((`processing_prod_view`.`test_id` is null),`processing_prod_view`.`harvest_id`,concat(`processing_prod_view`.`harvest_id`,'-',`processing_prod_view`.`test_id`)) AS `harvest_name`,`processing_prod_view`.`property_id` AS `property_id`,`processing_prod_view`.`harvest_date` AS `harvest_date`,`processing_prod_view`.`harvest_week` AS `harvest_week`,`processing_prod_view`.`harvest_year` AS `harvest_year`,`processing_prod_view`.`harvest_year_week` AS `harvest_year_week`,`processing_prod_view`.`harvest_type` AS `harvest_type`,`processing_prod_view`.`flower_plant_count` AS `flower_plant_count`,`processing_prod_view`.`harvest_plant_count` AS `harvest_plant_count`,`processing_prod_view`.`strain_code` AS `strain_code`,`processing_prod_view`.`strain_name` AS `strain_name`,`processing_prod_view`.`input_category` AS `input_category`,`processing_prod_view`.`input_category_type` AS `input_category_type`,`processing_prod_view`.`input_product_size` AS `input_product_size`,`processing_prod_view`.`input_product_grade` AS `input_product_grade`,`processing_prod_view`.`input_quantity` AS `input_quantity`,`processing_prod_view`.`output_category` AS `output_category`,`processing_prod_view`.`output_category_type` AS `output_category_type`,`processing_prod_view`.`output_size` AS `output_size`,`processing_prod_view`.`output_grade` AS `output_grade`,`processing_prod_view`.`output_quantity` AS `output_quantity` from `processing_prod_view` order by `harvest_year_week` desc,`harvest_name`

-- View: processing.batch_production_flowering_flat
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `batch_production_flowering_flat` AS select `f`.`id` AS `flowering_id`,`f`.`flowering_id` AS `flowering_batch`,`f`.`test_id` AS `test_id`,`f`.`property_id` AS `property_id`,`f`.`date` AS `planting_date`,`f`.`week_num` AS `planting_week`,`f`.`year_num` AS `planting_year`,`f`.`license_id` AS `license`,`f`.`strain_id` AS `strain_id`,`ps`.`name` AS `strain_name`,`f`.`plant_count` AS `planted_count`,sum(`h`.`harvest_plant_count`) AS `harvested_count`,`d`.`input_quantity` AS `input_drying`,`d`.`output_quantity` AS `output_drying`,round((100 - ((`d`.`output_quantity` * 100) / `d`.`input_quantity`)),3) AS `drying_loss_pct`,NULL AS `status_drying`,`b`.`input_quantity` AS `input_bucking`,`b`.`output_quantity` AS `output_bucking`,round((100 - ((`b`.`output_quantity` * 100) / `b`.`input_quantity`)),3) AS `bucking_loss_pct`,NULL AS `status_bucking`,`tm`.`input_quantity` AS `input_tzero`,`tm`.`output_quantity` AS `output_tzero`,`tm`.`big_a_flower_output` AS `tzero_big_a`,`tm`.`reg_a_flower_output` AS `tzero_reg_a`,`tm`.`sml_a_flower_output` AS `tzero_small_a`,`tm`.`b_flower_output` AS `tzero_b`,`tm`.`c_flower_output` AS `tzero_c`,`tm`.`retrim_a_output` AS `a_for_retrim`,`tm`.`retrim_b_output` AS `b_for_retrim`,`tm`.`retrim_c_output` AS `c_for_retrim`,(((((ifnull(`tm`.`big_a_flower_output`,0) + ifnull(`tm`.`reg_a_flower_output`,0)) + ifnull(`tm`.`sml_a_flower_output`,0)) + ifnull(`tm`.`b_flower_output`,0)) + ifnull(`tm`.`retrim_a_output`,0)) + `tm`.`retrim_b_output`) AS `tzero_ab`,`tm`.`total_flower_output_quantity` AS `tzero_abc`,((((((ifnull(`tm`.`big_a_flower_output`,0) + ifnull(`tm`.`reg_a_flower_output`,0)) + ifnull(`tm`.`sml_a_flower_output`,0)) + ifnull(`tm`.`b_flower_output`,0)) + ifnull(`tm`.`retrim_a_output`,0)) + ifnull(`tm`.`retrim_b_output`,0)) + ifnull(`tm`.`sugar_shake_output`,0)) AS `tzero_ab_shake`,(ifnull(`tm`.`total_flower_output_quantity`,0) + ifnull(`tm`.`sugar_shake_output`,0)) AS `tzero_abc_shake`,`tm`.`trim_output` AS `tzero_trim`,`tm`.`sugar_shake_output` AS `tzero_shake`,`tm`.`waste_output` AS `tzero_waste`,round((100 - ((`tm`.`output_quantity` * 100) / `tm`.`input_quantity`)),3) AS `tzero_loss_pct`,NULL AS `status_tzero`,`th`.`input_quantity` AS `input_retrim`,`th`.`output_quantity` AS `output_retrim`,`th`.`a_flower_output` AS `retrim_a`,`th`.`b_flower_output` AS `retrim_b`,`th`.`c_flower_output` AS `retrim_c`,`th`.`sugar_shake_output` AS `retrim_shake`,`th`.`waste_output` AS `retrim_waste`,round((100 - ((`th`.`output_quantity` * 100) / `th`.`input_quantity`)),3) AS `retrim_loss_pct`,NULL AS `status_retrim`,`s`.`input_quantity` AS `sorter_input`,`s`.`output_quantity` AS `sorter_output`,`s`.`big_a_flower_output` AS `sorter_big_a`,`s`.`big_b_flower_output` AS `sorter_big_b`,`s`.`big_c_flower_output` AS `sorter_big_c`,`s`.`big_x_flower_output` AS `sorter_big_x`,`s`.`mids_a_flower_output` AS `sorter_mids_a`,`s`.`mids_b_flower_output` AS `sorter_mids_b`,`s`.`mids_c_flower_output` AS `sorter_mids_c`,`s`.`mids_x_flower_output` AS `sorter_mids_x`,`s`.`smalls_a_flower_output` AS `sorter_smalls_a`,`s`.`smalls_b_flower_output` AS `sorter_smalls_b`,`s`.`smalls_c_flower_output` AS `sorter_smalls_c`,`s`.`smalls_x_flower_output` AS `sorter_smalls_x`,`s`.`microsmalls_a_flower_output` AS `sorter_micros_a`,`s`.`microsmalls_b_flower_output` AS `sorter_micros_b`,`s`.`microsmalls_c_flower_output` AS `sorter_micros_c`,`s`.`microsmalls_x_flower_output` AS `sorter_micros_x`,`s`.`regs_a_flower_output` AS `sorter_regs_a`,`s`.`regs_b_flower_output` AS `sorter_regs_b`,`s`.`regs_c_flower_output` AS `sorter_regs_c`,`s`.`regs_x_flower_output` AS `sorter_regs_x`,`s`.`total_flower_output_quantity` AS `sorter_flower`,`s`.`trim_output` AS `sorter_trim`,`s`.`sugar_shake_output` AS `sorter_shake`,`s`.`kief_output` AS `sorter_kief`,`s`.`waste_output` AS `sorter_waste`,NULL AS `sorter_status`,`s`.`big_a_flower_output` AS `total_a_bigs`,`s`.`mids_a_flower_output` AS `total_a_mids`,`s`.`smalls_a_flower_output` AS `total_a_smalls`,`s`.`microsmalls_a_flower_output` AS `total_a_micros`,((((((ifnull(`tm`.`b_flower_output`,0) + ifnull(`s`.`big_b_flower_output`,0)) + ifnull(`th`.`b_flower_output`,0)) + ifnull(`s`.`mids_b_flower_output`,0)) + ifnull(`s`.`smalls_b_flower_output`,0)) + ifnull(`s`.`microsmalls_b_flower_output`,0)) + ifnull(`s`.`regs_b_flower_output`,0)) AS `total_b`,((((((ifnull(`tm`.`c_flower_output`,0) + ifnull(`th`.`c_flower_output`,0)) + ifnull(`s`.`big_c_flower_output`,0)) + ifnull(`s`.`mids_c_flower_output`,0)) + ifnull(`s`.`smalls_c_flower_output`,0)) + ifnull(`s`.`microsmalls_c_flower_output`,0)) + ifnull(`s`.`regs_c_flower_output`,0)) AS `total_c`,((ifnull(`tm`.`sugar_shake_output`,0) + ifnull(`th`.`sugar_shake_output`,0)) + ifnull(`s`.`sugar_shake_output`,0)) AS `total_shake`,`tm`.`trim_output` AS `total_trim`,((ifnull(`tm`.`waste_output`,0) + ifnull(`th`.`waste_output`,0)) + ifnull(`s`.`waste_output`,0)) AS `total_waste`,((((((((((((((((((((((((ifnull(`s`.`big_a_flower_output`,0) + ifnull(`s`.`mids_a_flower_output`,0)) + ifnull(`s`.`smalls_a_flower_output`,0)) + ifnull(`s`.`microsmalls_a_flower_output`,0)) + ifnull(`th`.`b_flower_output`,0)) + ifnull(`tm`.`b_flower_output`,0)) + ifnull(`s`.`big_b_flower_output`,0)) + ifnull(`s`.`mids_b_flower_output`,0)) + ifnull(`s`.`smalls_b_flower_output`,0)) + ifnull(`s`.`microsmalls_b_flower_output`,0)) + ifnull(`s`.`regs_b_flower_output`,0)) + ifnull(`tm`.`c_flower_output`,0)) + ifnull(`th`.`c_flower_output`,0)) + ifnull(`s`.`big_c_flower_output`,0)) + ifnull(`s`.`mids_c_flower_output`,0)) + ifnull(`s`.`smalls_c_flower_output`,0)) + ifnull(`s`.`microsmalls_c_flower_output`,0)) + ifnull(`s`.`regs_c_flower_output`,0)) + ifnull(`tm`.`sugar_shake_output`,0)) + ifnull(`th`.`sugar_shake_output`,0)) + ifnull(`s`.`sugar_shake_output`,0)) + ifnull(`tm`.`trim_output`,0)) + ifnull(`tm`.`waste_output`,0)) + ifnull(`th`.`waste_output`,0)) + ifnull(`s`.`waste_output`,0)) AS `total`,round(((((((((((((ifnull(`s`.`big_a_flower_output`,0) + ifnull(`s`.`mids_a_flower_output`,0)) + ifnull(`s`.`smalls_a_flower_output`,0)) + ifnull(`s`.`microsmalls_a_flower_output`,0)) + ifnull(`tm`.`b_flower_output`,0)) + ifnull(`th`.`b_flower_output`,0)) + ifnull(`s`.`big_b_flower_output`,0)) + ifnull(`s`.`mids_b_flower_output`,0)) + ifnull(`s`.`smalls_b_flower_output`,0)) + ifnull(`s`.`microsmalls_b_flower_output`,0)) + ifnull(`s`.`regs_b_flower_output`,0)) * 16) / sum(`h`.`harvest_plant_count`)),3) AS `oz_plant_h`,round(((((((((((((((((((((((((((ifnull(`s`.`big_a_flower_output`,0) + ifnull(`s`.`mids_a_flower_output`,0)) + ifnull(`s`.`smalls_a_flower_output`,0)) + ifnull(`s`.`microsmalls_a_flower_output`,0)) + ifnull(`tm`.`b_flower_output`,0)) + ifnull(`th`.`b_flower_output`,0)) + ifnull(`s`.`big_b_flower_output`,0)) + ifnull(`s`.`mids_b_flower_output`,0)) + ifnull(`s`.`smalls_b_flower_output`,0)) + ifnull(`s`.`microsmalls_b_flower_output`,0)) + ifnull(`s`.`regs_b_flower_output`,0)) + ifnull(`tm`.`c_flower_output`,0)) + ifnull(`th`.`c_flower_output`,0)) + ifnull(`s`.`big_c_flower_output`,0)) + ifnull(`s`.`mids_c_flower_output`,0)) + ifnull(`s`.`smalls_c_flower_output`,0)) + ifnull(`s`.`microsmalls_c_flower_output`,0)) + ifnull(`s`.`regs_c_flower_output`,0)) + ifnull(`tm`.`sugar_shake_output`,0)) + ifnull(`th`.`sugar_shake_output`,0)) + ifnull(`s`.`sugar_shake_output`,0)) + ifnull(`tm`.`trim_output`,0)) + ifnull(`tm`.`waste_output`,0)) + ifnull(`th`.`waste_output`,0)) + ifnull(`s`.`waste_output`,0)) * 100) / `tm`.`input_quantity`),2) AS `pct_completed` from (((((((`drying_prod_flat` `d` left join `bucking_prod_flat` `b` on((`b`.`flowering_id` = `d`.`flowering_id`))) left join `trimming_machine_prod_flat` `tm` on((`tm`.`flowering_id` = `d`.`flowering_id`))) left join `trimming_hand_prod_flat` `th` on((`th`.`flowering_id` = `d`.`flowering_id`))) left join `sorting_prod_flat` `s` on((`s`.`flowering_id` = `d`.`flowering_id`))) left join `cultivation`.`flowering` `f` on((`f`.`id` = `d`.`flowering_id`))) left join `cultivation`.`harvest_prod_view` `h` on((`f`.`id` = `h`.`flowering_id`))) left join `pacstone`.`plant_strain` `ps` on((`ps`.`id` = `h`.`strain_id`))) where ((`f`.`year_num` > 2022) and (`tm`.`batch_status` = 'Finished')) group by `f`.`id`,`f`.`flowering_id`,`ps`.`name`,`f`.`test_id`,`f`.`property_id`,`f`.`date`,`f`.`week_num`,`f`.`year_num`,`tm`.`total_flower_output_quantity`,`f`.`license_id`,`s`.`total_flower_output_quantity`,`f`.`strain_id`,`f`.`plant_count`,`d`.`input_quantity`,`d`.`output_quantity`,`d`.`batch_status`,`b`.`input_quantity`,`b`.`output_quantity`,`b`.`batch_status`,`tm`.`input_quantity`,`tm`.`big_a_flower_output`,`tm`.`reg_a_flower_output`,`tm`.`sml_a_flower_output`,`tm`.`b_flower_output`,`tm`.`c_flower_output`,`tm`.`retrim_a_output`,`tm`.`retrim_b_output`,`tm`.`retrim_c_output`,`tm`.`trim_output`,`tm`.`sugar_shake_output`,`tm`.`waste_output`,`tm`.`output_quantity`,`tm`.`batch_status`,`th`.`input_quantity`,`th`.`a_flower_output`,`th`.`b_flower_output`,`th`.`c_flower_output`,`th`.`sugar_shake_output`,`th`.`waste_output`,`th`.`output_quantity`,`th`.`batch_status`,`s`.`input_quantity`,`s`.`output_quantity`,`s`.`trim_output`,`s`.`total_flower_output_quantity`,`s`.`sugar_shake_output`,`s`.`big_a_flower_output`,`s`.`big_b_flower_output`,`s`.`big_c_flower_output`,`s`.`big_x_flower_output`,`s`.`mids_a_flower_output`,`s`.`mids_b_flower_output`,`s`.`mids_c_flower_output`,`s`.`mids_x_flower_output`,`s`.`smalls_a_flower_output`,`s`.`smalls_b_flower_output`,`s`.`smalls_c_flower_output`,`s`.`smalls_x_flower_output`,`s`.`microsmalls_a_flower_output`,`s`.`microsmalls_b_flower_output`,`s`.`microsmalls_c_flower_output`,`s`.`microsmalls_x_flower_output`,`s`.`regs_a_flower_output`,`s`.`regs_b_flower_output`,`s`.`regs_c_flower_output`,`s`.`regs_x_flower_output`,`s`.`kief_output`,`s`.`waste_output`,`s`.`batch_status` order by `f`.`date` desc

-- View: processing.batch_production_harvest_2022
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `batch_production_harvest_2022` AS select max(`h`.`flowering_id`) AS `flowering_id`,`h`.`harvesting_id` AS `harvesting_id`,max(`h`.`flowering_id_name`) AS `flowering_batch`,`h`.`harvest_id` AS `harvest_batch`,max(`h`.`test_id`) AS `test_id`,if((max(`h`.`test_id`) is null),`h`.`harvest_id`,concat(`h`.`harvest_id`,'-',max(`h`.`test_id`))) AS `harvest_batch_test_id`,max(`h`.`property_id`) AS `property_id`,max(`h`.`license_id`) AS `license`,max(`h`.`strain_id`) AS `strain_id`,max(`ps`.`name`) AS `strain_name`,if((max(`ps`.`core_strain`) = 1),'YES','NO') AS `core_strain`,max(`h`.`harvest_date`) AS `harvest_date`,max(`h`.`harvest_week`) AS `harvest_week`,quarter(max(`h`.`harvest_date`)) AS `harvest_quarter`,max(`h`.`harvest_year`) AS `harvest_year`,if(((0 <> (`h`.`harvest_type` = 'Manicure')) or (0 <> (`h`.`harvest_type` = 'Fresh Frozen'))),NULL,max(`h`.`flower_plant_count`)) AS `planted_count`,if(((0 <> (`h`.`harvest_type` = 'Manicure')) or (0 <> (`h`.`harvest_type` = 'Fresh Frozen'))),NULL,`h`.`harvest_plant_count`) AS `harvested_count`,min(`d`.`start_date`) AS `input_date_drying`,max(`d`.`input_quantity`) AS `input_drying`,max(`d`.`output_quantity`) AS `output_drying`,round((100 - (max((`d`.`output_quantity` * 100)) / max(`d`.`input_quantity`))),3) AS `drying_loss_pct`,max(`d`.`batch_status`) AS `status_drying`,min(`b`.`start_date`) AS `input_date_bucking`,max(`b`.`input_quantity`) AS `input_bucking`,max(`b`.`output_quantity`) AS `output_bucking`,round((100 - (max((`b`.`output_quantity` * 100)) / max(`b`.`input_quantity`))),3) AS `bucking_loss_pct`,max(`b`.`batch_status`) AS `status_bucking`,min(`tm`.`start_date`) AS `input_date_tzero`,max(`tm`.`input_quantity`) AS `input_tzero`,max(`tm`.`output_quantity`) AS `output_tzero`,max(`tm`.`big_a_flower_output`) AS `tzero_big_a`,max(`tm`.`medium_a_flower_output`) AS `tzero_mids_a`,max(`tm`.`reg_a_flower_output`) AS `tzero_reg_a`,max(`tm`.`sml_a_flower_output`) AS `tzero_small_a`,max(`tm`.`micro_a_flower_output`) AS `tzero_micros_a`,max(`tm`.`b_flower_output`) AS `tzero_b`,max(`tm`.`c_flower_output`) AS `tzero_c`,max(`tm`.`retrim_a_output`) AS `a_for_retrim`,max(`tm`.`retrim_b_output`) AS `b_for_retrim`,max(`tm`.`retrim_c_output`) AS `c_for_retrim`,(((((((ifnull(max(`tm`.`micro_a_flower_output`),0) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`b_flower_output`),0)) + ifnull(max(`tm`.`retrim_a_output`),0)) + ifnull(max(`tm`.`retrim_b_output`),0)) AS `tzero_ab`,((((((((ifnull(max(`tm`.`micro_a_flower_output`),0) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`b_flower_output`),0)) + ifnull(max(`tm`.`retrim_a_output`),0)) + ifnull(max(`tm`.`retrim_b_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) AS `tzero_ab_shake`,max(`tm`.`total_flower_output_quantity`) AS `tzero_abc`,(((((((((ifnull(max(`tm`.`micro_a_flower_output`),0) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`b_flower_output`),0)) + ifnull(max(`tm`.`retrim_a_output`),0)) + ifnull(max(`tm`.`retrim_b_output`),0)) + ifnull(max(`tm`.`c_flower_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) AS `tzero_abc_shake`,max(`tm`.`trim_output`) AS `tzero_trim`,max(`tm`.`sugar_shake_output`) AS `tzero_shake`,max(`tm`.`waste_output`) AS `tzero_waste`,round((100 - ((max(`tm`.`output_quantity`) * 100) / max(`tm`.`input_quantity`))),3) AS `tzero_loss_pct`,max(`tm`.`batch_status`) AS `status_tzero`,min(`th`.`start_date`) AS `input_date_retrim`,max(`th`.`input_quantity`) AS `input_retrim`,max(`th`.`output_quantity`) AS `output_retrim`,max(`th`.`a_flower_output`) AS `retrim_a`,max(`th`.`b_flower_output`) AS `retrim_b`,max(`th`.`c_flower_output`) AS `retrim_c`,max(`th`.`sugar_shake_output`) AS `retrim_shake`,max(`th`.`waste_output`) AS `retrim_waste`,round((100 - ((max(`th`.`output_quantity`) * 100) / nullif(max(`th`.`input_quantity`),0))),3) AS `retrim_loss_pct`,max(`th`.`batch_status`) AS `status_retrim`,min(`s`.`start_date`) AS `input_date_sorter`,max(`s`.`input_quantity`) AS `sorter_input`,max(`s`.`output_quantity`) AS `sorter_output`,max(`s`.`big_a_flower_output`) AS `sorter_big_a`,max(`s`.`big_b_flower_output`) AS `sorter_big_b`,max(`s`.`big_c_flower_output`) AS `sorter_big_c`,max(`s`.`big_x_flower_output`) AS `sorter_big_x`,max(`s`.`mids_a_flower_output`) AS `sorter_mids_a`,max(`s`.`mids_b_flower_output`) AS `sorter_mids_b`,max(`s`.`mids_c_flower_output`) AS `sorter_mids_c`,max(`s`.`mids_x_flower_output`) AS `sorter_mids_x`,max(`s`.`smalls_a_flower_output`) AS `sorter_smalls_a`,max(`s`.`smalls_b_flower_output`) AS `sorter_smalls_b`,max(`s`.`smalls_c_flower_output`) AS `sorter_smalls_c`,max(`s`.`smalls_x_flower_output`) AS `sorter_smalls_x`,max(`s`.`microsmalls_a_flower_output`) AS `sorter_micros_a`,max(`s`.`microsmalls_b_flower_output`) AS `sorter_micros_b`,max(`s`.`microsmalls_c_flower_output`) AS `sorter_micros_c`,max(`s`.`microsmalls_x_flower_output`) AS `sorter_micros_x`,max(`s`.`regs_a_flower_output`) AS `sorter_regs_a`,max(`s`.`regs_b_flower_output`) AS `sorter_regs_b`,max(`s`.`regs_c_flower_output`) AS `sorter_regs_c`,max(`s`.`regs_x_flower_output`) AS `sorter_regs_x`,max(`s`.`total_flower_output_quantity`) AS `sorter_flower`,max(`s`.`trim_output`) AS `sorter_trim`,max(`s`.`sugar_shake_output`) AS `sorter_shake`,max(`s`.`kief_output`) AS `sorter_kief`,max(`s`.`waste_output`) AS `sorter_waste`,round((100 - ((max(`s`.`output_quantity`) * 100) / nullif(max(`s`.`input_quantity`),0))),3) AS `sorter_loss_pct`,max(`s`.`batch_status`) AS `sorter_status`,if((max(`ps`.`core_strain`) = 0),max(`tm`.`big_a_flower_output`),(ifnull(max(`s`.`big_a_flower_output`),0) + ifnull(max(`s`.`big_x_flower_output`),0))) AS `total_a_bigs`,if((max(`ps`.`core_strain`) = 0),max(`tm`.`medium_a_flower_output`),(ifnull(max(`s`.`mids_a_flower_output`),0) + ifnull(max(`s`.`mids_x_flower_output`),0))) AS `total_a_mids`,if((max(`ps`.`core_strain`) = 0),max(`tm`.`sml_a_flower_output`),(ifnull(max(`s`.`smalls_a_flower_output`),0) + ifnull(max(`s`.`smalls_x_flower_output`),0))) AS `total_a_smalls`,if((max(`ps`.`core_strain`) = 0),max(`tm`.`micro_a_flower_output`),(ifnull(max(`s`.`microsmalls_a_flower_output`),0) + ifnull(max(`s`.`microsmalls_x_flower_output`),0))) AS `total_a_micros`,if((max(`ps`.`core_strain`) = 0),max(`tm`.`reg_a_flower_output`),(ifnull(max(`s`.`regs_a_flower_output`),0) + ifnull(max(`s`.`regs_x_flower_output`),0))) AS `total_a_regs`,((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`th`.`b_flower_output`),0)) + ifnull(max(`s`.`big_b_flower_output`),0)) + ifnull(max(`s`.`mids_b_flower_output`),0)) + ifnull(max(`s`.`smalls_b_flower_output`),0)) + ifnull(max(`s`.`microsmalls_b_flower_output`),0)) + ifnull(max(`s`.`regs_b_flower_output`),0)) AS `total_b`,((((((ifnull(max(`tm`.`c_flower_output`),0) + ifnull(max(`th`.`c_flower_output`),0)) + ifnull(max(`s`.`big_c_flower_output`),0)) + ifnull(max(`s`.`mids_c_flower_output`),0)) + ifnull(max(`s`.`smalls_c_flower_output`),0)) + ifnull(max(`s`.`microsmalls_c_flower_output`),0)) + ifnull(max(`s`.`regs_c_flower_output`),0)) AS `total_c`,((ifnull(max(`tm`.`sugar_shake_output`),0) + ifnull(max(`th`.`sugar_shake_output`),0)) + ifnull(max(`s`.`sugar_shake_output`),0)) AS `total_shake`,max(`tm`.`trim_output`) AS `total_trim`,max(`s`.`kief_output`) AS `total_kief`,((ifnull(max(`tm`.`waste_output`),0) + ifnull(max(`th`.`waste_output`),0)) + ifnull(max(`s`.`waste_output`),0)) AS `total_waste`,if((max(`ps`.`core_strain`) = 0),(((((((((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`tm`.`c_flower_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) + ifnull(max(`tm`.`trim_output`),0)) + ifnull(max(`tm`.`waste_output`),0)) + ifnull(max(`th`.`b_flower_output`),0)) + ifnull(max(`th`.`c_flower_output`),0)) + ifnull(max(`th`.`sugar_shake_output`),0)) + ifnull(max(`th`.`waste_output`),0)) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`micro_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)),(((((((((((((((((((((((((((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`tm`.`c_flower_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) + ifnull(max(`tm`.`trim_output`),0)) + ifnull(max(`tm`.`waste_output`),0)) + ifnull(max(`th`.`b_flower_output`),0)) + ifnull(max(`th`.`c_flower_output`),0)) + ifnull(max(`th`.`sugar_shake_output`),0)) + ifnull(max(`th`.`waste_output`),0)) + ifnull(max(`s`.`big_a_flower_output`),0)) + ifnull(max(`s`.`big_x_flower_output`),0)) + ifnull(max(`s`.`mids_a_flower_output`),0)) + ifnull(max(`s`.`mids_x_flower_output`),0)) + ifnull(max(`s`.`smalls_a_flower_output`),0)) + ifnull(max(`s`.`smalls_x_flower_output`),0)) + ifnull(max(`s`.`microsmalls_a_flower_output`),0)) + ifnull(max(`s`.`microsmalls_x_flower_output`),0)) + ifnull(max(`s`.`regs_a_flower_output`),0)) + ifnull(max(`s`.`regs_x_flower_output`),0)) + ifnull(max(`s`.`big_b_flower_output`),0)) + ifnull(max(`s`.`mids_b_flower_output`),0)) + ifnull(max(`s`.`smalls_b_flower_output`),0)) + ifnull(max(`s`.`microsmalls_b_flower_output`),0)) + ifnull(max(`s`.`regs_b_flower_output`),0)) + ifnull(max(`s`.`big_c_flower_output`),0)) + ifnull(max(`s`.`mids_c_flower_output`),0)) + ifnull(max(`s`.`smalls_c_flower_output`),0)) + ifnull(max(`s`.`microsmalls_c_flower_output`),0)) + ifnull(max(`s`.`regs_c_flower_output`),0)) + ifnull(max(`s`.`sugar_shake_output`),0)) + ifnull(max(`s`.`waste_output`),0)) + ifnull(max(`s`.`kief_output`),0))) AS `total`,if((max(`ps`.`core_strain`) = 0),round((((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`micro_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)) * 16) / nullif(`h`.`harvest_plant_count`,0)),3),round(((((((((((((((((ifnull(max(`s`.`big_a_flower_output`),0) + ifnull(max(`s`.`big_x_flower_output`),0)) + ifnull(max(`s`.`mids_a_flower_output`),0)) + ifnull(max(`s`.`mids_x_flower_output`),0)) + ifnull(max(`s`.`smalls_a_flower_output`),0)) + ifnull(max(`s`.`smalls_x_flower_output`),0)) + ifnull(max(`s`.`microsmalls_a_flower_output`),0)) + ifnull(max(`s`.`microsmalls_x_flower_output`),0)) + ifnull(max(`s`.`regs_a_flower_output`),0)) + ifnull(max(`s`.`regs_x_flower_output`),0)) + ifnull(max(`s`.`big_b_flower_output`),0)) + ifnull(max(`s`.`mids_b_flower_output`),0)) + ifnull(max(`s`.`smalls_b_flower_output`),0)) + ifnull(max(`s`.`microsmalls_b_flower_output`),0)) + ifnull(max(`s`.`regs_b_flower_output`),0)) * 16) / nullif(`h`.`harvest_plant_count`,0)),3)) AS `oz_plant_h`,if((max(`ps`.`core_strain`) = 0),round((((((((((((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`tm`.`c_flower_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) + ifnull(max(`tm`.`trim_output`),0)) + ifnull(max(`tm`.`waste_output`),0)) + ifnull(max(`th`.`b_flower_output`),0)) + ifnull(max(`th`.`c_flower_output`),0)) + ifnull(max(`th`.`sugar_shake_output`),0)) + ifnull(max(`th`.`waste_output`),0)) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`micro_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)) * 100) / nullif(max(`tm`.`input_quantity`),0)),2),round((((((((((((((((((((((((((((((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`tm`.`c_flower_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) + ifnull(max(`tm`.`trim_output`),0)) + ifnull(max(`tm`.`waste_output`),0)) + ifnull(max(`th`.`b_flower_output`),0)) + ifnull(max(`th`.`c_flower_output`),0)) + ifnull(max(`th`.`sugar_shake_output`),0)) + ifnull(max(`th`.`waste_output`),0)) + ifnull(max(`s`.`big_a_flower_output`),0)) + ifnull(max(`s`.`big_x_flower_output`),0)) + ifnull(max(`s`.`mids_a_flower_output`),0)) + ifnull(max(`s`.`mids_x_flower_output`),0)) + ifnull(max(`s`.`smalls_a_flower_output`),0)) + ifnull(max(`s`.`smalls_x_flower_output`),0)) + ifnull(max(`s`.`microsmalls_a_flower_output`),0)) + ifnull(max(`s`.`microsmalls_x_flower_output`),0)) + ifnull(max(`s`.`regs_a_flower_output`),0)) + ifnull(max(`s`.`regs_x_flower_output`),0)) + ifnull(max(`s`.`big_b_flower_output`),0)) + ifnull(max(`s`.`mids_b_flower_output`),0)) + ifnull(max(`s`.`smalls_b_flower_output`),0)) + ifnull(max(`s`.`microsmalls_b_flower_output`),0)) + ifnull(max(`s`.`regs_b_flower_output`),0)) + ifnull(max(`s`.`big_c_flower_output`),0)) + ifnull(max(`s`.`mids_c_flower_output`),0)) + ifnull(max(`s`.`smalls_c_flower_output`),0)) + ifnull(max(`s`.`microsmalls_c_flower_output`),0)) + ifnull(max(`s`.`regs_c_flower_output`),0)) + ifnull(max(`s`.`sugar_shake_output`),0)) + ifnull(max(`s`.`kief_output`),0)) + ifnull(max(`s`.`waste_output`),0)) * 100) / nullif(max(`tm`.`input_quantity`),0)),2)) AS `pct_completed` from ((((((`drying_prod_flat_all_group` `d` left join `bucking_prod_flat_all_group` `b` on((`b`.`harvesting_id` = `d`.`harvesting_id`))) left join `trimming_machine_prod_flat_group` `tm` on((`tm`.`harvesting_id` = `d`.`harvesting_id`))) left join `trimming_hand_prod_flat_group` `th` on((`th`.`harvesting_id` = `d`.`harvesting_id`))) left join `sorting_prod_flat_all_group` `s` on((`s`.`harvesting_id` = `d`.`harvesting_id`))) left join `cultivation`.`harvest_prod_view` `h` on((`d`.`harvesting_id` = `h`.`harvesting_id`))) left join `pacstone`.`plant_strain` `ps` on((`ps`.`id` = `h`.`strain_id`))) where ((`h`.`harvest_year` = 2022) and (`tm`.`batch_status` = 'Finished') and (`d`.`input_quantity` > 0)) group by `h`.`harvesting_id`,`h`.`harvest_type`,`h`.`harvest_id` order by `h`.`harvest_year` desc,`h`.`harvest_week` desc,`h`.`harvest_id`

-- View: processing.batch_production_harvest_flat
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `batch_production_harvest_flat` AS select max(`h`.`flowering_id`) AS `flowering_id`,`h`.`harvesting_id` AS `harvesting_id`,max(`h`.`flowering_id_name`) AS `flowering_batch`,`h`.`harvest_id` AS `harvest_batch`,max(`h`.`test_id`) AS `test_id`,if((max(`h`.`test_id`) is null),`h`.`harvest_id`,concat(`h`.`harvest_id`,'-',max(`h`.`test_id`))) AS `harvest_batch_test_id`,max(`h`.`property_id`) AS `property_id`,max(`h`.`license_id`) AS `license`,max(`h`.`strain_id`) AS `strain_id`,max(`ps`.`name`) AS `strain_name`,if((max(`ps`.`core_strain`) = 1),'YES','NO') AS `core_strain`,max(`h`.`harvest_date`) AS `harvest_date`,max(`h`.`harvest_week`) AS `harvest_week`,quarter(max(`h`.`harvest_date`)) AS `harvest_quarter`,max(`h`.`harvest_year`) AS `harvest_year`,if(((0 <> (`h`.`harvest_type` = 'Manicure')) or (0 <> (`h`.`harvest_type` = 'Fresh Frozen'))),NULL,max(`h`.`flower_plant_count`)) AS `planted_count`,if(((0 <> (`h`.`harvest_type` = 'Manicure')) or (0 <> (`h`.`harvest_type` = 'Fresh Frozen'))),NULL,`h`.`harvest_plant_count`) AS `harvested_count`,min(`d`.`start_date`) AS `input_date_drying`,max(`d`.`input_quantity`) AS `input_drying`,max(`d`.`output_quantity`) AS `output_drying`,round((100 - (max((`d`.`output_quantity` * 100)) / max(`d`.`input_quantity`))),3) AS `drying_loss_pct`,max(`d`.`batch_status`) AS `status_drying`,min(`b`.`start_date`) AS `input_date_bucking`,max(`b`.`input_quantity`) AS `input_bucking`,max(`b`.`output_quantity`) AS `output_bucking`,round((100 - (max((`b`.`output_quantity` * 100)) / max(`b`.`input_quantity`))),3) AS `bucking_loss_pct`,max(`b`.`batch_status`) AS `status_bucking`,min(`tm`.`start_date`) AS `input_date_tzero`,max(`tm`.`input_quantity`) AS `input_tzero`,max(`tm`.`output_quantity`) AS `output_tzero`,max(`tm`.`big_a_flower_output`) AS `tzero_big_a`,max(`tm`.`medium_a_flower_output`) AS `tzero_mids_a`,max(`tm`.`reg_a_flower_output`) AS `tzero_reg_a`,max(`tm`.`sml_a_flower_output`) AS `tzero_small_a`,max(`tm`.`micro_a_flower_output`) AS `tzero_micros_a`,max(`tm`.`b_flower_output`) AS `tzero_b`,max(`tm`.`c_flower_output`) AS `tzero_c`,max(`tm`.`retrim_a_output`) AS `a_for_retrim`,max(`tm`.`retrim_b_output`) AS `b_for_retrim`,max(`tm`.`retrim_c_output`) AS `c_for_retrim`,(((((((ifnull(max(`tm`.`micro_a_flower_output`),0) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`b_flower_output`),0)) + ifnull(max(`tm`.`retrim_a_output`),0)) + ifnull(max(`tm`.`retrim_b_output`),0)) AS `tzero_ab`,((((((((ifnull(max(`tm`.`micro_a_flower_output`),0) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`b_flower_output`),0)) + ifnull(max(`tm`.`retrim_a_output`),0)) + ifnull(max(`tm`.`retrim_b_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) AS `tzero_ab_shake`,max(`tm`.`total_flower_output_quantity`) AS `tzero_abc`,(((((((((ifnull(max(`tm`.`micro_a_flower_output`),0) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`b_flower_output`),0)) + ifnull(max(`tm`.`retrim_a_output`),0)) + ifnull(max(`tm`.`retrim_b_output`),0)) + ifnull(max(`tm`.`c_flower_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) AS `tzero_abc_shake`,max(`tm`.`trim_output`) AS `tzero_trim`,max(`tm`.`sugar_shake_output`) AS `tzero_shake`,max(`tm`.`waste_output`) AS `tzero_waste`,round((100 - ((max(`tm`.`output_quantity`) * 100) / max(`tm`.`input_quantity`))),3) AS `tzero_loss_pct`,max(`tm`.`batch_status`) AS `status_tzero`,min(`th`.`start_date`) AS `input_date_retrim`,max(`th`.`input_quantity`) AS `input_retrim`,max(`th`.`output_quantity`) AS `output_retrim`,max(`th`.`a_flower_output`) AS `retrim_a`,max(`th`.`b_flower_output`) AS `retrim_b`,max(`th`.`c_flower_output`) AS `retrim_c`,max(`th`.`sugar_shake_output`) AS `retrim_shake`,max(`th`.`waste_output`) AS `retrim_waste`,round((100 - ((max(`th`.`output_quantity`) * 100) / nullif(max(`th`.`input_quantity`),0))),3) AS `retrim_loss_pct`,max(`th`.`batch_status`) AS `status_retrim`,min(`s`.`start_date`) AS `input_date_sorter`,max(`s`.`input_quantity`) AS `sorter_input`,max(`s`.`output_quantity`) AS `sorter_output`,max(`s`.`big_a_flower_output`) AS `sorter_big_a`,max(`s`.`big_b_flower_output`) AS `sorter_big_b`,max(`s`.`big_c_flower_output`) AS `sorter_big_c`,max(`s`.`big_x_flower_output`) AS `sorter_big_x`,max(`s`.`mids_a_flower_output`) AS `sorter_mids_a`,max(`s`.`mids_b_flower_output`) AS `sorter_mids_b`,max(`s`.`mids_c_flower_output`) AS `sorter_mids_c`,max(`s`.`mids_x_flower_output`) AS `sorter_mids_x`,max(`s`.`smalls_a_flower_output`) AS `sorter_smalls_a`,max(`s`.`smalls_b_flower_output`) AS `sorter_smalls_b`,max(`s`.`smalls_c_flower_output`) AS `sorter_smalls_c`,max(`s`.`smalls_x_flower_output`) AS `sorter_smalls_x`,max(`s`.`microsmalls_a_flower_output`) AS `sorter_micros_a`,max(`s`.`microsmalls_b_flower_output`) AS `sorter_micros_b`,max(`s`.`microsmalls_c_flower_output`) AS `sorter_micros_c`,max(`s`.`microsmalls_x_flower_output`) AS `sorter_micros_x`,max(`s`.`regs_a_flower_output`) AS `sorter_regs_a`,max(`s`.`regs_b_flower_output`) AS `sorter_regs_b`,max(`s`.`regs_c_flower_output`) AS `sorter_regs_c`,max(`s`.`regs_x_flower_output`) AS `sorter_regs_x`,max(`s`.`total_flower_output_quantity`) AS `sorter_flower`,max(`s`.`trim_output`) AS `sorter_trim`,max(`s`.`sugar_shake_output`) AS `sorter_shake`,max(`s`.`kief_output`) AS `sorter_kief`,max(`s`.`waste_output`) AS `sorter_waste`,round((100 - ((max(`s`.`output_quantity`) * 100) / nullif(max(`s`.`input_quantity`),0))),3) AS `sorter_loss_pct`,max(`s`.`batch_status`) AS `sorter_status`,if((max(`ps`.`core_strain`) = 0),max(`tm`.`big_a_flower_output`),(ifnull(max(`s`.`big_a_flower_output`),0) + ifnull(max(`s`.`big_x_flower_output`),0))) AS `total_a_bigs`,if((max(`ps`.`core_strain`) = 0),max(`tm`.`medium_a_flower_output`),(ifnull(max(`s`.`mids_a_flower_output`),0) + ifnull(max(`s`.`mids_x_flower_output`),0))) AS `total_a_mids`,if((max(`ps`.`core_strain`) = 0),max(`tm`.`sml_a_flower_output`),(ifnull(max(`s`.`smalls_a_flower_output`),0) + ifnull(max(`s`.`smalls_x_flower_output`),0))) AS `total_a_smalls`,if((max(`ps`.`core_strain`) = 0),max(`tm`.`micro_a_flower_output`),(ifnull(max(`s`.`microsmalls_a_flower_output`),0) + ifnull(max(`s`.`microsmalls_x_flower_output`),0))) AS `total_a_micros`,if((max(`ps`.`core_strain`) = 0),max(`tm`.`reg_a_flower_output`),(ifnull(max(`s`.`regs_a_flower_output`),0) + ifnull(max(`s`.`regs_x_flower_output`),0))) AS `total_a_regs`,((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`th`.`b_flower_output`),0)) + ifnull(max(`s`.`big_b_flower_output`),0)) + ifnull(max(`s`.`mids_b_flower_output`),0)) + ifnull(max(`s`.`smalls_b_flower_output`),0)) + ifnull(max(`s`.`microsmalls_b_flower_output`),0)) + ifnull(max(`s`.`regs_b_flower_output`),0)) AS `total_b`,((((((ifnull(max(`tm`.`c_flower_output`),0) + ifnull(max(`th`.`c_flower_output`),0)) + ifnull(max(`s`.`big_c_flower_output`),0)) + ifnull(max(`s`.`mids_c_flower_output`),0)) + ifnull(max(`s`.`smalls_c_flower_output`),0)) + ifnull(max(`s`.`microsmalls_c_flower_output`),0)) + ifnull(max(`s`.`regs_c_flower_output`),0)) AS `total_c`,((ifnull(max(`tm`.`sugar_shake_output`),0) + ifnull(max(`th`.`sugar_shake_output`),0)) + ifnull(max(`s`.`sugar_shake_output`),0)) AS `total_shake`,max(`tm`.`trim_output`) AS `total_trim`,max(`s`.`kief_output`) AS `total_kief`,((ifnull(max(`tm`.`waste_output`),0) + ifnull(max(`th`.`waste_output`),0)) + ifnull(max(`s`.`waste_output`),0)) AS `total_waste`,if((max(`ps`.`core_strain`) = 0),(((((((((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`tm`.`c_flower_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) + ifnull(max(`tm`.`trim_output`),0)) + ifnull(max(`tm`.`waste_output`),0)) + ifnull(max(`th`.`b_flower_output`),0)) + ifnull(max(`th`.`c_flower_output`),0)) + ifnull(max(`th`.`sugar_shake_output`),0)) + ifnull(max(`th`.`waste_output`),0)) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`micro_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)),(((((((((((((((((((((((((((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`tm`.`c_flower_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) + ifnull(max(`tm`.`trim_output`),0)) + ifnull(max(`tm`.`waste_output`),0)) + ifnull(max(`th`.`b_flower_output`),0)) + ifnull(max(`th`.`c_flower_output`),0)) + ifnull(max(`th`.`sugar_shake_output`),0)) + ifnull(max(`th`.`waste_output`),0)) + ifnull(max(`s`.`big_a_flower_output`),0)) + ifnull(max(`s`.`big_x_flower_output`),0)) + ifnull(max(`s`.`mids_a_flower_output`),0)) + ifnull(max(`s`.`mids_x_flower_output`),0)) + ifnull(max(`s`.`smalls_a_flower_output`),0)) + ifnull(max(`s`.`smalls_x_flower_output`),0)) + ifnull(max(`s`.`microsmalls_a_flower_output`),0)) + ifnull(max(`s`.`microsmalls_x_flower_output`),0)) + ifnull(max(`s`.`regs_a_flower_output`),0)) + ifnull(max(`s`.`regs_x_flower_output`),0)) + ifnull(max(`s`.`big_b_flower_output`),0)) + ifnull(max(`s`.`mids_b_flower_output`),0)) + ifnull(max(`s`.`smalls_b_flower_output`),0)) + ifnull(max(`s`.`microsmalls_b_flower_output`),0)) + ifnull(max(`s`.`regs_b_flower_output`),0)) + ifnull(max(`s`.`big_c_flower_output`),0)) + ifnull(max(`s`.`mids_c_flower_output`),0)) + ifnull(max(`s`.`smalls_c_flower_output`),0)) + ifnull(max(`s`.`microsmalls_c_flower_output`),0)) + ifnull(max(`s`.`regs_c_flower_output`),0)) + ifnull(max(`s`.`sugar_shake_output`),0)) + ifnull(max(`s`.`waste_output`),0)) + ifnull(max(`s`.`kief_output`),0))) AS `total`,if((max(`ps`.`core_strain`) = 0),round((((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`micro_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)) * 16) / nullif(`h`.`harvest_plant_count`,0)),3),round(((((((((((((((((((ifnull(max(`s`.`big_a_flower_output`),0) + ifnull(max(`tm`.`b_flower_output`),0)) + ifnull(max(`th`.`b_flower_output`),0)) + ifnull(max(`s`.`big_x_flower_output`),0)) + ifnull(max(`s`.`mids_a_flower_output`),0)) + ifnull(max(`s`.`mids_x_flower_output`),0)) + ifnull(max(`s`.`smalls_a_flower_output`),0)) + ifnull(max(`s`.`smalls_x_flower_output`),0)) + ifnull(max(`s`.`microsmalls_a_flower_output`),0)) + ifnull(max(`s`.`microsmalls_x_flower_output`),0)) + ifnull(max(`s`.`regs_a_flower_output`),0)) + ifnull(max(`s`.`regs_x_flower_output`),0)) + ifnull(max(`s`.`big_b_flower_output`),0)) + ifnull(max(`s`.`mids_b_flower_output`),0)) + ifnull(max(`s`.`smalls_b_flower_output`),0)) + ifnull(max(`s`.`microsmalls_b_flower_output`),0)) + ifnull(max(`s`.`regs_b_flower_output`),0)) * 16) / nullif(`h`.`harvest_plant_count`,0)),3)) AS `oz_plant_h`,if((max(`ps`.`core_strain`) = 0),round((((((((((((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`tm`.`c_flower_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) + ifnull(max(`tm`.`trim_output`),0)) + ifnull(max(`tm`.`waste_output`),0)) + ifnull(max(`th`.`b_flower_output`),0)) + ifnull(max(`th`.`c_flower_output`),0)) + ifnull(max(`th`.`sugar_shake_output`),0)) + ifnull(max(`th`.`waste_output`),0)) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`micro_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)) * 100) / nullif(max(`tm`.`input_quantity`),0)),2),round((((((((((((((((((((((((((((((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`tm`.`c_flower_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) + ifnull(max(`tm`.`trim_output`),0)) + ifnull(max(`tm`.`waste_output`),0)) + ifnull(max(`th`.`b_flower_output`),0)) + ifnull(max(`th`.`c_flower_output`),0)) + ifnull(max(`th`.`sugar_shake_output`),0)) + ifnull(max(`th`.`waste_output`),0)) + ifnull(max(`s`.`big_a_flower_output`),0)) + ifnull(max(`s`.`big_x_flower_output`),0)) + ifnull(max(`s`.`mids_a_flower_output`),0)) + ifnull(max(`s`.`mids_x_flower_output`),0)) + ifnull(max(`s`.`smalls_a_flower_output`),0)) + ifnull(max(`s`.`smalls_x_flower_output`),0)) + ifnull(max(`s`.`microsmalls_a_flower_output`),0)) + ifnull(max(`s`.`microsmalls_x_flower_output`),0)) + ifnull(max(`s`.`regs_a_flower_output`),0)) + ifnull(max(`s`.`regs_x_flower_output`),0)) + ifnull(max(`s`.`big_b_flower_output`),0)) + ifnull(max(`s`.`mids_b_flower_output`),0)) + ifnull(max(`s`.`smalls_b_flower_output`),0)) + ifnull(max(`s`.`microsmalls_b_flower_output`),0)) + ifnull(max(`s`.`regs_b_flower_output`),0)) + ifnull(max(`s`.`big_c_flower_output`),0)) + ifnull(max(`s`.`mids_c_flower_output`),0)) + ifnull(max(`s`.`smalls_c_flower_output`),0)) + ifnull(max(`s`.`microsmalls_c_flower_output`),0)) + ifnull(max(`s`.`regs_c_flower_output`),0)) + ifnull(max(`s`.`sugar_shake_output`),0)) + ifnull(max(`s`.`kief_output`),0)) + ifnull(max(`s`.`waste_output`),0)) * 100) / nullif(max(`tm`.`input_quantity`),0)),2)) AS `pct_completed` from ((((((`drying_prod_flat_all_group` `d` left join `bucking_prod_flat_all_group` `b` on((`b`.`harvesting_id` = `d`.`harvesting_id`))) left join `trimming_machine_prod_flat_group` `tm` on((`tm`.`harvesting_id` = `d`.`harvesting_id`))) left join `trimming_hand_prod_flat_group` `th` on((`th`.`harvesting_id` = `d`.`harvesting_id`))) left join `sorting_prod_flat_all_group` `s` on((`s`.`harvesting_id` = `d`.`harvesting_id`))) left join `cultivation`.`harvest_prod_view` `h` on((`d`.`harvesting_id` = `h`.`harvesting_id`))) left join `pacstone`.`plant_strain` `ps` on((`ps`.`id` = `h`.`strain_id`))) where ((`h`.`harvest_year` > 2022) and (`tm`.`batch_status` = 'Finished') and (`d`.`input_quantity` > 0)) group by `h`.`harvesting_id`,`h`.`harvest_type`,`h`.`harvest_id` order by `h`.`harvest_year` desc,`h`.`harvest_week` desc,`h`.`harvest_id`

-- View: processing.bucking_active
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `bucking_active` AS select `bb`.`metrc_tag` AS `metrc_tag`,`bb`.`date` AS `date`,`bb`.`harvesting_id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`cat`.`name` AS `category`,`ct`.`name` AS `category_type`,max(`bb`.`quantity`) AS `input_quantity`,sum(`bd`.`quantity`) AS `output_quantity`,sum((case when (`bd`.`status` = 'Active') then `bd`.`quantity` else 0 end)) AS `active_output`,sum((case when (`bd`.`status` = 'Inactive') then `bd`.`quantity` else 0 end)) AS `inactive_output`,(max(`bb`.`quantity`) - sum((case when (`bd`.`status` = 'Inactive') then `bd`.`quantity` else 0 end))) AS `active_quantity`,count(`bd`.`quantity`) AS `bin_count`,`bb`.`action` AS `process_action` from (((((`bucked_details` `bd` left join `bucked_batch` `bb` on((`bb`.`id` = `bd`.`bucked_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `bb`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `bb`.`category_type_id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) where ((`bb`.`status` = 'Active') and ((`bd`.`status` in ('Active','Inactive')) or (`bd`.`id` is null))) group by `bb`.`harvesting_id`,`bb`.`metrc_tag`,`h`.`test_id`,`bb`.`action`,`h`.`harvest_id`,`bb`.`date`,`h`.`property_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`cat`.`name`,`ct`.`name`

-- View: processing.bucking_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `bucking_batch_view` AS select `h`.`flowering_id` AS `Flowering ID`,`bb`.`harvesting_id` AS `Harvesting ID`,`bb`.`batch_id` AS `Processing ID`,`fl`.`flowering_id` AS `FID`,`h`.`harvest_id` AS `HID`,`fl`.`date` AS `Date of Flip to Flower`,`h`.`date` AS `Harvest Date`,week(`h`.`date`,0) AS `Harvest Week`,year(`h`.`date`) AS `Harvest Year`,`h`.`test_id` AS `Test ID`,`h`.`harvest_type` AS `Harvest Type`,max(`strain`.`strain_code`) AS `Strain ID`,max(`strain`.`name`) AS `Plant Strain`,max(`bb`.`source_metrc_tag`) AS `Processing Batch METRC`,max(`bb`.`processing_batch_source_tag`) AS `Source METRC`,max(`bb`.`id`) AS `Bucking Batch ID`,max(`bb`.`metrc_tag`) AS `METRC Tag`,`fl`.`plant_count` AS `Crop Plant Count`,`h`.`plant_count_harvested` AS `Harvested Plant Count`,max(`bdsum`.`bin_count`) AS `Bin Count Recieved`,`h`.`wet` AS `Wet Weight lbs`,sum(`bb`.`quantity`) AS `Dry Plant Weight lbs`,sum(`bdsum`.`total_quantity`) AS `Bucked Flower lbs`,(`h`.`wet` - sum(`bb`.`quantity`)) AS `Moisture Loss lbs`,(1 - (sum(`bdsum`.`total_quantity`) / `h`.`wet`)) AS `Moisture Loss %`,(sum(`bb`.`quantity`) - sum(`bdsum`.`total_quantity`)) AS `Bucked Waste lbs`,((sum(`bb`.`quantity`) - sum(`bdsum`.`total_quantity`)) / sum(`bb`.`quantity`)) AS `Waste Loss %`,sum(`bdsum`.`bin_count`) AS `Bucked Flower Bins`,max(`pl`.`process_start`) AS `Bucking Start`,max(`pl`.`process_stop`) AS `Bucking Stop`,timediff(max(`pl`.`process_stop`),max(`pl`.`process_start`)) AS `Bucking Duration`,max(`bb`.`status`) AS `Proces Status`,max(`pl`.`id`) AS `process_log`,max(`bb`.`status`) AS `Record Status`,max(`bdsum`.`process_queue`) AS `Process Queue`,max(`bdsum`.`process_queue_type`) AS `Process Queue type`,max(`bb`.`note`) AS `Notes`,max(`bb`.`created_by`) AS `Created By`,max(`bb`.`created_on`) AS `Created On`,week(`bb`.`created_on`,0) AS `Week`,year(`bb`.`created_on`) AS `Year`,max(`bb`.`modified_by`) AS `Modified By`,max(`bb`.`modified_by`) AS `Modified On` from (((((`bucked_batch` `bb` left join `bucking_detail_view` `bdsum` on((`bb`.`id` = `bdsum`.`bucked_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `cultivation`.`flowering` `fl` on((`fl`.`id` = `h`.`flowering_id`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `bb`.`strain_id`))) left join `process_log` `pl` on((`bb`.`source_id` = `pl`.`source_id`))) where (`h`.`year_num` > 2020) group by `bb`.`id` order by `h`.`date` desc

-- View: processing.bucking_crop_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `bucking_crop_batch_view` AS select `bb`.`Flowering ID` AS `Flowering ID`,max(`bb`.`Harvesting ID`) AS `Harvesting ID`,max(`bb`.`Harvesting ID`) AS `Processing ID`,max(`bb`.`FID`) AS `FID`,min(`bb`.`HID`) AS `HID`,max(`bb`.`Date of Flip to Flower`) AS `Flower Flip Date`,min(`bb`.`Harvest Date`) AS `Harvest Date`,count(`bb`.`Test ID`) AS `Test Record Count`,max(`bb`.`Crop Plant Count`) AS `Crop Plant Count`,count(`bb`.`Harvesting ID`) AS `Harvest Record Count`,max(`bb`.`Harvested Plant Count`) AS `Harvested Plant Count`,max(`bb`.`Strain ID`) AS `Strain ID`,max(`bb`.`Plant Strain`) AS `Plant Strain`,max(`bb`.`Wet Weight lbs`) AS `Wet Weight lbs`,max(`bb`.`Moisture Loss lbs`) AS `Moisture Loss lbs`,avg(`bb`.`Moisture Loss %`) AS `Moisture loss %`,max(`bb`.`Dry Plant Weight lbs`) AS `Dry Plant Weight lbs`,max(`bb`.`Bucked Flower lbs`) AS `Bucked Flower lbs`,sum(`bb`.`Bucked Waste lbs`) AS `Bucked Waste lbs`,max(`bb`.`Waste Loss %`) AS `Bucked Waste %`,(sum(`bb`.`Bucking Duration`) / sum(`bb`.`Bucked Flower Bins`)) AS `Bucking Duration`,count(`bb`.`Bucked Flower Bins`) AS `Bucking Records`,count(`bb`.`Bucked Flower Bins`) AS `Batches Complete`,if((count(`bb`.`Bucked Flower Bins`) = count(if((`bbo`.`action` = 'Finished'),`bbo`.`id`,NULL))),'Complete','In Progress') AS `Crop Bucking Status` from (`bucking_batch_view` `bb` left join `bucked_batch` `bbo` on((`bb`.`Harvesting ID` = `bbo`.`harvesting_id`))) group by `bb`.`Flowering ID`

-- View: processing.bucking_data
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `bucking_data` AS select `bb`.`metrc_tag` AS `metrc_tag`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,`strain`.`strain_code` AS `strain_code`,sum(`bd`.`quantity`) AS `quantity`,count(`bd`.`quantity`) AS `bin_count`,`bb`.`action` AS `process_action`,`bb`.`date` AS `date_started`,if((`bb`.`action` = 'Finished'),cast(`bb`.`modified_on` as date),NULL) AS `date_finished` from ((((((`bucked_batch` `bb` left join `bucked_details` `bd` on((`bb`.`id` = `bd`.`bucked_batch_id`))) left join `cultivation`.`harvesting_ref` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `bb`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `bb`.`category_type_id`))) left join `pacstone`.`uom` on((`pacstone`.`uom`.`id` = `bb`.`uom_id`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `bb`.`strain_id`))) where (`h`.`year_num` > 2020) group by `bb`.`harvesting_id`,`bb`.`metrc_tag`,`bb`.`processing_batch_source_tag`,`strain`.`name`,`strain`.`strain_code`,`bb`.`category_id`,`bb`.`category_type_id`,`bb`.`uom_id`,`bb`.`quantity`,`bb`.`action`,`bb`.`date`,`bb`.`modified_on` order by `bb`.`modified_on` desc

-- View: processing.bucking_detail_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `bucking_detail_view` AS select `bd`.`bucked_batch_id` AS `bucked_batch_id`,sum(`bd`.`quantity`) AS `total_quantity`,count(`bd`.`quantity`) AS `bin_count`,if((count(`bd`.`quantity`) = count(if((`bb`.`action` = 'Finished'),`bb`.`id`,NULL))),'Complete','In Progress') AS `process_status`,count(if((`bb`.`action` = 'Finished'),1,NULL)) AS `batches_complete`,max(`bd`.`process_queue_id`) AS `process_queue`,max(`bd`.`process_queue_type`) AS `process_queue_type` from (`bucked_details` `bd` left join `bucked_batch` `bb` on((`bb`.`id` = `bd`.`bucked_batch_id`))) group by `bd`.`bucked_batch_id`

-- View: processing.bucking_details_vs_weight_readings
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `bucking_details_vs_weight_readings` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`bb`.`metrc_tag` AS `metrc_tag`,min(`bb`.`date`) AS `start_date`,sum(`bd`.`quantity`) AS `output_quantity`,round(max(`iwr`.`total`),2) AS `reading_output`,if((`bb`.`action` = 'Stopped'),'In Progress',`bb`.`action`) AS `batch_status` from (((`bucked_details` `bd` left join `bucked_batch` `bb` on((`bb`.`id` = `bd`.`bucked_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `pacstone_dev`.`batch_weight_times` `iwr` on((`bb`.`metrc_tag` = `iwr`.`batch_id`))) where ((`h`.`year_num` > 2021) and (`iwr`.`id` is not null)) group by `h`.`flowering_id`,`h`.`id`,`bb`.`metrc_tag`,`h`.`harvest_id`,`bb`.`action`

-- View: processing.bucking_details_vs_weight_readings_line_by_line
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `bucking_details_vs_weight_readings_line_by_line` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`bb`.`metrc_tag` AS `metrc_tag`,min(`bb`.`date`) AS `start_date`,`bd`.`quantity` AS `output_quantity`,if((`iwr`.`net_weight` is null),'MISSING',`iwr`.`net_weight`) AS `reading_output`,(`bd`.`quantity` - `iwr`.`net_weight`) AS `difference`,if((`bb`.`action` = 'Stopped'),'In Progress',`bb`.`action`) AS `batch_status` from (((`bucked_details` `bd` left join `bucked_batch` `bb` on((`bb`.`id` = `bd`.`bucked_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `pacstone_dev`.`individual_weight_readings` `iwr` on(((`bd`.`metrc_tag` = `iwr`.`batch_id`) and (`bd`.`quantity` = `iwr`.`net_weight`)))) where ((`h`.`year_num` > 2021) and (`iwr`.`id` is not null)) group by `h`.`flowering_id`,`h`.`id`,`bb`.`metrc_tag`,`h`.`harvest_id`,`bb`.`action`,`bd`.`quantity`,`iwr`.`net_weight`

-- View: processing.bucking_harvest_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `bucking_harvest_batch_view` AS select `bb`.`Flowering ID` AS `Flowering ID`,`bb`.`Harvesting ID` AS `Harvesting ID`,`bb`.`Harvesting ID` AS `Processing ID`,`bb`.`HID` AS `HID`,`bb`.`FID` AS `FID`,`bb`.`Date of Flip to Flower` AS `Flower Flip Date`,`bb`.`Harvest Date` AS `Harvest Date`,`bb`.`Test ID` AS `Test ID`,`bb`.`Crop Plant Count` AS `Crop Plant Count`,`bb`.`Harvested Plant Count` AS `Harvested Plant Count`,max(`bb`.`Strain ID`) AS `Strain ID`,max(`bb`.`Plant Strain`) AS `Plant Strain`,max(`bb`.`Wet Weight lbs`) AS `Wet Weight lbs`,max(`bb`.`Moisture Loss lbs`) AS `Moisture Loss lbs`,avg(`bb`.`Moisture Loss %`) AS `Moisture loss %`,max(`bb`.`Dry Plant Weight lbs`) AS `Dry Plant Weight lbs`,max(`bb`.`Bucked Flower lbs`) AS `Bucked Flower lbs`,sum(`bb`.`Bucked Waste lbs`) AS `Bucked Waste lbs`,max(`bb`.`Waste Loss %`) AS `Bucked Waste %`,(sum(`bb`.`Bucking Duration`) / sum(`bb`.`Bucked Flower Bins`)) AS `Bucking Duration`,count(`bb`.`Bucked Flower Bins`) AS `Bucking Records`,count(`bb`.`Bucked Flower Bins`) AS `Batches Complete`,if((count(`bb`.`Bucked Flower Bins`) = count(if((`bbo`.`action` = 'Finished'),`bbo`.`id`,NULL))),'Complete','In Progress') AS `Crop Bucking Status` from (`bucking_batch_view` `bb` left join `bucked_batch` `bbo` on((`bb`.`Harvesting ID` = `bbo`.`harvesting_id`))) group by `bb`.`Harvesting ID`

-- View: processing.bucking_prod_flat
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `bucking_prod_flat` AS select max(`bd`.`flowering_id`) AS `flowering_id`,min(`bd`.`start_date`) AS `start_date`,sum(`bd`.`input_quantity`) AS `input_quantity`,sum(`bd`.`output_quantity`) AS `output_quantity`,max(`bd`.`batch_status`) AS `batch_status` from `bucking_prod_flat_all` `bd` group by `bd`.`flowering_id`

-- View: processing.bucking_prod_flat_all
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `bucking_prod_flat_all` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`bb`.`metrc_tag` AS `metrc_tag`,min(`bb`.`date`) AS `start_date`,(select sum(`bb_sub`.`quantity`) from `bucked_batch` `bb_sub` where (`bb_sub`.`metrc_tag` = `bb`.`metrc_tag`)) AS `input_quantity`,sum(`bd`.`quantity`) AS `output_quantity`,if((`bb`.`action` = 'Stopped'),'In Progress',`bb`.`action`) AS `batch_status` from ((`bucked_details` `bd` left join `bucked_batch` `bb` on((`bb`.`id` = `bd`.`bucked_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) where (`h`.`year_num` > 2021) group by `h`.`flowering_id`,`h`.`id`,`bb`.`metrc_tag`,`h`.`harvest_id`,`bb`.`action`

-- View: processing.bucking_prod_flat_all_group
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `bucking_prod_flat_all_group` AS select `td`.`flowering_id` AS `flowering_id`,`td`.`harvesting_id` AS `harvesting_id`,`td`.`harvest_id` AS `harvest_id`,min(`td`.`start_date`) AS `start_date`,sum(`td`.`input_quantity`) AS `input_quantity`,sum(`td`.`output_quantity`) AS `output_quantity`,max(`td`.`batch_status`) AS `batch_status` from `bucking_prod_flat_all` `td` group by `td`.`flowering_id`,`td`.`harvesting_id`,`td`.`harvest_id`

-- View: processing.bucking_prod_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `bucking_prod_view` AS select `h`.`flowering_id` AS `flowering_id`,`bb`.`harvesting_id` AS `harvesting_id`,`bb`.`metrc_tag` AS `metrc_tag`,'Bucking' AS `process`,`bb`.`id` AS `batch_id`,`bb`.`date` AS `date`,if((`bb`.`action` = 'Stopped'),'In Progress',`bb`.`action`) AS `batch_status`,`f`.`flowering_id` AS `flowering_id_name`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,NULL AS `flower_plant_count`,NULL AS `harvest_plant_count`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`cat`.`name` AS `category`,`ct`.`name` AS `category_type`,NULL AS `product_size`,NULL AS `product_grade`,max(`bb`.`quantity`) AS `input_quantity`,sum(`bd`.`quantity`) AS `output_quantity`,`cate`.`name` AS `output_category`,`cty`.`name` AS `output_category_type` from ((((((((`bucked_batch` `bb` left join `bucked_details` `bd` on((`bb`.`id` = `bd`.`bucked_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `bb`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `bb`.`category_type_id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) left join `cultivation`.`flowering` `f` on((`f`.`id` = `h`.`flowering_id`))) left join `product_sku`.`category` `cate` on((`cate`.`id` = `bd`.`category_id`))) left join `product_sku`.`category_type` `cty` on((`cty`.`id` = `bd`.`category_type_id`))) group by `bb`.`harvesting_id`,`bb`.`metrc_tag`,`h`.`test_id`,`bb`.`action`,`h`.`harvest_id`,`bb`.`date`,`h`.`property_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`cat`.`name`,`ct`.`name`,`bb`.`id`,`h`.`flowering_id`,`f`.`flowering_id`,`cate`.`name`,`cty`.`name` order by `bb`.`date` desc,`bb`.`action`

-- View: processing.bucking_ref
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `bucking_ref` AS select `bb`.`metrc_tag` AS `metrc_tag`,`bb`.`harvesting_id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`strain`.`strain_code` AS `strain_code`,sum(`bd`.`quantity`) AS `quantity`,count(`bd`.`quantity`) AS `bin_count`,`bb`.`action` AS `process_action`,if((`bb`.`action` = 'Finished'),cast(`bb`.`modified_on` as date),NULL) AS `date_finished` from ((((((`bucked_batch` `bb` left join `bucked_details` `bd` on((`bb`.`id` = `bd`.`bucked_batch_id`))) left join `cultivation`.`harvesting_ref` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `bb`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `bb`.`category_type_id`))) left join `pacstone`.`uom` on((`pacstone`.`uom`.`id` = `bb`.`uom_id`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `bb`.`strain_id`))) where (`h`.`year_num` > 2020) group by `bb`.`harvesting_id`,`bb`.`metrc_tag`,`bb`.`processing_batch_source_tag`,`strain`.`name`,`strain`.`strain_code`,`bb`.`category_id`,`bb`.`category_type_id`,`bb`.`uom_id`,`bb`.`quantity`,`bb`.`action`,`bb`.`modified_on` order by `bb`.`modified_on` desc

-- View: processing.drying_active
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `drying_active` AS select `bb`.`metrc_tag` AS `metrc_tag`,`bb`.`date` AS `date`,`bb`.`harvesting_id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`cat`.`name` AS `category`,`ct`.`name` AS `category_type`,max(`bb`.`quantity`) AS `input_quantity`,sum(`bd`.`quantity`) AS `output_quantity`,sum((case when (`bd`.`status` = 'Active') then `bd`.`quantity` else 0 end)) AS `active_output`,sum((case when (`bd`.`status` = 'Inactive') then `bd`.`quantity` else 0 end)) AS `inactive_output`,(max(`bb`.`quantity`) - sum((case when (`bd`.`status` = 'Inactive') then `bd`.`quantity` else 0 end))) AS `active_quantity`,count(`bd`.`quantity`) AS `bin_count`,`bb`.`action` AS `process_action` from (((((`dry_batch` `bb` left join `dry_details` `bd` on((`bb`.`id` = `bd`.`dry_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `bb`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `bb`.`category_type_id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) where ((`bb`.`status` = 'Active') and ((`bd`.`status` in ('Active','Inactive')) or (`bd`.`id` is null))) group by `bb`.`harvesting_id`,`bb`.`metrc_tag`,`h`.`test_id`,`bb`.`action`,`h`.`harvest_id`,`bb`.`date`,`h`.`property_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`cat`.`name`,`ct`.`name`

-- View: processing.drying_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `drying_batch_view` AS select `h`.`flowering_id` AS `Flowering ID`,`db`.`harvesting_id` AS `Harvesting ID`,`db`.`batch_id` AS `Processing ID`,`fl`.`flowering_id` AS `FID`,`h`.`harvest_id` AS `HID`,`fl`.`date` AS `Date of Flip to Flower`,`h`.`date` AS `Harvest Date`,week(`h`.`date`,0) AS `Harvest Week`,year(`h`.`date`) AS `Harvest Year`,`h`.`test_id` AS `Test ID`,`h`.`harvest_type` AS `Harvest Type`,`fl`.`plant_count` AS `Crop Plant Count`,`h`.`plant_count_harvested` AS `Harvested Plant Count`,max(`strain`.`strain_code`) AS `Strain ID`,max(`strain`.`name`) AS `Plant Strain`,max(`db`.`source_metrc_tag`) AS `Processing Batch METRC`,max(`db`.`processing_batch_source_tag`) AS `Source METRC`,max(`db`.`id`) AS `Dry Batch ID`,`db`.`metrc_tag` AS `METRC Tag`,`db`.`quantity` AS `Wet Weight lbs`,max(`h`.`bin_quantity`) AS `Bin Count Recieved`,sum(`ddsum`.`total_quantity`) AS `Dry Weight lbs`,(`db`.`quantity` - sum(`ddsum`.`total_quantity`)) AS `Moisture Loss lbs`,((max(`db`.`quantity`) - sum(`ddsum`.`total_quantity`)) / max(`db`.`quantity`)) AS `Moisture Loss %`,sum(`ddsum`.`output_bin_count`) AS `Dry Plant Bins`,max(`pl`.`process_start`) AS `Drying Start`,max(`pl`.`process_stop`) AS `Drying Stop`,timediff(max(`pl`.`process_stop`),max(`pl`.`process_start`)) AS `Drying Duration`,max(`ddsum`.`process_status`) AS `Process Status`,max(`pl`.`action`) AS `Process Log`,max(`db`.`status`) AS `Record Status`,max(`ddsum`.`process_queue`) AS `Process Queue`,max(`ddsum`.`process_queue_type`) AS `Process type`,max(`db`.`note`) AS `Notes`,max(`db`.`created_by`) AS `Created By`,max(`db`.`created_on`) AS `Created On`,week(max(`db`.`created_on`),0) AS `Drying Started Week`,year(max(`db`.`created_on`)) AS `Drying Started Year`,max(`db`.`modified_by`) AS `Modified By`,max(`db`.`modified_by`) AS `Modified On` from (((((`dry_batch` `db` left join `drying_detail_view` `ddsum` on((`db`.`id` = `ddsum`.`dry_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `db`.`harvesting_id`))) left join `cultivation`.`flowering` `fl` on((`fl`.`id` = `h`.`flowering_id`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `db`.`strain_id`))) left join `process_log` `pl` on((`pl`.`source_id` = `db`.`source_id`))) where (`h`.`year_num` > 2022) group by `db`.`id` order by `h`.`date` desc

-- View: processing.drying_crop_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `drying_crop_batch_view` AS select `db`.`Flowering ID` AS `Flowering ID`,max(`db`.`Harvesting ID`) AS `Harvesting ID`,max(`db`.`Processing ID`) AS `Processing ID`,min(`db`.`HID`) AS `HID`,min(`db`.`FID`) AS `FID`,count(`db`.`Test ID`) AS `Test Record Count`,max(`db`.`Crop Plant Count`) AS `Crop Plant Count`,count(`db`.`Harvested Plant Count`) AS `Harvested Plant Count`,min(`db`.`Harvest Date`) AS `Harvest Date`,count(`db`.`Harvesting ID`) AS `Harvest Record Count`,max(`db`.`Strain ID`) AS `Strain ID`,max(`db`.`Plant Strain`) AS `Plant Strain`,sum(`db`.`Wet Weight lbs`) AS `Wet Weight lbs`,sum(`db`.`Dry Weight lbs`) AS `Dry Weight lbs`,sum(`db`.`Moisture Loss lbs`) AS `Moisture Loss lbs`,avg(`db`.`Moisture Loss %`) AS `Moisture Loss %`,max(`db`.`Drying Duration`) AS `Dry Duration`,sum(`db`.`Dry Plant Bins`) AS `Drying Records`,max(`db`.`Dry Plant Bins`) AS `Batches Complete`,if((count(`db`.`Dry Plant Bins`) = count(if((`dbo`.`action` = 'Finished'),`dbo`.`id`,0))),'Complete','In Progress') AS `Drying Status` from (`drying_batch_view` `db` left join `dry_batch` `dbo` on((`db`.`Harvesting ID` = `dbo`.`harvesting_id`))) group by `db`.`Flowering ID`

-- View: processing.drying_detail_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `drying_detail_view` AS select `dd`.`dry_batch_id` AS `dry_batch_id`,sum(`dd`.`quantity`) AS `total_quantity`,(`db`.`quantity` - sum(`dd`.`quantity`)) AS `loss_qty`,count(if((`db`.`action` = 'Finished'),`db`.`id`,0)) AS `batches_complete`,count(`dd`.`quantity`) AS `output_bin_count`,if((count(`dd`.`quantity`) = count(if((`db`.`action` = 'Finished'),`db`.`id`,0))),'Complete','In Progress') AS `process_status`,max(`dd`.`process_queue_id`) AS `process_queue`,max(`dd`.`process_queue_type`) AS `process_queue_type` from ((`dry_details` `dd` left join `dry_batch` `db` on((`db`.`id` = `dd`.`dry_batch_id`))) left join `process_log` `pl` on((`pl`.`source_id` = `db`.`source_id`))) group by `dd`.`dry_batch_id`,`dd`.`modified_on`,`dd`.`created_on`

-- View: processing.drying_harvest_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `drying_harvest_batch_view` AS select `db`.`Flowering ID` AS `Flowering ID`,`db`.`Harvesting ID` AS `Harvesting ID`,max(`db`.`Processing ID`) AS `Processing ID`,`db`.`HID` AS `HID`,`db`.`FID` AS `FID`,`db`.`Date of Flip to Flower` AS `Flower Flip Date`,`db`.`Harvest Date` AS `Harvest Date`,`db`.`Test ID` AS `Test ID`,`db`.`Harvest Type` AS `Harvest Type`,`db`.`Crop Plant Count` AS `Crop Plant Count`,`db`.`Harvested Plant Count` AS `Harvested Plant Count`,max(`db`.`Strain ID`) AS `Strain ID`,max(`db`.`Plant Strain`) AS `Plant Strain`,sum(`db`.`Wet Weight lbs`) AS `Wet Weight lbs`,sum(`db`.`Dry Weight lbs`) AS `Dry Weight lbs`,sum(`db`.`Moisture Loss lbs`) AS `Moisture Loss lbs`,avg(`db`.`Moisture Loss %`) AS `Moisture Loss %`,max(`db`.`Drying Duration`) AS `Dry Duration`,sum(`db`.`Dry Plant Bins`) AS `Drying Records`,max(`db`.`Dry Plant Bins`) AS `Batches Complete`,if((count(`db`.`Dry Plant Bins`) = count(if((`dbo`.`action` = 'Finished'),`dbo`.`id`,0))),'Complete','In Progress') AS `Drying Status` from (`drying_batch_view` `db` left join `dry_batch` `dbo` on((`db`.`Harvesting ID` = `dbo`.`harvesting_id`))) group by `db`.`Harvesting ID`

-- View: processing.drying_prod_flat
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `drying_prod_flat` AS select max(`bd`.`flowering_id`) AS `flowering_id`,min(`bd`.`start_date`) AS `start_date`,sum(`bd`.`input_quantity`) AS `input_quantity`,sum(`bd`.`output_quantity`) AS `output_quantity`,max(`bd`.`batch_status`) AS `batch_status` from `drying_prod_flat_all` `bd` group by `bd`.`flowering_id`

-- View: processing.drying_prod_flat_all
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `drying_prod_flat_all` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`bb`.`metrc_tag` AS `metrc_tag`,min(`bb`.`date`) AS `start_date`,(select sum(`bb_sub`.`quantity`) from `dry_batch` `bb_sub` where (`bb_sub`.`metrc_tag` = `bb`.`metrc_tag`)) AS `input_quantity`,sum(`bd`.`quantity`) AS `output_quantity`,if((`bb`.`action` = 'Stopped'),'In Progress',`bb`.`action`) AS `batch_status` from ((`dry_details` `bd` left join `dry_batch` `bb` on((`bb`.`id` = `bd`.`dry_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) where (`h`.`year_num` > 2021) group by `h`.`flowering_id`,`h`.`id`,`bb`.`metrc_tag`,`h`.`harvest_id`,`bb`.`action`

-- View: processing.drying_prod_flat_all_group
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `drying_prod_flat_all_group` AS select `td`.`flowering_id` AS `flowering_id`,`td`.`harvesting_id` AS `harvesting_id`,`td`.`harvest_id` AS `harvest_id`,min(`td`.`start_date`) AS `start_date`,sum(`td`.`input_quantity`) AS `input_quantity`,sum(`td`.`output_quantity`) AS `output_quantity`,max(`td`.`batch_status`) AS `batch_status` from `drying_prod_flat_all` `td` group by `td`.`flowering_id`,`td`.`harvesting_id`,`td`.`harvest_id`

-- View: processing.drying_prod_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `drying_prod_view` AS select `h`.`flowering_id` AS `flowering_id`,`bb`.`harvesting_id` AS `harvesting_id`,`bb`.`metrc_tag` AS `metrc_tag`,'Drying' AS `process`,`bb`.`id` AS `batch_id`,`bb`.`date` AS `date`,if((`bb`.`action` = 'Stopped'),'In Progress',`bb`.`action`) AS `batch_status`,`f`.`flowering_id` AS `flowering_id_name`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,NULL AS `flower_plant_count`,NULL AS `harvest_plant_count`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`cat`.`name` AS `category`,`ct`.`name` AS `category_type`,NULL AS `product_size`,NULL AS `product_grade`,max(`bb`.`quantity`) AS `input_quantity`,sum(`bd`.`quantity`) AS `output_quantity`,`cate`.`name` AS `output_category`,`cty`.`name` AS `output_category_type` from ((((((((`dry_batch` `bb` left join `dry_details` `bd` on((`bb`.`id` = `bd`.`dry_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `bb`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `bb`.`category_type_id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) left join `cultivation`.`flowering` `f` on((`f`.`id` = `h`.`flowering_id`))) left join `product_sku`.`category` `cate` on((`cate`.`id` = `bd`.`category_id`))) left join `product_sku`.`category_type` `cty` on((`cty`.`id` = `bd`.`category_type_id`))) group by `bb`.`harvesting_id`,`bb`.`metrc_tag`,`h`.`test_id`,`bb`.`action`,`h`.`harvest_id`,`bb`.`date`,`h`.`property_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`cat`.`name`,`ct`.`name`,`bb`.`id`,`h`.`flowering_id`,`f`.`flowering_id`,`cate`.`name`,`cty`.`name` order by `bb`.`date` desc,`bb`.`action`

-- View: processing.manicured_batch_data
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `manicured_batch_data` AS select max(`h`.`flowering_id`) AS `flowering_id`,`h`.`harvesting_id` AS `harvesting_id`,max(`h`.`flowering_id_name`) AS `flowering_batch`,`h`.`harvest_id` AS `harvest_batch`,max(`h`.`test_id`) AS `test_id`,max(`h`.`property_id`) AS `property_id`,max(`h`.`license_id`) AS `license`,max(`h`.`strain_id`) AS `strain_id`,max(`s`.`name`) AS `strain_name`,if((max(`s`.`core_strain`) = 1),'YES','NO') AS `core_strain`,max(`h`.`harvest_date`) AS `harvest_date`,max(`h`.`harvest_week`) AS `harvest_week`,max(`h`.`harvest_year`) AS `harvest_year`,max(`d`.`input_quantity`) AS `wet_weight` from ((((((`drying_prod_flat_all_group` `d` left join `bucking_prod_flat_all_group` `b` on((`b`.`harvesting_id` = `d`.`harvesting_id`))) left join `trimming_machine_prod_flat_group` `tm` on((`tm`.`harvesting_id` = `d`.`harvesting_id`))) left join `trimming_hand_prod_flat_group` `th` on((`th`.`harvesting_id` = `d`.`harvesting_id`))) left join `sorting_prod_flat_all_group` `s` on((`s`.`harvesting_id` = `d`.`harvesting_id`))) left join `cultivation`.`harvest_prod_view` `h` on((`d`.`harvesting_id` = `h`.`harvesting_id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) where ((`h`.`harvest_year` > 2022) and (`tm`.`batch_status` = 'Finished') and (`d`.`input_quantity` > 0) and (`h`.`harvest_id` like '%-M')) group by `h`.`harvesting_id`,`h`.`harvest_type`,`h`.`harvest_id` order by `h`.`harvest_year` desc,`h`.`harvest_week` desc,`h`.`harvest_id`

-- View: processing.process_status
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `process_status` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`id` AS `harvesting_id`,`h`.`processing_metrc_id` AS `processing_metrc_tag`,`f`.`flowering_id` AS `flowering_batch`,`h`.`harvest_id` AS `harvesting_batch`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`bb`.`uid` AS `drying_batch`,`bb`.`date` AS `drying_start_date`,if((`bb`.`action` = 'Stopped'),'In Progress',`bb`.`action`) AS `drying_status`,(case when (`bb`.`action` = 'Finished') then '✔️' when (`bb`.`action` = 'In Progress') then '' else NULL end) AS `drying_status_box`,max(`bb`.`quantity`) AS `drying_input_quantity`,`buc`.`uid` AS `bucking_batch`,`buc`.`date` AS `bucking_start_date`,if((`buc`.`action` = 'Stopped'),'In Progress',`buc`.`action`) AS `bucking_status`,max(`buc`.`quantity`) AS `bucking_input_quantity`,`t`.`uid` AS `trimming_batch`,`t`.`date` AS `trimming_start_date`,if((`t`.`action` = 'Stopped'),'In Progress',`t`.`action`) AS `trimming_status`,max(`t`.`quantity`) AS `trimming_input_quantity`,`bs`.`uid` AS `sorter_batch`,`bs`.`date` AS `sorter_start_date`,if((`bs`.`action` = 'Stopped'),'In Progress',`bs`.`action`) AS `sorter_status`,max(`bs`.`quantity`) AS `sorter_input_quantity` from ((((((`dry_batch` `bb` left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `bucked_batch` `buc` on((`buc`.`harvesting_id` = `h`.`id`))) left join `trimming_batch` `t` on((`t`.`harvesting_id` = `h`.`id`))) left join `sorter_batch` `bs` on((`bs`.`harvesting_id` = `h`.`id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) left join `cultivation`.`flowering` `f` on((`f`.`id` = `h`.`flowering_id`))) where ((year(`bb`.`date`) >= 2023) and (`t`.`process_type` = 'T-zero Machine')) group by `h`.`flowering_id`,`h`.`id`,`h`.`processing_metrc_id`,`f`.`flowering_id`,`h`.`harvest_id`,`h`.`test_id`,`h`.`property_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`bb`.`uid`,`bb`.`date`,`bb`.`action`,`buc`.`uid`,`buc`.`date`,`buc`.`action`,`t`.`uid`,`t`.`date`,`t`.`action`,`bs`.`uid`,`bs`.`date`,`bs`.`action` order by `bb`.`date` desc,`bb`.`action`

-- View: processing.processing_active
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `processing_active` AS select `p`.`date` AS `date`,`p`.`processing_metrc_tag` AS `processing_batch_source_tag`,`p`.`metrc_tag` AS `metrc_tag`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,`h`.`year_week` AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`pacstone`.`uom`.`name` AS `uom`,`p`.`quantity` AS `quantity`,`p`.`bin_count` AS `bin_count`,`c`.`name` AS `category`,`ct`.`name` AS `category_type`,`p`.`product_id` AS `size`,`p`.`grade` AS `grade`,(case when (`p`.`process_queue_type` = 'Hand Trimming') then 'Hand Trimming' when (`p`.`process_queue_id` is not null) then `p`.`process_queue_id` else `p`.`process_id` end) AS `process`,`p`.`process_queue_id` AS `process_queue`,`p`.`process_queue_type` AS `process_queue_type`,`p`.`process_log` AS `process_log`,(case when (`p`.`process_queue_id` is not null) then 'In Queue' when (`p`.`process_id` = 'Transfer') then 'Received' else 'Finished' end) AS `status`,(case when ((`p`.`process_log` like '%Sorting%') or (`p`.`process_id` = 'QC-Sorting') or (`p`.`source_batch_id` is not null)) then 'Sorted' when ((`p`.`process_log` like '%Trimming%') and ((`p`.`process_queue_id` is null) or (`p`.`process_queue_id` = 'QC-Sorting')) and (`p`.`category_id` = 'SK-CTG-0001') and (not((`p`.`process_log` like '%Sorting%')))) then 'Unsorted' else '-' end) AS `qc_status`,`l`.`name` AS `location` from ((((((`processing` `p` left join `pacstone`.`plant_strain` `s` on((convert(`s`.`id` using utf8mb4) = `p`.`strain_id`))) left join `product_sku`.`category` `c` on((`c`.`id` = `p`.`category_id`))) left join `product_sku`.`category_type` `ct` on((convert(`ct`.`id` using utf8mb4) = `p`.`category_type_id`))) left join `cultivation`.`harvesting_ref` `h` on((`h`.`id` = `p`.`harvesting_id`))) left join `pacstone`.`uom` on((convert(`pacstone`.`uom`.`id` using utf8mb4) = `p`.`uom_id`))) left join `pacstone`.`location` `l` on((convert(`l`.`id` using utf8mb4) = `p`.`location_id`))) where (`p`.`status` = 'Active')

-- View: processing.processing_active_combined
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `processing_active_combined` AS select `processing_active`.`date` AS `date`,`processing_active`.`processing_batch_source_tag` AS `processing_batch_source_tag`,`processing_active`.`metrc_tag` AS `metrc_tag`,`processing_active`.`harvest_id` AS `harvest_id`,`processing_active`.`test` AS `test`,`processing_active`.`property_id` AS `property_id`,`processing_active`.`harvest_date` AS `harvest_date`,`processing_active`.`harvest_week` AS `harvest_week`,`processing_active`.`harvest_year` AS `harvest_year`,`processing_active`.`harvest_year_week` AS `harvest_year_week`,`processing_active`.`harvest_type` AS `harvest_type`,`processing_active`.`strain_code` AS `strain_code`,`processing_active`.`strain_name` AS `strain_name`,`processing_active`.`uom` AS `uom`,`processing_active`.`quantity` AS `quantity`,`processing_active`.`bin_count` AS `bin_count`,`processing_active`.`category` AS `category`,`processing_active`.`category_type` AS `category_type`,`processing_active`.`size` AS `size`,`processing_active`.`grade` AS `grade`,`processing_active`.`process` AS `process`,`processing_active`.`process_log` AS `process_log`,`processing_active`.`qc_status` AS `qc_status`,`processing_active`.`location` AS `location`,`processing_active`.`status` AS `status` from `processing_active` union all select `bucking_active`.`date` AS `date`,`bucking_active`.`metrc_tag` AS `processing_batch_source_tag`,`bucking_active`.`metrc_tag` AS `metrc_tag`,`bucking_active`.`harvest_id` AS `harvest_id`,`bucking_active`.`test_id` AS `test`,`bucking_active`.`property_id` AS `property_id`,`bucking_active`.`harvest_date` AS `harvest_date`,`bucking_active`.`harvest_week` AS `harvest_week`,`bucking_active`.`harvest_year` AS `harvest_year`,`bucking_active`.`harvest_year_week` AS `harvest_year_week`,`bucking_active`.`harvest_type` AS `harvest_type`,`bucking_active`.`strain_code` AS `strain_code`,`bucking_active`.`strain_name` AS `strain_name`,'Pound' AS `uom`,`bucking_active`.`active_quantity` AS `quantity`,`bucking_active`.`bin_count` AS `bin_count`,`bucking_active`.`category` AS `category`,`bucking_active`.`category_type` AS `category_type`,NULL AS `size`,NULL AS `grade`,'Bucking' AS `process`,'Drying' AS `process_log`,NULL AS `qc_status`,'Cure Room' AS `location`,'In Progress' AS `status` from `bucking_active` union all select `drying_active`.`date` AS `date`,`drying_active`.`metrc_tag` AS `processing_batch_source_tag`,`drying_active`.`metrc_tag` AS `metrc_tag`,`drying_active`.`harvest_id` AS `harvest_id`,`drying_active`.`test_id` AS `test`,`drying_active`.`property_id` AS `property_id`,`drying_active`.`harvest_date` AS `harvest_date`,`drying_active`.`harvest_week` AS `harvest_week`,`drying_active`.`harvest_year` AS `harvest_year`,`drying_active`.`harvest_year_week` AS `harvest_year_week`,`drying_active`.`harvest_type` AS `harvest_type`,`drying_active`.`strain_code` AS `strain_code`,`drying_active`.`strain_name` AS `strain_name`,'Pound' AS `uom`,`drying_active`.`active_quantity` AS `quantity`,`drying_active`.`bin_count` AS `bin_count`,`drying_active`.`category` AS `category`,`drying_active`.`category_type` AS `category_type`,NULL AS `size`,NULL AS `grade`,'Drying' AS `process`,NULL AS `process_log`,NULL AS `qc_status`,'Cure Room' AS `location`,'In Progress' AS `status` from `drying_active` union all select `trimming_active`.`date` AS `date`,`trimming_active`.`metrc_tag` AS `processing_batch_source_tag`,`trimming_active`.`metrc_tag` AS `metrc_tag`,`trimming_active`.`harvest_id` AS `harvest_id`,`trimming_active`.`test_id` AS `test`,`trimming_active`.`property_id` AS `property_id`,`trimming_active`.`harvest_date` AS `harvest_date`,`trimming_active`.`harvest_week` AS `harvest_week`,`trimming_active`.`harvest_year` AS `harvest_year`,`trimming_active`.`harvest_year_week` AS `harvest_year_week`,`trimming_active`.`harvest_type` AS `harvest_type`,`trimming_active`.`strain_code` AS `strain_code`,`trimming_active`.`strain_name` AS `strain_name`,'Pound' AS `uom`,`trimming_active`.`active_quantity` AS `quantity`,`trimming_active`.`bin_count` AS `bin_count`,`trimming_active`.`category` AS `category`,`trimming_active`.`category_type` AS `category_type`,NULL AS `size`,NULL AS `grade`,`trimming_active`.`process` AS `process`,'Drying,Bucking' AS `process_log`,NULL AS `qc_status`,'Processing Room' AS `location`,'In Progress' AS `status` from `trimming_active` union all select `sorting_active`.`date` AS `date`,`sorting_active`.`metrc_tag` AS `processing_batch_source_tag`,`sorting_active`.`metrc_tag` AS `metrc_tag`,`sorting_active`.`harvest_id` AS `harvest_id`,`sorting_active`.`test_id` AS `test`,`sorting_active`.`property_id` AS `property_id`,`sorting_active`.`harvest_date` AS `harvest_date`,`sorting_active`.`harvest_week` AS `harvest_week`,`sorting_active`.`harvest_year` AS `harvest_year`,`sorting_active`.`harvest_year_week` AS `harvest_year_week`,`sorting_active`.`harvest_type` AS `harvest_type`,`sorting_active`.`strain_code` AS `strain_code`,`sorting_active`.`strain_name` AS `strain_name`,'Pound' AS `uom`,`sorting_active`.`active_quantity` AS `quantity`,`sorting_active`.`bin_count` AS `bin_count`,`sorting_active`.`category` AS `category`,`sorting_active`.`category_type` AS `category_type`,NULL AS `size`,NULL AS `grade`,'Sorting' AS `process`,'Drying,Bucking,Trimming' AS `process_log`,NULL AS `qc_status`,'QA/QC' AS `location`,'In Progress' AS `status` from `sorting_active`

-- View: processing.processing_batch_inprogress
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `processing_batch_inprogress` AS select `bucking_active`.`date` AS `date`,`bucking_active`.`metrc_tag` AS `processing_batch_source_tag`,`bucking_active`.`metrc_tag` AS `metrc_tag`,`bucking_active`.`harvest_id` AS `harvest_id`,`bucking_active`.`test_id` AS `test`,`bucking_active`.`property_id` AS `property_id`,`bucking_active`.`harvest_date` AS `harvest_date`,`bucking_active`.`harvest_week` AS `harvest_week`,`bucking_active`.`harvest_year` AS `harvest_year`,`bucking_active`.`harvest_year_week` AS `harvest_year_week`,`bucking_active`.`harvest_type` AS `harvest_type`,`bucking_active`.`strain_code` AS `strain_code`,`bucking_active`.`strain_name` AS `strain_name`,'Pound' AS `uom`,`bucking_active`.`input_quantity` AS `input_quantity`,`bucking_active`.`output_quantity` AS `output_quantity`,`bucking_active`.`bin_count` AS `bin_count`,`bucking_active`.`category` AS `category`,`bucking_active`.`category_type` AS `category_type`,NULL AS `size`,NULL AS `grade`,'Bucking' AS `process`,NULL AS `process_queue`,NULL AS `process_queue_type`,'Drying' AS `process_log`,NULL AS `qc_status`,NULL AS `location`,'In Progress' AS `status` from `bucking_active` union all select `drying_active`.`date` AS `date`,`drying_active`.`metrc_tag` AS `processing_batch_source_tag`,`drying_active`.`metrc_tag` AS `metrc_tag`,`drying_active`.`harvest_id` AS `harvest_id`,`drying_active`.`test_id` AS `test`,`drying_active`.`property_id` AS `property_id`,`drying_active`.`harvest_date` AS `harvest_date`,`drying_active`.`harvest_week` AS `harvest_week`,`drying_active`.`harvest_year` AS `harvest_year`,`drying_active`.`harvest_year_week` AS `harvest_year_week`,`drying_active`.`harvest_type` AS `harvest_type`,`drying_active`.`strain_code` AS `strain_code`,`drying_active`.`strain_name` AS `strain_name`,'Pound' AS `uom`,`drying_active`.`input_quantity` AS `input_quantity`,`drying_active`.`output_quantity` AS `output_quantity`,`drying_active`.`bin_count` AS `bin_count`,`drying_active`.`category` AS `category`,`drying_active`.`category_type` AS `category_type`,NULL AS `size`,NULL AS `grade`,'Drying' AS `process`,NULL AS `process_queue`,NULL AS `process_queue_type`,NULL AS `process_log`,NULL AS `qc_status`,NULL AS `location`,'In Progress' AS `status` from `drying_active` union all select `trimming_active`.`date` AS `date`,`trimming_active`.`metrc_tag` AS `processing_batch_source_tag`,`trimming_active`.`metrc_tag` AS `metrc_tag`,`trimming_active`.`harvest_id` AS `harvest_id`,`trimming_active`.`test_id` AS `test`,`trimming_active`.`property_id` AS `property_id`,`trimming_active`.`harvest_date` AS `harvest_date`,`trimming_active`.`harvest_week` AS `harvest_week`,`trimming_active`.`harvest_year` AS `harvest_year`,`trimming_active`.`harvest_year_week` AS `harvest_year_week`,`trimming_active`.`harvest_type` AS `harvest_type`,`trimming_active`.`strain_code` AS `strain_code`,`trimming_active`.`strain_name` AS `strain_name`,'Pound' AS `uom`,`trimming_active`.`input_quantity` AS `input_quantity`,`trimming_active`.`output_quantity` AS `output_quantity`,`trimming_active`.`bin_count` AS `bin_count`,`trimming_active`.`category` AS `category`,`trimming_active`.`category_type` AS `category_type`,NULL AS `size`,NULL AS `grade`,'Trimming' AS `process`,NULL AS `process_queue`,NULL AS `process_queue_type`,'Drying,Bucking' AS `process_log`,NULL AS `qc_status`,NULL AS `location`,'In Progress' AS `status` from `trimming_active` union all select `sorting_active`.`date` AS `date`,`sorting_active`.`metrc_tag` AS `processing_batch_source_tag`,`sorting_active`.`metrc_tag` AS `metrc_tag`,`sorting_active`.`harvest_id` AS `harvest_id`,`sorting_active`.`test_id` AS `test`,`sorting_active`.`property_id` AS `property_id`,`sorting_active`.`harvest_date` AS `harvest_date`,`sorting_active`.`harvest_week` AS `harvest_week`,`sorting_active`.`harvest_year` AS `harvest_year`,`sorting_active`.`harvest_year_week` AS `harvest_year_week`,`sorting_active`.`harvest_type` AS `harvest_type`,`sorting_active`.`strain_code` AS `strain_code`,`sorting_active`.`strain_name` AS `strain_name`,'Pound' AS `uom`,`sorting_active`.`input_quantity` AS `input_quantity`,`sorting_active`.`output_quantity` AS `output_quantity`,`sorting_active`.`bin_count` AS `bin_count`,`sorting_active`.`category` AS `category`,`sorting_active`.`category_type` AS `category_type`,NULL AS `size`,NULL AS `grade`,'Sorting' AS `process`,NULL AS `process_queue`,NULL AS `process_queue_type`,'Drying,Bucking,Trimming' AS `process_log`,NULL AS `qc_status`,NULL AS `location`,'In Progress' AS `status` from `sorting_active` order by `date` desc

-- View: processing.processing_c_log_all_view
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `processing_c_log_all_view` AS select `processing_changelog`.`change_id` AS `change_id`,`processing_changelog`.`ts` AS `ts`,`processing_changelog`.`sql_action` AS `sql_action`,`processing_changelog`.`id` AS `id`,`processing_changelog`.`source_id` AS `source_id`,`processing_changelog`.`uid` AS `uid`,`processing_changelog`.`batch_id` AS `batch_id`,`processing_changelog`.`metrc_id` AS `metrc_id`,`processing_changelog`.`metrc_tag` AS `metrc_tag`,`processing_changelog`.`source_metrc_id` AS `source_metrc_id`,`processing_changelog`.`source_metrc_tag` AS `source_metrc_tag`,`processing_changelog`.`stage_id` AS `stage_id`,`processing_changelog`.`date` AS `date`,`processing_changelog`.`source_batch_id` AS `source_batch_id`,`processing_changelog`.`harvesting_id` AS `harvesting_id`,`processing_changelog`.`test_id` AS `test_id`,`processing_changelog`.`product_id` AS `product_id`,`processing_changelog`.`category_id` AS `category_id`,`processing_changelog`.`category_type_id` AS `category_type_id`,`processing_changelog`.`package_id` AS `package_id`,`processing_changelog`.`bin_count` AS `bin_count`,`processing_changelog`.`class_id` AS `class_id`,`processing_changelog`.`uom_id` AS `uom_id`,`processing_changelog`.`quantity` AS `quantity`,`processing_changelog`.`location_id` AS `location_id`,`processing_changelog`.`metrc_location` AS `metrc_location`,`processing_changelog`.`note` AS `note`,`processing_changelog`.`process_id` AS `process_id`,`processing_changelog`.`process_log` AS `process_log`,`processing_changelog`.`status` AS `status`,`processing_changelog`.`action` AS `action`,`processing_changelog`.`user` AS `user`,`processing_changelog`.`modified_on` AS `modified_on`,`processing_changelog`.`modified_by` AS `modified_by`,`processing_changelog`.`modified_type` AS `modified_type`,`processing_changelog`.`created_on` AS `created_on`,`processing_changelog`.`created_by` AS `created_by`,`processing_changelog`.`metrc_modified_on` AS `metrc_modified_on`,`processing_changelog`.`flag` AS `flag`,`processing_changelog`.`trigger` AS `trigger`,`processing_changelog`.`strain_id` AS `strain_id`,`processing_changelog`.`grade` AS `grade`,`processing_changelog`.`metrc_on` AS `metrc_on`,`processing_changelog`.`metrc_by` AS `metrc_by`,`processing_changelog`.`sku_priority` AS `sku_priority`,`processing_changelog`.`processing_metrc_tag` AS `processing_metrc_tag`,`processing_changelog`.`process_queue_id` AS `process_queue_id`,`processing_changelog`.`process_queue_type` AS `process_queue_type`,`processing_changelog`.`verified_on` AS `verified_on`,`processing_changelog`.`verified_by` AS `verified_by` from `processing_changelog`

-- View: processing.processing_c_log_week_view
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `processing_c_log_week_view` AS select `processing_changelog`.`change_id` AS `change_id`,`processing_changelog`.`ts` AS `ts`,`processing_changelog`.`sql_action` AS `sql_action`,`processing_changelog`.`id` AS `id`,`processing_changelog`.`source_id` AS `source_id`,`processing_changelog`.`uid` AS `uid`,`processing_changelog`.`batch_id` AS `batch_id`,`processing_changelog`.`metrc_id` AS `metrc_id`,`processing_changelog`.`metrc_tag` AS `metrc_tag`,`processing_changelog`.`source_metrc_id` AS `source_metrc_id`,`processing_changelog`.`source_metrc_tag` AS `source_metrc_tag`,`processing_changelog`.`stage_id` AS `stage_id`,`processing_changelog`.`date` AS `date`,`processing_changelog`.`source_batch_id` AS `source_batch_id`,`processing_changelog`.`harvesting_id` AS `harvesting_id`,`processing_changelog`.`test_id` AS `test_id`,`processing_changelog`.`product_id` AS `product_id`,`processing_changelog`.`category_id` AS `category_id`,`processing_changelog`.`category_type_id` AS `category_type_id`,`processing_changelog`.`package_id` AS `package_id`,`processing_changelog`.`bin_count` AS `bin_count`,`processing_changelog`.`class_id` AS `class_id`,`processing_changelog`.`uom_id` AS `uom_id`,`processing_changelog`.`quantity` AS `quantity`,`processing_changelog`.`location_id` AS `location_id`,`processing_changelog`.`metrc_location` AS `metrc_location`,`processing_changelog`.`note` AS `note`,`processing_changelog`.`process_id` AS `process_id`,`processing_changelog`.`process_log` AS `process_log`,`processing_changelog`.`status` AS `status`,`processing_changelog`.`action` AS `action`,`processing_changelog`.`user` AS `user`,`processing_changelog`.`modified_on` AS `modified_on`,`processing_changelog`.`modified_by` AS `modified_by`,`processing_changelog`.`modified_type` AS `modified_type`,`processing_changelog`.`created_on` AS `created_on`,`processing_changelog`.`created_by` AS `created_by`,`processing_changelog`.`metrc_modified_on` AS `metrc_modified_on`,`processing_changelog`.`flag` AS `flag`,`processing_changelog`.`trigger` AS `trigger`,`processing_changelog`.`strain_id` AS `strain_id`,`processing_changelog`.`grade` AS `grade`,`processing_changelog`.`metrc_on` AS `metrc_on`,`processing_changelog`.`metrc_by` AS `metrc_by`,`processing_changelog`.`sku_priority` AS `sku_priority`,`processing_changelog`.`processing_metrc_tag` AS `processing_metrc_tag`,`processing_changelog`.`process_queue_id` AS `process_queue_id`,`processing_changelog`.`process_queue_type` AS `process_queue_type`,`processing_changelog`.`verified_on` AS `verified_on`,`processing_changelog`.`verified_by` AS `verified_by` from `processing_changelog` where (`processing_changelog`.`modified_on` >= (curdate() - interval 7 day))

-- View: processing.processing_crop_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `processing_crop_batch_view` AS select `phbv`.`FID` AS `FID`,count(`phbv`.`HID`) AS `Harvest Record Count`,min(`phbv`.`Flower Flip Date`) AS `Flower Date`,min(`phbv`.`HID`) AS `Main Harvest Name`,max(`phbv`.`Harvest Date`) AS `Harvest Start`,max(`phbv`.`Week Harvest`) AS `Week Finished Harvesting`,max(`phbv`.`Year of Harvest`) AS `Year of Harvest`,max(`phbv`.`Harvested Plant Count`) AS `Largest Harvest Plant Count`,min(`phbv`.`Strain ID`) AS `Strain ID`,min(`phbv`.`Plant Strain`) AS `Plant Strain`,sum(`phbv`.`Wet Weight lbs`) AS `Crop Wet Weight`,sum(`phbv`.`Dry Weight lbs`) AS `Crop Dry Weight`,sum(`phbv`.`Moisture Loss lbs`) AS `Crop Moisture Loss`,concat(round(avg(`phbv`.`Moisture Loss %`),2),'%') AS `Average Moisture loss`,sum(`phbv`.`Bucked Flower lbs`) AS `Crop Bucked Flower lbs`,sum(`phbv`.`Bucked Waste lbs`) AS `Crop Bucked Waste lbs`,concat(round(avg(`phbv`.`Bucked Waste %`),2),'%') AS `Average Bucking Waste %`,sum(`phbv`.`Total Flower from Harvest`) AS `Crop Total Flower`,sum(`phbv`.`Total Trim from Harvest`) AS `Crop Total Trim`,max(`phbv`.`Flower / Trim`) AS `Flower / Trim`,sum(`phbv`.`Total Waste from Harvest`) AS `Crop Waste`,round(avg(`phbv`.`Pounds per Plant`),2) AS `Average Pounds per Plant`,round(avg(`phbv`.`Ounces per plant`),2) AS `Average Ounces per Plant`,round(avg(`phbv`.`Grams per plant`),2) AS `Average Grams per Plant`,sum(`phbv`.`Total Sorted Flower from Harvest`) AS `Total Sorted Flower from Crop`,sum(`phbv`.`Big Flower lbs`) AS `Big Flower lbs from Crop`,sum(`phbv`.`Reg Flower lbs`) AS `Reg Flower lbs from Crop`,sum(`phbv`.`Small Flower lbs`) AS `Small Flower lbs from Crop`,sum(`phbv`.`Micro Flower lbs`) AS `Micro Flower lbs from Crop`,sum(`phbv`.`Micro Small Flower lbs`) AS `Micro Small Flower lbs from Crop`,sum(`phbv`.`Total Big Flower - AAA lbs`) AS `Big Flower - AAA lbs from Crop`,sum(`phbv`.`Total Big Flower - A lbs`) AS `Big Flower - A lbs from Crop`,sum(`phbv`.`Total Big Flower - B lbs`) AS `Big Flower - B lbs from Crop`,sum(`phbv`.`Total Big Flower - X lbs`) AS `Big Flower - X lbs from Crop`,sum(`phbv`.`Total Reg Flower - A lbs`) AS `Reg Flower - AAA lbs from Crop`,sum(`phbv`.`Total Reg Flower - B lbs`) AS `Reg Flower - A lbs from Crop`,sum(`phbv`.`Total Reg Flower - C lbs`) AS `Reg Flower - C lbs from Crop`,sum(`phbv`.`Total Reg Flower - X lbs`) AS `Reg Flower - X lbs from Crop`,sum(`phbv`.`Total Small Flower - AAA lbs`) AS `Small Flower - AAA lbs from Crop`,sum(`phbv`.`Total Small Flower - A lbs`) AS `Small Flower - A lbs from Crop`,sum(`phbv`.`Total Small Flower - B lbs`) AS `Small Flower - B lbs from Crop`,sum(`phbv`.`Total Small Flower - C lbs`) AS `Small Flower - C lbs from Crop`,sum(`phbv`.`Total Small Flower - X lbs`) AS `Small Flower - X lbs from Crop`,sum(`phbv`.`Total Micro Flower - A lbs`) AS `Micro Flower - A lbs from Crop`,sum(`phbv`.`Total Micro Flower - B lbs`) AS `Micro Flower - B lbs from Crop`,sum(`phbv`.`Total Micro Flower - X lbs`) AS `Micro Flower - X lbs from Crop`,sum(`phbv`.`Total Micro Small Flower - A lbs`) AS `Micro Small Flower - A lbs from Crop`,sum(`phbv`.`Total Micro Small Flower - B lbs`) AS `Micro Small Flower - B lbs from Crop`,sum(`phbv`.`Total Micro Small Flower - X lbs`) AS `Micro Small Flwoer - X lbs from Crop` from `processing_harvest_batch_view` `phbv` group by `phbv`.`FID` order by min(`phbv`.`Harvest Date`) desc

-- View: processing.processing_crop_view
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `processing_crop_view` AS select `p`.`id` AS `id`,`p`.`source_id` AS `source_id`,`p`.`uid` AS `uid`,`p`.`batch_id` AS `batch_id`,`p`.`metrc_id` AS `metrc_id`,`p`.`metrc_tag` AS `metrc_tag`,`p`.`source_metrc_id` AS `source_metrc_id`,`p`.`source_metrc_tag` AS `source_metrc_tag`,`p`.`stage_id` AS `stage_id`,`p`.`date` AS `date`,`p`.`source_batch_id` AS `source_batch_id`,`p`.`harvesting_id` AS `harvesting_id`,`p`.`test_id` AS `test_id`,`p`.`product_id` AS `product_id`,`p`.`category_id` AS `category_id`,`p`.`category_type_id` AS `category_type_id`,`p`.`package_id` AS `package_id`,`p`.`bin_count` AS `bin_count`,`p`.`class_id` AS `class_id`,`p`.`uom_id` AS `uom_id`,`p`.`quantity` AS `quantity`,`p`.`location_id` AS `location_id`,`p`.`metrc_location` AS `metrc_location`,`p`.`note` AS `note`,`p`.`process_id` AS `process_id`,`p`.`process_log` AS `process_log`,`p`.`status` AS `status`,`p`.`action` AS `action`,`p`.`user` AS `user`,`p`.`modified_on` AS `modified_on`,`p`.`modified_by` AS `modified_by`,`p`.`modified_type` AS `modified_type`,`p`.`created_on` AS `created_on`,`p`.`created_by` AS `created_by`,`p`.`metrc_modified_on` AS `metrc_modified_on`,`p`.`flag` AS `flag`,`p`.`trigger` AS `trigger`,`p`.`strain_id` AS `strain_id`,`p`.`grade` AS `grade`,`p`.`metrc_on` AS `metrc_on`,`p`.`metrc_by` AS `metrc_by`,`p`.`sku_priority` AS `sku_priority`,`p`.`processing_metrc_tag` AS `processing_metrc_tag`,`p`.`process_queue_id` AS `process_queue_id`,`p`.`process_queue_type` AS `process_queue_type`,`p`.`verified_on` AS `verified_on`,`p`.`verified_by` AS `verified_by`,`c`.`flowering_id` AS `flowering_id` from (`processing` `p` join `cultivation`.`harvesting` `c` on((`p`.`harvesting_id` = `c`.`id`)))

-- View: processing.processing_delta_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `processing_delta_view` AS select `p`.`strain_id` AS `strain_id`,`p`.`harvest_week` AS `week_num`,`p`.`harvest_year` AS `year_num`,`p`.`year_week` AS `year_week`,`p`.`harvest_date` AS `harvest_date`,`p`.`property` AS `property_id`,`p`.`harvest_id` AS `harvest_id`,`p`.`plant_count` AS `plant_count`,(((((`p`.`big_a_flower_output` + `p`.`reg_a_flower_output`) + `p`.`sml_a_flower_output`) + `p`.`b_flower_output`) + `p`.`retrim_a_output`) + `p`.`retrim_b_output`) AS `tzero_a_b_retrim`,(`p`.`c_flower_output` + `p`.`retrim_c_output`) AS `tzero_c`,`p`.`trim_output` AS `tzero_trim`,`p`.`sugar_shake_output` AS `tzero_shake`,`p`.`total_waste_output` AS `tzero_waste`,((`p`.`input_qty` - `p`.`output_qty`) / `p`.`input_qty`) AS `tzero_shrink`,`p`.`process_action` AS `tzero_flower_status`,if((`p`.`harvest_year` = 2021),((((((`p`.`big_a_flower_output` + `p`.`reg_a_flower_output`) + `p`.`sml_a_flower_output`) + `p`.`b_flower_output`) + `p`.`retrim_a_output`) + `p`.`retrim_b_output`) * 16),0) AS `2021_total_oz`,if((`p`.`harvest_year` = 2021),`p`.`plant_count`,0) AS `2021_plants`,if((`p`.`harvest_year` = 2022),((((((`p`.`big_a_flower_output` + `p`.`reg_a_flower_output`) + `p`.`sml_a_flower_output`) + `p`.`b_flower_output`) + `p`.`retrim_a_output`) + `p`.`retrim_b_output`) * 16),0) AS `2022_total_oz`,if((`p`.`harvest_year` = 2022),`p`.`plant_count`,0) AS `2022_plants`,if((`p`.`harvest_year` = 2023),((((((`p`.`big_a_flower_output` + `p`.`reg_a_flower_output`) + `p`.`sml_a_flower_output`) + `p`.`b_flower_output`) + `p`.`retrim_a_output`) + `p`.`retrim_b_output`) * 16),0) AS `2023_total_oz`,if((`p`.`harvest_year` = 2023),`p`.`plant_count`,0) AS `2023_plants`,if((`p`.`harvest_year` = 2024),((((((`p`.`big_a_flower_output` + `p`.`reg_a_flower_output`) + `p`.`sml_a_flower_output`) + `p`.`b_flower_output`) + `p`.`retrim_a_output`) + `p`.`retrim_b_output`) * 16),0) AS `2024_total_oz`,if((`p`.`harvest_year` = 2024),`p`.`plant_count`,0) AS `2024_plants`,`pc`.`processing_count` AS `processing_count`,`hc`.`harvesting_count` AS `harvesting_count` from ((`trimming_t0_report` `p` left join (select `trimming_t0_report`.`year_week` AS `year_week`,count(distinct `trimming_t0_report`.`harvesting_id`) AS `processing_count` from `trimming_t0_report` where (right(`trimming_t0_report`.`harvest_id`,2) <> '-M') group by `trimming_t0_report`.`year_week`) `pc` on((`p`.`year_week` = `pc`.`year_week`))) left join (select `harvesting_ref`.`year_week` AS `year_week`,count(distinct `harvesting_ref`.`id`) AS `harvesting_count` from `cultivation`.`harvesting_ref` where (right(`harvesting_ref`.`harvest_id`,2) <> '-M') group by `harvesting_ref`.`year_week`) `hc` on((`p`.`year_week` = `hc`.`year_week`))) where (right(`p`.`harvest_id`,2) <> '-M') group by `p`.`strain_id`,`p`.`harvest_week`,`p`.`harvest_year`,`p`.`year_week`,`p`.`harvest_date`,`p`.`property`,`p`.`harvest_id`,`p`.`plant_count`,`p`.`big_a_flower_output`,`p`.`reg_a_flower_output`,`p`.`sml_a_flower_output`,`p`.`b_flower_output`,`p`.`retrim_a_output`,`p`.`retrim_b_output`,`p`.`c_flower_output`,`p`.`retrim_c_output`,`p`.`trim_output`,`p`.`sugar_shake_output`,`p`.`total_waste_output`,`p`.`input_qty`,`p`.`output_qty`,`p`.`process_action`,`pc`.`processing_count`,`hc`.`harvesting_count` having (`pc`.`processing_count` = `hc`.`harvesting_count`) order by `p`.`year_week` desc

-- View: processing.processing_finished_weeks
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `processing_finished_weeks` AS select `trimming_t0_report`.`harvest_week` AS `week_num`,`trimming_t0_report`.`harvest_year` AS `year_num`,`trimming_t0_report`.`year_week` AS `year_week` from `trimming_t0_report` where (right(`trimming_t0_report`.`harvest_id`,2) <> '-M') group by `trimming_t0_report`.`harvest_week`,`trimming_t0_report`.`harvest_year` order by `trimming_t0_report`.`harvest_year` desc,`trimming_t0_report`.`harvest_week` desc

-- View: processing.processing_harvest_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `processing_harvest_batch_view` AS select `bv`.`HID` AS `HID`,`fl`.`flowering_id` AS `FID`,`bv`.`Flower Flip Date` AS `Flower Flip Date`,`bv`.`Harvest Date` AS `Harvest Date`,week(`bv`.`Harvest Date`,0) AS `Week Harvest`,year(`bv`.`Harvest Date`) AS `Year of Harvest`,if((`bv`.`Harvested Plant Count` is null),`dv`.`Harvested Plant Count`,`bv`.`Harvested Plant Count`) AS `Harvested Plant Count`,`bv`.`Strain ID` AS `Strain ID`,`bv`.`Plant Strain` AS `Plant Strain`,if((`bv`.`Wet Weight lbs` is null),`dv`.`Wet Weight lbs`,`bv`.`Wet Weight lbs`) AS `Wet Weight lbs`,if((`dv`.`Dry Weight lbs` is null),`bv`.`Dry Plant Weight lbs`,`dv`.`Dry Weight lbs`) AS `Dry Weight lbs`,if((`dv`.`Moisture Loss lbs` is null),`bv`.`Moisture Loss lbs`,`dv`.`Moisture Loss lbs`) AS `Moisture Loss lbs`,if((`bv`.`Bucked Waste %` is null),concat(round((`dv`.`Moisture Loss %` * 97),2),'%'),concat(round((`bv`.`Moisture loss %` * 97),2),'%')) AS `Moisture Loss %`,`bv`.`Dry Plant Weight lbs` AS `Bucking Intake`,if((`bv`.`Bucked Flower lbs` is null),'Pending Bucking',`bv`.`Bucked Flower lbs`) AS `Bucked Flower lbs`,if((`bv`.`Bucked Waste lbs` is null),'',`bv`.`Bucked Waste lbs`) AS `Bucked Waste lbs`,if((`bv`.`Bucked Waste lbs` is null),'',concat(round((`bv`.`Bucked Waste %` * 100),2),'%')) AS `Bucked Waste %`,if((`tv`.`Total Flower from Harvest` is null),'Pending Trimming',`tv`.`Total Flower from Harvest`) AS `Total Flower from Harvest`,if((`tv`.`Total Trim from Harvest` is null),'',`tv`.`Total Trim from Harvest`) AS `Total Trim from Harvest`,if((`tv`.`Total Flower from Harvest` is null),'',if((`tv`.`Total Trim from Harvest` = 0),'No Trim',concat(round(((`tv`.`Total Flower from Harvest` / (`tv`.`Total Flower from Harvest` + `tv`.`Total Trim from Harvest`)) * 100),2),'% / ',round(((`tv`.`Total Trim from Harvest` / (`tv`.`Total Trim from Harvest` + `tv`.`Total Flower from Harvest`)) * 100),2),'%'))) AS `Flower / Trim`,if((`tv`.`Total Waste from Harvest` is null),'',`tv`.`Total Waste from Harvest`) AS `Total Waste from Harvest`,if((`tv`.`lbs per plant` is null),'',round(`tv`.`lbs per plant`,4)) AS `Pounds per Plant`,if((`tv`.`Ounces per plant` is null),'',round(`tv`.`Ounces per plant`,3)) AS `Ounces per plant`,if((`tv`.`Grams per plant` is null),'',round(`tv`.`Grams per plant`,2)) AS `Grams per plant`,if((`sv`.`Total Sorted Flower from Harvest` is null),'Not Sorted',round(`sv`.`Total Sorted Flower from Harvest`,2)) AS `Total Sorted Flower from Harvest`,if((`sv`.`Big Flower lbs` is null),'',round(`sv`.`Big Flower lbs`,2)) AS `Big Flower lbs`,if((`sv`.`Reg Flower lbs` is null),'',round(`sv`.`Reg Flower lbs`,2)) AS `Reg Flower lbs`,if((`sv`.`Small Flower lbs` is null),'',round(`sv`.`Small Flower lbs`,2)) AS `Small Flower lbs`,if((`sv`.`Micro Flower lbs` is null),'',round(`sv`.`Micro Flower lbs`,2)) AS `Micro Flower lbs`,if((`sv`.`Micro Small Flower lbs` is null),'',round(`sv`.`Micro Small Flower lbs`,2)) AS `Micro Small Flower lbs`,if((`sv`.`Total Big Flower - AAA lbs` is null),'',round(`sv`.`Total Big Flower - AAA lbs`,2)) AS `Total Big Flower - AAA lbs`,if((`sv`.`Total Big Flower - A lbs` is null),'',round(`sv`.`Total Big Flower - A lbs`,2)) AS `Total Big Flower - A lbs`,if((`sv`.`Total Big Flower - B lbs` is null),'',round(`sv`.`Total Big Flower - B lbs`,2)) AS `Total Big Flower - B lbs`,if((`sv`.`Total Big Flower - X lbs` is null),'',round(`sv`.`Total Big Flower - X lbs`,2)) AS `Total Big Flower - X lbs`,if((`sv`.`Total Reg Flower - A lbs` is null),'',round(`sv`.`Total Reg Flower - A lbs`,2)) AS `Total Reg Flower - A lbs`,if((`sv`.`Total Reg Flower - B lbs` is null),'',round(`sv`.`Total Reg Flower - B lbs`,2)) AS `Total Reg Flower - B lbs`,if((`sv`.`Total Reg Flower - C lbs` is null),'',round(`sv`.`Total Reg Flower - C lbs`,2)) AS `Total Reg Flower - C lbs`,if((`sv`.`Total Reg Flower - X lbs` is null),'',round(`sv`.`Total Reg Flower - X lbs`,2)) AS `Total Reg Flower - X lbs`,if((`sv`.`Total Small Flower - AAA lbs` is null),'',round(`sv`.`Total Small Flower - AAA lbs`,2)) AS `Total Small Flower - AAA lbs`,if((`sv`.`Total Small Flower - A lbs` is null),'',round(`sv`.`Total Small Flower - A lbs`,2)) AS `Total Small Flower - A lbs`,if((`sv`.`Total Small Flower - B lbs` is null),'',`sv`.`Total Small Flower - B lbs`) AS `Total Small Flower - B lbs`,if((`sv`.`Total Small Flower - C lbs` is null),'',round(`sv`.`Total Small Flower - C lbs`,2)) AS `Total Small Flower - C lbs`,if((`sv`.`Total Small Flower - X lbs` is null),'',round(`sv`.`Total Small Flower - X lbs`,2)) AS `Total Small Flower - X lbs`,if((`sv`.`Total Micro Flower - A lbs` is null),'',round(`sv`.`Total Micro Flower - A lbs`,2)) AS `Total Micro Flower - A lbs`,if((`sv`.`Total Micro Flower - B lbs` is null),'',round(`sv`.`Total Micro Flower - B lbs`,2)) AS `Total Micro Flower - B lbs`,if((`sv`.`Total Micro Flower - X lbs` is null),'',round(`sv`.`Total Micro Flower - X lbs`,2)) AS `Total Micro Flower - X lbs`,if((`sv`.`Total Micro Small Flower - A lbs` is null),'',round(`sv`.`Total Micro Small Flower - A lbs`,2)) AS `Total Micro Small Flower - A lbs`,if((`sv`.`Total Micro Small Flower - B lbs` is null),'',round(`sv`.`Total Micro Small Flower - B lbs`,2)) AS `Total Micro Small Flower - B lbs`,if((`sv`.`Total Micro Small Flower - X lbs` is null),'',round(`sv`.`Total Micro Small Flower - X lbs`,2)) AS `Total Micro Small Flower - X lbs` from ((((`bucking_harvest_batch_view` `bv` left join `drying_harvest_batch_view` `dv` on((`bv`.`Harvesting ID` = `dv`.`Harvesting ID`))) left join `trimming_harvest_batch_view` `tv` on((`tv`.`Harvesting ID` = `bv`.`Harvesting ID`))) left join `sorter_harvest_batch_view` `sv` on((`sv`.`Harvesting ID` = `bv`.`Harvesting ID`))) left join `cultivation`.`flowering` `fl` on((`bv`.`Flowering ID` = `fl`.`id`))) order by `dv`.`Harvest Date` desc

-- View: processing.processing_latest_week
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `processing_latest_week` AS select `processing_delta_view`.`strain_id` AS `strain_id`,`processing_delta_view`.`week_num` AS `week_num`,`processing_delta_view`.`year_num` AS `year_num`,`processing_delta_view`.`year_week` AS `year_week`,`processing_delta_view`.`harvest_date` AS `harvest_date`,`processing_delta_view`.`harvest_id` AS `harvest_id`,`processing_delta_view`.`property_id` AS `property_id`,`processing_delta_view`.`plant_count` AS `plant_count`,`processing_delta_view`.`tzero_a_b_retrim` AS `tzero_a_b_retrim`,`processing_delta_view`.`tzero_c` AS `tzero_c`,`processing_delta_view`.`tzero_trim` AS `tzero_trim`,`processing_delta_view`.`tzero_shake` AS `tzero_shake`,`processing_delta_view`.`tzero_waste` AS `tzero_waste`,`processing_delta_view`.`tzero_shrink` AS `tzero_shrink`,`processing_delta_view`.`tzero_flower_status` AS `tzero_flower_status`,`processing_delta_view`.`2021_total_oz` AS `2021_total_oz`,`processing_delta_view`.`2021_plants` AS `2021_plants`,`processing_delta_view`.`2022_total_oz` AS `2022_total_oz`,`processing_delta_view`.`2022_plants` AS `2022_plants`,`processing_delta_view`.`2023_total_oz` AS `2023_total_oz`,`processing_delta_view`.`2023_plants` AS `2023_plants`,`processing_delta_view`.`2024_total_oz` AS `2024_total_oz`,`processing_delta_view`.`2024_plants` AS `2024_plants`,`processing_delta_view`.`processing_count` AS `processing_count`,`processing_delta_view`.`harvesting_count` AS `harvesting_count` from `processing_delta_view` where ((select max(`processing_delta_view`.`year_week`) from `processing_delta_view`) in (`processing_delta_view`.`year_week`,(`processing_delta_view`.`year_week` + 100),(`processing_delta_view`.`year_week` + 200)))

-- View: processing.processing_prod_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `processing_prod_view` AS select `h`.`flowering_id` AS `flowering_id`,`p`.`harvesting_id` AS `harvesting_id`,`p`.`metrc_tag` AS `metrc_tag`,(case when (`p`.`process_queue_type` = 'Hand Trimming') then 'Hand Trimming' when (`p`.`process_queue_type` = 'T-zero Machine') then 'Trimming' when (`p`.`process_queue_id` = 'QC-Sorting') then 'Sorting' when (`p`.`process_queue_id` = 'Drying') then 'Drying' when (`p`.`process_queue_id` = 'Bucking') then 'Bucking' else NULL end) AS `process`,`p`.`id` AS `batch_id`,`p`.`date` AS `date`,'In Queue' AS `batch_status`,`f`.`flowering_id` AS `flowering_id_name`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,NULL AS `flower_plant_count`,NULL AS `harvest_plant_count`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`cat`.`name` AS `input_category`,`ct`.`name` AS `input_category_type`,NULL AS `input_product_size`,NULL AS `input_product_grade`,sum(`p`.`quantity`) AS `input_quantity`,NULL AS `output_category`,NULL AS `output_category_type`,NULL AS `output_size`,NULL AS `output_grade`,NULL AS `output_quantity` from (((((`processing` `p` left join `cultivation`.`harvesting` `h` on((`h`.`id` = `p`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `p`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `p`.`category_type_id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) left join `cultivation`.`flowering` `f` on((`f`.`id` = `h`.`flowering_id`))) where ((`p`.`process_queue_id` is not null) and (`p`.`status` = 'Active')) group by `p`.`harvesting_id`,`p`.`metrc_tag`,`h`.`test_id`,`p`.`process_queue_id`,`h`.`harvest_id`,`p`.`date`,`h`.`property_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`cat`.`name`,`ct`.`name`,`p`.`id`,`h`.`flowering_id`,`f`.`flowering_id` order by `p`.`date` desc

-- View: processing.sorter_crop_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorter_crop_batch_view` AS select `sm`.`Flowering ID` AS `Flowering ID`,max(`sm`.`Harvesting ID`) AS `Harvesting ID`,max(`sm`.`Harvesting ID`) AS `Processing ID`,max(`sm`.`HID`) AS `HID`,max(`sm`.`Test Record Count`) AS `Test Record Count`,max(`sm`.`Crop Plant Count`) AS `Crop Plant Count`,max(`sm`.`Harvested Plant Count`) AS `Harvested Plant Count`,max(`sm`.`Harvest Record Count`) AS `Harvest Record Count`,max(`sm`.`Strain ID`) AS `Strain ID`,max(`sm`.`Plant Strain`) AS `Plant Strain`,if((((max(`sm`.`Sorted Flower lbs`) - max(`sh`.`Input Flower lbs`)) + max(`sh`.`Sorted Flower lbs`)) is null),max(`sm`.`Sorted Flower lbs`),(max(`sm`.`Sorted Flower lbs`) + max(`sh`.`Sorted Flower lbs`))) AS `Total Sorted Flower from Harvest`,max(`sm`.`Input lbs`) AS `Machine Sorting Input lbs`,sum(`sm`.`Sorted Flower lbs`) AS `Machine Sorted Flower lbs`,if((max(`sh`.`Input Flower lbs`) is null),0,max(`sh`.`Input Flower lbs`)) AS `Hand Sorted Input Flower lbs`,if((max(`sh`.`Sorted Flower lbs`) is null),0,max(`sh`.`Sorted Flower lbs`)) AS `Total Hand Sorted Flower lbs`,if((max(`sh`.`Shake lbs`) is null),0,max(`sh`.`Shake lbs`)) AS `Hand Sorted Shake lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Big Flower - AAA lbs`),(max(`sm`.`Big Flower - AAA lbs`) + max(`sh`.`Big Flower - AAA lbs`))) AS `Total Big Flower - AAA lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Big Flower - A lbs`),(max(`sm`.`Big Flower - A lbs`) + max(`sh`.`Big Flower - A lbs`))) AS `Total Big Flower - A lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Big Flower - B lbs`),(max(`sm`.`Big Flower - B lbs`) + max(`sh`.`Big Flower - B lbs`))) AS `Total Big Flower - B lbs`,max(`sm`.`Big Flower - X lbs`) AS `Total Big Flower - X lbs`,max(`sm`.`Reg Flower - A lbs`) AS `Total Reg Flower - A lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Reg Flower - B lbs`),(max(`sm`.`Reg Flower - B lbs`) + max(`sh`.`Reg Flower - B lbs`))) AS `Total Reg Flower - B lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Reg Flower - C lbs`),(max(`sm`.`Reg Flower - C lbs`) + max(`sh`.`Reg Flower - C lbs`))) AS `Total Reg Flower - C lbs`,max(`sm`.`Reg Flower - X lbs`) AS `Total Reg Flower - X lbs`,max(`sm`.`Small Flower - AAA lbs`) AS `Total Small Flower - AAA lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Small Flower - A lbs`),(max(`sm`.`Small Flower - A lbs`) + max(`sh`.`Small Flower - A lbs`))) AS `Total Small Flower - A lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Small Flower - B lbs`),(max(`sm`.`Small Flower - B lbs`) + max(`sh`.`Small Flower - B lbs`))) AS `Total Small Flower - B lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Small Flower - C lbs`),(max(`sm`.`Small Flower - C lbs`) + max(`sh`.`Small Flower - C lbs`))) AS `Total Small Flower - C lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Small Flower - X lbs`),(max(`sm`.`Small Flower - X lbs`) + max(`sh`.`Small Flower - X lbs`))) AS `Total Small Flower - X lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Micros Flower - A lbs`),(max(`sm`.`Micros Flower - A lbs`) + max(`sh`.`Micros Flower - A lbs`))) AS `Total Micro Flower - A lbs`,max(`sm`.`Micros Flower - B lbs`) AS `Total Micro Flower - B lbs`,max(`sm`.`Micros Flower - X lbs`) AS `Total Micro Flower - X lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Micro Small Flower - A lbs`),(max(`sm`.`Micro Small Flower - A lbs`) + max(`sh`.`Micro Small Flower - A lbs`))) AS `Total Micro Small Flower - A lbs`,max(`sm`.`Micro Small Flower - B lbs`) AS `Total Micro Small Flower - B lbs`,max(`sm`.`Micro Small Flower - X lbs`) AS `Total Micro Small Flower - X lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Shake lbs`),(max(`sm`.`Shake lbs`) + max(`sh`.`Shake lbs`))) AS `Total Shake lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Trim lbs`),(max(`sm`.`Trim lbs`) + max(`sh`.`Trim lbs`))) AS `Total Trim lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Kief lbs`),(max(`sm`.`Kief lbs`) + max(`sh`.`Kief lbs`))) AS `Total Kief lbs` from (`sorter_machine_crop_batch_view` `sm` left join `sorter_hand_crop_batch_view` `sh` on((`sh`.`Flowering ID` = `sm`.`Flowering ID`))) group by `sm`.`Flowering ID`

-- View: processing.sorter_detail_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorter_detail_view` AS select `sb`.`harvesting_id` AS `harvesting_id`,max(`sb`.`date`) AS `sorter_INdate`,sum(`sb`.`quantity`) AS `input_quantity` from ((`sorter_batch` `sb` left join `sorter_details` `s` on((`sb`.`id` = `s`.`sorter_batch_id`))) left join `cultivation`.`harvesting` `h` on((`sb`.`harvesting_id` = `h`.`id`))) group by `sb`.`harvesting_id`

-- View: processing.sorter_hand_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorter_hand_batch_view` AS select `h`.`flowering_id` AS `Flowering ID`,`h`.`id` AS `Harvesting ID`,`sb`.`batch_id` AS `Processing ID`,`h`.`harvest_id` AS `HID`,`h`.`test_id` AS `Test ID`,max(`h`.`harvest_type`) AS `Harvest Type`,`fl`.`plant_count` AS `Crop Plant Count`,`h`.`plant_count_harvested` AS `Harvested Plant Count`,max(`strain`.`strain_code`) AS `Strain ID`,max(`strain`.`name`) AS `Plant Strain`,max(`sb`.`source_metrc_tag`) AS `Processing Batch METRC`,max(`sb`.`processing_batch_source_tag`) AS `Source METRC`,`sb`.`id` AS `Machine Sorting Batch ID`,`sb`.`metrc_tag` AS `METRC Tag`,`sb`.`process_type` AS `Sorting Type`,`sb`.`category_id` AS `Product Category`,`sb`.`category_type_id` AS `Product Category Type`,max(`sb`.`quantity`) AS `Input lbs`,max(`sb`.`bin_count`) AS `Bin Count Recieved`,sum(`sd`.`quantity`) AS `Sorted Flower lbs`,sum((case when ((`sd`.`product_size_id` = 'B') and (`sd`.`product_grade_id` = 'AAA')) then `sd`.`quantity` else 0 end)) AS `Big Flower - AAA lbs`,sum((case when ((`sd`.`product_size_id` = 'B') and (`sd`.`product_grade_id` = 'A')) then `sd`.`quantity` else 0 end)) AS `Big Flower - A lbs`,sum((case when ((`sd`.`product_size_id` = 'B') and (`sd`.`product_grade_id` = 'B')) then `sd`.`quantity` else 0 end)) AS `Big Flower - B lbs`,sum((case when ((`sd`.`product_size_id` = 'R') and (`sd`.`product_grade_id` = 'B')) then `sd`.`quantity` else 0 end)) AS `Reg Flower - B lbs`,sum((case when ((`sd`.`product_size_id` = 'R') and (`sd`.`product_grade_id` = 'C')) then `sd`.`quantity` else 0 end)) AS `Reg Flower - C lbs`,sum((case when ((`sd`.`product_size_id` = 'S') and (`sd`.`product_grade_id` = 'A')) then `sd`.`quantity` else 0 end)) AS `Small Flower - A lbs`,sum((case when ((`sd`.`product_size_id` = 'S') and (`sd`.`product_grade_id` = 'B')) then `sd`.`quantity` else 0 end)) AS `Small Flower - B lbs`,sum((case when ((`sd`.`product_size_id` = 'S') and (`sd`.`product_grade_id` = 'C')) then `sd`.`quantity` else 0 end)) AS `Small Flower - C lbs`,sum((case when ((`sd`.`product_size_id` = 'S') and (`sd`.`product_grade_id` is null)) then `sd`.`quantity` else 0 end)) AS `Small Flower - X lbs`,sum((case when ((`sd`.`product_size_id` = 'M') and (`sd`.`product_grade_id` = 'A')) then `sd`.`quantity` else 0 end)) AS `Micros Flower - A lbs`,sum((case when ((`sd`.`product_size_id` = 'MS') and (`sd`.`product_grade_id` = 'A')) then `sd`.`quantity` else 0 end)) AS `Micro Small Flower - A lbs`,sum(if((`sd`.`product_size_id` = 'B'),`sd`.`quantity`,'')) AS `Big Flower lbs`,sum(if((`sd`.`product_size_id` = 'R'),`sd`.`quantity`,'')) AS `Reg Flower lbs`,sum(if((`sd`.`product_size_id` = 'S'),`sd`.`quantity`,'')) AS `Small Flower lbs`,sum(if((`sd`.`product_size_id` = 'M'),`sd`.`quantity`,'')) AS `Micros Flower lbs`,sum(if((`sd`.`product_size_id` = 'MS'),`sd`.`quantity`,'')) AS `Micro Small Flower lbs`,sum(if((`sd`.`category_type_id` = 'SK-CTP-5844'),`sd`.`quantity`,0)) AS `Shake lbs`,sum(if((`sd`.`category_type_id` = 'SK-CTP-56d3'),`sd`.`quantity`,0)) AS `Trim lbs`,sum(if((`sd`.`category_id` = 'SK-CTG-b89a'),`sd`.`quantity`,0)) AS `Kief lbs`,sum(if((`sd`.`category_id` = 'SK-CTG-a60f'),`sd`.`quantity`,0)) AS `Waste lbs` from (((((`sorter_batch` `sb` left join `sorter_details` `sd` on((`sb`.`id` = `sd`.`sorter_batch_id`))) left join `cultivation`.`harvesting` `h` on((`sb`.`harvesting_id` = `h`.`id`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `sb`.`strain_id`))) left join `process_log` `pl` on((`pl`.`source_id` = `sb`.`source_id`))) left join `cultivation`.`flowering` `fl` on((`fl`.`id` = `h`.`flowering_id`))) where (`sb`.`process_type` is null) group by `sb`.`id`

-- View: processing.sorter_hand_crop_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorter_hand_crop_batch_view` AS select `sb`.`Flowering ID` AS `Flowering ID`,max(`sb`.`Harvesting ID`) AS `Harvesting ID`,max(`sb`.`Processing ID`) AS `Processing ID`,min(`sb`.`HID`) AS `HID`,count(`sb`.`Test ID`) AS `Test Record Count`,max(`sb`.`Crop Plant Count`) AS `Crop Plant Count`,max(`sb`.`Harvested Plant Count`) AS `Harvested Plant Count`,count(`sb`.`Harvesting ID`) AS `Harvest Record Count`,max(`sb`.`Strain ID`) AS `Strain ID`,max(`sb`.`Plant Strain`) AS `Plant Strain`,max(`sb`.`Processing Batch METRC`) AS `Processing Batch METRC`,max(`sb`.`Source METRC`) AS `Source METRC`,max(`sb`.`Input lbs`) AS `Input Flower lbs`,sum(`sb`.`Bin Count Recieved`) AS `Bin Count Recieved`,sum(`sb`.`Sorted Flower lbs`) AS `Sorted Flower lbs`,sum(`sb`.`Big Flower - AAA lbs`) AS `Big Flower - AAA lbs`,sum(`sb`.`Big Flower - A lbs`) AS `Big Flower - A lbs`,sum(`sb`.`Big Flower - B lbs`) AS `Big Flower - B lbs`,sum(`sb`.`Reg Flower - B lbs`) AS `Reg Flower - B lbs`,sum(`sb`.`Reg Flower - C lbs`) AS `Reg Flower - C lbs`,sum(`sb`.`Small Flower - A lbs`) AS `Small Flower - A lbs`,sum(`sb`.`Small Flower - B lbs`) AS `Small Flower - B lbs`,sum(`sb`.`Small Flower - C lbs`) AS `Small Flower - C lbs`,sum(`sb`.`Small Flower - X lbs`) AS `Small Flower - X lbs`,sum(`sb`.`Micros Flower - A lbs`) AS `Micros Flower - A lbs`,sum(`sb`.`Micro Small Flower - A lbs`) AS `Micro Small Flower - A lbs`,sum(`sb`.`Shake lbs`) AS `Shake lbs`,sum(`sb`.`Trim lbs`) AS `Trim lbs`,sum(`sb`.`Kief lbs`) AS `Kief lbs` from `sorter_hand_batch_view` `sb` group by `sb`.`Harvesting ID`

-- View: processing.sorter_hand_harvest_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorter_hand_harvest_batch_view` AS select min(`sb`.`Flowering ID`) AS `Flowering ID`,min(`sb`.`Crop Plant Count`) AS `Crop Plant Count`,count(`sb`.`Flowering ID`) AS `Count of Flowering ID`,`sb`.`Harvesting ID` AS `Harvesting ID`,max(`sb`.`Processing ID`) AS `Processing ID`,`sb`.`HID` AS `HID`,count(`sb`.`Test ID`) AS `Harvest Test Record Count`,count(`sb`.`Harvested Plant Count`) AS `Harvested Plant Count`,max(`sb`.`Strain ID`) AS `Strain ID`,max(`sb`.`Plant Strain`) AS `Plant Strain`,max(`sb`.`Processing Batch METRC`) AS `Processing Batch METRC`,max(`sb`.`Source METRC`) AS `Source METRC`,max(`sb`.`Input lbs`) AS `Input Flower lbs`,sum(`sb`.`Bin Count Recieved`) AS `Bin Count Recieved`,sum(`sb`.`Sorted Flower lbs`) AS `Sorted Flower lbs`,sum(`sb`.`Big Flower - AAA lbs`) AS `Big Flower - AAA lbs`,sum(`sb`.`Big Flower - A lbs`) AS `Big Flower - A lbs`,sum(`sb`.`Big Flower - B lbs`) AS `Big Flower - B lbs`,sum(`sb`.`Reg Flower - B lbs`) AS `Reg Flower - B lbs`,sum(`sb`.`Reg Flower - C lbs`) AS `Reg Flower - C lbs`,sum(`sb`.`Small Flower - A lbs`) AS `Small Flower - A lbs`,sum(`sb`.`Small Flower - B lbs`) AS `Small Flower - B lbs`,sum(`sb`.`Small Flower - C lbs`) AS `Small Flower - C lbs`,sum(`sb`.`Small Flower - X lbs`) AS `Small Flower - X lbs`,sum(`sb`.`Micros Flower - A lbs`) AS `Micros Flower - A lbs`,sum(`sb`.`Micro Small Flower - A lbs`) AS `Micro Small Flower - A lbs`,sum(`sb`.`Big Flower lbs`) AS `Big Flower lbs`,sum(`sb`.`Reg Flower lbs`) AS `Reg Flower lbs`,sum(`sb`.`Small Flower lbs`) AS `Small Flower lbs`,sum(`sb`.`Micros Flower lbs`) AS `Micro Flower lbs`,sum(`sb`.`Micro Small Flower lbs`) AS `Micro Small Flower lbs`,sum(`sb`.`Shake lbs`) AS `Shake lbs`,sum(`sb`.`Trim lbs`) AS `Trim lbs`,sum(`sb`.`Kief lbs`) AS `Kief lbs` from `sorter_hand_batch_view` `sb` group by `sb`.`Harvesting ID`

-- View: processing.sorter_harvest_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorter_harvest_batch_view` AS select min(`sm`.`Flowering ID`) AS `Flowering ID`,`sm`.`Harvesting ID` AS `Harvesting ID`,max(`sm`.`Harvesting ID`) AS `Processing ID`,max(`sm`.`HID`) AS `HID`,max(`sm`.`Test Record Count`) AS `Test Record Count`,max(`sm`.`Crop Plant Count`) AS `Crop Plant Count`,max(`sm`.`Harvested Plant Count`) AS `Harvested Plant Count`,max(`sm`.`Strain ID`) AS `Strain ID`,max(`sm`.`Plant Strain`) AS `Plant Strain`,if((((max(`sm`.`Sorted Flower lbs`) - max(`sh`.`Input Flower lbs`)) + max(`sh`.`Sorted Flower lbs`)) is null),max(`sm`.`Sorted Flower lbs`),((max(`sm`.`Sorted Flower lbs`) + max(`sh`.`Sorted Flower lbs`)) - max(`sh`.`Input Flower lbs`))) AS `Total Sorted Flower from Harvest`,if((sum(`sh`.`Big Flower lbs`) is null),sum(`sm`.`Big Flower lbs`),(sum(`sm`.`Big Flower lbs`) + sum(`sh`.`Big Flower lbs`))) AS `Big Flower lbs`,if((sum(`sh`.`Reg Flower lbs`) is null),sum(`sm`.`Reg Flower lbs`),(sum(`sm`.`Reg Flower lbs`) + sum(`sh`.`Reg Flower lbs`))) AS `Reg Flower lbs`,if((sum(`sh`.`Small Flower lbs`) is null),sum(`sm`.`Small Flower lbs`),(sum(`sm`.`Small Flower lbs`) + sum(`sh`.`Small Flower lbs`))) AS `Small Flower lbs`,if((sum(`sh`.`Micro Flower lbs`) is null),sum(`sm`.`Micro Flower lbs`),(sum(`sm`.`Micro Flower lbs`) + sum(`sh`.`Micro Flower lbs`))) AS `Micro Flower lbs`,if((sum(`sh`.`Micro Small Flower lbs`) is null),sum(`sm`.`Micro Small Flower lbs`),(sum(`sm`.`Micro Small Flower lbs`) + sum(`sh`.`Micro Small Flower lbs`))) AS `Micro Small Flower lbs`,max(`sm`.`Input lbs`) AS `Machine Sorting Input lbs`,sum(`sm`.`Sorted Flower lbs`) AS `Machine Sorted Flower lbs`,if((max(`sh`.`Input Flower lbs`) is null),0,max(`sh`.`Input Flower lbs`)) AS `Hand Sorted Input Flower lbs`,if((max(`sh`.`Sorted Flower lbs`) is null),0,max(`sh`.`Sorted Flower lbs`)) AS `Total Hand Sorted Flower lbs`,if((max(`sh`.`Shake lbs`) is null),0,max(`sh`.`Shake lbs`)) AS `Hand Sorted Shake lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Big Flower - AAA lbs`),(max(`sm`.`Big Flower - AAA lbs`) + max(`sh`.`Big Flower - AAA lbs`))) AS `Total Big Flower - AAA lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Big Flower - A lbs`),(max(`sm`.`Big Flower - A lbs`) + max(`sh`.`Big Flower - A lbs`))) AS `Total Big Flower - A lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Big Flower - B lbs`),(max(`sm`.`Big Flower - B lbs`) + max(`sh`.`Big Flower - B lbs`))) AS `Total Big Flower - B lbs`,max(`sm`.`Big Flower - X lbs`) AS `Total Big Flower - X lbs`,max(`sm`.`Reg Flower - A lbs`) AS `Total Reg Flower - A lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Reg Flower - B lbs`),(max(`sm`.`Reg Flower - B lbs`) + max(`sh`.`Reg Flower - B lbs`))) AS `Total Reg Flower - B lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Reg Flower - C lbs`),(max(`sm`.`Reg Flower - C lbs`) + max(`sh`.`Reg Flower - C lbs`))) AS `Total Reg Flower - C lbs`,max(`sm`.`Reg Flower - X lbs`) AS `Total Reg Flower - X lbs`,max(`sm`.`Small Flower - AAA lbs`) AS `Total Small Flower - AAA lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Small Flower - A lbs`),(max(`sm`.`Small Flower - A lbs`) + max(`sh`.`Small Flower - A lbs`))) AS `Total Small Flower - A lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Small Flower - B lbs`),(max(`sm`.`Small Flower - B lbs`) + max(`sh`.`Small Flower - B lbs`))) AS `Total Small Flower - B lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Small Flower - C lbs`),(max(`sm`.`Small Flower - C lbs`) + max(`sh`.`Small Flower - C lbs`))) AS `Total Small Flower - C lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Small Flower - X lbs`),(max(`sm`.`Small Flower - X lbs`) + max(`sh`.`Small Flower - X lbs`))) AS `Total Small Flower - X lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Micros Flower - A lbs`),(max(`sm`.`Micros Flower - A lbs`) + max(`sh`.`Micros Flower - A lbs`))) AS `Total Micro Flower - A lbs`,max(`sm`.`Micros Flower - B lbs`) AS `Total Micro Flower - B lbs`,max(`sm`.`Micros Flower - X lbs`) AS `Total Micro Flower - X lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Micro Small Flower - A lbs`),(max(`sm`.`Micro Small Flower - A lbs`) + max(`sh`.`Micro Small Flower - A lbs`))) AS `Total Micro Small Flower - A lbs`,max(`sm`.`Micro Small Flower - B lbs`) AS `Total Micro Small Flower - B lbs`,max(`sm`.`Micro Small Flower - X lbs`) AS `Total Micro Small Flower - X lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Shake lbs`),(max(`sm`.`Shake lbs`) + max(`sh`.`Shake lbs`))) AS `Total Shake lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Trim lbs`),(max(`sm`.`Trim lbs`) + max(`sh`.`Trim lbs`))) AS `Total Trim lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Kief lbs`),(max(`sm`.`Kief lbs`) + max(`sh`.`Kief lbs`))) AS `Total Kief lbs` from (`sorter_machine_harvest_batch_view` `sm` left join `sorter_hand_harvest_batch_view` `sh` on((`sh`.`Harvesting ID` = `sm`.`Harvesting ID`))) group by `sm`.`Harvesting ID`

-- View: processing.sorter_input
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorter_input` AS select `sb`.`id` AS `ID`,`sb`.`date` AS `Date`,`h`.`harvest_id` AS `Harvest ID`,`strain`.`strain_code` AS `Strain ID`,`strain`.`name` AS `Strain Name`,`sb`.`metrc_tag` AS `Sorter Batch Tag`,`sb`.`quantity` AS `Sorter Batch Weight`,`p`.`grade` AS `Sorter Batch Grade`,`sb`.`process_type` AS `Sorter Batch Type`,`c`.`code` AS `Category`,`ct`.`name` AS `Type`,`sb`.`quantity` AS `Weight`,`sb`.`status` AS `Status`,`sb`.`modified_on` AS `Modified On`,`sb`.`modified_by` AS `Modified By`,`sb`.`created_on` AS `Created On`,`sb`.`created_by` AS `Created By` from (((((`sorter_batch` `sb` left join `cultivation`.`harvesting` `h` on((`h`.`id` = `sb`.`harvesting_id`))) left join `product_sku`.`category` `c` on((`c`.`id` = `sb`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `sb`.`category_type_id`))) left join `processing` `p` on((`p`.`id` = `sb`.`source_id`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `sb`.`strain_id`))) order by `sb`.`date` desc,`sb`.`status` desc,`sb`.`metrc_tag` desc

-- View: processing.sorter_machine_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorter_machine_batch_view` AS select `h`.`flowering_id` AS `Flowering ID`,`h`.`id` AS `Harvesting ID`,`sb`.`batch_id` AS `Processing ID`,`h`.`harvest_id` AS `HID`,max(`h`.`test_id`) AS `Test ID`,max(`h`.`harvest_type`) AS `Harvest Type`,`fl`.`plant_count` AS `Crop Plant Count`,`h`.`plant_count_harvested` AS `Harvested Plant Count`,max(`strain`.`strain_code`) AS `Strain ID`,max(`strain`.`name`) AS `Plant Strain`,max(`sb`.`source_metrc_tag`) AS `Processing Batch METRC`,max(`sb`.`processing_batch_source_tag`) AS `Source METRC`,`sb`.`id` AS `Machine Sorting Batch ID`,`sb`.`metrc_tag` AS `METRC Tag`,`sb`.`process_type` AS `Sorting Type`,`sb`.`category_id` AS `Product Category`,`sb`.`category_type_id` AS `Product Category Type`,max(`sb`.`quantity`) AS `Input lbs`,count(`sb`.`id`) AS `Bin Count Recieved`,sum(`sd`.`quantity`) AS `Sorted Flower lbs`,sum((case when ((`sd`.`product_size_id` = 'B') and (`sd`.`product_grade_id` = 'AAA')) then `sd`.`quantity` else '' end)) AS `Big Flower - AAA lbs`,sum((case when ((`sd`.`product_size_id` = 'B') and (`sd`.`product_grade_id` = 'A')) then `sd`.`quantity` else '' end)) AS `Big Flower - A lbs`,sum((case when ((`sd`.`product_size_id` = 'B') and (`sd`.`product_grade_id` = 'B')) then `sd`.`quantity` else '' end)) AS `Big Flower - B lbs`,sum((case when ((`sd`.`product_size_id` = 'B') and (`sd`.`product_grade_id` is null)) then `sd`.`quantity` else '' end)) AS `Big Flower - X lbs`,sum(if((`sd`.`product_size_id` = 'B'),`sd`.`quantity`,'')) AS `Big Flower lbs`,sum((case when ((`sd`.`product_size_id` = 'R') and (`sd`.`product_grade_id` = 'A')) then `sd`.`quantity` else '' end)) AS `Reg Flower - A lbs`,sum((case when ((`sd`.`product_size_id` = 'R') and (`sd`.`product_grade_id` = 'B')) then `sd`.`quantity` else '' end)) AS `Reg Flower - B lbs`,sum((case when ((`sd`.`product_size_id` = 'R') and (`sd`.`product_grade_id` = 'C')) then `sd`.`quantity` else '' end)) AS `Reg Flower - C lbs`,sum((case when ((`sd`.`product_size_id` = 'R') and (`sd`.`product_grade_id` is null)) then `sd`.`quantity` else '' end)) AS `Reg Flower - X lbs`,sum(if((`sd`.`product_size_id` = 'R'),`sd`.`quantity`,'')) AS `Reg Flower lbs`,sum((case when ((`sd`.`product_size_id` = 'S') and (`sd`.`product_grade_id` = 'AAA')) then `sd`.`quantity` else '' end)) AS `Small Flower - AAA lbs`,sum((case when ((`sd`.`product_size_id` = 'S') and (`sd`.`product_grade_id` = 'A')) then `sd`.`quantity` else '' end)) AS `Small Flower - A lbs`,sum((case when ((`sd`.`product_size_id` = 'S') and (`sd`.`product_grade_id` = 'B')) then `sd`.`quantity` else '' end)) AS `Small Flower - B lbs`,sum((case when ((`sd`.`product_size_id` = 'S') and (`sd`.`product_grade_id` = 'C')) then `sd`.`quantity` else '' end)) AS `Small Flower - C lbs`,sum((case when ((`sd`.`product_size_id` = 'S') and (`sd`.`product_grade_id` is null)) then `sd`.`quantity` else '' end)) AS `Small Flower - X lbs`,sum(if((`sd`.`product_size_id` = 'S'),`sd`.`quantity`,'')) AS `Small Flower lbs`,sum((case when ((`sd`.`product_size_id` = 'M') and (`sd`.`product_grade_id` = 'A')) then `sd`.`quantity` else '' end)) AS `Micros Flower - A lbs`,sum((case when ((`sd`.`product_size_id` = 'M') and (`sd`.`product_grade_id` = 'B')) then `sd`.`quantity` else '' end)) AS `Micros Flower - B lbs`,sum((case when ((`sd`.`product_size_id` = 'M') and (`sd`.`product_grade_id` is null)) then `sd`.`quantity` else '' end)) AS `Micros Flower - X lbs`,sum(if((`sd`.`product_size_id` = 'M'),`sd`.`quantity`,'')) AS `Micros Flower lbs`,sum((case when ((`sd`.`product_size_id` = 'MS') and (`sd`.`product_grade_id` = 'A')) then `sd`.`quantity` else '' end)) AS `Micro Small Flower - A lbs`,sum((case when ((`sd`.`product_size_id` = 'MS') and (`sd`.`product_grade_id` = 'B')) then `sd`.`quantity` else '' end)) AS `Micro Small Flower - B lbs`,sum((case when ((`sd`.`product_size_id` = 'MS') and (`sd`.`product_grade_id` is null)) then `sd`.`quantity` else '' end)) AS `Micro Small Flower - X lbs`,sum(if((`sd`.`product_size_id` = 'MS'),`sd`.`quantity`,'')) AS `Micro Small Flower lbs`,sum(if((`sd`.`category_type_id` = 'SK-CTP-5844'),`sd`.`quantity`,0)) AS `Shake lbs`,sum(if((`sd`.`category_type_id` = 'SK-CTP-56d3'),`sd`.`quantity`,0)) AS `Trim lbs`,sum(if((`sd`.`category_id` = 'SK-CTG-b89a'),`sd`.`quantity`,0)) AS `Kief lbs`,sum(if((`sd`.`category_id` = 'SK-CTG-a60f'),`sd`.`quantity`,0)) AS `Waste lbs` from (((((`sorter_batch` `sb` left join `sorter_details` `sd` on((`sb`.`id` = `sd`.`sorter_batch_id`))) left join `cultivation`.`harvesting` `h` on((`sb`.`harvesting_id` = `h`.`id`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `sb`.`strain_id`))) left join `process_log` `pl` on((`pl`.`source_id` = `sb`.`source_id`))) left join `cultivation`.`flowering` `fl` on((`fl`.`id` = `h`.`flowering_id`))) where (`sb`.`process_type` like '%Machine%') group by `sb`.`id`

-- View: processing.sorter_machine_crop_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorter_machine_crop_batch_view` AS select `sb`.`Flowering ID` AS `Flowering ID`,max(`sb`.`Harvesting ID`) AS `Harvesting ID`,max(`sb`.`Processing ID`) AS `Processing ID`,min(`sb`.`HID`) AS `HID`,count(`sb`.`Test ID`) AS `Test Record Count`,max(`sb`.`Crop Plant Count`) AS `Crop Plant Count`,max(`sb`.`Harvested Plant Count`) AS `Harvested Plant Count`,count(`sb`.`Harvesting ID`) AS `Harvest Record Count`,max(`sb`.`Strain ID`) AS `Strain ID`,max(`sb`.`Plant Strain`) AS `Plant Strain`,max(`sb`.`Processing Batch METRC`) AS `Processing Batch METRC`,max(`sb`.`Source METRC`) AS `Source METRC`,max(`sb`.`Input lbs`) AS `Input lbs`,max(`sb`.`Bin Count Recieved`) AS `Bin Count Recieved`,sum(`sb`.`Sorted Flower lbs`) AS `Sorted Flower lbs`,sum(`sb`.`Big Flower - AAA lbs`) AS `Big Flower - AAA lbs`,sum(`sb`.`Big Flower - A lbs`) AS `Big Flower - A lbs`,sum(`sb`.`Big Flower - B lbs`) AS `Big Flower - B lbs`,sum(`sb`.`Big Flower - X lbs`) AS `Big Flower - X lbs`,sum(`sb`.`Reg Flower - A lbs`) AS `Reg Flower - A lbs`,sum(`sb`.`Reg Flower - B lbs`) AS `Reg Flower - B lbs`,sum(`sb`.`Reg Flower - C lbs`) AS `Reg Flower - C lbs`,sum(`sb`.`Reg Flower - X lbs`) AS `Reg Flower - X lbs`,sum(`sb`.`Small Flower - AAA lbs`) AS `Small Flower - AAA lbs`,sum(`sb`.`Small Flower - A lbs`) AS `Small Flower - A lbs`,sum(`sb`.`Small Flower - B lbs`) AS `Small Flower - B lbs`,sum(`sb`.`Small Flower - C lbs`) AS `Small Flower - C lbs`,sum(`sb`.`Small Flower - X lbs`) AS `Small Flower - X lbs`,sum(`sb`.`Micros Flower - A lbs`) AS `Micros Flower - A lbs`,sum(`sb`.`Micros Flower - B lbs`) AS `Micros Flower - B lbs`,sum(`sb`.`Micros Flower - X lbs`) AS `Micros Flower - X lbs`,sum(`sb`.`Micro Small Flower - A lbs`) AS `Micro Small Flower - A lbs`,sum(`sb`.`Micro Small Flower - B lbs`) AS `Micro Small Flower - B lbs`,sum(`sb`.`Micro Small Flower - X lbs`) AS `Micro Small Flower - X lbs`,sum(`sb`.`Shake lbs`) AS `Shake lbs`,sum(`sb`.`Trim lbs`) AS `Trim lbs`,sum(`sb`.`Kief lbs`) AS `Kief lbs` from `sorter_machine_batch_view` `sb` group by `sb`.`Flowering ID`

-- View: processing.sorter_machine_harvest_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorter_machine_harvest_batch_view` AS select min(`sb`.`Flowering ID`) AS `Flowering ID`,min(`sb`.`Crop Plant Count`) AS `Crop Plant Count`,`sb`.`Harvesting ID` AS `Harvesting ID`,max(`sb`.`Processing ID`) AS `Processing ID`,min(`sb`.`HID`) AS `HID`,count(`sb`.`Flowering ID`) AS `Flowering ID Record Count`,count(`sb`.`Test ID`) AS `Test Record Count`,`sb`.`Harvested Plant Count` AS `Harvested Plant Count`,max(`sb`.`Strain ID`) AS `Strain ID`,max(`sb`.`Plant Strain`) AS `Plant Strain`,max(`sb`.`Processing Batch METRC`) AS `Processing Batch METRC`,max(`sb`.`Source METRC`) AS `Source METRC`,max(`sb`.`Input lbs`) AS `Input lbs`,max(`sb`.`Bin Count Recieved`) AS `Bin Count Recieved`,sum(`sb`.`Sorted Flower lbs`) AS `Sorted Flower lbs`,sum(`sb`.`Big Flower - AAA lbs`) AS `Big Flower - AAA lbs`,sum(`sb`.`Big Flower - A lbs`) AS `Big Flower - A lbs`,sum(`sb`.`Big Flower - B lbs`) AS `Big Flower - B lbs`,sum(`sb`.`Big Flower - X lbs`) AS `Big Flower - X lbs`,sum(`sb`.`Reg Flower - A lbs`) AS `Reg Flower - A lbs`,sum(`sb`.`Reg Flower - B lbs`) AS `Reg Flower - B lbs`,sum(`sb`.`Reg Flower - C lbs`) AS `Reg Flower - C lbs`,sum(`sb`.`Reg Flower - X lbs`) AS `Reg Flower - X lbs`,sum(`sb`.`Small Flower - AAA lbs`) AS `Small Flower - AAA lbs`,sum(`sb`.`Small Flower - A lbs`) AS `Small Flower - A lbs`,sum(`sb`.`Small Flower - B lbs`) AS `Small Flower - B lbs`,sum(`sb`.`Small Flower - C lbs`) AS `Small Flower - C lbs`,sum(`sb`.`Small Flower - X lbs`) AS `Small Flower - X lbs`,sum(`sb`.`Micros Flower - A lbs`) AS `Micros Flower - A lbs`,sum(`sb`.`Micros Flower - B lbs`) AS `Micros Flower - B lbs`,sum(`sb`.`Micros Flower - X lbs`) AS `Micros Flower - X lbs`,sum(`sb`.`Micro Small Flower - A lbs`) AS `Micro Small Flower - A lbs`,sum(`sb`.`Micro Small Flower - B lbs`) AS `Micro Small Flower - B lbs`,sum(`sb`.`Micro Small Flower - X lbs`) AS `Micro Small Flower - X lbs`,sum(`sb`.`Big Flower lbs`) AS `Big Flower lbs`,sum(`sb`.`Reg Flower lbs`) AS `Reg Flower lbs`,sum(`sb`.`Small Flower lbs`) AS `Small Flower lbs`,sum(`sb`.`Micros Flower lbs`) AS `Micro Flower lbs`,sum(`sb`.`Micro Small Flower lbs`) AS `Micro Small Flower lbs`,sum(`sb`.`Shake lbs`) AS `Shake lbs`,sum(`sb`.`Trim lbs`) AS `Trim lbs`,sum(`sb`.`Kief lbs`) AS `Kief lbs` from `sorter_machine_batch_view` `sb` group by `sb`.`Harvesting ID`

-- View: processing.sorting_active
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `sorting_active` AS select `bb`.`metrc_tag` AS `metrc_tag`,`bb`.`date` AS `date`,`bb`.`harvesting_id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`cat`.`name` AS `category`,`ct`.`name` AS `category_type`,max(`bb`.`quantity`) AS `input_quantity`,sum(`bd`.`quantity`) AS `output_quantity`,sum((case when (`bd`.`status` = 'Active') then `bd`.`quantity` else 0 end)) AS `active_output`,sum((case when (`bd`.`status` = 'Inactive') then `bd`.`quantity` else 0 end)) AS `inactive_output`,(max(`bb`.`quantity`) - sum((case when (`bd`.`status` = 'Inactive') then `bd`.`quantity` when ((`bd`.`status` = 'Active') and (`bd`.`quantity` is null)) then `bb`.`quantity` else 0 end))) AS `active_quantity`,count(`bd`.`quantity`) AS `bin_count`,`bb`.`action` AS `process_action` from (((((`sorter_batch` `bb` left join `sorter_details` `bd` on((`bb`.`id` = `bd`.`sorter_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `bb`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `bb`.`category_type_id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) where ((`bb`.`status` = 'Active') and ((`bd`.`status` in ('Active','Inactive')) or (`bd`.`id` is null))) group by `bb`.`harvesting_id`,`bb`.`metrc_tag`,`h`.`test_id`,`bb`.`action`,`h`.`harvest_id`,`bb`.`date`,`h`.`property_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`cat`.`name`,`ct`.`name`

-- View: processing.sorting_active_summary
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `sorting_active_summary` AS select `processing_active`.`date` AS `date`,`processing_active`.`processing_batch_source_tag` AS `processing_batch_source_tag`,`processing_active`.`metrc_tag` AS `metrc_tag`,`processing_active`.`harvest_id` AS `harvest_id`,`processing_active`.`test` AS `test`,`processing_active`.`property_id` AS `property_id`,`processing_active`.`harvest_date` AS `harvest_date`,`processing_active`.`harvest_week` AS `harvest_week`,`processing_active`.`harvest_year` AS `harvest_year`,`processing_active`.`strain_code` AS `strain_code`,`processing_active`.`strain_name` AS `strain_name`,`processing_active`.`uom` AS `uom`,`processing_active`.`quantity` AS `input_quantity`,NULL AS `output_quantity`,`processing_active`.`quantity` AS `active_quantity`,`processing_active`.`bin_count` AS `bin_count`,`processing_active`.`category` AS `category`,`processing_active`.`category_type` AS `category_type`,`processing_active`.`size` AS `size`,`processing_active`.`grade` AS `grade`,`processing_active`.`status` AS `status` from `processing_active` where ((`processing_active`.`process` = 'QC-Sorting') and (`processing_active`.`status` = 'In Queue')) union all select `sorting_active`.`date` AS `date`,`sorting_active`.`metrc_tag` AS `processing_batch_source_tag`,`sorting_active`.`metrc_tag` AS `metrc_tag`,`sorting_active`.`harvest_id` AS `harvest_id`,`sorting_active`.`test_id` AS `test`,`sorting_active`.`property_id` AS `property_id`,`sorting_active`.`harvest_date` AS `harvest_date`,`sorting_active`.`harvest_week` AS `harvest_week`,`sorting_active`.`harvest_year` AS `harvest_year`,`sorting_active`.`strain_code` AS `strain_code`,`sorting_active`.`strain_name` AS `strain_name`,'Pound' AS `uom`,`sorting_active`.`input_quantity` AS `input_quantity`,`sorting_active`.`output_quantity` AS `output_quantity`,`sorting_active`.`active_quantity` AS `active_quantity`,`sorting_active`.`bin_count` AS `bin_count`,`sorting_active`.`category` AS `category`,`sorting_active`.`category_type` AS `category_type`,NULL AS `size`,NULL AS `grade`,'In Progress' AS `status` from `sorting_active`

-- View: processing.sorting_prod_flat
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `sorting_prod_flat` AS select max(`td`.`flowering_id`) AS `flowering_id`,min(`td`.`start_date`) AS `start_date`,sum(`td`.`input_quantity`) AS `input_quantity`,sum(`td`.`output_quantity`) AS `output_quantity`,sum(`td`.`trim_output`) AS `trim_output`,sum(`td`.`total_flower_output_quantity`) AS `total_flower_output_quantity`,sum(`td`.`sugar_shake_output`) AS `sugar_shake_output`,sum(`td`.`big_a_flower_output`) AS `big_a_flower_output`,sum(`td`.`big_b_flower_output`) AS `big_b_flower_output`,sum(`td`.`big_c_flower_output`) AS `big_c_flower_output`,sum(`td`.`big_x_flower_output`) AS `big_x_flower_output`,sum(`td`.`mids_a_flower_output`) AS `mids_a_flower_output`,sum(`td`.`mids_b_flower_output`) AS `mids_b_flower_output`,sum(`td`.`mids_c_flower_output`) AS `mids_c_flower_output`,sum(`td`.`mids_x_flower_output`) AS `mids_x_flower_output`,sum(`td`.`smalls_a_flower_output`) AS `smalls_a_flower_output`,sum(`td`.`smalls_b_flower_output`) AS `smalls_b_flower_output`,sum(`td`.`smalls_c_flower_output`) AS `smalls_c_flower_output`,sum(`td`.`smalls_x_flower_output`) AS `smalls_x_flower_output`,sum(`td`.`microsmalls_a_flower_output`) AS `microsmalls_a_flower_output`,sum(`td`.`microsmalls_b_flower_output`) AS `microsmalls_b_flower_output`,sum(`td`.`microsmalls_c_flower_output`) AS `microsmalls_c_flower_output`,sum(`td`.`microsmalls_x_flower_output`) AS `microsmalls_x_flower_output`,sum(`td`.`regs_a_flower_output`) AS `regs_a_flower_output`,sum(`td`.`regs_b_flower_output`) AS `regs_b_flower_output`,sum(`td`.`regs_c_flower_output`) AS `regs_c_flower_output`,sum(`td`.`regs_x_flower_output`) AS `regs_x_flower_output`,sum(`td`.`kief_output`) AS `kief_output`,sum(`td`.`waste_output`) AS `waste_output`,max(`td`.`batch_status`) AS `batch_status` from `sorting_prod_flat_all` `td` group by `td`.`flowering_id`

-- View: processing.sorting_prod_flat_all
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorting_prod_flat_all` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,min(`bb`.`date`) AS `start_date`,(select sum(`bb_sub`.`quantity`) from `sorter_batch` `bb_sub` where (`bb_sub`.`metrc_tag` = `bb`.`metrc_tag`)) AS `input_quantity`,sum(`td`.`quantity`) AS `output_quantity`,sum((case when (`td`.`category_type_id` = 'SK-CTP-56d3') then `td`.`quantity` else 0 end)) AS `trim_output`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `sugar_shake_output`,sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) AS `total_flower_output_quantity`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `big_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `big_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `big_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `big_x_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'M') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `mids_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'M') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `mids_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'M') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `mids_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'M') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `mids_x_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `smalls_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `smalls_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `smalls_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `smalls_x_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'MS') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `microsmalls_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'MS') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `microsmalls_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'MS') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `microsmalls_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'MS') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `microsmalls_x_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `regs_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `regs_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `regs_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `regs_x_flower_output`,sum((case when (`td`.`category_id` = 'SK-CTG-b89a') then `td`.`quantity` else 0 end)) AS `kief_output`,sum((case when (`td`.`category_id` = 'SK-CTG-a60f') then `td`.`quantity` else 0 end)) AS `waste_output`,if((`bb`.`action` = 'Stopped'),'In Progress',`bb`.`action`) AS `batch_status` from ((`sorter_details` `td` left join `sorter_batch` `bb` on((`bb`.`id` = `td`.`sorter_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) where (`h`.`year_num` > 2021) group by `h`.`flowering_id`,`h`.`id`,`h`.`harvest_id`,`bb`.`action`,`bb`.`metrc_tag`

-- View: processing.sorting_prod_flat_all_group
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `sorting_prod_flat_all_group` AS select `td`.`flowering_id` AS `flowering_id`,`td`.`harvesting_id` AS `harvesting_id`,`td`.`harvest_id` AS `harvest_id`,min(`td`.`start_date`) AS `start_date`,sum(`td`.`input_quantity`) AS `input_quantity`,sum(`td`.`output_quantity`) AS `output_quantity`,sum(`td`.`trim_output`) AS `trim_output`,sum(`td`.`sugar_shake_output`) AS `sugar_shake_output`,sum(`td`.`total_flower_output_quantity`) AS `total_flower_output_quantity`,sum(`td`.`big_a_flower_output`) AS `big_a_flower_output`,sum(`td`.`big_b_flower_output`) AS `big_b_flower_output`,sum(`td`.`big_c_flower_output`) AS `big_c_flower_output`,sum(`td`.`big_x_flower_output`) AS `big_x_flower_output`,sum(`td`.`mids_a_flower_output`) AS `mids_a_flower_output`,sum(`td`.`mids_b_flower_output`) AS `mids_b_flower_output`,sum(`td`.`mids_c_flower_output`) AS `mids_c_flower_output`,sum(`td`.`mids_x_flower_output`) AS `mids_x_flower_output`,sum(`td`.`smalls_a_flower_output`) AS `smalls_a_flower_output`,sum(`td`.`smalls_b_flower_output`) AS `smalls_b_flower_output`,sum(`td`.`smalls_c_flower_output`) AS `smalls_c_flower_output`,sum(`td`.`smalls_x_flower_output`) AS `smalls_x_flower_output`,sum(`td`.`microsmalls_a_flower_output`) AS `microsmalls_a_flower_output`,sum(`td`.`microsmalls_b_flower_output`) AS `microsmalls_b_flower_output`,sum(`td`.`microsmalls_c_flower_output`) AS `microsmalls_c_flower_output`,sum(`td`.`microsmalls_x_flower_output`) AS `microsmalls_x_flower_output`,sum(`td`.`regs_a_flower_output`) AS `regs_a_flower_output`,sum(`td`.`regs_b_flower_output`) AS `regs_b_flower_output`,sum(`td`.`regs_c_flower_output`) AS `regs_c_flower_output`,sum(`td`.`regs_x_flower_output`) AS `regs_x_flower_output`,sum(`td`.`kief_output`) AS `kief_output`,sum(`td`.`waste_output`) AS `waste_output`,max(`td`.`batch_status`) AS `batch_status` from `sorting_prod_flat_all` `td` group by `td`.`flowering_id`,`td`.`harvesting_id`,`td`.`harvest_id`

-- View: processing.sorting_prod_flat_all_optimized
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorting_prod_flat_all_optimized` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,min(`bb`.`date`) AS `start_date`,coalesce(`bb_sub`.`input_quantity`,0) AS `input_quantity`,sum(`td`.`quantity`) AS `output_quantity`,sum((case when (`td`.`category_type_id` = 'SK-CTP-56d3') then `td`.`quantity` else 0 end)) AS `trim_output`,sum((case when (`td`.`category_type_id` = 'SK-CTP-5844') then `td`.`quantity` else 0 end)) AS `sugar_shake_output`,sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) AS `total_flower_output_quantity`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `big_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `big_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `big_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `big_x_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'M') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `mids_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'M') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `mids_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'M') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `mids_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'M') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `mids_x_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `smalls_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `smalls_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `smalls_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `smalls_x_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'MS') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `microsmalls_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'MS') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `microsmalls_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'MS') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `microsmalls_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'MS') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `microsmalls_x_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `regs_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `regs_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `regs_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `regs_x_flower_output`,sum((case when (`td`.`category_id` = 'SK-CTG-b89a') then `td`.`quantity` else 0 end)) AS `kief_output`,sum((case when (`td`.`category_id` = 'SK-CTG-a60f') then `td`.`quantity` else 0 end)) AS `waste_output`,if((`bb`.`action` = 'Stopped'),'In Progress',`bb`.`action`) AS `batch_status` from (((`sorter_details` `td` left join `sorter_batch` `bb` on((`bb`.`id` = `td`.`sorter_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join (select `sorter_batch`.`metrc_tag` AS `metrc_tag`,sum(`sorter_batch`.`quantity`) AS `input_quantity` from `sorter_batch` group by `sorter_batch`.`metrc_tag`) `bb_sub` on((`bb_sub`.`metrc_tag` = `bb`.`metrc_tag`))) where (`h`.`year_num` > 2021) group by `h`.`flowering_id`,`h`.`id`,`h`.`harvest_id`,`bb`.`action`,`bb`.`metrc_tag`

-- View: processing.sorting_prod_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `sorting_prod_view` AS select `h`.`flowering_id` AS `flowering_id`,`bb`.`harvesting_id` AS `harvesting_id`,`bb`.`metrc_tag` AS `metrc_tag`,'Sorting' AS `process`,`bb`.`id` AS `batch_id`,`bb`.`date` AS `date`,if((`bb`.`action` = 'Stopped'),'In Progress',`bb`.`action`) AS `batch_status`,`f`.`flowering_id` AS `flowering_id_name`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,NULL AS `flower_plant_count`,NULL AS `harvest_plant_count`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`cat`.`name` AS `input_category`,`ct`.`name` AS `input_category_type`,`p`.`product_id` AS `input_product_size`,`p`.`grade` AS `input_product_grade`,max(`bb`.`quantity`) AS `input_quantity`,`cate`.`name` AS `output_category`,`cty`.`name` AS `output_category_type`,`bd`.`product_size_id` AS `output_size`,`bd`.`product_grade_id` AS `output_grade`,sum(`bd`.`quantity`) AS `output_quantity` from (((((((((`sorter_batch` `bb` left join `sorter_details` `bd` on((`bb`.`id` = `bd`.`sorter_batch_id`))) left join `processing` `p` on((`p`.`id` = `bb`.`source_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `bb`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `bb`.`category_type_id`))) left join `product_sku`.`category` `cate` on((`cate`.`id` = `bd`.`category_id`))) left join `product_sku`.`category_type` `cty` on((`cty`.`id` = `bd`.`category_type_id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) left join `cultivation`.`flowering` `f` on((`f`.`id` = `h`.`flowering_id`))) group by `bb`.`harvesting_id`,`bb`.`metrc_tag`,`h`.`test_id`,`bb`.`action`,`h`.`harvest_id`,`bb`.`date`,`h`.`property_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`cat`.`name`,`ct`.`name`,`bb`.`id`,`h`.`flowering_id`,`bb`.`process_type`,`f`.`flowering_id`,`cate`.`name`,`cty`.`name`,`bd`.`product_size_id`,`bd`.`product_grade_id` order by `bb`.`date` desc,`bb`.`action`

-- View: processing.tag_weights_and_times
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `tag_weights_and_times` AS select `tw`.`batch_id` AS `id`,`tw`.`batch_id` AS `batch_id`,if((`tw`.`status` = 'Active'),round(sum(`tw`.`net_weight`),0),0) AS `total_active_weight`,round(sum(`tw`.`net_weight`),2) AS `total`,if((`tw`.`status` = 'Active'),count(`tw`.`net_weight`),0) AS `total_active_bins`,count(`tw`.`batch_id`) AS `bin count`,timediff(max(`tw`.`timestamp`),min(`tw`.`timestamp`)) AS `timedif`,`tw`.`status` AS `status` from `pacstone_dev`.`individual_weight_readings` `tw` group by `tw`.`batch_id`,`tw`.`status`

-- View: processing.tote_weight_tare_mean
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `tote_weight_tare_mean` AS select row_number() OVER ()  AS `id`,round(avg(`tw`.`tare_weight`),2) AS `average_tote_weight_all`,count(`tw`.`batch_id`) AS `bin_count` from `scale_weights` `tw` where (`tw`.`process_id` = 'MP-1000')

-- View: processing.trimming_active
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `trimming_active` AS select `bb`.`metrc_tag` AS `metrc_tag`,`bb`.`date` AS `date`,`bb`.`harvesting_id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`cat`.`name` AS `category`,`ct`.`name` AS `category_type`,max(`bb`.`quantity`) AS `input_quantity`,sum(`bd`.`quantity`) AS `output_quantity`,sum((case when (`bd`.`status` = 'Active') then `bd`.`quantity` else 0 end)) AS `active_output`,sum((case when (`bd`.`status` = 'Inactive') then `bd`.`quantity` else 0 end)) AS `inactive_output`,(max(`bb`.`quantity`) - sum((case when (`bd`.`status` = 'Inactive') then `bd`.`quantity` when ((`bd`.`status` = 'Active') and (`bb`.`quantity` is null)) then `bb`.`quantity` else 0 end))) AS `active_quantity`,count(`bd`.`quantity`) AS `bin_count`,if((`bb`.`process_type` = 'T-zero Machine'),'Trimming','Hand Trimming') AS `process`,`bb`.`action` AS `process_action` from (((((`trimming_batch` `bb` left join `trimming_details` `bd` on((`bb`.`id` = `bd`.`trimming_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `bb`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `bb`.`category_type_id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) where ((`bb`.`status` = 'Active') and ((`bd`.`status` in ('Active','Inactive')) or (`bd`.`id` is null))) group by `bb`.`harvesting_id`,`bb`.`metrc_tag`,`h`.`test_id`,`bb`.`action`,`bb`.`process_type`,`h`.`harvest_id`,`bb`.`date`,`h`.`property_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`cat`.`name`,`ct`.`name`

-- View: processing.trimming_app_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_app_batch_view` AS select `td`.`metrc_tag` AS `metrc_tag`,max(`td`.`trimming_batch_id`) AS `trimming_batch_id`,sum((case when (`td`.`category_type_id` = 'SK-CTP-56d3') then `td`.`quantity` else 0 end)) AS `trim_output`,sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) AS `total_flower_output_quantity`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `sugar_shake_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `c_flower_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'A')) then `td`.`quantity` else 0 end)) AS `retrim_a_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'B')) then `td`.`quantity` else 0 end)) AS `retrim_b_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'C')) then `td`.`quantity` else 0 end)) AS `retrim_c_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `big_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `reg_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `sml_a_flower_output`,sum(if((`td`.`category_id` = 'SK-CTG-b89a'),`td`.`quantity`,0)) AS `kief_output` from `trimming_details` `td` where (`td`.`status` = 'Active') group by `td`.`metrc_tag`,`td`.`trimming_batch_id`

-- View: processing.trimming_batch_report
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_batch_report` AS select `t`.`metrc_tag` AS `metrc_tag`,`t`.`processing_batch_source_tag` AS `processing_batch_source_tag`,`h`.`id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`date` AS `harvest_date`,`h`.`property_id` AS `property`,`h`.`year_num` AS `harvest_year`,`h`.`week_num` AS `harvest_week`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `year_week`,`strain`.`strain_code` AS `strain_id`,`strain`.`name` AS `strain_name`,`h`.`harvest_type` AS `harvest_type`,(case when (`h`.`harvest_type` = 'Partial') then (select sum(`cultivation`.`harvesting`.`plant_count_harvested`) from `cultivation`.`harvesting` where ((`cultivation`.`harvesting`.`processing_metrc_id` = `t`.`processing_batch_source_tag`) and (`cultivation`.`harvesting`.`harvest_type` = 'Partial'))) else max(`h`.`plant_count_harvested`) end) AS `plant_count`,max(`t`.`date`) AS `t0_date`,max(`t`.`quantity`) AS `input_qty`,`subq`.`output_qty` AS `output_qty`,sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) AS `total_flower_output_quantity`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `big_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `reg_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `sml_a_flower_output`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `sugar_shake_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `c_flower_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'A')) then `td`.`quantity` else 0 end)) AS `retrim_a_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'B')) then `td`.`quantity` else 0 end)) AS `retrim_b_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'C')) then `td`.`quantity` else 0 end)) AS `retrim_c_output`,sum(if((`td`.`category_id` = 'SK-CTG-a60f'),`td`.`quantity`,0)) AS `total_waste_output`,sum((case when (`td`.`category_type_id` = 'SK-CTP-56d3') then `td`.`quantity` else 0 end)) AS `trim_output`,`t`.`action` AS `process_action` from (((((`trimming_batch` `t` left join `trimming_details` `td` on((`t`.`id` = `td`.`trimming_batch_id`))) left join `trimming_view` `SUM` on((`t`.`id` = `SUM`.`trimming_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`processing_metrc_id` = `t`.`processing_batch_source_tag`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `t`.`strain_id`))) left join (select `td2`.`trimming_batch_id` AS `trimming_batch_id`,sum(`td2`.`quantity`) AS `output_qty` from `trimming_details` `td2` group by `td2`.`trimming_batch_id`) `subq` on((`t`.`id` = `subq`.`trimming_batch_id`))) where (((`t`.`process_type` = 'T-zero Machine') and (`t`.`action` = 'Finished')) or ((`t`.`process_type` = 'Hand Trimming') and (`t`.`action` = 'Finished') and exists(select 1 from `trimming_batch` `t2` where ((`t2`.`processing_batch_source_tag` = `t`.`processing_batch_source_tag`) and (`t2`.`process_type` = 'T-zero Machine') and (`t2`.`action` = 'Finished'))) is false)) group by `t`.`metrc_tag`,`t`.`processing_batch_source_tag`,`h`.`id`,`h`.`harvest_id`,`h`.`test_id`,`h`.`date`,`h`.`property_id`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`strain`.`strain_code`,`strain`.`name`,`t`.`action`,`subq`.`output_qty`

-- View: processing.trimming_crop_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_crop_batch_view` AS select `tm`.`Flowering ID` AS `Flowering ID`,`tm`.`Harvesting ID` AS `Harvesting ID`,`tm`.`Harvesting ID` AS `Processing ID`,`tm`.`HID` AS `HID`,`tm`.`Test Record Count` AS `Test Record Count`,`tm`.`Crop Plant Count` AS `Crop Plant Count`,`tm`.`Harvested Plant Count` AS `Harvested Plant Count`,`tm`.`Harvest Record Count` AS `Harvest Record Count`,`tm`.`Strain ID` AS `Strain ID`,`tm`.`Plant Strain` AS `Plant Strain`,`tm`.`Modified On` AS `Trimming Started`,max(`tm`.`Bucked Flower lbs`) AS `Bucked Flower lbs`,if((((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`)) is null),max(`tm`.`Trimmed Flower lbs`),((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`))) AS `Total Flower from Harvest`,max(`tm`.`Trim lbs`) AS `Total Trim from Harvest`,if((((max(`tm`.`Waste lbs`) - max(`th`.`Waste lbs`)) + max(`th`.`Waste lbs`)) is null),max(`tm`.`Waste lbs`),(max(`tm`.`Waste lbs`) + max(`th`.`Waste lbs`))) AS `Total Waste from Harvest`,if(((max(`tm`.`Trimming Duration`) + max(`th`.`Trimming Duration`)) is null),max(`tm`.`Trimming Duration`),addtime(max(`tm`.`Trimming Duration`),max(`th`.`Trimming Duration`))) AS `Trimming Duration of Harvest`,if(((((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`)) / max(`tm`.`Harvested Plant Count`)) is null),(max(`tm`.`Trimmed Flower lbs`) / max(`tm`.`Harvested Plant Count`)),(((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`)) / max(`tm`.`Harvested Plant Count`))) AS `lbs per plant`,if((max(`th`.`Flowering ID`) is null),((max(`tm`.`Trimmed Flower lbs`) / max(`tm`.`Harvested Plant Count`)) * 453.59),((((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`)) / max(`tm`.`Harvested Plant Count`)) * 453.59)) AS `Grams per plant`,if((max(`th`.`Flowering ID`) is null),(((max(`tm`.`Trimmed Flower lbs`) / max(`tm`.`Harvested Plant Count`)) * 453.59) / 28),(((((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`)) / max(`tm`.`Harvested Plant Count`)) * 453.59) / 28)) AS `Ounces per plant` from (`trimming_machine_crop_batch_view` `tm` left join `trimming_hand_crop_batch_view` `th` on((`th`.`Flowering ID` = `tm`.`Flowering ID`))) group by `tm`.`Flowering ID` order by `tm`.`Modified On` desc

-- View: processing.trimming_detail_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_detail_view` AS select `td`.`trimming_batch_id` AS `trimming_batch_id`,max(`td`.`created_on`) AS `trim_INdate`,sum(`td`.`quantity`) AS `total_trimmed_quantity`,count(`td`.`quantity`) AS `bin_count`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B')) then `td`.`quantity` else 0 end)) AS `big_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'R')) then `td`.`quantity` else 0 end)) AS `reg_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S')) then `td`.`quantity` else 0 end)) AS `sml_a_flower_output`,sum((case when ((`td`.`process_queue_type` = 'hand trimming') and (`td`.`product_grade_id` = 'A')) then `td`.`quantity` else 0 end)) AS `retrim_a_output`,sum((case when ((`td`.`process_queue_type` = 'hand trimming') and (`td`.`product_grade_id` = 'B')) then `td`.`quantity` else 0 end)) AS `retrim_b_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`category_type_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`category_type_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`category_type_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `c_flower_output`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `sugar_shake_output`,sum(if((`td`.`category_type_id` = 'SK-CTP-56d3'),`td`.`quantity`,0)) AS `trim_output`,sum(if((`td`.`category_id` = 'SK-CTG-b89a'),`td`.`quantity`,0)) AS `kief_output`,sum(if((`td`.`category_id` = 'SK-CTG-a60f'),`td`.`quantity`,0)) AS `total_waste_output` from (`trimming_details` `td` left join `trimming_batch` `tb` on((`tb`.`id` = `td`.`trimming_batch_id`))) group by `td`.`trimming_batch_id`

-- View: processing.trimming_hand_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_hand_batch_view` AS select `h`.`flowering_id` AS `Flowering ID`,`h`.`id` AS `Harvesting ID`,`t`.`batch_id` AS `Processing ID`,`fl`.`flowering_id` AS `FID`,`h`.`harvest_id` AS `HID`,`h`.`date` AS `Harvest Date`,week(`h`.`date`,0) AS `Harvest Week`,year(`h`.`date`) AS `Harvest Year`,`h`.`test_id` AS `Test ID`,`h`.`harvest_type` AS `Harvest Type`,`fl`.`plant_count` AS `Crop Plant Count`,`h`.`plant_count_harvested` AS `Harvested Plant Count`,max(`strain`.`strain_code`) AS `Strain ID`,max(`strain`.`name`) AS `Plant Strain`,max(`t`.`source_metrc_tag`) AS `Processing Batch METRC`,max(`t`.`processing_batch_source_tag`) AS `Source METRC`,`t`.`id` AS `Trimming Batch ID`,`t`.`metrc_tag` AS `METRC Tag`,`t`.`process_type` AS `Trimming Type`,`t`.`category_id` AS `Product Category`,`t`.`category_type_id` AS `Product Category Type`,max(`t`.`quantity`) AS `Input Lbs`,max(`SUM`.`bin_count`) AS `Bin Count Recieved`,sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) AS `Trimmed Flower lbs`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `Reg Flower - B lbs`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `Reg Flower - C lbs`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `Big Flower - A lbs`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `Shake lbs`,sum((case when ((`td`.`category_type_id` = 'SK-CTP-daf5') and (`td`.`category_id` = 'SK-CTG-a60f')) then `td`.`quantity` else 0 end)) AS `Trimmed Waste lbs`,if((sum(`td`.`quantity`) is null),0,(max(`t`.`quantity`) - max(`td`.`quantity`))) AS `Misc Trimming Waste lbs`,(sum((case when ((`td`.`category_type_id` = 'SK-CTP-daf5') and (`td`.`category_id` = 'SK-CTG-a60f')) then `td`.`quantity` else 0 end)) + if((sum(`td`.`quantity`) is null),0,(max(`t`.`quantity`) - max(`td`.`quantity`)))) AS `Total Trimming Waste lbs`,if((sum(`td`.`quantity`) is null),0,((sum(`t`.`quantity`) - sum(`td`.`quantity`)) / sum(`t`.`quantity`))) AS `Trimmed Waste %`,count(`t`.`id`) AS `Trimmed Flower Bins`,min(`pl`.`process_start`) AS `Trimming Start`,min(`pl`.`process_stop`) AS `Trimming Stop`,timediff(min(`pl`.`process_stop`),min(`pl`.`process_start`)) AS `Trimming Duration`,max(`pl`.`process_name`) AS `Process Status`,max(`pl`.`id`) AS `Record Status`,`t`.`status` AS `Process Queue`,count(`td`.`process_queue_id`) AS `Process Queue Count`,max(`td`.`process_queue_type`) AS `Process Queue Type`,`t`.`note` AS `Notes`,`t`.`created_by` AS `Created By`,`t`.`created_on` AS `Created On`,`t`.`modified_by` AS `Modified By`,max(`t`.`modified_by`) AS `Modified On` from ((((((`trimming_batch` `t` left join `trimming_details` `td` on((`t`.`id` = `td`.`trimming_batch_id`))) left join `trimming_detail_view` `SUM` on((`t`.`id` = `SUM`.`trimming_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `t`.`harvesting_id`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `t`.`strain_id`))) left join `cultivation`.`flowering` `fl` on((`fl`.`id` = `h`.`flowering_id`))) left join `process_log` `pl` on((`pl`.`source_id` = `t`.`id`))) where (`t`.`process_type` = 'Hand Trimming') group by `t`.`id` order by `h`.`date` desc

-- View: processing.trimming_hand_crop_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_hand_crop_batch_view` AS select `t`.`Flowering ID` AS `Flowering ID`,max(`t`.`Harvesting ID`) AS `Harvesting ID`,max(`t`.`Processing ID`) AS `Processing ID`,max(`t`.`HID`) AS `HID`,count(`t`.`Test ID`) AS `Test Record Count`,max(`t`.`Crop Plant Count`) AS `Crop Plant Count`,max(`t`.`Harvested Plant Count`) AS `Harvested Plant Count`,count(`t`.`Harvesting ID`) AS `Harvest Record Count`,max(`t`.`Strain ID`) AS `Strain ID`,max(`t`.`Plant Strain`) AS `Plant Strain`,max(`t`.`Trimming Type`) AS `Trimming Type`,sum(`t`.`Input Lbs`) AS `Input Flower lbs`,max(`t`.`Bin Count Recieved`) AS `Bin Count Received`,sum(`t`.`Trimmed Flower lbs`) AS `Trimmed Flower lbs`,sum(`t`.`Reg Flower - B lbs`) AS `Reg Flower - B lbs`,sum(`t`.`Reg Flower - C lbs`) AS `Reg Flower - C lbs`,sum(`t`.`Big Flower - A lbs`) AS `Big Flower - A lbs`,sum(`t`.`Shake lbs`) AS `Shake lbs`,sum(`t`.`Total Trimming Waste lbs`) AS `Waste lbs`,sum(`t`.`Misc Trimming Waste lbs`) AS `Misc Trimming Waste lbs`,max(`t`.`Trimmed Waste %`) AS `Trimmed Waste %`,max(`t`.`Created On`) AS `Date Started`,max(`t`.`Trimming Duration`) AS `Trimming Duration`,max(`t`.`Modified By`) AS `Modified By`,max(`t`.`Modified On`) AS `Modified On`,max(`t`.`Process Queue`) AS `Process Status` from `trimming_hand_batch_view` `t` group by `t`.`Flowering ID`

-- View: processing.trimming_hand_harvest_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_hand_harvest_batch_view` AS select count(`t`.`Flowering ID`) AS `Flowering ID Record Count`,`t`.`Harvesting ID` AS `Harvesting ID`,max(`t`.`Processing ID`) AS `Processing ID`,max(`t`.`HID`) AS `HID`,count(`t`.`Test ID`) AS `Test Record Count`,`t`.`Harvested Plant Count` AS `Harvested Plant Count`,max(`t`.`Strain ID`) AS `Strain ID`,max(`t`.`Plant Strain`) AS `Plant Strain`,max(`t`.`Trimming Type`) AS `Trimming Type`,sum(`t`.`Input Lbs`) AS `Input Flower lbs`,max(`t`.`Bin Count Recieved`) AS `Bin Count Received`,sum(`t`.`Trimmed Flower lbs`) AS `Trimmed Flower lbs`,sum(`t`.`Reg Flower - B lbs`) AS `Reg Flower - B lbs`,sum(`t`.`Reg Flower - C lbs`) AS `Reg Flower - C lbs`,sum(`t`.`Big Flower - A lbs`) AS `Big Flower - A lbs`,sum(`t`.`Shake lbs`) AS `Shake lbs`,sum(`t`.`Total Trimming Waste lbs`) AS `Waste lbs`,sum(`t`.`Misc Trimming Waste lbs`) AS `Misc Trimming Waste lbs`,max(`t`.`Trimmed Waste %`) AS `Trimmed Waste %`,max(`t`.`Created On`) AS `Date Started`,max(`t`.`Trimming Duration`) AS `Trimming Duration`,max(`t`.`Modified By`) AS `Modified By`,max(`t`.`Modified On`) AS `Modified On`,max(`t`.`Process Queue`) AS `Process Status` from `trimming_hand_batch_view` `t` group by `t`.`Harvesting ID`

-- View: processing.trimming_hand_prod_flat
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `trimming_hand_prod_flat` AS select max(`td`.`flowering_id`) AS `flowering_id`,min(`td`.`start_date`) AS `start_date`,sum(`td`.`input_quantity`) AS `input_quantity`,sum(`td`.`output_quantity`) AS `output_quantity`,sum(`td`.`trim_output`) AS `trim_output`,sum(`td`.`total_flower_output_quantity`) AS `total_flower_output_quantity`,sum(`td`.`sugar_shake_output`) AS `sugar_shake_output`,sum(`td`.`a_flower_output`) AS `a_flower_output`,sum(`td`.`b_flower_output`) AS `b_flower_output`,sum(`td`.`c_flower_output`) AS `c_flower_output`,sum(`td`.`waste_output`) AS `waste_output`,max(`td`.`batch_status`) AS `batch_status` from `trimming_hand_prod_flat_all` `td` group by `td`.`flowering_id`

-- View: processing.trimming_hand_prod_flat_all
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `trimming_hand_prod_flat_all` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`bb`.`metrc_tag` AS `metrc_tag`,min(`bb`.`date`) AS `start_date`,(select sum(`bb_sub`.`quantity`) from `trimming_batch` `bb_sub` where ((`bb_sub`.`metrc_tag` = `bb`.`metrc_tag`) and (`bb_sub`.`process_type` = 'Hand Trimming')) group by `bb_sub`.`metrc_tag`) AS `input_quantity`,sum(`td`.`quantity`) AS `output_quantity`,sum((case when (`td`.`category_type_id` = 'SK-CTP-56d3') then `td`.`quantity` else 0 end)) AS `trim_output`,sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) AS `total_flower_output_quantity`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `sugar_shake_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `c_flower_output`,sum((case when (`td`.`category_id` = 'SK-CTG-a60f') then `td`.`quantity` else 0 end)) AS `waste_output`,if((`bb`.`action` = 'Stopped'),'In Progress',`bb`.`action`) AS `batch_status` from ((`trimming_batch` `bb` left join `trimming_details` `td` on((`bb`.`id` = `td`.`trimming_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) where ((`bb`.`process_type` = 'Hand Trimming') and (`h`.`year_num` > 2021)) group by `h`.`flowering_id`,`h`.`id`,`bb`.`metrc_tag`,`h`.`harvest_id`,`bb`.`action`

-- View: processing.trimming_hand_prod_flat_group
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `trimming_hand_prod_flat_group` AS select `td`.`flowering_id` AS `flowering_id`,`td`.`harvesting_id` AS `harvesting_id`,`td`.`harvest_id` AS `harvest_id`,min(`td`.`start_date`) AS `start_date`,sum(`td`.`input_quantity`) AS `input_quantity`,sum(`td`.`output_quantity`) AS `output_quantity`,sum(`td`.`trim_output`) AS `trim_output`,sum(`td`.`total_flower_output_quantity`) AS `total_flower_output_quantity`,sum(`td`.`sugar_shake_output`) AS `sugar_shake_output`,sum(`td`.`a_flower_output`) AS `a_flower_output`,sum(`td`.`b_flower_output`) AS `b_flower_output`,sum(`td`.`c_flower_output`) AS `c_flower_output`,sum(`td`.`waste_output`) AS `waste_output`,max(`td`.`batch_status`) AS `batch_status` from `trimming_hand_prod_flat_all` `td` group by `td`.`flowering_id`,`td`.`harvesting_id`,`td`.`harvest_id`

-- View: processing.trimming_harvest_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_harvest_batch_view` AS select max(`tm`.`Flowering ID`) AS `Flowering ID Record Count`,`tm`.`Harvesting ID` AS `Harvesting ID`,max(`tm`.`Harvesting ID`) AS `Processing ID`,min(`tm`.`HID`) AS `HID`,sum(`tm`.`Test Record Count`) AS `Test Record Count`,max(`tm`.`Harvested Plant Count`) AS `Harvested Plant Count`,max(`tm`.`Strain ID`) AS `Strain ID`,max(`tm`.`Plant Strain`) AS `Plant Strain`,max(`tm`.`Bucked Flower lbs`) AS `Bucked Flower lbs`,if((((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`)) is null),max(`tm`.`Trimmed Flower lbs`),((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`))) AS `Total Flower from Harvest`,max(`tm`.`Trim lbs`) AS `Total Trim from Harvest`,if((((max(`tm`.`Waste lbs`) - max(`th`.`Waste lbs`)) + max(`th`.`Waste lbs`)) is null),max(`tm`.`Waste lbs`),(max(`tm`.`Waste lbs`) + max(`th`.`Waste lbs`))) AS `Total Waste from Harvest`,if(((max(`tm`.`Trimming Duration`) + max(`th`.`Trimming Duration`)) is null),max(`tm`.`Trimming Duration`),addtime(max(`tm`.`Trimming Duration`),max(`th`.`Trimming Duration`))) AS `Trimming Duration of Harvest`,if(((((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`)) / max(`tm`.`Harvested Plant Count`)) is null),(max(`tm`.`Trimmed Flower lbs`) / max(`tm`.`Harvested Plant Count`)),(((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`)) / max(`tm`.`Harvested Plant Count`))) AS `lbs per plant`,if((max(`th`.`Flowering ID`) is null),((max(`tm`.`Trimmed Flower lbs`) / max(`tm`.`Harvested Plant Count`)) * 453.59),((((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`)) / max(`tm`.`Harvested Plant Count`)) * 453.59)) AS `Grams per plant`,if((max(`th`.`Flowering ID`) is null),(((max(`tm`.`Trimmed Flower lbs`) / max(`tm`.`Harvested Plant Count`)) * 453.59) / 28),(((((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`)) / max(`tm`.`Harvested Plant Count`)) * 453.59) / 28)) AS `Ounces per plant` from (`trimming_machine_crop_batch_view` `tm` left join `trimming_hand_crop_batch_view` `th` on((`th`.`Flowering ID` = `tm`.`Flowering ID`))) group by `tm`.`Harvesting ID`

-- View: processing.trimming_kief_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `trimming_kief_view` AS select `tb`.`metrc_tag` AS `harvest_metrc_tag`,`td`.`metrc_tag` AS `trim_metrc_tag`,`tb`.`date` AS `date`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`tb`.`strain_id` AS `strain_id`,`tb`.`process_type` AS `process_type`,max(`td`.`quantity`) AS `kief_registered_quantity`,(select sum(`w`.`quantity`) from `wholesale`.`wholesale` `w` where (((`w`.`metrc_tag` = `td`.`metrc_tag`) or (`w`.`source_metrc_tag` = `td`.`metrc_tag`)) and (`w`.`status` = 'Active') and (`w`.`category_id` = 'SK-CTG-d3f0') and (`w`.`category_type_id` = 'SK-CTP-56d3'))) AS `trim_active_quantity`,(select sum(`w`.`quantity`) from `wholesale`.`wholesale` `w` where (((`w`.`metrc_tag` = `td`.`metrc_tag`) or (`w`.`source_metrc_tag` = `td`.`metrc_tag`)) and (`w`.`status` = 'Active') and (`w`.`category_id` = 'SK-CTG-b89a'))) AS `kief_active_quantity`,(case when ((coalesce((select sum(`w`.`quantity`) from `wholesale`.`wholesale` `w` where (((`w`.`metrc_tag` = `td`.`metrc_tag`) or (`w`.`source_metrc_tag` = `td`.`metrc_tag`)) and (`w`.`status` = 'Active') and (`w`.`category_type_id` = 'SK-CTP-56d3'))),0) + coalesce((select sum(`w`.`quantity`) from `wholesale`.`wholesale` `w` where (((`w`.`metrc_tag` = `td`.`metrc_tag`) or (`w`.`source_metrc_tag` = `td`.`metrc_tag`)) and (`w`.`status` = 'Active') and (`w`.`category_id` = 'SK-CTG-b89a'))),0)) > 0) then 'Active' else 'Inactive' end) AS `status` from (((`trimming_batch` `tb` left join `trimming_details` `td` on((`tb`.`id` = `td`.`trimming_batch_id`))) left join `cultivation`.`harvesting_ref` `h` on((`h`.`id` = `tb`.`harvesting_id`))) left join `wholesale`.`wholesale` `w` on((`w`.`metrc_tag` = `td`.`metrc_tag`))) where ((`td`.`category_id` = 'SK-CTG-b89a') or (`td`.`note` like '%kief%')) group by `tb`.`metrc_tag`,`td`.`metrc_tag`,`tb`.`date`,`tb`.`harvesting_id`,`tb`.`strain_id`,`tb`.`process_type`

-- View: processing.trimming_log
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `trimming_log` AS select `log`.`id` AS `id`,`log`.`source_id` AS `source_id`,`log`.`metrc_tag` AS `metrc_tag`,`log`.`process_id` AS `process_id`,`log`.`process_name` AS `process_name`,`log`.`process_date` AS `process_date`,`log`.`process_week` AS `process_week`,`log`.`process_start` AS `process_start`,`log`.`process_stop` AS `process_stop`,`log`.`process_duration` AS `process_duration`,`tb`.`process_type` AS `batch_process`,`tb`.`quantity` AS `batch_input_weight`,`tb`.`status` AS `batch_status`,`log`.`status` AS `status`,`log`.`modified_on` AS `modified_on`,`log`.`modified_by` AS `modified_by`,`log`.`created_on` AS `created_on`,`log`.`created_by` AS `created_by` from (`process_log` `log` left join `trimming_batch` `tb` on((`tb`.`id` = `log`.`source_id`))) where (`tb`.`process_type` = 'T-zero Machine') order by `log`.`created_on` desc

-- View: processing.trimming_machine_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_machine_batch_view` AS select `h`.`flowering_id` AS `Flowering ID`,`t`.`harvesting_id` AS `Harvesting ID`,`t`.`batch_id` AS `Processing ID`,`fl`.`flowering_id` AS `FID`,`h`.`harvest_id` AS `HID`,`h`.`date` AS `Harvest Date`,week(`h`.`date`,0) AS `Harvest Week`,year(`h`.`date`) AS `Harvest Year`,`h`.`test_id` AS `Test ID`,`h`.`harvest_type` AS `Harvest Type`,`fl`.`plant_count` AS `Crop Plant Count`,`h`.`plant_count_harvested` AS `Harvested Plant Count`,max(`strain`.`strain_code`) AS `Strain ID`,max(`strain`.`name`) AS `Plant Strain`,max(`t`.`source_metrc_tag`) AS `Processing Batch METRC`,max(`t`.`processing_batch_source_tag`) AS `Source METRC`,`t`.`id` AS `Trimming Batch ID`,`t`.`metrc_tag` AS `METRC Tag`,`t`.`process_type` AS `Trimming Type`,`t`.`category_id` AS `Product Category`,`t`.`category_type_id` AS `Product Category Type`,max(`t`.`quantity`) AS `Input Lbs`,max(`SUM`.`bin_count`) AS `Bin Count Recieved`,sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) AS `Trimmed Flower lbs`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `Reg Flower - A lbs`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`product_size_id` = 'R') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `Reg Flower - B lbs`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`product_size_id` = 'R') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `Reg Flower - C lbs`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `Big Flower - A lbs`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `Small Flower - A lbs`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `Shake lbs`,sum((case when (`td`.`category_type_id` = 'SK-CTP-56d3') then `td`.`quantity` else 0 end)) AS `Trim lbs`,sum((case when ((`td`.`category_type_id` = 'SK-CTP-daf5') and (`td`.`category_id` = 'SK-CTG-a60f')) then `td`.`quantity` else 0 end)) AS `Trimming Waste lbs`,if((sum(`td`.`quantity`) is null),0,(max(`t`.`quantity`) - max(`td`.`quantity`))) AS `Misc Trimming Waste lbs`,(sum((case when ((`td`.`category_type_id` = 'SK-CTP-daf5') and (`td`.`category_id` = 'SK-CTG-a60f')) then `td`.`quantity` else 0 end)) + if((sum(`td`.`quantity`) is null),0,(max(`t`.`quantity`) - sum(`td`.`quantity`)))) AS `Total Trimmed Waste lbs`,((sum(`t`.`quantity`) - sum(`td`.`quantity`)) / sum(`t`.`quantity`)) AS `Trimmed Waste %`,count(`t`.`id`) AS `Trimmed  Flower Bins`,min(`pl`.`process_start`) AS `Process Start`,min(`pl`.`process_stop`) AS `Process Stop`,timediff(min(`pl`.`process_stop`),min(`pl`.`process_start`)) AS `Trimming Duration`,`t`.`action` AS `Process Status`,max(`pl`.`id`) AS `Process Log`,max(`pl`.`process_name`) AS `Record Status`,`t`.`status` AS `Process Queue`,count(`td`.`process_queue_id`) AS `Process Queue Count`,max(`td`.`process_queue_type`) AS `Process Queue Type`,`t`.`note` AS `Notes`,`t`.`created_by` AS `Created By`,`t`.`created_on` AS `Created On`,`t`.`modified_by` AS `Modified By`,max(`t`.`modified_on`) AS `Modified On` from ((((((`trimming_batch` `t` left join `trimming_details` `td` on((`t`.`id` = `td`.`trimming_batch_id`))) left join `trimming_detail_view` `SUM` on((`t`.`id` = `SUM`.`trimming_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `t`.`harvesting_id`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `t`.`strain_id`))) left join `cultivation`.`flowering` `fl` on((`fl`.`id` = `h`.`flowering_id`))) left join `process_log` `pl` on((`pl`.`source_id` = `t`.`id`))) where (`t`.`process_type` = 'T-zero Machine') group by `t`.`id`

-- View: processing.trimming_machine_crop_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_machine_crop_batch_view` AS select `t`.`Flowering ID` AS `Flowering ID`,max(`t`.`Harvesting ID`) AS `Harvesting ID`,max(`t`.`Processing ID`) AS `Processing ID`,min(`t`.`HID`) AS `HID`,count(`t`.`Test ID`) AS `Test Record Count`,max(`t`.`Crop Plant Count`) AS `Crop Plant Count`,max(`t`.`Harvested Plant Count`) AS `Harvested Plant Count`,count(`t`.`Harvesting ID`) AS `Harvest Record Count`,max(`t`.`Strain ID`) AS `Strain ID`,max(`t`.`Plant Strain`) AS `Plant Strain`,max(`t`.`Trimming Type`) AS `Trimming Type`,sum(`t`.`Input Lbs`) AS `Bucked Flower lbs`,sum(`t`.`Bin Count Recieved`) AS `Bin Count Received`,sum(`t`.`Trimmed Flower lbs`) AS `Trimmed Flower lbs`,sum(`t`.`Reg Flower - A lbs`) AS `Reg Flower - A lbs`,sum(`t`.`Reg Flower - B lbs`) AS `Reg Flower - B lbs`,sum(`t`.`Reg Flower - C lbs`) AS `Reg Flower - C lbs`,sum(`t`.`Big Flower - A lbs`) AS `Big Flower - A lbs`,sum(`t`.`Small Flower - A lbs`) AS `Small Flower - A lbs`,sum(`t`.`Shake lbs`) AS `Shake lbs`,sum(`t`.`Trim lbs`) AS `Trim lbs`,sum(`t`.`Trimming Waste lbs`) AS `Waste lbs`,sum(`t`.`Misc Trimming Waste lbs`) AS `Misc Trimming Waste lbs`,sum(`t`.`Total Trimmed Waste lbs`) AS `Total Trimmed Waste lbs`,max(`t`.`Trimmed Waste %`) AS `Trimmed Waste %`,max(`t`.`Created On`) AS `Date Started`,max(`t`.`Trimming Duration`) AS `Trimming Duration`,max(`t`.`Modified By`) AS `Modified By`,max(`t`.`Modified On`) AS `Modified On`,max(`t`.`Process Queue`) AS `Process Action` from `trimming_machine_batch_view` `t` group by `t`.`Flowering ID`

-- View: processing.trimming_machine_harvest_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_machine_harvest_batch_view` AS select `t`.`Harvesting ID` AS `Harvesting ID`,max(`t`.`Processing ID`) AS `Processing ID`,`t`.`HID` AS `HID`,count(`t`.`Test ID`) AS `Test Record Count`,count(`t`.`Flowering ID`) AS `Flowering ID Record Count`,`t`.`Harvested Plant Count` AS `Harvested Plant Count`,max(`t`.`Strain ID`) AS `Strain ID`,max(`t`.`Plant Strain`) AS `Plant Strain`,max(`t`.`Trimming Type`) AS `Trimming Type`,sum(`t`.`Input Lbs`) AS `Bucked Flower lbs`,sum(`t`.`Bin Count Recieved`) AS `Bin Count Received`,sum(`t`.`Trimmed Flower lbs`) AS `Trimmed Flower lbs`,sum(`t`.`Reg Flower - A lbs`) AS `Reg Flower - A lbs`,sum(`t`.`Reg Flower - B lbs`) AS `Reg Flower - B lbs`,sum(`t`.`Reg Flower - C lbs`) AS `Reg Flower - C lbs`,sum(`t`.`Big Flower - A lbs`) AS `Big Flower - A lbs`,sum(`t`.`Small Flower - A lbs`) AS `Small Flower - A lbs`,sum(`t`.`Shake lbs`) AS `Shake lbs`,sum(`t`.`Trim lbs`) AS `Trim lbs`,sum(`t`.`Trimming Waste lbs`) AS `Waste lbs`,sum(`t`.`Misc Trimming Waste lbs`) AS `Misc Trimming Waste lbs`,sum(`t`.`Total Trimmed Waste lbs`) AS `Total Trimmed Waste lbs`,max(`t`.`Trimmed Waste %`) AS `Trimmed Waste %`,max(`t`.`Created On`) AS `Date Started`,max(`t`.`Trimming Duration`) AS `Trimming Duration`,max(`t`.`Modified By`) AS `Modified By`,max(`t`.`Modified On`) AS `Modified On`,max(`t`.`Process Queue`) AS `Process Action` from `trimming_machine_batch_view` `t` group by `t`.`Harvesting ID`

-- View: processing.trimming_machine_prod_flat
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `trimming_machine_prod_flat` AS select max(`td`.`flowering_id`) AS `flowering_id`,min(`td`.`start_date`) AS `start_date`,sum(`td`.`input_quantity`) AS `input_quantity`,sum(`td`.`output_quantity`) AS `output_quantity`,sum(`td`.`trim_output`) AS `trim_output`,sum(`td`.`total_flower_output_quantity`) AS `total_flower_output_quantity`,sum(`td`.`sugar_shake_output`) AS `sugar_shake_output`,sum(`td`.`b_flower_output`) AS `b_flower_output`,sum(`td`.`c_flower_output`) AS `c_flower_output`,sum(`td`.`retrim_a_output`) AS `retrim_a_output`,sum(`td`.`retrim_b_output`) AS `retrim_b_output`,sum(`td`.`retrim_c_output`) AS `retrim_c_output`,sum(`td`.`big_a_flower_output`) AS `big_a_flower_output`,sum(`td`.`reg_a_flower_output`) AS `reg_a_flower_output`,sum(`td`.`sml_a_flower_output`) AS `sml_a_flower_output`,sum(`td`.`medium_a_flower_output`) AS `medium_a_flower_output`,sum(`td`.`micro_a_flower_output`) AS `micro_a_flower_output`,sum(`td`.`waste_output`) AS `waste_output`,(select count(0) from `trimming_machine_prod_flat_all` `sub` where (`sub`.`flowering_id` = `td`.`flowering_id`)) AS `record_count`,max(`td`.`batch_status`) AS `batch_status` from `trimming_machine_prod_flat_all` `td` group by `td`.`flowering_id`

-- View: processing.trimming_machine_prod_flat_all
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `trimming_machine_prod_flat_all` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`bb`.`metrc_tag` AS `metrc_tag`,min(`bb`.`date`) AS `start_date`,(select sum(`bb_sub`.`quantity`) from `trimming_batch` `bb_sub` where ((`bb_sub`.`metrc_tag` = `bb`.`metrc_tag`) and (`bb_sub`.`process_type` = 'T-zero Machine')) group by `bb_sub`.`metrc_tag`) AS `input_quantity`,sum((case when (`td`.`category_id` <> 'SK-CTG-b89a') then `td`.`quantity` else 0 end)) AS `output_quantity`,sum((case when (`td`.`category_type_id` = 'SK-CTP-56d3') then `td`.`quantity` else 0 end)) AS `trim_output`,sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) AS `total_flower_output_quantity`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `sugar_shake_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `c_flower_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'A')) then `td`.`quantity` else 0 end)) AS `retrim_a_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'B')) then `td`.`quantity` else 0 end)) AS `retrim_b_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'C')) then `td`.`quantity` else 0 end)) AS `retrim_c_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `big_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `reg_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `sml_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'M') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `medium_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'MS') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `micro_a_flower_output`,sum((case when (`td`.`category_id` = 'SK-CTG-a60f') then `td`.`quantity` else 0 end)) AS `waste_output`,if((`bb`.`action` = 'Stopped'),'In Progress',`bb`.`action`) AS `batch_status` from ((`trimming_batch` `bb` left join `trimming_details` `td` on((`bb`.`id` = `td`.`trimming_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) where ((`bb`.`process_type` = 'T-zero Machine') and (`h`.`year_num` > 2021)) group by `h`.`flowering_id`,`h`.`id`,`bb`.`metrc_tag`,`h`.`harvest_id`,`bb`.`action`

-- View: processing.trimming_machine_prod_flat_group
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `trimming_machine_prod_flat_group` AS select `td`.`flowering_id` AS `flowering_id`,`td`.`harvesting_id` AS `harvesting_id`,`td`.`harvest_id` AS `harvest_id`,min(`td`.`start_date`) AS `start_date`,sum(`td`.`input_quantity`) AS `input_quantity`,sum(`td`.`output_quantity`) AS `output_quantity`,sum(`td`.`trim_output`) AS `trim_output`,sum(`td`.`total_flower_output_quantity`) AS `total_flower_output_quantity`,sum(`td`.`sugar_shake_output`) AS `sugar_shake_output`,sum(`td`.`b_flower_output`) AS `b_flower_output`,sum(`td`.`c_flower_output`) AS `c_flower_output`,sum(`td`.`retrim_a_output`) AS `retrim_a_output`,sum(`td`.`retrim_b_output`) AS `retrim_b_output`,sum(`td`.`retrim_c_output`) AS `retrim_c_output`,sum(`td`.`big_a_flower_output`) AS `big_a_flower_output`,sum(`td`.`reg_a_flower_output`) AS `reg_a_flower_output`,sum(`td`.`sml_a_flower_output`) AS `sml_a_flower_output`,sum(`td`.`medium_a_flower_output`) AS `medium_a_flower_output`,sum(`td`.`micro_a_flower_output`) AS `micro_a_flower_output`,sum(`td`.`waste_output`) AS `waste_output`,max(`td`.`batch_status`) AS `batch_status` from `trimming_machine_prod_flat_all` `td` group by `td`.`flowering_id`,`td`.`harvesting_id`,`td`.`harvest_id`

-- View: processing.trimming_new_tags_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `trimming_new_tags_view` AS select `t`.`metrc_tag` AS `source_metrc_tag`,`td`.`metrc_tag` AS `metrc_tag`,max(`td`.`trimming_batch_id`) AS `trimming_batch_id`,sum((case when (`td`.`category_type_id` = 'SK-CTP-56d3') then `td`.`quantity` else 0 end)) AS `trim_output`,sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) AS `total_flower_output_quantity`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `sugar_shake_output`,(sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) + sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0))) AS `flower_shake_output_quantity`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `c_flower_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'A')) then `td`.`quantity` else 0 end)) AS `retrim_a_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'B')) then `td`.`quantity` else 0 end)) AS `retrim_b_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'C')) then `td`.`quantity` else 0 end)) AS `retrim_c_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `big_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `reg_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `sml_a_flower_output` from (`trimming_details` `td` left join `trimming_batch` `t` on((`t`.`id` = `td`.`trimming_batch_id`))) where ((cast(`td`.`created_on` as date) >= (curdate() - interval 7 day)) and (`td`.`metrc_tag` is not null) and (`td`.`metrc_tag` <> `t`.`metrc_tag`)) group by `td`.`metrc_tag`,`td`.`trimming_batch_id`

-- View: processing.trimming_prod_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `trimming_prod_view` AS select `h`.`flowering_id` AS `flowering_id`,`bb`.`harvesting_id` AS `harvesting_id`,`bb`.`metrc_tag` AS `metrc_tag`,if((`bb`.`process_type` = 'T-zero Machine'),'Trimming',`bb`.`process_type`) AS `process`,`bb`.`id` AS `batch_id`,`bb`.`date` AS `date`,if(((`bb`.`action` = 'Stopped') or (`bb`.`action` = 'In Progress')),'In Progress',`bb`.`action`) AS `batch_status`,`f`.`flowering_id` AS `flowering_id_name`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,NULL AS `flower_plant_count`,NULL AS `harvest_plant_count`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`cat`.`name` AS `input_category`,`ct`.`name` AS `input_category_type`,NULL AS `input_product_size`,NULL AS `input_product_grade`,max(`bb`.`quantity`) AS `input_quantity`,`cate`.`name` AS `output_category`,`cty`.`name` AS `output_category_type`,`bd`.`product_size_id` AS `output_size`,`bd`.`product_grade_id` AS `output_grade`,sum(`bd`.`quantity`) AS `output_quantity` from ((((((((`trimming_batch` `bb` left join `trimming_details` `bd` on((`bb`.`id` = `bd`.`trimming_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `bb`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `bb`.`category_type_id`))) left join `product_sku`.`category` `cate` on((`cate`.`id` = `bd`.`category_id`))) left join `product_sku`.`category_type` `cty` on((`cty`.`id` = `bd`.`category_type_id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) left join `cultivation`.`flowering` `f` on((`f`.`id` = `h`.`flowering_id`))) group by `bb`.`harvesting_id`,`bb`.`metrc_tag`,`bb`.`process_type`,`h`.`test_id`,`bb`.`action`,`h`.`harvest_id`,`bb`.`date`,`h`.`property_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`cat`.`name`,`ct`.`name`,`bb`.`id`,`h`.`flowering_id`,`bb`.`process_type`,`f`.`flowering_id`,`bd`.`product_size_id`,`bd`.`product_grade_id`,`cate`.`name`,`cty`.`name` order by `bb`.`date` desc,`bb`.`action`

-- View: processing.trimming_records_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_records_view` AS select `t`.`harvesting_id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`t`.`metrc_tag` AS `metrc_tag`,`t`.`processing_batch_source_tag` AS `processing_batch_source_tag`,`strain`.`strain_code` AS `strain_id`,`strain`.`name` AS `strain_name`,`pacstone`.`uom`.`name` AS `uom`,`t`.`quantity` AS `input_quantity`,`td`.`quantity` AS `output_quantity`,`cat`.`name` AS `cat_name`,`t`.`action` AS `process_action` from ((((((`trimming_batch` `t` left join `trimming_details` `td` on((`t`.`id` = `td`.`trimming_batch_id`))) left join `cultivation`.`harvesting_ref` `h` on((`h`.`id` = `t`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `td`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `td`.`category_type_id`))) left join `pacstone`.`uom` on((`pacstone`.`uom`.`id` = `td`.`uom_id`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `t`.`strain_id`))) where ((`t`.`processing_batch_source_tag` = '1A4060300003092000000081') and (`cat`.`name` = 'Flower'))

-- View: processing.trimming_t0_report
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_t0_report` AS select `t`.`metrc_tag` AS `metrc_tag`,`t`.`processing_batch_source_tag` AS `processing_batch_source_tag`,`h`.`id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`date` AS `harvest_date`,`h`.`property_id` AS `property`,`h`.`year_num` AS `harvest_year`,`h`.`week_num` AS `harvest_week`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `year_week`,`strain`.`strain_code` AS `strain_id`,`strain`.`name` AS `strain_name`,`h`.`harvest_type` AS `harvest_type`,(case when (`h`.`harvest_type` = 'Partial') then (select sum(`cultivation`.`harvesting`.`plant_count_harvested`) from `cultivation`.`harvesting` where ((`cultivation`.`harvesting`.`processing_metrc_id` = `t`.`processing_batch_source_tag`) and (`cultivation`.`harvesting`.`harvest_type` = 'Partial'))) else max(`h`.`plant_count_harvested`) end) AS `plant_count`,max(`t`.`date`) AS `t0_date`,max(`t`.`quantity`) AS `input_qty`,`subq`.`output_qty` AS `output_qty`,sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) AS `total_flower_output_quantity`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `big_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `reg_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `sml_a_flower_output`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `sugar_shake_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `c_flower_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'A')) then `td`.`quantity` else 0 end)) AS `retrim_a_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'B')) then `td`.`quantity` else 0 end)) AS `retrim_b_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'C')) then `td`.`quantity` else 0 end)) AS `retrim_c_output`,sum(if((`td`.`category_id` = 'SK-CTG-a60f'),`td`.`quantity`,0)) AS `total_waste_output`,sum((case when (`td`.`category_type_id` = 'SK-CTP-56d3') then `td`.`quantity` else 0 end)) AS `trim_output`,`t`.`action` AS `process_action` from ((((`trimming_batch` `t` left join `trimming_details` `td` on((`t`.`id` = `td`.`trimming_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`processing_metrc_id` = `t`.`processing_batch_source_tag`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `t`.`strain_id`))) left join (select `td2`.`trimming_batch_id` AS `trimming_batch_id`,sum(`td2`.`quantity`) AS `output_qty` from `trimming_details` `td2` group by `td2`.`trimming_batch_id`) `subq` on((`t`.`id` = `subq`.`trimming_batch_id`))) where (((`t`.`process_type` = 'T-zero Machine') and (`t`.`action` = 'Finished')) or ((`t`.`process_type` = 'Hand Trimming') and (`t`.`action` = 'Finished') and exists(select 1 from `trimming_batch` `t2` where ((`t2`.`processing_batch_source_tag` = `t`.`processing_batch_source_tag`) and (`t2`.`process_type` = 'T-zero Machine') and (`t2`.`action` = 'Finished'))) is false)) group by `t`.`metrc_tag`,`t`.`processing_batch_source_tag`,`h`.`id`,`h`.`harvest_id`,`h`.`test_id`,`h`.`date`,`h`.`property_id`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`strain`.`strain_code`,`strain`.`name`,`t`.`action`,`subq`.`output_qty`

-- View: processing.trimming_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_view` AS select `td`.`trimming_batch_id` AS `trimming_batch_id`,max(`td`.`created_on`) AS `trim_INdate`,sum(`td`.`quantity`) AS `total_trimmed_quantity`,count(`td`.`quantity`) AS `bin_count`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B')) then `td`.`quantity` else 0 end)) AS `big_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'R')) then `td`.`quantity` else 0 end)) AS `reg_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S')) then `td`.`quantity` else 0 end)) AS `sml_a_flower_output`,sum((case when ((`td`.`process_queue_type` = 'hand trimming') and (`td`.`product_grade_id` = 'A')) then `td`.`quantity` else 0 end)) AS `retrim_a_output`,sum((case when ((`td`.`process_queue_type` = 'hand trimming') and (`td`.`product_grade_id` = 'B')) then `td`.`quantity` else 0 end)) AS `retrim_b_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`category_type_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`category_type_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`category_type_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `c_flower_output`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `sugar_shake_output`,sum(if((`td`.`category_type_id` = 'SK-CTP-56d3'),`td`.`quantity`,0)) AS `trim_output`,sum(if((`td`.`category_id` = 'SK-CTG-b89a'),`td`.`quantity`,0)) AS `kief_output`,sum(if((`td`.`category_id` = 'SK-CTG-a60f'),`td`.`quantity`,0)) AS `total_waste_output` from (`trimming_details` `td` left join `trimming_batch` `tb` on((`tb`.`id` = `td`.`trimming_batch_id`))) group by `td`.`trimming_batch_id`

-- View: processing.tzero_settings_batch_log
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `tzero_settings_batch_log` AS select `tb`.`harvest_metric_id` AS `Harvest Metrc Tag`,`tb`.`bucked_weight_batch` AS `Bucked Batch Weight`,`tb`.`retrim_batch` AS `Retrim Batch`,`tb`.`machine_operator` AS `Machine Operator`,`tb`.`processing_metrc_id` AS `Processing METRC ID`,`tb`.`qty_bins` AS `Bin Quantity`,`tb`.`batch_weight` AS `Batch Weight`,`tb`.`tzero_retrim_weight` AS `T-Zero Retrim Weight`,`tb`.`lbs_per_hour` AS `lbs per hour`,`tb`.`harvest_id` AS `Harvest ID`,`tb`.`date` AS `Batch Start Date`,`tb`.`week_num` AS `Week Numbers`,`tb`.`time_start` AS `Start Time`,`tb`.`time_end` AS `Finish Time`,`tb`.`time_total` AS `Total Run Time`,`tb`.`tzero_run_number` AS `T-Zero Run Count` from `tzero_batch` `tb` where ((`tb`.`date` >= (curdate() - interval 52 week)) and (`tb`.`tzero_retrim_weight` is null))

-- View: product_sku.active_sku_view
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `active_sku_view` AS select `sku`.`id` AS `id`,concat(`b`.`code`,'-',`c`.`code`,'-',`ps`.`code`,'-',`p`.`code`,'-',`s`.`id`,(case when ((`sku`.`class` = 'Retail') or (`sku`.`class` is null)) then '' when (`sku`.`class` = 'Promo') then ' [xP]' when (`sku`.`class` = 'Sample') then ' [xT]' end),coalesce(`pg`.`code`,'')) AS `sku`,`sku`.`kss_id` AS `KSS ID`,`kss`.`Status` AS `KSS Status`,concat(`b`.`name`,' - ',`c`.`name`,' ',`p`.`name`,' [',`ps`.`code`,'] - ',(case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end),(case when ((`sku`.`class` = 'Retail') or (`sku`.`class` is null)) then '' when (`sku`.`class` = 'Promo') then ' [xP]' when (`sku`.`class` = 'Sample') then ' [xT]' end),coalesce(`pg`.`name`,' ')) AS `SKU Name`,`sku`.`status` AS `Status`,`sku`.`stage` AS `Stage`,`b`.`name` AS `Brand`,`c`.`name` AS `Category`,`p`.`name` AS `Package`,`ps`.`code` AS `Weight`,`ps`.`name` AS `Weight Name`,`pg`.`label` AS `SKU Group`,`pg`.`quantity` AS `SKU Group QTY`,`s`.`strain_code` AS `Strain Code`,`s`.`name` AS `Plant Strain`,`s`.`status` AS `Strain Status`,(case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end) AS `SKU Strain Name`,`s`.`category` AS `Strain Type`,`upc`.`upc_id` AS `UPC`,`sku`.`class` AS `SKU Class` from (((((((((`sku` left join `pacstone`.`brand` `b` on((`sku`.`brand` = `b`.`id`))) left join `category` `c` on((`sku`.`category` = `c`.`id`))) left join `package` `p` on((`sku`.`package` = `p`.`id`))) left join `package_size` `ps` on((`sku`.`package_size` = `ps`.`id`))) left join `pacstone`.`plant_strain` `s` on((`sku`.`plant_strain` = `s`.`id`))) left join `product_combination` `pc` on((`sku`.`product_combination` = `pc`.`id`))) left join `packing_group` `pg` on((`pg`.`id` = `sku`.`packing_group`))) left join `sales`.`kss_sku` `kss` on((`sku`.`kss_id` = `kss`.`id`))) left join `upc` on((`sku`.`upc_base` = `upc`.`id`))) where ((`sku`.`status` = 'Active') and (`pg`.`label` <> 'Each')) order by `b`.`name`,`s`.`name`

-- View: product_sku.kss_sku_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `kss_sku_view` AS select `sku`.`kss_id` AS `kss_id`,`sku`.`id` AS `id`,concat(`b`.`code`,'-',`c`.`code`,'-',`ps`.`code`,'-',`p`.`code`,'-',`s`.`id`,(case when ((`sku`.`class` = 'Retail') or (`sku`.`class` is null)) then '' when (`sku`.`class` = 'Promo') then ' [xP]' when (`sku`.`class` = 'Sample') then ' [xT]' end),coalesce(`pg`.`code`,'')) AS `sku`,concat(`b`.`name`,' - ',`c`.`name`,' ',`p`.`name`,' [',`ps`.`code`,'] - ',(case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end),(case when ((`sku`.`class` = 'Retail') or (`sku`.`class` is null)) then '' when (`sku`.`class` = 'Promo') then ' [xP]' when (`sku`.`class` = 'Sample') then ' [xT]' end),coalesce(`pg`.`name`,' ')) AS `name`,`sku`.`status` AS `status`,`b`.`code` AS `brand_code`,`b`.`name` AS `brand_name`,`c`.`code` AS `category_code`,`c`.`name` AS `category_name`,`p`.`code` AS `package_code`,`p`.`name` AS `package_name`,`pc`.`display_qty` AS `display_qty`,`ps`.`code` AS `package_size_code`,`ps`.`name` AS `package_size_name`,`sku`.`packing_group` AS `packing_group_id`,`pg`.`label` AS `packing_group_label`,`pg`.`quantity` AS `quantity`,`s`.`id` AS `strain_code`,(case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end) AS `strain_name`,`s`.`category` AS `strain_category`,`sku`.`upc` AS `UPC`,`sku`.`class` AS `class`,`sku`.`source_sku` AS `source_sku` from (((((((`sku` left join `pacstone`.`brand` `b` on((`sku`.`brand` = `b`.`id`))) left join `category` `c` on((`sku`.`category` = `c`.`id`))) left join `package` `p` on((`sku`.`package` = `p`.`id`))) left join `package_size` `ps` on((`sku`.`package_size` = `ps`.`id`))) left join `pacstone`.`plant_strain` `s` on((`sku`.`plant_strain` = `s`.`id`))) left join `product_combination` `pc` on((`sku`.`product_combination` = `pc`.`id`))) left join `packing_group` `pg` on((`pg`.`id` = `sku`.`packing_group`)))

-- View: product_sku.packing_sku_view
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `packing_sku_view` AS select `sku`.`id` AS `id`,concat(convert(`b`.`code` using utf8mb4),'-',convert(`s`.`id` using utf8mb4),'-',`c`.`code`,'-',`p`.`code`,'-',`ps`.`code`,(case when ((`sku`.`class` = 'Retail') or (`sku`.`class` is null)) then '' when (`sku`.`class` = 'Promo') then '(P)' when (`sku`.`class` = 'Sample') then '(S)' end)) AS `sku`,concat(convert(`b`.`name` using utf8mb4),' - ',convert((case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end) using utf8mb4),' - ',`c`.`name`,' ',`p`.`name`,' (',`ps`.`name`,')',(case when ((`sku`.`class` = 'Retail') or (`sku`.`class` is null)) then '' when (`sku`.`class` = 'Promo') then ' (Promo)' when (`sku`.`class` = 'Sample') then ' (Sample)' end)) AS `name`,`sku`.`status` AS `status`,`b`.`id` AS `brand_id`,`b`.`code` AS `brand_code`,`b`.`name` AS `brand_name`,`c`.`id` AS `category_id`,`c`.`code` AS `category_code`,`c`.`name` AS `category_name`,`p`.`id` AS `package_id`,`p`.`code` AS `package_code`,`p`.`name` AS `package_name`,`ps`.`id` AS `package_size_id`,`ps`.`code` AS `package_size_code`,`ps`.`name` AS `package_size_name`,`sku`.`packing_group` AS `packing_group_id`,`pg`.`label` AS `packing_group_label`,`s`.`id` AS `strain_code`,(case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end) AS `strain_name`,`s`.`category` AS `strain_category`,`sku`.`kss_id` AS `kss_id`,`sku`.`class` AS `class` from ((((((`sku` left join `pacstone`.`brand` `b` on((`sku`.`brand` = convert(`b`.`id` using utf8mb4)))) left join `category` `c` on((`sku`.`category` = `c`.`id`))) left join `package` `p` on((`sku`.`package` = `p`.`id`))) left join `package_size` `ps` on((`sku`.`package_size` = `ps`.`id`))) left join `packing_group` `pg` on((`sku`.`packing_group` = `pg`.`id`))) left join `pacstone`.`plant_strain` `s` on((`sku`.`plant_strain` = convert(`s`.`id` using utf8mb4)))) where ((`sku`.`status` = 'Active') and (`sku`.`class` = 'Retail'))

-- View: product_sku.parent_sku
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `parent_sku` AS select `s`.`id` AS `id`,`sv`.`sku` AS `sku`,`sv`.`name` AS `name`,`s`.`kss_id` AS `kss_id` from ((`sku` `s` left join `packing_group` `pg` on((`pg`.`id` = `s`.`packing_group`))) left join `sku_view` `sv` on((`sv`.`id` = `s`.`id`))) where ((`pg`.`label` = 'each') and (`s`.`class` = 'retail'))

-- View: product_sku.product_combination_view
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `product_combination_view` AS select `prod`.`id` AS `id`,`prod`.`brand` AS `brand`,`prod`.`category` AS `category`,`prod`.`category_type` AS `category_type`,`prod`.`package` AS `package`,`prod`.`package_size` AS `package_size`,`b`.`name` AS `brand_name`,`c`.`code` AS `category_code`,`c`.`name` AS `category_name`,`ct`.`name` AS `category_type_name`,`p`.`code` AS `package_code`,`p`.`name` AS `package_name`,`ps`.`code` AS `package_size_code`,`ps`.`name` AS `package_size_name`,`prod`.`status` AS `status` from (((((`product_combination` `prod` left join `category` `c` on((`prod`.`category` = `c`.`id`))) left join `pacstone`.`brand` `b` on((`prod`.`brand` = convert(`b`.`id` using utf8mb4)))) left join `category_type` `ct` on((`prod`.`category_type` = convert(`ct`.`id` using utf8mb4)))) left join `package` `p` on((`prod`.`package` = `p`.`id`))) left join `package_size` `ps` on((`prod`.`package_size` = `ps`.`id`)))

-- View: product_sku.sku_detail
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `sku_detail` AS select concat(convert(`columns`.`table_alias` using utf8),'.',`columns`.`column_name`) AS `column_name` from (select 'ps' AS `table_alias`,`COLUMNS`.`COLUMN_NAME` AS `column_name` from `information_schema`.`COLUMNS` where ((`COLUMNS`.`TABLE_SCHEMA` = 'product_sku') and (`COLUMNS`.`TABLE_NAME` = 'sku')) union all select 'kss' AS `table_alias`,`COLUMNS`.`COLUMN_NAME` AS `column_name` from `information_schema`.`COLUMNS` where ((`COLUMNS`.`TABLE_SCHEMA` = 'sales') and (`COLUMNS`.`TABLE_NAME` = 'kss_sku'))) `columns`

-- View: product_sku.sku_pivot_view
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `sku_pivot_view` AS select `sv`.`strain_code` AS `strain_code`,`sv`.`brand_code` AS `brand_code`,max((case when (`sv`.`brand_code` = 'PS') then `ps`.`pacific_stone_label` when (`sv`.`brand_code` = 'TM') then `ps`.`time_machine_label` end)) AS `label`,max((case when ((`sv`.`category_name` = 'Flower') and (`sv`.`package_name` = 'Pouch') and (`sv`.`package_size_name` = '3.5 Grams')) then (case when (`sv`.`status` = 'Inactive') then '☐' when (`sv`.`status` = 'Active') then '✅' end) else NULL end)) AS `Pouch 3.5g`,max((case when ((`sv`.`category_name` = 'Flower') and (`sv`.`package_name` = 'Pouch') and (`sv`.`package_size_name` = '7 Grams')) then (case when (`sv`.`status` = 'Inactive') then '☐' when (`sv`.`status` = 'Active') then '✅' end) else NULL end)) AS `Pouch 7g`,max((case when ((`sv`.`category_name` = 'Flower') and (`sv`.`package_name` = 'Pouch') and (`sv`.`package_size_name` = '14 Grams')) then (case when (`sv`.`status` = 'Inactive') then '☐' when (`sv`.`status` = 'Active') then '✅' end) else NULL end)) AS `Pouch 14g`,max((case when ((`sv`.`category_name` = 'Flower') and (`sv`.`package_name` = 'Pouch') and (`sv`.`package_size_name` = '28 Grams')) then (case when (`sv`.`status` = 'Inactive') then '☐' when (`sv`.`status` = 'Active') then '✅' end) else NULL end)) AS `Pouch 28g`,max((case when ((`sv`.`category_name` = 'Pre-roll') and (`sv`.`package_name` = 'Tube') and (`sv`.`package_size_name` = '1 Grams')) then (case when (`sv`.`status` = 'Inactive') then '☐' when (`sv`.`status` = 'Active') then '✅' end) else NULL end)) AS `Pre-roll 1g`,max((case when ((`sv`.`category_name` = 'Pre-roll') and (`sv`.`package_name` = 'Case') and (`sv`.`package_size_name` = '3.5 Grams')) then (case when (`sv`.`status` = 'Inactive') then '☐' when (`sv`.`status` = 'Active') then '✅' end) else NULL end)) AS `Pre-roll 3.5g`,max((case when ((`sv`.`category_name` = 'Pre-roll') and (`sv`.`package_name` = 'Case') and (`sv`.`package_size_name` = '7 Grams')) then (case when (`sv`.`status` = 'Inactive') then '☐' when (`sv`.`status` = 'Active') then '✅' end) else NULL end)) AS `Pre-roll 7g`,max((case when ((`sv`.`category_name` = 'Pre-roll') and (`sv`.`package_name` = 'Jar') and (`sv`.`package_size_name` = '14 Grams')) then (case when (`sv`.`status` = 'Inactive') then '☐' when (`sv`.`status` = 'Active') then '✅' end) else NULL end)) AS `Pre-roll 14g`,max((case when ((`sv`.`category_name` = 'Flower') and (`sv`.`package_name` = 'Jar') and (`sv`.`package_size_name` = '3.5 Grams')) then (case when (`sv`.`status` = 'Inactive') then '☐' when (`sv`.`status` = 'Active') then '✅' end) else NULL end)) AS `Flower Jar 3.5g`,max((case when ((`sv`.`category_name` = 'Flower') and (`sv`.`package_name` = 'Jar') and (`sv`.`package_size_name` = '7 Grams')) then (case when (`sv`.`status` = 'Inactive') then '☐' when (`sv`.`status` = 'Active') then '✅' end) else NULL end)) AS `Flower Jar 7g`,max((case when ((`sv`.`category_code` = 'RYO') and (`sv`.`package_name` = 'Pouch') and (`sv`.`package_size_name` = '14 Grams')) then (case when (`sv`.`status` = 'Inactive') then '☐' when (`sv`.`status` = 'Active') then '✅' end) else NULL end)) AS `RYO Pouch 14g`,max((case when ((`sv`.`category_code` = 'IPR') and (`sv`.`package_name` = 'Case') and (`sv`.`package_size_name` = '3.5 Grams')) then (case when (`sv`.`status` = 'Inactive') then '☐' when (`sv`.`status` = 'Active') then '✅' end) else NULL end)) AS `IPR Case 3.5g`,max((case when ((`sv`.`category_code` = 'CRS') and (`sv`.`package_name` = 'Cartridge') and (`sv`.`package_size_name` = '1 Grams')) then (case when (`sv`.`status` = 'Inactive') then '☐' when (`sv`.`status` = 'Active') then '✅' end) else NULL end)) AS `CRS Cartridge 1g`,max((case when ((`sv`.`category_code` = 'CRS') and (`sv`.`package_code` = 'DV') and (`sv`.`package_size_name` = '1 Grams')) then (case when (`sv`.`status` = 'Inactive') then '☐' when (`sv`.`status` = 'Active') then '✅' end) else NULL end)) AS `CRS DV 1g` from (`sku_view` `sv` left join `pacstone`.`plant_strain` `ps` on(((`ps`.`id` = `sv`.`strain_code`) and (`ps`.`status` = 'Active')))) group by `sv`.`strain_code`,`sv`.`brand_code` order by `sv`.`strain_code`

-- View: product_sku.sku_view
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `sku_view` AS select `sku`.`id` AS `id`,concat(`b`.`code`,'-',`c`.`code`,'-',`ps`.`code`,'-',`p`.`code`,'-',`s`.`id`,(case when ((`sku`.`class` = 'Retail') or (`sku`.`class` is null)) then '' when (`sku`.`class` = 'Promo') then ' [xP]' when (`sku`.`class` = 'Sample') then ' [xT]' end),coalesce(`pg`.`code`,'')) AS `sku`,`sku`.`kss_id` AS `kss_id`,concat(`b`.`name`,' - ',`c`.`name`,' ',`p`.`name`,' [',`ps`.`code`,'] - ',(case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end),(case when ((`sku`.`class` = 'Retail') or (`sku`.`class` is null)) then '' when (`sku`.`class` = 'Promo') then ' [xP]' when (`sku`.`class` = 'Sample') then ' [xT]' end),coalesce(`pg`.`name`,' ')) AS `name`,`sku`.`status` AS `status`,`b`.`code` AS `brand_code`,`b`.`name` AS `brand_name`,`c`.`code` AS `category_code`,`c`.`name` AS `category_name`,`p`.`code` AS `package_code`,`p`.`name` AS `package_name`,`pc`.`id` AS `product_combination_code`,`pc`.`display_qty` AS `display_qty`,`ps`.`code` AS `package_size_code`,`ps`.`name` AS `package_size_name`,`sku`.`packing_group` AS `packing_group_id`,`pg`.`label` AS `packing_group_label`,`pg`.`quantity` AS `quantity`,`s`.`id` AS `strain_code`,(case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end) AS `strain_name`,`s`.`category` AS `strain_category`,`sku`.`upc` AS `UPC`,`sku`.`class` AS `class`,`sku`.`source_sku` AS `source_sku` from (((((((`sku` left join `pacstone`.`brand` `b` on((`sku`.`brand` = `b`.`id`))) left join `category` `c` on((`sku`.`category` = `c`.`id`))) left join `package` `p` on((`sku`.`package` = `p`.`id`))) left join `package_size` `ps` on((`sku`.`package_size` = `ps`.`id`))) left join `pacstone`.`plant_strain` `s` on((`sku`.`plant_strain` = `s`.`id`))) left join `product_combination` `pc` on((`sku`.`product_combination` = `pc`.`id`))) left join `packing_group` `pg` on((`pg`.`id` = `sku`.`packing_group`)))

-- View: product_sku.sku_view_temp
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sku_view_temp` AS select concat(`b`.`name`,' - ',`c`.`name`,' ',`p`.`name`,' - ',`ps`.`code`,' - ',(case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end),(case when ((`sku`.`class` = 'Retail') or (`sku`.`class` is null)) then '' when (`sku`.`class` = 'Promo') then ' [xP]' when (`sku`.`class` = 'Sample') then ' [xT]' end),coalesce(`pg`.`name`,' ')) AS `SM_name`,`upc`.`SKU` AS `UPC_name`,concat(`kss`.`ProductName`,' - ',`kss`.`Package`) AS `KSS_name`,`sku`.`upc` AS `UPC`,`sku`.`kss_id` AS `kss_id`,`sku`.`id` AS `sku_id` from (((((((((`sku` left join `pacstone`.`brand` `b` on((`sku`.`brand` = `b`.`id`))) left join `category` `c` on((`sku`.`category` = `c`.`id`))) left join `package` `p` on((`sku`.`package` = `p`.`id`))) left join `package_size` `ps` on((`sku`.`package_size` = `ps`.`id`))) left join `pacstone`.`plant_strain` `s` on((`sku`.`plant_strain` = `s`.`id`))) left join `product_combination` `pc` on((`sku`.`product_combination` = `pc`.`id`))) left join `packing_group` `pg` on((`pg`.`id` = `sku`.`packing_group`))) left join `upc` on((`sku`.`upc` = `upc`.`upc_id`))) left join `sales`.`kss_sku` `kss` on((`sku`.`kss_id` = `kss`.`id`)))

-- View: product_sku.sku_view_vs_upc
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `sku_view_vs_upc` AS select `sv`.`id` AS `id`,`sv`.`sku` AS `sku`,`sv`.`kss_id` AS `kss_id`,`sv`.`name` AS `name`,`sv`.`status` AS `status`,`sv`.`brand_code` AS `brand_code`,`sv`.`brand_name` AS `brand_name`,`sv`.`category_code` AS `category_code`,`sv`.`category_name` AS `category_name`,`sv`.`package_code` AS `package_code`,`sv`.`package_name` AS `package_name`,`sv`.`product_combination_code` AS `product_combination_code`,`sv`.`display_qty` AS `display_qty`,`sv`.`package_size_code` AS `package_size_code`,`sv`.`package_size_name` AS `package_size_name`,`sv`.`packing_group_id` AS `packing_group_id`,`sv`.`packing_group_label` AS `packing_group_label`,`sv`.`quantity` AS `quantity`,`sv`.`strain_code` AS `strain_code`,`sv`.`strain_name` AS `strain_name`,`sv`.`strain_category` AS `strain_category`,`sv`.`UPC` AS `UPC`,`sv`.`class` AS `class`,`sv`.`source_sku` AS `source_sku`,`u`.`Brand Name` AS `upc_BrandName`,`u`.`SKU` AS `upc_SKU`,`u`.`description` AS `upc_description`,`u`.`packaging_category` AS `upc_packaging_category`,`u`.`package_size` AS `upc_package_size` from (`sku_view` `sv` join `upc` `u` on((`u`.`upc_id` = `sv`.`UPC`)))

-- View: product_sku.upc_misassigned
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `upc_misassigned` AS select `u`.`id` AS `id`,`u`.`GS1 Company Prefix` AS `GS1 Company Prefix`,`u`.`GTIN-8` AS `GTIN-8`,`u`.`GTIN-12 (U.P.C.)` AS `GTIN-12 (U.P.C.)`,`u`.`GTIN-13 (EAN)` AS `GTIN-13 (EAN)`,`u`.`Product Industry` AS `Product Industry`,`u`.`Packaging Level` AS `Packaging Level`,`u`.`Brand Name` AS `Brand Name`,`u`.`SKU` AS `SKU`,`u`.`Last Modified Date` AS `Last Modified Date`,`u`.`Status Label` AS `Status Label`,`u`.`Is Variable` AS `Is Variable`,`u`.`Is Purchasable` AS `Is Purchasable`,`u`.`Brand 1 Language` AS `Brand 1 Language`,`u`.`Desc 1 Language` AS `Desc 1 Language`,`u`.`Height` AS `Height`,`u`.`Width` AS `Width`,`u`.`Depth` AS `Depth`,`u`.`Dimension Measure` AS `Dimension Measure`,`u`.`Gross Weight` AS `Gross Weight`,`u`.`Net Weight` AS `Net Weight`,`u`.`Weight Measure` AS `Weight Measure`,`u`.`Product Description-Short` AS `Product Description-Short`,`u`.`Label Description` AS `Label Description`,`u`.`Net Content 1 Count` AS `Net Content 1 Count`,`u`.`Net Content 1 Unit of Measure` AS `Net Content 1 Unit of Measure`,`u`.`Net Content 2 Count` AS `Net Content 2 Count`,`u`.`Net Content 2 Unit of Measure` AS `Net Content 2 Unit of Measure`,`u`.`Net Content 3 Count` AS `Net Content 3 Count`,`u`.`Net Content 3 Unit of Measure` AS `Net Content 3 Unit of Measure`,`u`.`Brand Name 2` AS `Brand Name 2`,`u`.`Brand 2 Language` AS `Brand 2 Language`,`u`.`Description 2` AS `Description 2`,`u`.`Desc 2 Language` AS `Desc 2 Language`,`u`.`Global Product Classification` AS `Global Product Classification`,`u`.`Image URL` AS `Image URL`,`u`.`Image URL Validation` AS `Image URL Validation`,`u`.`Target Markets` AS `Target Markets`,`u`.`sku_id` AS `sku_id`,`u`.`upc_check` AS `upc_check`,`u`.`upc_base` AS `upc_base`,`u`.`upc_id` AS `upc_id`,`u`.`description` AS `description`,`u`.`packaging_category` AS `packaging_category`,`u`.`package_size` AS `package_size`,`u`.`type` AS `type` from (`upc` `u` left join `sku` `s` on((`s`.`upc_base` = `u`.`id`))) where ((`u`.`upc_check` is not null) and (`u`.`upc_check` <> '') and (`s`.`id` is null))

-- View: sales.CustomerSalesHistory
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `CustomerSalesHistory` AS with `sku_view` as (select `product_sku`.`sku`.`kss_id` AS `kss_id`,max(`b`.`name`) AS `brand`,max(`c`.`name`) AS `category`,max(`p`.`name`) AS `package`,max(`ps`.`size`) AS `package_size`,max(`product_sku`.`sku`.`class`) AS `class`,max((case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end)) AS `strain`,max(`product_sku`.`sku`.`source_sku`) AS `source_sku` from ((((((`product_sku`.`sku` left join `pacstone`.`brand` `b` on((`product_sku`.`sku`.`brand` = `b`.`id`))) left join `product_sku`.`category` `c` on((`product_sku`.`sku`.`category` = `c`.`id`))) left join `product_sku`.`package` `p` on((`product_sku`.`sku`.`package` = `p`.`id`))) left join `product_sku`.`package_size` `ps` on((`product_sku`.`sku`.`package_size` = `ps`.`id`))) left join `pacstone`.`plant_strain` `s` on((`product_sku`.`sku`.`plant_strain` = `s`.`id`))) left join `product_sku`.`packing_group` `pg` on((`pg`.`id` = `product_sku`.`sku`.`packing_group`))) group by `product_sku`.`sku`.`kss_id`) select `i`.`InvoiceID` AS `Invoice`,`i`.`InvoiceTransID` AS `InvoiceTransID`,`i`.`Date` AS `Date`,`i`.`CustomerID` AS `CustomerID`,`c`.`Company` AS `Company`,`c`.`Chain - Customer` AS `Company Chain`,`i`.`ProductID` AS `ProductID`,regexp_replace(`i`.`ProductNumName`,'^[0-9]{4} ','') AS `ProductName`,`s`.`brand` AS `Brand`,`s`.`strain` AS `Strain`,`s`.`category` AS `Category`,`s`.`package` AS `Package`,`s`.`package_size` AS `Weight`,`s`.`class` AS `Class`,`s`.`source_sku` AS `Parent SKU`,`c`.`Address` AS `Address`,`c`.`City` AS `City`,`c`.`PostalCode` AS `ZipCode`,`c`.`CountyID` AS `County`,`c`.`PrimaryUserID` AS `Buyer`,`c`.`SalesmanUserID` AS `KSS Sales`,`c`.`IndVolume` AS `Volume`,`c`.`EthnicityID` AS `EthnicityID`,`c`.`StateLicenseNum` AS `License`,`c`.`AR Account Limit` AS `AR Limit`,`i`.`Units` AS `Units`,`i`.`FullPrice` AS `FullPrice`,`i`.`Discount` AS `Discount`,`i`.`Participation` AS `Participation`,`i`.`Vol` AS `Total`,`i`.`Status` AS `Invoice Status` from ((`kss_invoice` `i` join `kss_customer` `c` on((`i`.`CustomerID` = `c`.`id`))) left join `sku_view` `s` on((`i`.`ProductID` = `s`.`kss_id`)))

-- View: sales.CustomerSalesHistoryDetail
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `CustomerSalesHistoryDetail` AS with `sku_view` as (select `product_sku`.`sku`.`kss_id` AS `kss_id`,max(`b`.`name`) AS `brand`,max(`c`.`name`) AS `category`,max(`p`.`name`) AS `package`,max(`ps`.`size`) AS `package_size`,max(`product_sku`.`sku`.`class`) AS `class`,if((max(`product_sku`.`sku`.`class`) = 'Retail'),max(`pg`.`quantity`),1) AS `quantity`,max((case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end)) AS `strain`,max(`product_sku`.`sku`.`plant_strain`) AS `strain_code`,max(`product_sku`.`sku`.`source_sku`) AS `source_sku` from ((((((`product_sku`.`sku` left join `pacstone`.`brand` `b` on((`product_sku`.`sku`.`brand` = `b`.`id`))) left join `product_sku`.`category` `c` on((`product_sku`.`sku`.`category` = `c`.`id`))) left join `product_sku`.`package` `p` on((`product_sku`.`sku`.`package` = `p`.`id`))) left join `product_sku`.`package_size` `ps` on((`product_sku`.`sku`.`package_size` = `ps`.`id`))) left join `pacstone`.`plant_strain` `s` on((`product_sku`.`sku`.`plant_strain` = `s`.`id`))) left join `product_sku`.`packing_group` `pg` on((`pg`.`id` = `product_sku`.`sku`.`packing_group`))) group by `product_sku`.`sku`.`kss_id`) select `i`.`InvoiceID` AS `Invoice`,`i`.`InvoiceTransID` AS `InvoiceTransID`,`i`.`Date` AS `Date`,`i`.`CustomerID` AS `CustomerID`,`c`.`Company` AS `Company`,`c`.`Chain - Customer` AS `Company Chain`,`i`.`ProductID` AS `ProductID`,regexp_replace(`i`.`ProductNumName`,'^[0-9]{4} ','') AS `ProductName`,`s`.`brand` AS `Brand`,`s`.`strain` AS `Strain`,`s`.`strain_code` AS `StrainCode`,`s`.`category` AS `Category`,`s`.`package` AS `Package`,`s`.`package_size` AS `Weight`,`s`.`class` AS `Class`,`s`.`quantity` AS `DisplayQty`,`s`.`source_sku` AS `Parent SKU`,`c`.`Address` AS `Address`,`c`.`City` AS `City`,`c`.`PostalCode` AS `ZipCode`,`c`.`CountyID` AS `County`,`c`.`PrimaryUserID` AS `Buyer`,`c`.`SalesmanUserID` AS `KSS Sales`,`c`.`IndVolume` AS `Volume`,`c`.`EthnicityID` AS `EthnicityID`,`c`.`StateLicenseNum` AS `License`,`c`.`AR Account Limit` AS `AR Limit`,((`i`.`Units` * `s`.`package_size`) * 0.035274) AS `TotalOz`,((`i`.`Units` * `s`.`package_size`) * 0.00220462) AS `TotalLbs`,`i`.`Units` AS `Units`,`i`.`FullPrice` AS `FullPrice`,`i`.`Discount` AS `Discount`,`i`.`Participation` AS `Participation`,`i`.`Vol` AS `Total`,`i`.`Status` AS `Invoice Status` from ((`kss_invoice` `i` join `kss_customer` `c` on((`i`.`CustomerID` = `c`.`id`))) left join `sku_view` `s` on((`i`.`ProductID` = `s`.`kss_id`)))

-- View: sales.InvoiceSalesPerYearMonthPerCustomerPerProduct
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `InvoiceSalesPerYearMonthPerCustomerPerProduct` AS select `kc`.`Chain - Customer` AS `Chain - Customer`,max(`kc`.`Company`) AS `Company`,`ki`.`ProductNumName` AS `ProductNumName`,last_day(`ki`.`Date`) AS `YearMonth`,sum(`ki`.`Vol`) AS `TotalSales`,sum(abs(`ki`.`Vol`)) AS `TotalVolActivity` from (`kss_invoice` `ki` left join `kss_customer` `kc` on((`kc`.`id` = `ki`.`CustomerID`))) group by `kc`.`Chain - Customer`,`ki`.`ProductNumName`,last_day(`ki`.`Date`)

-- View: sales.MonthlySalesPerCustomer
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `MonthlySalesPerCustomer` AS select `si`.`Chain - Customer` AS `Chain - Customer`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 7 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 7 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 7 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 7 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 7 month))) then `si`.`ProductNumName` else 0 end)) AS `Unique SKUs 7 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 6 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 6 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 6 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 6 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 6 month))) then `si`.`ProductNumName` else 0 end)) AS `Unique SKUs 6 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 5 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 5 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 5 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 5 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 5 month))) then `si`.`ProductNumName` else 0 end)) AS `Unique SKUs 5 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 4 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 4 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 4 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 4 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 4 month))) then `si`.`ProductNumName` else 0 end)) AS `Unique SKUs 4 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 3 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 3 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 3 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 3 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 3 month))) then `si`.`ProductNumName` else 0 end)) AS `Unique SKUs 3 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 2 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 2 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 2 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 2 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 2 month))) then `si`.`ProductNumName` else 0 end)) AS `Unique SKUs 2 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 1 month))) then `si`.`TotalSales` else 0 end)) AS `Sales Last Month`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 1 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume Last Month`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 1 month))) then `si`.`ProductNumName` else 0 end)) AS `Unique SKUs Last Month`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 0 month))) then `si`.`TotalSales` else 0 end)) AS `Sales This Month`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 0 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume This Month`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 0 month))) then `si`.`ProductNumName` else 0 end)) AS `Unique SKUs This Month` from `InvoiceSalesPerYearMonthPerCustomerPerProduct` `si` group by `si`.`Chain - Customer`

-- View: sales.MonthlySalesPerCustomerPerProduct
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `MonthlySalesPerCustomerPerProduct` AS select `si`.`Chain - Customer` AS `Chain - Customer`,`si`.`ProductNumName` AS `ProductNumName`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 7 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 7 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 7 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 7 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 6 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 6 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 6 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 6 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 5 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 5 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 5 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 5 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 4 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 4 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 4 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 4 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 3 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 3 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 3 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 3 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 2 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 2 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 2 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 2 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 1 month))) then `si`.`TotalSales` else 0 end)) AS `Sales Last Month`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 1 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume Last Month`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 0 month))) then `si`.`TotalSales` else 0 end)) AS `Sales This Month`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 7 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume This Month` from `InvoiceSalesPerYearMonthPerCustomerPerProduct` `si` group by `si`.`Chain - Customer`,`si`.`ProductNumName`

-- View: sales.MonthlySalesPerProduct
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `MonthlySalesPerProduct` AS select `si`.`ProductNumName` AS `ProductNumName`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 7 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 7 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 7 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 7 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 7 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers 7 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 6 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 6 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 6 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 6 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 6 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers 6 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 5 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 5 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 5 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 5 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 5 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers 5 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 4 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 4 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 4 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 4 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 4 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers 4 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 3 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 3 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 3 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 3 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 3 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers 3 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 2 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 2 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 2 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 2 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 2 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers 2 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 1 month))) then `si`.`TotalSales` else 0 end)) AS `Sales Last Month`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 1 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume Last Month`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 1 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers Last Month`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 0 month))) then `si`.`TotalSales` else 0 end)) AS `Sales This Month`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 0 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume This Month`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 0 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers This Month` from `InvoiceSalesPerYearMonthPerCustomerPerProduct` `si` group by `si`.`ProductNumName`

-- View: sales.RecurringCustomers
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `RecurringCustomers` AS select `ki`.`CustomerNumCompany` AS `CustomerNumCompany`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 7 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 6 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 5 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 4 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 3 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 2 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 1 Month Ago` from `kss_invoice` `ki` where (`ki`.`Date` > (curdate() - interval 210 day)) group by `ki`.`CustomerNumCompany` having ((sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then abs(`ki`.`Vol`) else 0 end)) > 0))

-- View: sales.RecurringCustomersLost
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `RecurringCustomersLost` AS select `ki`.`CustomerNumCompany` AS `CustomerNumCompany`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 7 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 6 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 5 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 4 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 3 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 2 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 1 Month Ago` from `kss_invoice` `ki` where (`ki`.`Date` > (curdate() - interval 210 day)) group by `ki`.`CustomerNumCompany` having ((sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then abs(`ki`.`Vol`) else 0 end)) = 0))

-- View: sales.RecurringCustomersProducts
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `RecurringCustomersProducts` AS select `ki`.`CustomerNumCompany` AS `CustomerNumCompany`,`ki`.`ProductNumName` AS `ProductNumName`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then 1 else 0 end)) AS `Invoices 7 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then 1 else 0 end)) AS `Invoices 6 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then 1 else 0 end)) AS `Invoices 5 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then 1 else 0 end)) AS `Invoices 4 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then 1 else 0 end)) AS `Invoices 3 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then 1 else 0 end)) AS `Invoices 2 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then 1 else 0 end)) AS `Invoices 1 Month Ago` from `kss_invoice` `ki` where (`ki`.`Date` > (curdate() - interval 210 day)) group by `ki`.`CustomerNumCompany`,`ki`.`ProductNumName` having ((sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then 1 else 0 end)) > 0))

-- View: sales.RecurringCustomersProductsLost
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `RecurringCustomersProductsLost` AS select `ki`.`CustomerNumCompany` AS `CustomerNumCompany`,`ki`.`ProductNumName` AS `ProductNumName`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then 1 else 0 end)) AS `Invoices 7 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then 1 else 0 end)) AS `Invoices 6 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then 1 else 0 end)) AS `Invoices 5 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then 1 else 0 end)) AS `Invoices 4 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then 1 else 0 end)) AS `Invoices 3 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then 1 else 0 end)) AS `Invoices 2 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then 1 else 0 end)) AS `Invoices 1 Month Ago` from `kss_invoice` `ki` where (`ki`.`Date` > (curdate() - interval 210 day)) group by `ki`.`CustomerNumCompany`,`ki`.`ProductNumName` having ((sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then 1 else 0 end)) = 0))

-- View: sales.RecurringProducts
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `RecurringProducts` AS select `ki`.`ProductNumName` AS `ProductNumName`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then 1 else 0 end)) AS `Invoices 7 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then 1 else 0 end)) AS `Invoices 6 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then 1 else 0 end)) AS `Invoices 5 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then 1 else 0 end)) AS `Invoices 4 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then 1 else 0 end)) AS `Invoices 3 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then 1 else 0 end)) AS `Invoices 2 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then 1 else 0 end)) AS `Invoices 1 Month Ago` from `kss_invoice` `ki` where (`ki`.`Date` > (curdate() - interval 210 day)) group by `ki`.`ProductNumName` having ((sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then 1 else 0 end)) > 0))

-- View: sales.RecurringProductsLost
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `RecurringProductsLost` AS select `ki`.`ProductNumName` AS `ProductNumName`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then 1 else 0 end)) AS `Invoices 7 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then 1 else 0 end)) AS `Invoices 6 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then 1 else 0 end)) AS `Invoices 5 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then 1 else 0 end)) AS `Invoices 4 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then 1 else 0 end)) AS `Invoices 3 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then 1 else 0 end)) AS `Invoices 2 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then 1 else 0 end)) AS `Invoices 1 Month Ago` from `kss_invoice` `ki` where (`ki`.`Date` > (curdate() - interval 210 day)) group by `ki`.`ProductNumName` having ((sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then 1 else 0 end)) = 0))

-- View: sales.SalesPerParentSKU
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `SalesPerParentSKU` AS with `kss_to_parent` as (select `s`.`kss_id` AS `kss_id`,max(`s`.`source_sku`) AS `source_sku` from `product_sku`.`sku` `s` where (`s`.`kss_id` is not null) group by `s`.`kss_id`) select `ki`.`id` AS `id`,`ki`.`Supplier` AS `Supplier`,`ki`.`InvoiceNum` AS `InvoiceNum`,`ki`.`Status` AS `Status`,`ki`.`Date` AS `Date`,`ki`.`ProductNumName` AS `ProductNumName`,`ki`.`CustomerNumCompany` AS `CustomerNumCompany`,`ki`.`PromotionName` AS `PromotionName`,`ki`.`FullPrice` AS `FullPrice`,`ki`.`Discount` AS `Discount`,`ki`.`Vol` AS `Vol`,`ki`.`Participation` AS `Participation`,`ki`.`Units` AS `Units`,`ki`.`InvoiceID` AS `InvoiceID`,`ki`.`InvoiceTransID` AS `InvoiceTransID`,`ki`.`ProductID` AS `ProductID`,`ki`.`CustomerID` AS `CustomerID`,`ki`.`created_on` AS `created_on`,`ki`.`modified_on` AS `modified_on`,`ki`.`is_new` AS `is_new`,`ps`.`sku` AS `sku`,`ps`.`name` AS `name` from ((`kss_invoice` `ki` left join `kss_to_parent` `s` on((`s`.`kss_id` = `ki`.`ProductID`))) left join `product_sku`.`parent_sku` `ps` on((`ps`.`id` = `s`.`source_sku`)))

-- View: sales.active_customer_sku_combinations
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `active_customer_sku_combinations` AS select row_number() OVER (ORDER BY `customer`.`CustomerID`,`sku`.`id` )  AS `id`,`customer`.`CustomerID` AS `company`,`sku`.`id` AS `sku` from (`kss_customer` `customer` join `kss_sku` `sku`) where (`customer`.`AccountStatus` = 'Active')

-- View: sales.doi_inventory
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `doi_inventory` AS select `i`.`id` AS `id`,`i`.`Location` AS `Location`,`sku`.`SupplierID` AS `Brand`,`i`.`ProductID` AS `ProductID`,`sku`.`ProductName` AS `ProductName`,`sv`.`strain_code` AS `strain_id`,`sv`.`strain_name` AS `strain_name`,`i`.`ExpirationDate` AS `ExpirationDate`,`i`.`BatchCode` AS `BatchCode`,`i`.`Inventory` AS `Inventory`,`i`.`BinLotID` AS `BinLotID`,`d`.`UnitsCase` AS `UnitsCase`,`d`.`SalesTrend` AS `SalesTrend`,`d`.`UpcomingOrders` AS `UpcomingOrders`,`d`.`ALAvail` AS `ALAvail`,`d`.`ALDOI` AS `ALDOI`,`d`.`SVAvail` AS `SVAvail`,`d`.`SVDOI` AS `SVDOI`,`d`.`TotalAvailableUnits` AS `TotalAvailableUnits`,`d`.`MonthlySalesUnits` AS `MonthlySalesUnits`,`d`.`SalesHist` AS `SalesHist`,`d`.`KSSDOI` AS `KSSDOI`,`d`.`KSSMonthsofInv` AS `KSSMonthsofInv`,`d`.`TargetDOI` AS `TargetDOI`,`d`.`TargetUnits` AS `TargetUnits`,`d`.`ToBuyorSell` AS `ToBuyorSell`,`sku`.`CaseEquiv` AS `CaseEquiv`,`sku`.`CasePrice` AS `CasePrice`,`sku`.`CasesperLayer` AS `CasesPerLayer`,`sku`.`CasesperPallet` AS `CasesPerPallet`,`sku`.`Ounces` AS `Ounces`,`sku`.`PackageID` AS `PackageID`,`sku`.`Price` AS `Price`,`sku`.`ProductTypeID` AS `ProductTypeID`,`sku`.`Rank` AS `Rank`,`sku`.`SellByCaseOnly` AS `SellByCaseOnly`,`sku`.`ShelfLifeDays` AS `ShelfLifeDays`,`sku`.`Status` AS `Status`,`sku`.`Weight` AS `Weight` from (((`kss_inventory` `i` left join `kss_sku` `sku` on((`i`.`ProductID` = `sku`.`id`))) left join `kss_doi` `d` on((`i`.`ProductID` = `d`.`ProductID`))) left join `product_sku`.`sku_view` `sv` on((`i`.`ProductID` = `sv`.`kss_id`))) where (`i`.`Inventory` > 0.00)

-- View: sales.inventory_sku
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `inventory_sku` AS select `kss_i`.`id` AS `id`,`kss_i`.`Location` AS `Location`,`kss_i`.`ProductID` AS `ProductID`,`kss_i`.`ProductNumName` AS `ProductNumName`,`kss_i`.`BatchCode` AS `BatchCode`,`kss_i`.`Inventory` AS `Inventory`,`kss_i`.`ExpirationDate` AS `Expires`,(to_days(curdate()) - to_days(`kss_i`.`ExpirationDate`)) AS `DaysExpire`,`ps_sku`.`strain_code` AS `strain_id`,`ps_sku`.`strain_name` AS `strain_name`,`ps_sku`.`sku` AS `sku`,`ps_sku`.`name` AS `ps_name`,`ps_sku`.`category_name` AS `ps_category`,`ps_sku`.`package_size_code` AS `package_size`,`ps_sku`.`strain_category` AS `strain_type`,`kss_sku`.`id` AS `Product_ID`,`kss_sku`.`BrandID` AS `BrandID`,`kss_sku`.`ProductName` AS `ProductName`,`kss_sku`.`ProductTypeID` AS `ProductTypeID`,`kss_sku`.`PackageID` AS `PackageID`,`kss_sku`.`SupplierID` AS `SupplierID`,`kss_sku`.`Price` AS `Price`,`kss_sku`.`Class` AS `Class`,`kss_sku`.`Unit Net Weight` AS `Weight`,`kss_sku`.`Status` AS `Status`,`kss_sku`.`WholesaleUnitsperCase` AS `CaseUnits` from ((`kss_inventory` `kss_i` left join `kss_sku` on((`kss_i`.`ProductID` = `kss_sku`.`id`))) left join `product_sku`.`sku_view` `ps_sku` on((`kss_i`.`ProductID` = `ps_sku`.`kss_id`))) where (`kss_i`.`Inventory` > 0.00) order by `ps_sku`.`sku`

-- View: sales.invoice_sku
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `invoice_sku` AS select `i`.`id` AS `id`,`i`.`Supplier` AS `Supplier`,`i`.`InvoiceNum` AS `InvoiceNum`,`i`.`Status` AS `Status`,`i`.`Date` AS `Date`,`i`.`ProductNumName` AS `ProductNumName`,substring_index(`i`.`CustomerNumCompany`,' ',1) AS `CustomerNum`,`c`.`Company` AS `CustomerName`,`i`.`PromotionName` AS `PromotionName`,`i`.`FullPrice` AS `FullPrice`,`i`.`Discount` AS `Discount`,`i`.`Vol` AS `Vol`,`i`.`Participation` AS `Participation`,`i`.`Units` AS `Units`,`sku`.`id` AS `ProductNum`,`sku`.`ProductTypeID` AS `ProductTypeID`,`sv`.`strain_code` AS `strain_id`,`sv`.`strain_name` AS `strain_name`,`sku`.`BrandID` AS `BrandID`,`sku`.`CaseEquiv` AS `CaseEquiv`,`sku`.`CasePrice` AS `CasePrice`,`sku`.`Ounces` AS `Ounces`,`sku`.`PackageID` AS `PackageID`,`sku`.`WholesaleUnitsperCase` AS `sku_case_units`,`sku`.`Weight` AS `Weight`,(`i`.`Units` / `sku`.`WholesaleUnitsperCase`) AS `Cases` from (((`kss_invoice` `i` left join `kss_sku` `sku` on((`i`.`ProductNumName` = `sku`.`ProductNumName`))) left join `product_sku`.`sku_view` `sv` on((`sku`.`id` = `sv`.`kss_id`))) left join `kss_customer` `c` on((substring_index(`i`.`CustomerNumCompany`,' ',1) = `c`.`CustomerID`))) order by `i`.`Date`

-- View: sales.kss_customer_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `kss_customer_view` AS select `kc`.`id` AS `id`,`kc`.`Company` AS `name`,`kc`.`Address` AS `Address`,`kc`.`PostalCode` AS `Zip`,`kc`.`City` AS `City`,'CA' AS `State`,'US' AS `Country`,`kc`.`TerritoryID` AS `Territory`,`kc`.`SalesRepFullName` AS `Representative`,`kc`.`Email` AS `email`,`kc`.`Phone` AS `Phone`,`kc`.`PrimaryUserID` AS `PrimaryUserID`,`kc`.`RouteDayOfWeek` AS `Delviery Day`,`kc`.`AccountStatus` AS `Active`,`kc`.`CustomerAccountType` AS `Tags`,max(`ki`.`Date`) AS `last invoice`,sum(`ki`.`FullPrice`) AS `account` from (`kss_customer` `kc` left join `kss_invoice` `ki` on((`kc`.`id` = `ki`.`CustomerID`))) group by `kc`.`id`

-- View: sales.kss_doi_jsonArray
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `kss_doi_jsonArray` AS select json_array('id','Supplier','Strain','ProductID','ProductName','UnitsCase','SalesTrend','UpcomingOrders','ALAvail','ALDOI','SVAvail','SVDOI','TotalAvailableUnits','SalesHist','MonthlySalesUnits','KSSDOI','KSSMonthsofInv','TargetDOI','TargetUnits','ToBuyorSell','created_on','modified_on') AS `Name_exp_1` union select json_array(`kd`.`id`,`kd`.`Supplier`,`kd`.`Strain`,`kd`.`ProductID`,`kd`.`ProductName`,`kd`.`UnitsCase`,`kd`.`SalesTrend`,`kd`.`UpcomingOrders`,`kd`.`ALAvail`,`kd`.`ALDOI`,`kd`.`SVAvail`,`kd`.`SVDOI`,`kd`.`TotalAvailableUnits`,`kd`.`SalesHist`,`kd`.`MonthlySalesUnits`,`kd`.`KSSDOI`,`kd`.`KSSMonthsofInv`,`kd`.`TargetDOI`,`kd`.`TargetUnits`,`kd`.`ToBuyorSell`,`kd`.`created_on`,`kd`.`modified_on`) AS `Name_exp_2` from `kss_doi` `kd`

-- View: sales.kss_inventory_active
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `kss_inventory_active` AS select `kss_inventory`.`id` AS `id`,`kss_inventory`.`Location` AS `Location`,`kss_inventory`.`ProductNumName` AS `ProductNumName`,`kss_inventory`.`ExpirationDate` AS `ExpirationDate`,`kss_inventory`.`BatchCode` AS `BatchCode`,`kss_inventory`.`Inventory` AS `Inventory`,`kss_inventory`.`BinLotID` AS `BinLotID`,`kss_inventory`.`ProductID` AS `ProductID`,`kss_inventory`.`ReceiveDate` AS `ReceiveDate`,`kss_inventory`.`PalletTag` AS `PalletTag`,`kss_inventory`.`Status` AS `Status` from `kss_inventory` where (`kss_inventory`.`Status` = 'Active')

-- View: sales.kss_inventory_batchcode_inconsistent_expiration
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `kss_inventory_batchcode_inconsistent_expiration` AS select `kss_inventory`.`BatchCode` AS `BatchCode`,max(`kss_inventory`.`ExpirationDate`) AS `MAX(ExpirationDate)`,min(`kss_inventory`.`ExpirationDate`) AS `MIN(ExpirationDate)` from `kss_inventory` group by `kss_inventory`.`BatchCode` having (max(`kss_inventory`.`ExpirationDate`) <> min(`kss_inventory`.`ExpirationDate`))

-- View: sales.kss_inventory_inconsistent_expiration
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `kss_inventory_inconsistent_expiration` AS select `kss_inventory`.`id` AS `id`,`kss_inventory`.`Location` AS `Location`,`kss_inventory`.`ProductNumName` AS `ProductNumName`,`kss_inventory`.`ExpirationDate` AS `ExpirationDate`,`kss_inventory`.`BatchCode` AS `BatchCode`,`kss_inventory`.`Inventory` AS `Inventory`,`kss_inventory`.`BinLotID` AS `BinLotID`,`kss_inventory`.`ProductID` AS `ProductID` from `kss_inventory` where `kss_inventory`.`BatchCode` in (select `kss_inventory_batchcode_inconsistent_expiration`.`BatchCode` from `kss_inventory_batchcode_inconsistent_expiration`) order by `kss_inventory`.`BatchCode`,`kss_inventory`.`ExpirationDate`

-- View: sales.kss_inventory_jsonArray
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `kss_inventory_jsonArray` AS select json_array('id','Location','ProductNumName','ExpirationDate','BatchCode','Inventory','BinLotID','ProductID','ReceiveDate','PalletTag','Status','created_on','modified_on') AS `Name_exp_1` union select json_array(`ki`.`id`,`ki`.`Location`,`ki`.`ProductNumName`,`ki`.`ExpirationDate`,`ki`.`BatchCode`,`ki`.`Inventory`,`ki`.`BinLotID`,`ki`.`ProductID`,`ki`.`ReceiveDate`,`ki`.`PalletTag`,`ki`.`Status`,`ki`.`created_on`,`ki`.`modified_on`) AS `Name_exp_2` from `kss_inventory` `ki`

-- View: sales.kss_inventory_reconcile
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `kss_inventory_reconcile` AS select `kss`.`id` AS `id`,`kss`.`Location` AS `Location`,`kss`.`ProductNumName` AS `ProductNumName`,`kss`.`PalletTag` AS `PalletTag`,`kss`.`ReceiveDate` AS `kss_receive_date`,`kss`.`ExpirationDate` AS `ExpirationDate`,`kss`.`BatchCode` AS `BatchCode`,`kss`.`Inventory` AS `Inventory`,`kss`.`BinLotID` AS `BinLotID`,`kss`.`ProductID` AS `ProductID`,`kss`.`BinLotID` AS `EBinLotID`,`pi`.`packed_date` AS `packed_date`,`od`.`date` AS `shipped_date`,`s`.`test_result_date` AS `test_result_date`,(`s`.`test_result_date` + interval 1 year) AS `test_expiration_date` from ((((`kss_inventory` `kss` left join `transfers`.`order_distributor_item` `odi` on((`kss`.`PalletTag` = `odi`.`metrc_id`))) left join `transfers`.`order_distributor` `od` on((`odi`.`id_order` = `od`.`id`))) left join `packing`.`product_inventory` `pi` on((`pi`.`id` = `odi`.`packing_id`))) left join `lab_testing`.`sample` `s` on((`s`.`lab_sample_id` = `odi`.`sample_id`))) where ((`kss`.`Inventory` > 0) and (`kss`.`PalletTag` is not null))

-- View: sales.kss_sales
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `kss_sales` AS select `kss_invoice`.`InvoiceID` AS `Invoice`,`kss_invoice`.`InvoiceTransID` AS `InvoiceTransID`,`kss_invoice`.`Date` AS `Date`,`kss_invoice`.`Status` AS `Invoice Status`,`kss_invoice`.`CustomerID` AS `CustomerID`,`kss_customer`.`Company` AS `Company`,`kss_customer`.`Chain - Customer` AS `Company Chain`,`kss_invoice`.`ProductID` AS `ProductID`,`kss_sku`.`ProductName` AS `ProductName`,`sku_view`.`brand_name` AS `Brand`,`sku_view`.`strain_name` AS `Strain`,`sku_view`.`category_name` AS `Category`,`sku_view`.`package_name` AS `Package`,`sku_view`.`package_size_code` AS `Weight`,`sku_view`.`class` AS `Class`,`kss_customer`.`Address` AS `Address`,`kss_customer`.`City` AS `City`,`kss_customer`.`PostalCode` AS `ZipCode`,`kss_customer`.`CountyID` AS `County`,`kss_customer`.`PrimaryUserID` AS `Buyer`,`kss_customer`.`SalesmanUserID` AS `KSS Sales`,`kss_customer`.`IndVolume` AS `Volume`,`kss_customer`.`EthnicityID` AS `EthnicityID`,`kss_customer`.`StateLicenseNum` AS `License`,`kss_customer`.`AR Account Limit` AS `AR Limit`,`kss_invoice`.`Units` AS `Units`,`kss_invoice`.`FullPrice` AS `FullPrice`,`kss_invoice`.`Discount` AS `Discount`,`kss_invoice`.`Vol` AS `Total`,`kss_invoice`.`Participation` AS `Participation` from (((`kss_invoice` join `kss_customer` on((`kss_invoice`.`CustomerID` = `kss_customer`.`CustomerID`))) join `kss_sku` on((`kss_invoice`.`ProductID` = `kss_sku`.`ProductID`))) join `product_sku`.`sku_view` on((`kss_invoice`.`ProductID` = `sku_view`.`kss_id`)))

-- View: sales.kss_sales_customer_reps
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `kss_sales_customer_reps` AS select `kss_customer`.`id` AS `id`,`kss_customer`.`CustomerID` AS `CustomerID`,`kss_customer`.`Company` AS `Company`,`kss_customer`.`ChainID` AS `ChainID`,`sales_territory`.`sales_rep_name` AS `sales_rep_name`,`sales_territory`.`sales_rep_id` AS `sales_rep_id`,`kss_customer`.`Phone` AS `Phone`,`kss_customer`.`Email` AS `Email`,`kss_customer`.`CountyID` AS `CountyID`,`kss_customer`.`TerritoryID` AS `TerritoryID`,`kss_customer`.`AccountStatus` AS `AccountStatus`,`kss_customer`.`SalesmanUserID` AS `SalesmanUserID`,`kss_customer`.`Chain - Customer` AS `Chain - Customer`,`kss_customer`.`PrimaryUserID` AS `PrimaryUserID`,`kss_customer`.`Address` AS `Address`,`kss_customer`.`City` AS `City`,`kss_customer`.`PostalCode` AS `PostalCode`,`kss_customer`.`IndVolume` AS `IndVolume`,`kss_customer`.`EthnicityID` AS `EthnicityID`,`kss_customer`.`CustomerAccountType` AS `CustomerAccountType`,`kss_customer`.`CustomerTypeID` AS `CustomerTypeID`,`kss_customer`.`OpenDate` AS `OpenDate`,`kss_customer`.`LocationID` AS `LocationID`,`kss_customer`.`AreaID` AS `AreaID`,`kss_customer`.`JurisdictionID` AS `JurisdictionID`,`kss_customer`.`StateLicenseNum` AS `StateLicenseNum`,`kss_customer`.`AR Account Limit` AS `AR Account Limit`,`kss_customer`.`Distro Accounts Count of Doors` AS `Distro Accounts Count of Doors` from (`kss_customer` left join `sales_territory` on((`kss_customer`.`CountyID` = `sales_territory`.`county`)))

-- View: sales.kss_sku_basic_view
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `kss_sku_basic_view` AS select `kss_sku`.`id` AS `KSS id`,`kss_sku`.`SupplierName` AS `Brand Name`,`kss_sku`.`Brand` AS `BrandStrainPackage`,`kss_sku`.`Package` AS `CaseQTY&PackageSizeType`,`kss_sku`.`ProductType` AS `Category & Size`,`kss_sku`.`ProductName` AS `ProductName`,`kss_sku`.`Class` AS `Class`,`kss_sku`.`WholesaleUnitsperCase` AS `CaseQTY`,`kss_sku`.`Unit Net Weight` AS `UnitWeight`,`kss_sku`.`Status` AS `Status`,`kss_sku`.`UPC` AS `UPC`,`kss_sku`.`Rank` AS `KSS Rank`,`kss_sku`.`Price` AS `Price`,`kss_sku`.`CasePrice` AS `CasePrice`,`kss_sku`.`ProductMasterID` AS `ProductMasterID`,`kss_sku`.`modified_on` AS `modified_on`,`kss_sku`.`UpdatedBy` AS `UpdatedBy`,`kss_sku`.`TimeCreated` AS `TimeCreated`,`kss_sku`.`created_on` AS `created_on` from `kss_sku` order by `kss_sku`.`Brand` desc

-- View: sales.kss_sku_clean
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `kss_sku_clean` AS select `kss_sku`.`id` AS `id`,`kss_sku`.`BrandID` AS `BrandID`,`kss_sku`.`PackageID` AS `PackageID`,`kss_sku`.`ProductID` AS `ProductID`,`kss_sku`.`ProductName` AS `ProductName`,`kss_sku`.`ProductMasterID` AS `ProductMasterID`,`kss_sku`.`Class` AS `Class`,`kss_sku`.`ProductTypeID` AS `ProductTypeID`,`kss_sku`.`WholesaleUnitsperCase` AS `WholesaleUnitsPerCase`,`kss_sku`.`Unit Net Weight` AS `Unit Net Weight`,`kss_sku`.`Status` AS `Status`,`kss_sku`.`SupplierID` AS `SupplierID`,`kss_sku`.`SupplierProductNum` AS `SupplierProductNum`,`kss_sku`.`UPC` AS `UPC`,`kss_sku`.`CasesperPallet` AS `CasesPerPallet`,`kss_sku`.`Price` AS `Price`,`kss_sku`.`CasePrice` AS `CasePrice`,`kss_sku`.`modified_on` AS `modified_on`,`kss_sku`.`UpdatedBy` AS `UpdatedBy`,`kss_sku`.`TimeCreated` AS `TimeCreated`,`kss_sku`.`created_on` AS `created_on` from `kss_sku`

-- View: sales.kss_sku_unreferenced
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `kss_sku_unreferenced` AS select `kss_sku`.`id` AS `id`,`kss_sku`.`BrandID` AS `BrandID`,`kss_sku`.`CaseEquiv` AS `CaseEquiv`,`kss_sku`.`CasePrice` AS `CasePrice`,`kss_sku`.`CasesperLayer` AS `CasesPerLayer`,`kss_sku`.`CasesperPallet` AS `CasesPerPallet`,`kss_sku`.`CaseUPC` AS `CaseUPC`,`kss_sku`.`CodeDateFormat` AS `CodeDateFormat`,`kss_sku`.`CodeDateType` AS `CodeDateType`,`kss_sku`.`CommissionGroupID` AS `CommissionGroupID`,`kss_sku`.`ConsumerImageURL` AS `ConsumerImageURL`,`kss_sku`.`CreatedBy` AS `CreatedBy`,`kss_sku`.`Height` AS `Height`,`kss_sku`.`InSeason` AS `InSeason`,`kss_sku`.`IsTax` AS `IsTax`,`kss_sku`.`Length` AS `Length`,`kss_sku`.`Ounces` AS `Ounces`,`kss_sku`.`PackageDescription` AS `PackageDescription`,`kss_sku`.`PackageID` AS `PackageID`,`kss_sku`.`PickUpByUnits` AS `PickUpByUnits`,`kss_sku`.`Premise` AS `Premise`,`kss_sku`.`Price` AS `Price`,`kss_sku`.`ProductID` AS `ProductID`,`kss_sku`.`ProductImageURL` AS `ProductImageURL`,`kss_sku`.`ProductMasterID` AS `ProductMasterID`,`kss_sku`.`ProductName` AS `ProductName`,`kss_sku`.`ProductNumName` AS `ProductNumName`,`kss_sku`.`ProductTypeID` AS `ProductTypeID`,`kss_sku`.`Rank` AS `Rank`,`kss_sku`.`SalesReportDefault` AS `SalesReportDefault`,`kss_sku`.`SeasonalEndMonthDay` AS `SeasonalEndMonthDay`,`kss_sku`.`SeasonalStartMonthDay` AS `SeasonalStartMonthDay`,`kss_sku`.`SellByCaseOnly` AS `SellByCaseOnly`,`kss_sku`.`ShelfLifeDays` AS `ShelfLifeDays`,`kss_sku`.`StateProductNum` AS `StateProductNum`,`kss_sku`.`Status` AS `Status`,`kss_sku`.`SupplierID` AS `SupplierID`,`kss_sku`.`SupplierProductName` AS `SupplierProductName`,`kss_sku`.`SupplierProductNum` AS `SupplierProductNum`,`kss_sku`.`TimeCreated` AS `TimeCreated`,`kss_sku`.`TimeUpdated` AS `TimeUpdated`,`kss_sku`.`TrackBatchCodes` AS `TrackBatchCodes`,`kss_sku`.`TrackCodeDates` AS `TrackCodeDates`,`kss_sku`.`TrackVintages` AS `TrackVintages`,`kss_sku`.`UnitUPC` AS `UnitUPC`,`kss_sku`.`UPC` AS `UPC`,`kss_sku`.`UpdatedBy` AS `UpdatedBy`,`kss_sku`.`Weight` AS `Weight`,`kss_sku`.`WholesaleUnitsperCase` AS `WholesaleUnitsPerCase`,`kss_sku`.`Width` AS `Width`,`kss_sku`.`Metrc` AS `Metrc`,`kss_sku`.`Unit Net Weight` AS `Unit Net Weight`,`kss_sku`.`Consignment` AS `Consignment`,`kss_sku`.`Supplier ID` AS `Supplier ID`,`kss_sku`.`Class` AS `Class` from `kss_sku` where `kss_sku`.`id` in (select `product_sku`.`sku`.`kss_id` from `product_sku`.`sku`) is false

-- View: sales.kss_sku_view_simple
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `kss_sku_view_simple` AS select `ks`.`id` AS `id`,`ks`.`ProductNumName` AS `ProductNumName`,`ks`.`Status` AS `status`,`ks`.`Class` AS `Class`,`ks`.`PackageID` AS `PackageID`,`ks`.`SupplierID` AS `SupplierID`,`ks`.`SupplierName` AS `SupplierName`,`ks`.`Unit Net Weight` AS `unit_net_weight` from `kss_sku` `ks`

-- View: sales.sales_team
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `sales_team` AS select `pacstone`.`employee`.`employee_id` AS `id`,`pacstone`.`employee`.`id` AS `uid`,`pacstone`.`employee`.`first_name` AS `first_name`,`pacstone`.`employee`.`last_name` AS `last_name`,`pacstone`.`employee`.`full_name` AS `full_name`,`pacstone`.`employee`.`preferred_name` AS `preferred_name`,`pacstone`.`employee`.`account` AS `email`,`pacstone`.`employee`.`status` AS `status`,`pacstone`.`employee`.`primary_org` AS `org`,`pacstone`.`employee`.`position` AS `position` from `pacstone`.`employee` where ((`pacstone`.`employee`.`primary_org` = '30 Sales & Marketing') and (`pacstone`.`employee`.`status` = 'ACTIVE'))

-- View: syncwith.CustomerSalesHistory
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `CustomerSalesHistory` AS with `sku_view` as (select `product_sku`.`sku`.`kss_id` AS `kss_id`,max(`b`.`name`) AS `brand`,max(`c`.`name`) AS `category`,max(`p`.`name`) AS `package`,max(`ps`.`size`) AS `package_size`,max(`product_sku`.`sku`.`class`) AS `class`,max((case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end)) AS `strain`,max(`product_sku`.`sku`.`source_sku`) AS `source_sku` from ((((((`product_sku`.`sku` left join `pacstone`.`brand` `b` on((`product_sku`.`sku`.`brand` = `b`.`id`))) left join `product_sku`.`category` `c` on((`product_sku`.`sku`.`category` = `c`.`id`))) left join `product_sku`.`package` `p` on((`product_sku`.`sku`.`package` = `p`.`id`))) left join `product_sku`.`package_size` `ps` on((`product_sku`.`sku`.`package_size` = `ps`.`id`))) left join `pacstone`.`plant_strain` `s` on((`product_sku`.`sku`.`plant_strain` = `s`.`id`))) left join `product_sku`.`packing_group` `pg` on((`pg`.`id` = `product_sku`.`sku`.`packing_group`))) group by `product_sku`.`sku`.`kss_id`) select `i`.`InvoiceID` AS `Invoice`,`i`.`InvoiceTransID` AS `InvoiceTransID`,`i`.`Date` AS `Date`,`i`.`CustomerID` AS `CustomerID`,`c`.`Company` AS `Company`,`c`.`Chain - Customer` AS `Company Chain`,`i`.`ProductID` AS `ProductID`,regexp_replace(`i`.`ProductNumName`,'^[0-9]{4} ','') AS `ProductName`,`s`.`brand` AS `Brand`,`s`.`strain` AS `Strain`,`s`.`category` AS `Category`,`s`.`package` AS `Package`,`s`.`package_size` AS `Weight`,`s`.`class` AS `Class`,`s`.`source_sku` AS `Parent SKU`,`c`.`Address` AS `Address`,`c`.`City` AS `City`,`c`.`PostalCode` AS `ZipCode`,`c`.`CountyID` AS `County`,`c`.`PrimaryUserID` AS `Buyer`,`c`.`SalesmanUserID` AS `KSS Sales`,`c`.`IndVolume` AS `Volume`,`c`.`EthnicityID` AS `EthnicityID`,`c`.`StateLicenseNum` AS `License`,`c`.`AR Account Limit` AS `AR Limit`,`i`.`Units` AS `Units`,`i`.`FullPrice` AS `FullPrice`,`i`.`Discount` AS `Discount`,`i`.`Participation` AS `Participation`,`i`.`Vol` AS `Total`,`i`.`Status` AS `Invoice Status` from ((`sales`.`kss_invoice` `i` join `sales`.`kss_customer` `c` on((`i`.`CustomerID` = `c`.`id`))) left join `sku_view` `s` on((`i`.`ProductID` = `s`.`kss_id`))) where (`i`.`Date` >= (curdate() - interval 6 month))

-- View: syncwith.CustomerSalesHistoryDetail
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `CustomerSalesHistoryDetail` AS with `sku_view` as (select `product_sku`.`sku`.`kss_id` AS `kss_id`,max(`b`.`name`) AS `brand`,max(`c`.`name`) AS `category`,max(`p`.`name`) AS `package`,max(`ps`.`size`) AS `package_size`,max(`product_sku`.`sku`.`class`) AS `class`,if((max(`product_sku`.`sku`.`class`) = 'Retail'),max(`pg`.`quantity`),1) AS `quantity`,max((case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end)) AS `strain`,max(`product_sku`.`sku`.`plant_strain`) AS `strain_code`,max(`product_sku`.`sku`.`source_sku`) AS `source_sku` from ((((((`product_sku`.`sku` left join `pacstone`.`brand` `b` on((`product_sku`.`sku`.`brand` = `b`.`id`))) left join `product_sku`.`category` `c` on((`product_sku`.`sku`.`category` = `c`.`id`))) left join `product_sku`.`package` `p` on((`product_sku`.`sku`.`package` = `p`.`id`))) left join `product_sku`.`package_size` `ps` on((`product_sku`.`sku`.`package_size` = `ps`.`id`))) left join `pacstone`.`plant_strain` `s` on((`product_sku`.`sku`.`plant_strain` = `s`.`id`))) left join `product_sku`.`packing_group` `pg` on((`pg`.`id` = `product_sku`.`sku`.`packing_group`))) group by `product_sku`.`sku`.`kss_id`) select `i`.`InvoiceID` AS `Invoice`,`i`.`InvoiceTransID` AS `InvoiceTransID`,`i`.`Date` AS `Date`,`i`.`CustomerID` AS `CustomerID`,`c`.`Company` AS `Company`,`c`.`Chain - Customer` AS `Company Chain`,`i`.`ProductID` AS `ProductID`,regexp_replace(`i`.`ProductNumName`,'^[0-9]{4} ','') AS `ProductName`,`s`.`brand` AS `Brand`,`s`.`strain` AS `Strain`,`s`.`strain_code` AS `StrainCode`,`s`.`category` AS `Category`,`s`.`package` AS `Package`,`s`.`package_size` AS `Weight`,`s`.`class` AS `Class`,`s`.`quantity` AS `DisplayQty`,`s`.`source_sku` AS `Parent SKU`,`c`.`Address` AS `Address`,`c`.`City` AS `City`,`c`.`PostalCode` AS `ZipCode`,`c`.`CountyID` AS `County`,`c`.`PrimaryUserID` AS `Buyer`,`c`.`SalesmanUserID` AS `KSS Sales`,`c`.`IndVolume` AS `Volume`,`c`.`EthnicityID` AS `EthnicityID`,`c`.`StateLicenseNum` AS `License`,`c`.`AR Account Limit` AS `AR Limit`,((`i`.`Units` * `s`.`package_size`) * 0.035274) AS `TotalOz`,((`i`.`Units` * `s`.`package_size`) * 0.00220462) AS `TotalLbs`,`i`.`Units` AS `Units`,`i`.`FullPrice` AS `FullPrice`,`i`.`Discount` AS `Discount`,`i`.`Participation` AS `Participation`,`i`.`Vol` AS `Total`,`i`.`Status` AS `Invoice Status` from ((`sales`.`kss_invoice` `i` join `sales`.`kss_customer` `c` on((`i`.`CustomerID` = `c`.`id`))) left join `sku_view` `s` on((`i`.`ProductID` = `s`.`kss_id`))) where (`i`.`Date` >= (curdate() - interval 6 week))

-- View: syncwith.MV_to_CS_Transfers
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `MV_to_CS_Transfers` AS select `tod`.`id_transfer_order` AS `Transfer Order`,`to`.`quantity` AS `Order Item Count`,`to`.`transfer_date` AS `Transfer Date`,`to`.`metrc_manifest_id` AS `METRC Manifest`,`tod`.`inventory_id` AS `Inventory ID`,`tod`.`location_debit` AS `Transfer From`,`tod`.`location_credit` AS `Received By`,`tod`.`metrc_id` AS `METRC Tag`,`tod`.`harvest_id` AS `Harvest ID`,`tod`.`strain_id` AS `Strain ID`,`ps`.`name` AS `Strain Name`,`c`.`name` AS `Category`,`ct`.`name` AS `Category Type`,`tod`.`product_size` AS `Size`,`tod`.`product_grade` AS `Grade`,`tod`.`quantity` AS `Quantity`,`tod`.`note` AS `note`,`tod`.`quantity_accepted` AS `Quantity Accepted`,`tod`.`transfer_status` AS `Transfer Status`,`p`.`sku_priority` AS `SKU Type`,`tod`.`created_on` AS `created_on`,`tod`.`created_by` AS `created_by`,`tod`.`modified_on` AS `modified_on`,`tod`.`modified_by` AS `modified_by`,`tod`.`status` AS `Status` from (((((`transfers`.`transfer_order_detail` `tod` join `processing`.`processing` `p` on((`tod`.`inventory_id` = `p`.`id`))) join `product_sku`.`category` `c` on((`tod`.`product_category` = `c`.`id`))) join `product_sku`.`category_type` `ct` on((`tod`.`product_type` = `ct`.`id`))) join `pacstone`.`plant_strain` `ps` on((`tod`.`strain_id` = `ps`.`id`))) join `transfers`.`transfer_order` `to` on((`tod`.`id_transfer_order` = `to`.`id`))) where ((`tod`.`location_debit` = 'MV') and (`tod`.`location_credit` = 'CS')) order by `tod`.`created_on` desc

-- View: syncwith.MonthlySalesPerCustomerPerProduct
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `MonthlySalesPerCustomerPerProduct` AS select `si`.`Chain - Customer` AS `Chain - Customer`,`si`.`ProductNumName` AS `ProductNumName`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 1 month))) then `si`.`TotalSales` else 0 end)) AS `Sales Last Month`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 1 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume Last Month`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 0 month))) then `si`.`TotalSales` else 0 end)) AS `Sales This Month`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 7 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume This Month` from `sales`.`InvoiceSalesPerYearMonthPerCustomerPerProduct` `si` group by `si`.`Chain - Customer`,`si`.`ProductNumName`

-- View: syncwith.MonthlySalesPerProduct
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `MonthlySalesPerProduct` AS select `si`.`ProductNumName` AS `ProductNumName`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 7 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 7 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 7 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers 7 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 6 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 6 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 6 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers 6 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 5 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 5 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 5 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers 5 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 4 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 4 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 4 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers 4 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 3 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 3 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 3 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers 3 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 2 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 2 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 2 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers 2 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 1 month))) then `si`.`TotalSales` else 0 end)) AS `Sales Last Month`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 1 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers Last Month`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 0 month))) then `si`.`TotalSales` else 0 end)) AS `Sales This Month`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 0 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers This Month` from `sales`.`InvoiceSalesPerYearMonthPerCustomerPerProduct` `si` group by `si`.`ProductNumName`

-- View: syncwith.account
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `account` AS select `role`.`id` AS `id`,`role`.`email` AS `email`,`role`.`employee` AS `employee`,`role`.`user_type` AS `user_type`,`role`.`note` AS `note`,`role`.`status` AS `status`,`role`.`trigger` AS `trigger`,`role`.`flag` AS `flag`,`role`.`created_on` AS `created_on`,`role`.`created_by` AS `created_by`,`role`.`modified_by` AS `modified_by`,`role`.`f1` AS `f1`,`role`.`f2` AS `f2`,`role`.`f3` AS `f3`,`role`.`f4` AS `f4`,`role`.`f5` AS `f5`,`role`.`first_name` AS `first_name`,`role`.`last_name` AS `last_name`,`role`.`employee_id` AS `employee_id`,`role`.`account_type` AS `account_type`,`role`.`mail_groups` AS `mail_groups`,`role`.`is_in_workspace` AS `is_in_workspace`,`role`.`server_ts` AS `server_ts`,`role`.`account_status` AS `account_status`,`role`.`app_status` AS `app_status` from `pacstone`.`account` `role`

-- View: syncwith.active_sku_view
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `active_sku_view` AS select `product_sku`.`sku`.`id` AS `id`,concat(`b`.`code`,'-',`c`.`code`,'-',`ps`.`code`,'-',`p`.`code`,'-',`s`.`id`,(case when ((`product_sku`.`sku`.`class` = 'Retail') or (`product_sku`.`sku`.`class` is null)) then '' when (`product_sku`.`sku`.`class` = 'Promo') then ' [xP]' when (`product_sku`.`sku`.`class` = 'Sample') then ' [xT]' end),coalesce(`pg`.`code`,'')) AS `sku`,`product_sku`.`sku`.`kss_id` AS `KSS ID`,`kss`.`Status` AS `KSS Status`,concat(`b`.`name`,' - ',`c`.`name`,' ',`p`.`name`,' [',`ps`.`code`,'] - ',(case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end),(case when ((`product_sku`.`sku`.`class` = 'Retail') or (`product_sku`.`sku`.`class` is null)) then '' when (`product_sku`.`sku`.`class` = 'Promo') then ' [xP]' when (`product_sku`.`sku`.`class` = 'Sample') then ' [xT]' end),coalesce(`pg`.`name`,' ')) AS `SKU Name`,`product_sku`.`sku`.`status` AS `Status`,`product_sku`.`sku`.`stage` AS `Stage`,`b`.`name` AS `Brand`,`c`.`name` AS `Category`,`p`.`name` AS `Package`,`ps`.`code` AS `Weight`,`ps`.`name` AS `Weight Name`,`pg`.`label` AS `SKU Group`,`pg`.`quantity` AS `SKU Group QTY`,`s`.`strain_code` AS `Strain Code`,`s`.`name` AS `Plant Strain`,`s`.`status` AS `Strain Status`,(case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end) AS `SKU Strain Name`,`s`.`category` AS `Strain Type`,`product_sku`.`sku`.`upc` AS `UPC`,`product_sku`.`sku`.`class` AS `SKU Class` from ((((((((`product_sku`.`sku` left join `pacstone`.`brand` `b` on((`product_sku`.`sku`.`brand` = `b`.`id`))) left join `product_sku`.`category` `c` on((`product_sku`.`sku`.`category` = `c`.`id`))) left join `product_sku`.`package` `p` on((`product_sku`.`sku`.`package` = `p`.`id`))) left join `product_sku`.`package_size` `ps` on((`product_sku`.`sku`.`package_size` = `ps`.`id`))) left join `pacstone`.`plant_strain` `s` on((`product_sku`.`sku`.`plant_strain` = `s`.`id`))) left join `product_sku`.`product_combination` `pc` on((`product_sku`.`sku`.`product_combination` = `pc`.`id`))) left join `product_sku`.`packing_group` `pg` on((`pg`.`id` = `product_sku`.`sku`.`packing_group`))) left join `sales`.`kss_sku` `kss` on((`product_sku`.`sku`.`kss_id` = `kss`.`id`))) where ((`product_sku`.`sku`.`status` = 'Active') and (`pg`.`label` <> 'Each')) order by `b`.`name`,`s`.`name`

-- View: syncwith.active_veg_batch
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `active_veg_batch` AS select `vb`.`metrc_plant_tag` AS `metrc_plant_tag`,`vb`.`plant_count` AS `plant_count`,`b`.`name` AS `batch_name`,`b`.`property_id` AS `property_id`,`b`.`date` AS `date`,`b`.`week` AS `week`,`b`.`year` AS `year`,`b`.`year_week` AS `year_week`,`b`.`license_id` AS `license_id`,`b`.`strain_id` AS `strain_id`,`b`.`test_id` AS `test_id`,`c`.`name` AS `canopy_name`,`vb`.`plant_class` AS `plant_class`,`v`.`location_string` AS `location_string` from (((`cultivation`.`veg_batch` `vb` left join `cultivation`.`veg` `v` on((`v`.`id` = `vb`.`veg_id`))) left join `pacstone`.`batch` `b` on((convert(`b`.`id` using utf8mb4) = `v`.`batch_id`))) left join `pacstone`.`canopy` `c` on((`b`.`location_id` = convert(`c`.`location_id` using utf8mb4)))) where (`vb`.`status` = 'Active') order by `b`.`date` desc

-- View: syncwith.batch_production
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `batch_production` AS select `batch_production`.`flowering_id` AS `flowering_id`,`batch_production`.`harvesting_id` AS `harvesting_id`,`batch_production`.`metrc_tag` AS `metrc_tag`,`batch_production`.`process` AS `process`,`batch_production`.`batch_id` AS `batch_id`,`batch_production`.`date` AS `date`,`batch_production`.`batch_status` AS `batch_status`,`batch_production`.`flowering_id_name` AS `flowering_id_name`,`batch_production`.`harvest_id` AS `harvest_id`,`batch_production`.`test_id` AS `test_id`,`batch_production`.`flowering_crop` AS `flowering_crop`,`batch_production`.`harvest_name` AS `harvest_name`,`batch_production`.`property_id` AS `property_id`,`batch_production`.`harvest_date` AS `harvest_date`,`batch_production`.`harvest_week` AS `harvest_week`,`batch_production`.`harvest_year` AS `harvest_year`,`batch_production`.`harvest_year_week` AS `harvest_year_week`,`batch_production`.`harvest_type` AS `harvest_type`,`batch_production`.`flower_plant_count` AS `flower_plant_count`,`batch_production`.`harvest_plant_count` AS `harvest_plant_count`,`batch_production`.`strain_code` AS `strain_code`,`batch_production`.`strain_name` AS `strain_name`,`batch_production`.`input_category` AS `input_category`,`batch_production`.`input_category_type` AS `input_category_type`,`batch_production`.`input_product_size` AS `input_product_size`,`batch_production`.`input_product_grade` AS `input_product_grade`,`batch_production`.`input_quantity` AS `input_quantity`,`batch_production`.`output_category` AS `output_category`,`batch_production`.`output_category_type` AS `output_category_type`,`batch_production`.`output_size` AS `output_size`,`batch_production`.`output_grade` AS `output_grade`,`batch_production`.`output_quantity` AS `output_quantity` from `processing`.`batch_production` where (`batch_production`.`harvest_date` >= (curdate() - interval 365 day)) order by `batch_production`.`harvest_year_week` desc,`batch_production`.`flowering_crop`

-- View: syncwith.cannabis_license
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `cannabis_license` AS select `cl`.`id` AS `id`,`cl`.`property` AS `property`,`cl`.`category` AS `category`,`cl`.`type` AS `type`,`cl`.`license_term` AS `license_term`,`cl`.`license_designation` AS `license_designation`,`cl`.`business_entity` AS `business_entity`,`cl`.`number` AS `number`,`cl`.`short_number` AS `short_number`,`cl`.`date_start` AS `date_start`,`cl`.`date_end` AS `date_end`,`cl`.`date_renew` AS `date_renew`,`cl`.`license_status` AS `license_status`,`cl`.`apn` AS `apn`,`cl`.`main_premises` AS `main_premises`,`cl`.`file_license` AS `file_license`,`cl`.`purchase_order` AS `purchase_order`,`cl`.`file_po` AS `file_po`,`cl`.`status` AS `status`,`cl`.`license_size` AS `license_size`,`cl`.`created_on` AS `created_on`,`cl`.`created_by` AS `created_by`,`cl`.`modified_on` AS `modified_on`,`cl`.`modified_by` AS `modified_by`,`cl`.`trigger` AS `trigger`,`cl`.`flag` AS `flag`,`cl`.`notes` AS `notes`,`cl`.`f1` AS `f1`,`cl`.`f2` AS `f2`,`cl`.`f3` AS `f3`,`cl`.`f4` AS `f4`,`cl`.`f5` AS `f5` from `pacstone`.`cannabis_license` `cl` where (`cl`.`status` = 'Active')

-- View: syncwith.category
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `category` AS select `c`.`code` AS `category_code`,`c`.`name` AS `category_name`,`ct`.`name` AS `category_type_name`,`ct`.`description` AS `category_type_description`,`c`.`id` AS `Category ID`,`ct`.`id` AS `Category Type ID` from ((`product_sku`.`category` `c` left join `product_sku`.`product_combination` `prod` on((`c`.`id` = `prod`.`category`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `prod`.`category_type`)))

-- View: syncwith.category_type
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `category_type` AS select `ct`.`id` AS `Category Type ID`,`ct`.`name` AS `category_type_name`,`ct`.`description` AS `category_type_description` from `product_sku`.`category_type` `ct`

-- View: syncwith.clone_cutting_view
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `clone_cutting_view` AS select `cultivation`.`clone_cutting`.`id` AS `id`,`cultivation`.`clone_cutting`.`schedule_detail_id` AS `schedule_detail_id`,`cultivation`.`clone_cutting`.`batch_id` AS `batch_id`,`cultivation`.`clone_cutting`.`date` AS `date`,`cultivation`.`clone_cutting`.`location_id` AS `location_id`,`cultivation`.`clone_cutting`.`strain_id` AS `strain_id`,`cultivation`.`clone_cutting`.`metrc_plant_tag` AS `metrc_plant_tag`,`cultivation`.`clone_cutting`.`metrc_package_tag` AS `metrc_package_tag`,`cultivation`.`clone_cutting`.`source_metrc_id` AS `source_metrc_id`,`cultivation`.`clone_cutting`.`quantity` AS `quantity`,`cultivation`.`clone_cutting`.`notes` AS `notes`,`cultivation`.`clone_cutting`.`metrc_item_id` AS `metrc_item_id`,`cultivation`.`clone_cutting`.`metrc_item_name` AS `metrc_item_name`,`cultivation`.`clone_cutting`.`trade_sample` AS `trade_sample`,`cultivation`.`clone_cutting`.`donation` AS `donation`,`cultivation`.`clone_cutting`.`metrc_location` AS `metrc_location`,`cultivation`.`clone_cutting`.`metrc_blank` AS `metrc_blank`,`cultivation`.`clone_cutting`.`metrc_note` AS `metrc_note`,`cultivation`.`clone_cutting`.`status` AS `status`,`cultivation`.`clone_cutting`.`action` AS `action`,`cultivation`.`clone_cutting`.`user` AS `user`,`cultivation`.`clone_cutting`.`created_by` AS `created_by`,`cultivation`.`clone_cutting`.`created_on` AS `created_on`,`cultivation`.`clone_cutting`.`modified_by` AS `modified_by`,`cultivation`.`clone_cutting`.`modified_on` AS `modified_on`,`cultivation`.`clone_cutting`.`flag` AS `flag`,`cultivation`.`clone_cutting`.`trigger` AS `trigger`,`cultivation`.`clone_cutting`.`source_id` AS `source_id`,`cultivation`.`clone_cutting`.`clone_id` AS `clone_id` from `cultivation`.`clone_cutting` order by `cultivation`.`clone_cutting`.`date` desc

-- View: syncwith.clone_inventory
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `clone_inventory` AS select `cl`.`metrc_package_tag` AS `metrc_package_tag`,`cl`.`quantity` AS `quantity`,`b`.`name` AS `batch_name`,`b`.`property_id` AS `property_id`,`b`.`date` AS `date`,`b`.`week` AS `week`,`b`.`year` AS `year`,`b`.`year_week` AS `year_week`,`b`.`license_id` AS `license_id`,`b`.`strain_id` AS `strain_id`,`b`.`test_id` AS `test_id`,`l`.`location_string` AS `location_string`,`cl`.`location_name` AS `room`,`cl`.`hardening_date` AS `hardening_date` from ((`cultivation`.`clones` `cl` left join `pacstone`.`batch` `b` on((convert(`b`.`id` using utf8mb4) = `cl`.`batch_id`))) left join `pacstone`.`location` `l` on((`cl`.`location_id` = convert(`l`.`id` using utf8mb4)))) where (`cl`.`status` = 'Active') order by `b`.`year_week` desc

-- View: syncwith.crop_totals
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `crop_totals` AS with `cte` as (select `cultivation`.`harvesting`.`crop_id` AS `crop_id`,sum(if(regexp_like(`cultivation`.`harvesting`.`harvest_id`,'-M$'),0,`cultivation`.`harvesting`.`plant_count_harvested`)) AS `plant_count_harvested_sum`,sum(if(regexp_like(`cultivation`.`harvesting`.`harvest_id`,'-M$'),0,`cultivation`.`harvesting`.`plant_count_received`)) AS `plant_count_received_sum`,sum(`cultivation`.`harvesting`.`wet`) AS `wet_sum`,sum(`cultivation`.`harvesting`.`waste`) AS `waste_sum`,count(0) AS `harvesting_record_count`,sum(if(regexp_like(`cultivation`.`harvesting`.`harvest_id`,'-M$'),0,1)) AS `harvesting_full_record_count`,sum(if(regexp_like(`cultivation`.`harvesting`.`harvest_id`,'-M$'),1,0)) AS `harvesting_manicure_record_count` from `cultivation`.`harvesting` group by `cultivation`.`harvesting`.`crop_id`) select `c`.`id` AS `crop_id`,`c`.`label` AS `label`,`c`.`strain` AS `strain`,`c`.`harvest_year` AS `harvest_year`,`c`.`harvest_week` AS `harvest_week`,`c`.`harvest_year_week` AS `harvest_year_week`,`c`.`property` AS `property`,`cte`.`plant_count_harvested_sum` AS `plant_count_harvested_sum`,`cte`.`plant_count_received_sum` AS `plant_count_received_sum`,`cte`.`wet_sum` AS `wet_sum`,`cte`.`waste_sum` AS `waste_sum`,`cte`.`harvesting_record_count` AS `harvesting_record_count`,`cte`.`harvesting_full_record_count` AS `harvesting_full_record_count`,`cte`.`harvesting_manicure_record_count` AS `harvesting_manicure_record_count` from (`cultivation`.`crop` `c` join `cte` on((`c`.`id` = `cte`.`crop_id`)))

-- View: syncwith.cultivation_waste
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `cultivation_waste` AS select `cultivation`.`cultivation_waste`.`id` AS `id`,`cultivation`.`cultivation_waste`.`source_id` AS `source_id`,`cultivation`.`cultivation_waste`.`date` AS `date`,`cultivation`.`cultivation_waste`.`metrc_id` AS `metrc_id`,`cultivation`.`cultivation_waste`.`stage_id` AS `stage_id`,`cultivation`.`cultivation_waste`.`source_metrc_id` AS `source_metrc_id`,`cultivation`.`cultivation_waste`.`metrc_item_id` AS `metrc_item_id`,`cultivation`.`cultivation_waste`.`metrc_item_name` AS `metrc_item_name`,`cultivation`.`cultivation_waste`.`waste_method_name` AS `waste_method_name`,`cultivation`.`cultivation_waste`.`mixed_material` AS `mixed_material`,`cultivation`.`cultivation_waste`.`uom` AS `uom`,`cultivation`.`cultivation_waste`.`quantity` AS `quantity`,`cultivation`.`cultivation_waste`.`reason_name` AS `reason_name`,`cultivation`.`cultivation_waste`.`note` AS `note`,`cultivation`.`cultivation_waste`.`status` AS `status`,`cultivation`.`cultivation_waste`.`action` AS `action`,`cultivation`.`cultivation_waste`.`user` AS `user`,`cultivation`.`cultivation_waste`.`created_by` AS `created_by`,`cultivation`.`cultivation_waste`.`created_on` AS `created_on`,`cultivation`.`cultivation_waste`.`modified_by` AS `modified_by`,`cultivation`.`cultivation_waste`.`modified_on` AS `modified_on`,`cultivation`.`cultivation_waste`.`flag` AS `flag`,`cultivation`.`cultivation_waste`.`trigger` AS `trigger`,`cultivation`.`cultivation_waste`.`reason_detail` AS `reason_detail`,`cultivation`.`cultivation_waste`.`clone_id` AS `clone_id`,`cultivation`.`cultivation_waste`.`veg_id` AS `veg_id`,`cultivation`.`cultivation_waste`.`flowering_id` AS `flowering_id`,`cultivation`.`cultivation_waste`.`harvest_id` AS `harvest_id`,`cultivation`.`cultivation_waste`.`batch_id` AS `batch_id`,`cultivation`.`cultivation_waste`.`strain_id` AS `strain_id`,`cultivation`.`cultivation_waste`.`plant_transfer_id` AS `plant_transfer_id` from `cultivation`.`cultivation_waste` where (`cultivation`.`cultivation_waste`.`date` >= (curdate() - interval 60 day)) order by `cultivation`.`cultivation_waste`.`date` desc

-- View: syncwith.dcc_license
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `dcc_license` AS select `sales`.`dcc_license`.`licenseNumber` AS `licenseNumber`,`sales`.`dcc_license`.`licenseType` AS `licenseType`,`sales`.`dcc_license`.`issuedDate` AS `issuedDate`,`sales`.`dcc_license`.`addressLine1` AS `addressLine1`,`sales`.`dcc_license`.`addressLine2` AS `addressLine2`,`sales`.`dcc_license`.`premiseCity` AS `premiseCity`,`sales`.`dcc_license`.`premiseState` AS `premiseState`,`sales`.`dcc_license`.`premiseZip` AS `premiseZip`,`sales`.`dcc_license`.`premiseCounty` AS `premiseCounty`,`sales`.`dcc_license`.`licenseStatus` AS `licenseStatus`,`sales`.`dcc_license`.`businessStructure` AS `businessStructure`,`sales`.`dcc_license`.`medicinal` AS `medicinal`,`sales`.`dcc_license`.`adultUse` AS `adultUse`,`sales`.`dcc_license`.`microActivityRetailerNonStorefront` AS `microActivityRetailerNonStorefront`,`sales`.`dcc_license`.`microActivityRetailer` AS `microActivityRetailer`,`sales`.`dcc_license`.`microActivityDistributor` AS `microActivityDistributor`,`sales`.`dcc_license`.`microActivityDistributorTransportOnly` AS `microActivityDistributorTransportOnly`,`sales`.`dcc_license`.`microActivityLevel1Manufacturer` AS `microActivityLevel1Manufacturer`,`sales`.`dcc_license`.`microActivityCultivator` AS `microActivityCultivator`,`sales`.`dcc_license`.`expiryDate` AS `expiryDate`,`sales`.`dcc_license`.`businessName` AS `businessName`,`sales`.`dcc_license`.`businessDBA` AS `businessDBA`,`sales`.`dcc_license`.`businessOwner` AS `businessOwner`,`sales`.`dcc_license`.`website` AS `website`,`sales`.`dcc_license`.`phone` AS `phone`,`sales`.`dcc_license`.`email` AS `email` from `sales`.`dcc_license`

-- View: syncwith.distributor_order_items
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `distributor_order_items` AS select `di`.`id` AS `id`,`od`.`uid` AS `order_id`,`sku`.`sku` AS `sku_id`,`sku`.`name` AS `sku_name`,`sku`.`kss_id` AS `kss_id`,`di`.`strain_id` AS `strain_id`,`b`.`name` AS `brand`,`cat`.`name` AS `product_category`,`ct`.`name` AS `product_type`,`p`.`name` AS `package`,`ps`.`code` AS `package_size`,`pacstone`.`uom`.`name` AS `uom`,`di`.`quantity` AS `quantity`,`di`.`thc_result` AS `thc_label`,`di`.`product_batch_number` AS `product_batch_number`,`di`.`metrc_id` AS `metrc_id`,`pi`.`source_metrc_id` AS `source_metrc_id`,`od`.`location_id` AS `location_id`,`c`.`name` AS `vendor_name`,`od`.`ship_date` AS `ship_date`,`od`.`metrc_manifest` AS `metrc_manifest`,`od`.`action` AS `order_status` from (((((((((((`transfers`.`order_distributor_item` `di` left join `transfers`.`order_distributor` `od` on((`di`.`id_order` = `od`.`id`))) left join `crm`.`company_org` `c` on((`od`.`vendor_id` = convert(`c`.`id` using utf8mb4)))) left join `product_sku`.`sku_view` `sku` on((`di`.`product_sku` = `sku`.`id`))) left join `product_sku`.`category` `cat` on((`di`.`product_category` = `cat`.`id`))) left join `product_sku`.`category_type` `ct` on((`di`.`product_type` = convert(`ct`.`id` using utf8mb4)))) left join `product_sku`.`package` `p` on((`di`.`package_id` = `p`.`id`))) left join `product_sku`.`package_size` `ps` on((`di`.`package_weight` = `ps`.`id`))) left join `pacstone`.`brand` `b` on((`di`.`brand` = convert(`b`.`id` using utf8mb4)))) left join `pacstone`.`uom` on((`di`.`uom_id` = convert(`pacstone`.`uom`.`id` using utf8mb4)))) left join `packing`.`product_inventory` `pi` on((`di`.`packing_id` = `pi`.`id`))) left join `cultivation`.`harvesting_ref` `h` on((`di`.`harvest_id` = `h`.`id`))) where ((`od`.`action` <> 'Deleted') and (`di`.`action` <> 'Deleted'))

-- View: syncwith.doi_inventory
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `doi_inventory` AS select `i`.`id` AS `id`,`i`.`Location` AS `Location`,`sku`.`SupplierID` AS `Brand`,`i`.`ProductID` AS `ProductID`,`sku`.`ProductName` AS `ProductName`,`sv`.`strain_code` AS `strain_id`,`sv`.`strain_name` AS `strain_name`,`i`.`ExpirationDate` AS `ExpirationDate`,`i`.`BatchCode` AS `BatchCode`,`i`.`Inventory` AS `Inventory`,`i`.`BinLotID` AS `BinLotID`,`d`.`UnitsCase` AS `UnitsCase`,`d`.`SalesTrend` AS `SalesTrend`,`d`.`UpcomingOrders` AS `UpcomingOrders`,`d`.`ALAvail` AS `ALAvail`,`d`.`ALDOI` AS `ALDOI`,`d`.`SVAvail` AS `SVAvail`,`d`.`SVDOI` AS `SVDOI`,`d`.`TotalAvailableUnits` AS `TotalAvailableUnits`,`d`.`MonthlySalesUnits` AS `MonthlySalesUnits`,`d`.`SalesHist` AS `SalesHist`,`d`.`KSSDOI` AS `KSSDOI`,`d`.`KSSMonthsofInv` AS `KSSMonthsofInv`,`d`.`TargetDOI` AS `TargetDOI`,`d`.`TargetUnits` AS `TargetUnits`,`d`.`ToBuyorSell` AS `ToBuyorSell`,`sku`.`CaseEquiv` AS `CaseEquiv`,`sku`.`CasePrice` AS `CasePrice`,`sku`.`CasesperLayer` AS `CasesPerLayer`,`sku`.`CasesperPallet` AS `CasesPerPallet`,`sku`.`Ounces` AS `Ounces`,`sku`.`PackageID` AS `PackageID`,`sku`.`Price` AS `Price`,`sku`.`ProductTypeID` AS `ProductTypeID`,`sku`.`Rank` AS `Rank`,`sku`.`SellByCaseOnly` AS `SellByCaseOnly`,`sku`.`ShelfLifeDays` AS `ShelfLifeDays`,`sku`.`Status` AS `Status`,`sku`.`Weight` AS `Weight` from (((`sales`.`kss_inventory` `i` left join `sales`.`kss_sku` `sku` on((`i`.`ProductID` = `sku`.`id`))) left join `sales`.`kss_doi` `d` on((`i`.`ProductID` = `d`.`ProductID`))) left join `product_sku`.`sku_view` `sv` on((`i`.`ProductID` = `sv`.`kss_id`))) where ((`i`.`Inventory` > 0.00) and (`sv`.`packing_group_label` <> 'Each')) order by `d`.`KSSDOI`

-- View: syncwith.employee
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `employee` AS select `ploy`.`first_name` AS `First Name`,`ploy`.`last_name` AS `last name`,`ploy`.`employee_id` AS `Employee ID`,`role`.`email` AS `Email Account`,`ploy`.`primary_property` AS `Organization`,left(`ploy`.`primary_org`,locate(' ',`ploy`.`primary_org`)) AS `Department Number`,right(`ploy`.`primary_org`,(length(`ploy`.`primary_org`) - locate(' ',`ploy`.`primary_org`))) AS `Department`,`ploy`.`position` AS `Position`,`ploy`.`supervisor` AS `Supervisor`,if((`ploy`.`phone` is null),`ploy`.`mobile_phone`,`ploy`.`phone`) AS `Phone Number` from (`pacstone`.`employee` `ploy` left join `pacstone`.`account` `role` on((`ploy`.`id` = `role`.`employee`))) where (`ploy`.`status` = 'ACTIVE')

-- View: syncwith.flower_historical_records
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `flower_historical_records` AS select `f`.`flowering_id` AS `flowering_id`,`c`.`name` AS `canopy`,`c`.`location_string` AS `location_string`,`f`.`property_id` AS `property_id`,`f`.`test_id` AS `test_id`,`f`.`date` AS `date`,`f`.`week_num` AS `week_num`,`f`.`year_num` AS `year_num`,`f`.`license_id` AS `license_id`,`f`.`strain_id` AS `strain_id`,`f`.`location_3` AS `location_3`,`f`.`location_5` AS `location_5`,`f`.`plant_count` AS `plant_count`,`f`.`harvest_date` AS `harvest_date`,`f`.`harvest_id` AS `harvest_id`,`f`.`status` AS `status` from (`cultivation`.`flowering` `f` left join `pacstone`.`canopy` `c` on((`f`.`canopy_id` = convert(`c`.`id` using utf8mb4)))) where (year(`f`.`date`) > 2020)

-- View: syncwith.flower_inventory
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `flower_inventory` AS select `f`.`flowering_id` AS `flowering_id`,`f`.`canopy_id` AS `canopy_id`,`f`.`property_id` AS `property_id`,`f`.`test_id` AS `test_id`,`f`.`date` AS `Planted Date`,`f`.`week_num` AS `week_num`,`f`.`year_num` AS `year_num`,`f`.`license_id` AS `license_id`,`f`.`strain_id` AS `strain_id`,`ps`.`strain_code` AS `Strain Code`,`ps`.`name` AS `Strain Name`,`f`.`location_3` AS `location_3`,`f`.`location_5` AS `location_5`,`f`.`plant_count` AS `plant_count`,`f`.`harvest_date` AS `harvest_date`,week(`f`.`harvest_date`,0) AS `harvest_week`,`f`.`harvest_id` AS `harvest_id`,`f`.`status` AS `status` from (`cultivation`.`flowering` `f` left join `pacstone`.`plant_strain` `ps` on((`f`.`strain_id` = `ps`.`id`))) where ((`f`.`status` = 'Active') and ((`f`.`harvest_date` > now()) or (`f`.`harvest_date` is null))) order by `f`.`date` desc,`ps`.`strain_code`

-- View: syncwith.flower_schedule
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `flower_schedule` AS select `f`.`flowering_id` AS `flowering_id`,`f`.`canopy_id` AS `canopy_id`,`f`.`property_id` AS `property_id`,`f`.`test_id` AS `test_id`,`f`.`date` AS `date`,`f`.`week_num` AS `week_num`,`f`.`year_num` AS `year_num`,`f`.`license_id` AS `license_id`,`f`.`strain_id` AS `strain_id`,`f`.`location_3` AS `location_3`,`f`.`location_5` AS `location_5`,`f`.`plant_count` AS `plant_count`,`f`.`harvest_date` AS `harvest_date`,week(`f`.`harvest_date`,0) AS `harvest_week`,`f`.`harvest_id` AS `harvest_id`,`f`.`status` AS `status` from `cultivation`.`flowering` `f` where (((year(`f`.`date`) > 2021) and (`f`.`harvest_date` > now())) or (`f`.`harvest_date` is null)) order by `f`.`date` desc

-- View: syncwith.flower_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `flower_view` AS select `f`.`flowering_id` AS `flowering_id`,`c`.`name` AS `canopy`,`c`.`location_string` AS `location_string`,`f`.`property_id` AS `property_id`,`f`.`test_id` AS `test_id`,`f`.`date` AS `date`,`f`.`week_num` AS `week_num`,`f`.`year_num` AS `year_num`,`f`.`license_id` AS `license_id`,`f`.`strain_id` AS `strain_id`,`f`.`location_3` AS `location_3`,`f`.`location_5` AS `location_5`,`f`.`plant_count` AS `plant_count`,`f`.`harvest_date` AS `harvest_date`,`f`.`harvest_id` AS `harvest_id`,`f`.`status` AS `status` from (`cultivation`.`flowering` `f` left join `pacstone`.`canopy` `c` on((`f`.`canopy_id` = convert(`c`.`id` using utf8mb4)))) where ((year(`f`.`date`) > 2019) and (`f`.`status` = 'Active'))

-- View: syncwith.harvest_metrc_packages
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `harvest_metrc_packages` AS select `cultivation`.`harvest_metrc_packages`.`id` AS `id`,`cultivation`.`harvest_metrc_packages`.`harvesting_id` AS `harvesting_id`,`cultivation`.`harvest_metrc_packages`.`metrc_id` AS `metrc_id`,`cultivation`.`harvest_metrc_packages`.`weight` AS `weight`,`cultivation`.`harvest_metrc_packages`.`bin_quantity` AS `bin_quantity`,`cultivation`.`harvest_metrc_packages`.`notes` AS `notes`,`cultivation`.`harvest_metrc_packages`.`status` AS `status`,`cultivation`.`harvest_metrc_packages`.`action` AS `action`,`cultivation`.`harvest_metrc_packages`.`created_on` AS `created_on`,`cultivation`.`harvest_metrc_packages`.`created_by` AS `created_by`,`cultivation`.`harvest_metrc_packages`.`modified_on` AS `modified_on`,`cultivation`.`harvest_metrc_packages`.`modified_by` AS `modified_by`,`cultivation`.`harvest_metrc_packages`.`flag` AS `flag`,`cultivation`.`harvest_metrc_packages`.`trigger` AS `trigger`,`cultivation`.`harvest_metrc_packages`.`plant_count_harvested` AS `plant_count_harvested` from `cultivation`.`harvest_metrc_packages`

-- View: syncwith.harvest_prod_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `harvest_prod_view` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`id` AS `harvesting_id`,`h`.`processing_metrc_id` AS `metrc_tag`,'Harvest' AS `process`,`h`.`id` AS `batch_id`,`h`.`date` AS `date`,'Finished' AS `batch_status`,`f`.`flowering_id` AS `flowering_id_name`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,`h`.`license_id` AS `license_id`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,'Fresh Cannabis Plant' AS `category`,if(((`h`.`harvest_type` = 'Manicure') or (`h`.`harvest_type` = 'Fresh Frozen')),'Buds','Plants') AS `category_type`,NULL AS `product_size`,NULL AS `product_grade`,if(((`h`.`harvest_type` = 'Manicure') or (`h`.`harvest_type` = 'Fresh Frozen')),NULL,sum(`f`.`plant_count`)) AS `flower_plant_count`,if(((`h`.`harvest_type` = 'Manicure') or (`h`.`harvest_type` = 'Fresh Frozen')),NULL,sum(`h`.`plant_count_harvested`)) AS `harvest_plant_count`,NULL AS `input_quantity`,sum(`h`.`wet`) AS `output_quantity` from ((`cultivation`.`harvesting` `h` left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) left join `cultivation`.`flowering` `f` on((`f`.`id` = `h`.`flowering_id`))) where (`h`.`wet` > 0) group by `h`.`id`,`h`.`processing_metrc_id`,`h`.`test_id`,`h`.`harvest_id`,`h`.`date`,`h`.`property_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`h`.`id`,`h`.`flowering_id`,`f`.`flowering_id` order by `h`.`date`

-- View: syncwith.harvest_schedule
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `harvest_schedule` AS select `f`.`flowering_id` AS `flowering_id`,`f`.`canopy_id` AS `canopy_id`,`f`.`property_id` AS `Property`,`f`.`location_3` AS `House`,`f`.`location_5` AS `Valve`,`f`.`license_id` AS `License`,`f`.`strain_id` AS `strain_id`,`ps`.`strain_code` AS `Strain Code`,`ps`.`name` AS `Strain Name`,`f`.`plant_count` AS `Plant Qty`,`f`.`test_id` AS `Test ID`,`f`.`date` AS `Planted Date`,`f`.`year_num` AS `Year Planted`,`f`.`week_num` AS `Week Planted`,`f`.`harvest_date` AS `Harvest Date`,week(`f`.`harvest_date`,3) AS `Harvest Week`,`f`.`harvest_id` AS `harvest_id`,`f`.`status` AS `Status`,`f`.`action` AS `Crop Stage` from (`cultivation`.`flowering` `f` left join `pacstone`.`plant_strain` `ps` on((`f`.`strain_id` = `ps`.`id`))) where ((`f`.`status` = 'Active') and (week(`f`.`harvest_date`,3) >= week(now(),3))) order by `f`.`harvest_date`,`ps`.`strain_code`

-- View: syncwith.harvest_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `harvest_view` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`property_id` AS `property_id`,`h`.`test_id` AS `test_id`,`h`.`date` AS `date`,`h`.`week_num` AS `week_num`,`h`.`year_num` AS `year_num`,`h`.`license_id` AS `license_id`,`h`.`strain_id` AS `strain_id`,`h`.`plant_count_harvested` AS `plant_count_harvested`,`h`.`plant_count_received` AS `plant_count_received`,`h`.`wet` AS `wet`,`h`.`waste` AS `waste`,`h`.`harvest_metrc_id` AS `harvest_metrc_id`,`h`.`processing_metrc_id` AS `processing_metrc_id`,`h`.`metrc_harvest_name` AS `metrc_name`,`f`.`plant_count` AS `planted_count` from (`cultivation`.`harvesting` `h` left join `cultivation`.`flowering` `f` on((`h`.`flowering_id` = `f`.`id`))) where (year(`h`.`date`) > 2019)

-- View: syncwith.harvest_view_test
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `harvest_view_test` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`property_id` AS `property_id`,`h`.`test_id` AS `test_id`,`h`.`date` AS `date`,`h`.`week_num` AS `week_num`,`h`.`year_num` AS `year_num`,`h`.`license_id` AS `license_id`,`h`.`strain_id` AS `strain_id`,`h`.`plant_count_harvested` AS `plant_count_harvested`,`h`.`plant_count_received` AS `plant_count_received`,`h`.`wet` AS `wet`,`h`.`waste` AS `waste`,`h`.`harvest_metrc_id` AS `harvest_metrc_id`,`h`.`processing_metrc_id` AS `processing_metrc_id`,`h`.`metrc_harvest_name` AS `metrc_name`,`f`.`plant_count` AS `planted_count` from (`cultivation`.`harvesting` `h` left join `cultivation`.`flowering` `f` on((`h`.`flowering_id` = `f`.`id`))) where (year(`h`.`date`) >= (curdate() - interval 365 day)) order by `h`.`date` desc

-- View: syncwith.harvest_view_year
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `harvest_view_year` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`property_id` AS `property_id`,`h`.`test_id` AS `test_id`,`h`.`date` AS `date`,`h`.`week_num` AS `week_num`,`h`.`year_num` AS `year_num`,`h`.`license_id` AS `license_id`,`h`.`strain_id` AS `strain_id`,`h`.`plant_count_harvested` AS `plant_count_harvested`,`h`.`plant_count_received` AS `plant_count_received`,`h`.`wet` AS `wet`,`h`.`waste` AS `waste`,`h`.`harvest_metrc_id` AS `harvest_metrc_id`,`h`.`processing_metrc_id` AS `processing_metrc_id`,`h`.`metrc_harvest_name` AS `metrc_name`,`f`.`plant_count` AS `planted_count` from (`cultivation`.`harvesting` `h` left join `cultivation`.`flowering` `f` on((`h`.`flowering_id` = `f`.`id`))) where (`h`.`date` >= (curdate() - interval 365 day)) order by `h`.`date` desc

-- View: syncwith.iap_view
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `iap_view` AS select `item`.`name` AS `Item`,`item`.`version` AS `version`,sum(if((`ial`.`location` = 'prop02'),`ial`.`qty_base`,0)) AS `EB_inventory`,sum(if((`ial`.`location` = 'prop01'),`ial`.`qty_base`,0)) AS `CS_inventory`,sum(if((`ial`.`location` = '124e6f02'),`ial`.`qty_base`,0)) AS `DR_inventory`,sum(if((`ial`.`location` = 'prop10'),`ial`.`qty_base`,0)) AS `IV_inventory`,sum(if((`ial`.`location` = 'prop03'),`ial`.`qty_base`,0)) AS `MV_inventory`,sum(if((`ial`.`location` = 'prop04'),`ial`.`qty_base`,0)) AS `SP_inventory`,sum(if((`ial`.`location` = 'invVendor'),`ial`.`qty_base`,0)) AS `Vendor_inventory`,sum(if((`ial`.`location` = 'invVehicle'),`ial`.`qty_base`,0)) AS `Intransit_inventory`,(sum(if((`ial`.`location` in ('prop02','prop01','124e6f02','prop10','prop03','prop04','invVehicle')),`ial`.`qty_base`,0)) + sum(if((`ial`.`location` = 'invVendor'),`ial`.`qty_base`,0))) AS `total_Inventory`,max(`item`.`cat1`) AS `cat1`,max(`item`.`cat2`) AS `cat2`,max(`item`.`cat3`) AS `cat3`,max(`item`.`cat4`) AS `cat4`,max(`item`.`cat5`) AS `cat5`,max(`item`.`cat6`) AS `cat6`,max(`item`.`cat7`) AS `cat7`,`item`.`id` AS `item_id` from (`pacstone_inventory`.`inventory_item` `item` left join `pacstone_inventory`.`inventory_at_location` `ial` on((`item`.`id` = `ial`.`inventory_item`))) group by `item`.`id` order by `item`.`name`

-- View: syncwith.iap_view_office_supplies
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `iap_view_office_supplies` AS select `item`.`id` AS `ID`,`item`.`name` AS `Item`,`item`.`version` AS `Version`,`item`.`status` AS `Status`,max(if((`ial`.`location_level1` = 'prop02'),`ial`.`qty_base`,0)) AS `EB`,max(if((`ial`.`location` = 'prop01'),`ial`.`qty_base`,0)) AS `CS`,max(if((`ial`.`location` = 'prop04'),`ial`.`qty_base`,0)) AS `SP`,max(if((`ial`.`location` = '124e6f02'),`ial`.`qty_base`,0)) AS `DR`,max(if((`ial`.`location` = 'prop10'),`ial`.`qty_base`,0)) AS `IV`,max(if((`ial`.`location` = 'prop03'),`ial`.`qty_base`,0)) AS `MV`,max(if((`ial`.`location` = 'invVehicle'),`ial`.`qty_base`,0)) AS `Vehicle`,max(if((`ial`.`location` = 'invVendor'),`ial`.`qty_base`,0)) AS `Vendor`,sum(if((`ial`.`location_level1` in ('prop02','prop01','124e6f02','prop10','prop03','prop04','invVehicle')),`ial`.`qty_base`,0)) AS `Inventory On Hand`,(sum(if((`ial`.`location_level1` in ('prop02','prop01','124e6f02','prop10','prop03','prop04','invVehicle')),`ial`.`qty_base`,0)) + sum(if((`ial`.`location` = 'invVendor'),`ial`.`qty_base`,0))) AS `Total Inventory`,max(`item`.`cat1`) AS `cat1`,max(`item`.`cat2`) AS `cat2`,max(`item`.`cat3`) AS `cat3`,max(`item`.`cat4`) AS `cat4`,max(`item`.`cat5`) AS `cat5`,max(`item`.`cat6`) AS `cat6`,max(`item`.`cat7`) AS `cat7`,`item`.`created_on` AS `Created On` from (`pacstone_inventory`.`inventory_item` `item` left join `pacstone_inventory`.`inventory_at_location` `ial` on((`item`.`id` = `ial`.`inventory_item`))) where ((`item`.`inventory_item_type` = 'officesupplies01') and (`ial`.`status` = 'Active') and (`ial`.`qty_base` <> 0) and (`item`.`status` in ('Active','Pending Deactivation'))) group by `item`.`id` order by `item`.`created_on`

-- View: syncwith.iap_view_ppe_uniforms
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `iap_view_ppe_uniforms` AS select `item`.`id` AS `ID`,`item`.`name` AS `Item`,`item`.`version` AS `Version`,`item`.`status` AS `Status`,max(if((`ial`.`location_level1` = 'prop02'),`ial`.`qty_base`,0)) AS `EB`,max(if((`ial`.`location` = 'prop01'),`ial`.`qty_base`,0)) AS `CS`,max(if((`ial`.`location` = 'prop04'),`ial`.`qty_base`,0)) AS `SP`,max(if((`ial`.`location` = '124e6f02'),`ial`.`qty_base`,0)) AS `DR`,max(if((`ial`.`location` = 'prop10'),`ial`.`qty_base`,0)) AS `IV`,max(if((`ial`.`location` = 'prop03'),`ial`.`qty_base`,0)) AS `MV`,max(if((`ial`.`location` = 'invVehicle'),`ial`.`qty_base`,0)) AS `Vehicle`,max(if((`ial`.`location` = 'invVendor'),`ial`.`qty_base`,0)) AS `Vendor`,sum(if((`ial`.`location_level1` in ('prop02','prop01','124e6f02','prop10','prop03','prop04','invVehicle')),`ial`.`qty_base`,0)) AS `Inventory On Hand`,(sum(if((`ial`.`location_level1` in ('prop02','prop01','124e6f02','prop10','prop03','prop04','invVehicle')),`ial`.`qty_base`,0)) + sum(if((`ial`.`location` = 'invVendor'),`ial`.`qty_base`,0))) AS `Total Inventory`,max(`item`.`cat1`) AS `cat1`,max(`item`.`cat2`) AS `cat2`,max(`item`.`cat3`) AS `cat3`,max(`item`.`cat4`) AS `cat4`,max(`item`.`cat5`) AS `cat5`,max(`item`.`cat6`) AS `cat6`,max(`item`.`cat7`) AS `cat7`,`item`.`created_on` AS `Created On` from (`pacstone_inventory`.`inventory_item` `item` left join `pacstone_inventory`.`inventory_at_location` `ial` on((`item`.`id` = `ial`.`inventory_item`))) where ((`item`.`inventory_item_type` = 'prodUniPPE01') and (`ial`.`status` = 'Active') and (`ial`.`qty_base` <> 0) and (`item`.`status` <> 'Inactive')) group by `item`.`id` order by `item`.`created_on`

-- View: syncwith.iap_view_prodmaterials
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `iap_view_prodmaterials` AS select `item`.`id` AS `ID`,`item`.`name` AS `Item`,`item`.`version` AS `Version`,`item`.`status` AS `Status`,max(if((`ial`.`location_level1` = 'prop02'),`ial`.`qty_base`,0)) AS `EB`,max(if((`ial`.`location` = 'prop01'),`ial`.`qty_base`,0)) AS `CS`,max(if((`ial`.`location` = 'prop04'),`ial`.`qty_base`,0)) AS `SP`,max(if((`ial`.`location` = '124e6f02'),`ial`.`qty_base`,0)) AS `DR`,max(if((`ial`.`location` = 'prop10'),`ial`.`qty_base`,0)) AS `IV`,max(if((`ial`.`location` = 'prop03'),`ial`.`qty_base`,0)) AS `MV`,max(if((`ial`.`location` = 'invVehicle'),`ial`.`qty_base`,0)) AS `Vehicle`,max(if((`ial`.`location` = 'invVendor'),`ial`.`qty_base`,0)) AS `Vendor`,sum(if((`ial`.`location_level1` in ('prop02','prop01','124e6f02','prop10','prop03','prop04','invVehicle')),`ial`.`qty_base`,0)) AS `Inventory On Hand`,(sum(if((`ial`.`location_level1` in ('prop02','prop01','124e6f02','prop10','prop03','prop04','invVehicle')),`ial`.`qty_base`,0)) + sum(if((`ial`.`location` = 'invVendor'),`ial`.`qty_base`,0))) AS `Total Inventory`,max(`item`.`cat1`) AS `cat1`,max(`item`.`cat2`) AS `cat2`,max(`item`.`cat3`) AS `cat3`,max(`item`.`cat4`) AS `cat4`,max(`item`.`cat5`) AS `cat5`,max(`item`.`cat6`) AS `cat6`,max(`item`.`cat7`) AS `cat7`,`item`.`created_on` AS `Created On` from (`pacstone_inventory`.`inventory_item` `item` left join `pacstone_inventory`.`inventory_at_location` `ial` on((`item`.`id` = `ial`.`inventory_item`))) where ((`item`.`inventory_item_type` = 'prodMat01') and (`ial`.`status` = 'Active') and (`ial`.`qty_base` <> 0) and (`item`.`status` in ('Active','Pending Deactivation','Quarantine'))) group by `item`.`id` order by `item`.`created_on`

-- View: syncwith.iap_view_prodmaterials2
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `iap_view_prodmaterials2` AS select `item`.`id` AS `ID`,`item`.`name` AS `Item`,`item`.`version` AS `Version`,`item`.`status` AS `Status`,max(if((`ial`.`location` = 'prop02'),`ial`.`qty_base`,0)) AS `EB`,max(if((`ial`.`location` = 'prop01'),`ial`.`qty_base`,0)) AS `CS`,max(if((`ial`.`location` = 'prop04'),`ial`.`qty_base`,0)) AS `SP`,max(if((`ial`.`location` = '124e6f02'),`ial`.`qty_base`,0)) AS `DR`,max(if((`ial`.`location` = 'prop10'),`ial`.`qty_base`,0)) AS `IV`,max(if((`ial`.`location` = 'prop03'),`ial`.`qty_base`,0)) AS `MV`,max(if((`ial`.`location` = 'invVehicle'),`ial`.`qty_base`,0)) AS `Vehicle`,max(if((`ial`.`location` = 'invVendor'),`ial`.`qty_base`,0)) AS `Vendor`,round(max(`prod`.`average use since October 2023`),0) AS `30 day use`,max(`item`.`cat1`) AS `cat1`,max(`item`.`cat2`) AS `cat2`,max(`item`.`cat3`) AS `cat3`,max(`item`.`cat4`) AS `cat4`,max(`item`.`cat5`) AS `cat5`,max(`item`.`cat6`) AS `cat6`,max(`item`.`cat7`) AS `cat7`,`item`.`created_on` AS `Created On` from ((((`pacstone_inventory`.`inventory_item` `item` left join `pacstone_inventory`.`inventory_at_location` `ial` on((`item`.`id` = `ial`.`inventory_item`))) left join `pacstone_inventory`.`inventory_transaction` `pi` on((`item`.`id` = `pi`.`inventory_item`))) left join `iap_view_prodmaterials_months` `prod` on((`item`.`name` = `prod`.`name`))) left join `iap_view_prodmaterials_months2` `prod2` on((`item`.`name` = `prod2`.`name`))) where ((`item`.`inventory_item_type` = 'prodMat01') and (`ial`.`status` = 'Active') and (`ial`.`qty_base` <> 0) and (`item`.`status` in ('Active','Pending Deactivation'))) group by `item`.`id` order by `item`.`created_on`

-- View: syncwith.iap_view_prodmaterials_months
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `iap_view_prodmaterials_months` AS select `item`.`name` AS `name`,count(`pi`.`base_qty`) AS `counts`,sum(`pi`.`base_qty`) AS `totalsum`,(sum(`pi`.`base_qty`) / (((to_days('2023-10-01') - to_days(now())) * -(1)) / 30)) AS `average use since October 2023`,(((to_days('2023-10-16') - to_days(now())) * -(1)) / 30) AS `month_factorial`,sum((case when (month(`pi`.`created_on`) = 1) then `pi`.`base_qty` else 0 end)) AS `January_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 1) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `January_%`,sum((case when (month(`pi`.`created_on`) = 2) then `pi`.`base_qty` else 0 end)) AS `Feb_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 2) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `Feb_%`,sum((case when (month(`pi`.`created_on`) = 3) then `pi`.`base_qty` else 0 end)) AS `March_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 3) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `March_%`,sum((case when (month(`pi`.`created_on`) = 4) then `pi`.`base_qty` else 0 end)) AS `April_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 4) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `April_%`,sum((case when (month(`pi`.`created_on`) = 5) then `pi`.`base_qty` else 0 end)) AS `May_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 5) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `May_%`,sum((case when (month(`pi`.`created_on`) = 6) then `pi`.`base_qty` else 0 end)) AS `June_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 6) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `June_%`,sum((case when (month(`pi`.`created_on`) = 7) then `pi`.`base_qty` else 0 end)) AS `July_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 7) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `July_%`,sum((case when (month(`pi`.`created_on`) = 8) then `pi`.`base_qty` else 0 end)) AS `August_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 8) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `August_%`,sum((case when (month(`pi`.`created_on`) = 9) then `pi`.`base_qty` else 0 end)) AS `September_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 9) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `September_%`,sum((case when (month(`pi`.`created_on`) = 10) then `pi`.`base_qty` else 0 end)) AS `October_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 10) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `October_%`,sum((case when (month(`pi`.`created_on`) = 11) then `pi`.`base_qty` else 0 end)) AS `November_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 11) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `November_%`,sum((case when (month(`pi`.`created_on`) = 12) then `pi`.`base_qty` else 0 end)) AS `December_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 12) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `December_%` from (`pacstone_inventory`.`inventory_transaction` `pi` left join `pacstone_inventory`.`inventory_item` `item` on((`item`.`id` = `pi`.`inventory_item`))) where ((`pi`.`transaction_type` = 'transType001') and (((year(`pi`.`created_on`) >= 2023) and (month(`pi`.`created_on`) >= 10)) or (year(`pi`.`created_on`) > 2023))) group by `pi`.`inventory_item` order by `item`.`name`

-- View: syncwith.iap_view_prodmaterials_months2
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `iap_view_prodmaterials_months2` AS select `item`.`name` AS `name`,count(`pi`.`base_qty`) AS `counts`,sum(`pi`.`base_qty`) AS `totalsum`,(sum(`pi`.`base_qty`) / (((to_days('2023-10-01') - to_days(now())) * -(1)) / 30)) AS `average use since October 2023`,(((to_days('2023-10-16') - to_days(now())) * -(1)) / 30) AS `month_factorial`,sum((case when (month(`pi`.`created_on`) = 1) then `pi`.`base_qty` else 0 end)) AS `January_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 1) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `January_%`,sum((case when (month(`pi`.`created_on`) = 2) then `pi`.`base_qty` else 0 end)) AS `Feb_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 2) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `Feb_%`,sum((case when (month(`pi`.`created_on`) = 3) then `pi`.`base_qty` else 0 end)) AS `March_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 3) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `March_%`,sum((case when (month(`pi`.`created_on`) = 4) then `pi`.`base_qty` else 0 end)) AS `April_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 4) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `April_%`,sum((case when (month(`pi`.`created_on`) = 5) then `pi`.`base_qty` else 0 end)) AS `May_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 5) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `May_%`,sum((case when (month(`pi`.`created_on`) = 6) then `pi`.`base_qty` else 0 end)) AS `June_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 6) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `June_%`,sum((case when (month(`pi`.`created_on`) = 7) then `pi`.`base_qty` else 0 end)) AS `July_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 7) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `July_%`,sum((case when (month(`pi`.`created_on`) = 8) then `pi`.`base_qty` else 0 end)) AS `August_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 8) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `August_%`,sum((case when (month(`pi`.`created_on`) = 9) then `pi`.`base_qty` else 0 end)) AS `September_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 9) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `September_%`,sum((case when (month(`pi`.`created_on`) = 10) then `pi`.`base_qty` else 0 end)) AS `October_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 10) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `October_%`,sum((case when (month(`pi`.`created_on`) = 11) then `pi`.`base_qty` else 0 end)) AS `November_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 11) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `November_%`,sum((case when (month(`pi`.`created_on`) = 12) then `pi`.`base_qty` else 0 end)) AS `December_usecase`,concat((round((sum((case when (month(`pi`.`created_on`) = 12) then `pi`.`base_qty` else 0 end)) / sum(`pi`.`base_qty`)),2) * 100),'%') AS `December_%` from (`pacstone_inventory`.`inventory_transaction` `pi` left join `pacstone_inventory`.`inventory_item` `item` on((`item`.`id` = `pi`.`inventory_item`))) where ((`pi`.`transaction_type` = 'transTypeAddRem') and (((year(`pi`.`created_on`) >= 2023) and (month(`pi`.`created_on`) >= 10)) or (year(`pi`.`created_on`) > 2023))) group by `pi`.`inventory_item` order by `item`.`name`

-- View: syncwith.iap_view_prodmaterials_sub_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `iap_view_prodmaterials_sub_view` AS select `item`.`name` AS `name`,sum(`pi`.`base_qty`) AS `totalsum`,if((`pi`.`transaction_type` = 'transType001'),sum(`pi`.`base_qty`),0) AS `usecase`,if((`pi`.`transaction_type` = 'transType001'),count(`pi`.`base_qty`),0) AS `usecasecount`,if((`pi`.`transaction_type` = 'transType001'),round((sum(`pi`.`base_qty`) / count(`pi`.`base_qty`)),2),0) AS `usecaseaverage`,if((`pi`.`transaction_type` = 'transType001'),round(((sum(`pi`.`base_qty`) + count(`pi`.`base_qty`)) / count(`pi`.`base_qty`)),2),0) AS `usecaseweightedaverage`,if((`pi`.`transaction_type` = 'transType002'),sum(`pi`.`base_qty`),0) AS `locationtolocation2` from (`pacstone_inventory`.`inventory_transaction` `pi` left join `pacstone_inventory`.`inventory_item` `item` on((`item`.`id` = `pi`.`inventory_item`))) group by `item`.`name`,`pi`.`transaction_type`

-- View: syncwith.iap_view_promo_items
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `iap_view_promo_items` AS select `item`.`id` AS `ID`,`item`.`name` AS `Item`,`item`.`version` AS `Version`,`item`.`status` AS `Status`,max(if((`ial`.`location_level1` = 'prop02'),`ial`.`qty_base`,0)) AS `EB`,max(if((`ial`.`location` = 'prop01'),`ial`.`qty_base`,0)) AS `CS`,max(if((`ial`.`location` = 'prop04'),`ial`.`qty_base`,0)) AS `SP`,max(if((`ial`.`location` = '124e6f02'),`ial`.`qty_base`,0)) AS `DR`,max(if((`ial`.`location` = 'prop10'),`ial`.`qty_base`,0)) AS `IV`,max(if((`ial`.`location` = 'prop03'),`ial`.`qty_base`,0)) AS `MV`,max(if((`ial`.`location` = 'invVehicle'),`ial`.`qty_base`,0)) AS `Vehicle`,max(if((`ial`.`location` = 'invVendor'),`ial`.`qty_base`,0)) AS `Vendor`,sum(if((`ial`.`location_level1` in ('prop02','prop01','124e6f02','prop10','prop03','prop04','invVehicle')),`ial`.`qty_base`,0)) AS `Inventory On Hand`,(sum(if((`ial`.`location_level1` in ('prop02','prop01','124e6f02','prop10','prop03','prop04','invVehicle')),`ial`.`qty_base`,0)) + sum(if((`ial`.`location` = 'invVendor'),`ial`.`qty_base`,0))) AS `Total Inventory`,max(`item`.`cat1`) AS `cat1`,max(`item`.`cat2`) AS `cat2`,max(`item`.`cat3`) AS `cat3`,max(`item`.`cat4`) AS `cat4`,max(`item`.`cat5`) AS `cat5`,max(`item`.`cat6`) AS `cat6`,max(`item`.`cat7`) AS `cat7`,`item`.`created_on` AS `Created On` from (`pacstone_inventory`.`inventory_item` `item` left join `pacstone_inventory`.`inventory_at_location` `ial` on((`item`.`id` = `ial`.`inventory_item`))) where ((`item`.`inventory_item_type` = 'promoMat01') and (`ial`.`status` = 'Active') and (`ial`.`qty_base` <> 0) and (`item`.`status` in ('Active','Pending Deactivation'))) group by `item`.`id` order by `item`.`created_on`

-- View: syncwith.iap_view_promos
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `iap_view_promos` AS select `item`.`id` AS `ID`,`item`.`name` AS `Item`,`item`.`version` AS `Version`,`item`.`status` AS `Status`,max(if((`ial`.`location` = 'prop02'),`ial`.`qty_base`,0)) AS `EB`,max(if((`ial`.`location` = 'prop01'),`ial`.`qty_base`,0)) AS `CS`,max(if((`ial`.`location` = 'prop04'),`ial`.`qty_base`,0)) AS `SP`,max(if((`ial`.`location` = '124e6f02'),`ial`.`qty_base`,0)) AS `DR`,max(if((`ial`.`location` = 'prop10'),`ial`.`qty_base`,0)) AS `IV`,max(if((`ial`.`location` = 'prop03'),`ial`.`qty_base`,0)) AS `MV`,max(if((`ial`.`location` = 'invVehicle'),`ial`.`qty_base`,0)) AS `Vehicle`,max(if((`ial`.`location` = 'invVendor'),`ial`.`qty_base`,0)) AS `Vendor`,(sum(if((`ial`.`location` in ('prop02','prop01','124e6f02','prop10','prop03','prop04','invVehicle')),`ial`.`qty_base`,0)) + sum(if((`ial`.`location` = 'invVendor'),`ial`.`qty_base`,0))) AS `Total Inventory`,max(`item`.`cat1`) AS `cat1`,max(`item`.`cat2`) AS `cat2`,max(`item`.`cat3`) AS `cat3`,max(`item`.`cat4`) AS `cat4`,max(`item`.`cat5`) AS `cat5`,max(`item`.`cat6`) AS `cat6`,max(`item`.`cat7`) AS `cat7`,`item`.`created_on` AS `Created On` from (`pacstone_inventory`.`inventory_item` `item` left join `pacstone_inventory`.`inventory_at_location` `ial` on((`item`.`id` = `ial`.`inventory_item`))) where ((`item`.`inventory_item_type` = 'promoMat01') and (`ial`.`status` <> 'Inactive') and (`item`.`status` in ('Active','Pending Deactivation'))) group by `item`.`id` order by `item`.`created_on`

-- View: syncwith.iap_view_sums
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `iap_view_sums` AS select `item`.`name` AS `Item`,`item`.`version` AS `version`,max(if((`ial`.`location` = 'prop02'),`ial`.`qty_base`,0)) AS `EB`,max(if((`ial`.`location` = 'prop01'),`ial`.`qty_base`,0)) AS `CS`,max(if((`ial`.`location` = '124e6f02'),`ial`.`qty_base`,0)) AS `DR`,max(if((`ial`.`location` = 'prop10'),`ial`.`qty_base`,0)) AS `IV`,max(if((`ial`.`location` = 'prop03'),`ial`.`qty_base`,0)) AS `MV`,max(if((`ial`.`location` = 'prop04'),`ial`.`qty_base`,0)) AS `SP`,max(if((`ial`.`location` = 'invVendor'),`ial`.`qty_base`,0)) AS `Vendor`,max(if((`ial`.`location` = 'invVehicle'),`ial`.`qty_base`,0)) AS `Vehicle`,max(`item`.`cat1`) AS `cat1`,max(`item`.`cat2`) AS `cat2`,max(`item`.`cat3`) AS `cat3`,max(`item`.`cat4`) AS `cat4`,max(`item`.`cat5`) AS `cat5`,max(`item`.`cat6`) AS `cat6`,max(`item`.`cat7`) AS `cat7`,`item`.`id` AS `item_id` from (((`pacstone_inventory`.`inventory_item` `item` left join `pacstone_inventory`.`inventory_at_location` `ial` on((`item`.`id` = `ial`.`inventory_item`))) left join `pacstone_inventory`.`inventory_pile` `p` on((`p`.`inventory_item` = `item`.`id`))) left join `pacstone`.`location` `l` on((`ial`.`location` = `l`.`id`))) group by `item`.`name`,`item`.`id` order by `item`.`name`

-- View: syncwith.inventory_sku
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `inventory_sku` AS select `kss_i`.`id` AS `id`,`kss_i`.`Location` AS `Location`,`kss_i`.`ProductID` AS `ProductID`,`kss_i`.`ProductNumName` AS `ProductNumName`,`kss_i`.`BatchCode` AS `BatchCode`,`kss_i`.`Inventory` AS `Inventory`,`kss_i`.`ExpirationDate` AS `Expires`,(to_days(curdate()) - to_days(`kss_i`.`ExpirationDate`)) AS `DaysExpire`,`ps_sku`.`strain_code` AS `strain_id`,`ps_sku`.`strain_name` AS `strain_name`,`ps_sku`.`sku` AS `sku`,`ps_sku`.`name` AS `ps_name`,`ps_sku`.`category_name` AS `ps_category`,`ps_sku`.`package_size_code` AS `package_size`,`ps_sku`.`strain_category` AS `strain_type`,`sales`.`kss_sku`.`id` AS `Product_ID`,`sales`.`kss_sku`.`BrandID` AS `BrandID`,`sales`.`kss_sku`.`ProductName` AS `ProductName`,`sales`.`kss_sku`.`ProductTypeID` AS `ProductTypeID`,`sales`.`kss_sku`.`PackageID` AS `PackageID`,`sales`.`kss_sku`.`SupplierID` AS `SupplierID`,`sales`.`kss_sku`.`Price` AS `Price`,`sales`.`kss_sku`.`Class` AS `Class`,`sales`.`kss_sku`.`Unit Net Weight` AS `Weight`,`sales`.`kss_sku`.`Status` AS `Status`,`sales`.`kss_sku`.`WholesaleUnitsperCase` AS `CaseUnits` from ((`sales`.`kss_inventory` `kss_i` left join `sales`.`kss_sku` on((`kss_i`.`ProductID` = `sales`.`kss_sku`.`id`))) left join `product_sku`.`sku_view` `ps_sku` on((`kss_i`.`ProductID` = `ps_sku`.`kss_id`))) where ((`kss_i`.`Inventory` > 0.00) and (`ps_sku`.`packing_group_label` <> 'Each')) order by `kss_i`.`ExpirationDate`

-- View: syncwith.kss_Invoice
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `kss_Invoice` AS select `sales`.`kss_invoice`.`InvoiceID` AS `Invoice`,`sales`.`kss_invoice`.`InvoiceTransID` AS `InvoiceTransID`,`sales`.`kss_invoice`.`Date` AS `Date`,`sales`.`kss_invoice`.`Status` AS `Invoice Status`,`sales`.`kss_invoice`.`CustomerID` AS `CustomerID`,`sales`.`kss_invoice`.`ProductID` AS `ProductID`,`sales`.`kss_invoice`.`Units` AS `Units`,`sales`.`kss_invoice`.`FullPrice` AS `FullPrice`,`sales`.`kss_invoice`.`Discount` AS `Discount`,`sales`.`kss_invoice`.`Vol` AS `Total`,`sales`.`kss_invoice`.`Participation` AS `Participation` from (((`sales`.`kss_invoice` join `sales`.`kss_customer` on((`sales`.`kss_invoice`.`CustomerID` = `sales`.`kss_customer`.`CustomerID`))) join `sales`.`kss_sku` on((`sales`.`kss_invoice`.`ProductID` = `sales`.`kss_sku`.`ProductID`))) join `product_sku`.`sku_view` on((`sales`.`kss_invoice`.`ProductID` = `sku_view`.`kss_id`))) order by `sales`.`kss_invoice`.`InvoiceID`

-- View: syncwith.kss_customer_table
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `kss_customer_table` AS select `sales`.`kss_customer`.`id` AS `id`,`sales`.`kss_customer`.`CustomerID` AS `CustomerID`,`sales`.`kss_customer`.`Company` AS `Company`,`sales`.`kss_customer`.`ChainID` AS `ChainID`,`sales`.`kss_customer`.`Phone` AS `Phone`,`sales`.`kss_customer`.`Email` AS `Email`,`sales`.`kss_customer`.`CountyID` AS `CountyID`,`sales`.`kss_customer`.`TerritoryID` AS `TerritoryID`,`sales`.`kss_customer`.`AccountStatus` AS `AccountStatus`,`sales`.`kss_customer`.`SalesmanUserID` AS `SalesmanUserID`,`sales`.`kss_customer`.`Chain - Customer` AS `Chain - Customer`,`sales`.`kss_customer`.`PrimaryUserID` AS `PrimaryUserID`,`sales`.`kss_customer`.`Address` AS `Address`,`sales`.`kss_customer`.`City` AS `City`,`sales`.`kss_customer`.`PostalCode` AS `PostalCode`,`sales`.`kss_customer`.`IndVolume` AS `IndVolume`,`sales`.`kss_customer`.`EthnicityID` AS `EthnicityID`,`sales`.`kss_customer`.`CustomerAccountType` AS `CustomerAccountType`,`sales`.`kss_customer`.`CustomerTypeID` AS `CustomerTypeID`,`sales`.`kss_customer`.`OpenDate` AS `OpenDate`,`sales`.`kss_customer`.`LocationID` AS `LocationID`,`sales`.`kss_customer`.`AreaID` AS `AreaID`,`sales`.`kss_customer`.`JurisdictionID` AS `JurisdictionID`,`sales`.`kss_customer`.`StateLicenseNum` AS `StateLicenseNum`,`sales`.`kss_customer`.`AR Account Limit` AS `AR Account Limit`,`sales`.`kss_customer`.`Distro Accounts Count of Doors` AS `Distro Accounts Count of Doors`,`sales`.`kss_customer`.`CustomerName` AS `CustomerName`,`sales`.`kss_customer`.`Chain` AS `Chain`,`sales`.`kss_customer`.`Independent` AS `Independent`,`sales`.`kss_customer`.`ARAccountID` AS `ARAccountID`,`sales`.`kss_customer`.`ARAccount` AS `ARAccount`,`sales`.`kss_customer`.`ShippingAddress` AS `ShippingAddress`,`sales`.`kss_customer`.`County` AS `County`,`sales`.`kss_customer`.`Territory` AS `Territory`,`sales`.`kss_customer`.`StateLicensee` AS `StateLicensee`,`sales`.`kss_customer`.`DistributionAreaID` AS `DistributionAreaID`,`sales`.`kss_customer`.`DistributionArea` AS `DistributionArea`,`sales`.`kss_customer`.`Location` AS `Location`,`sales`.`kss_customer`.`SalesRepID` AS `SalesRepID`,`sales`.`kss_customer`.`SalesRepFullName` AS `SalesRepFullName`,`sales`.`kss_customer`.`Route` AS `Route`,`sales`.`kss_customer`.`RouteDayOfWeek` AS `RouteDayOfWeek`,`sales`.`kss_customer`.`RouteFrequency` AS `RouteFrequency`,`sales`.`kss_customer`.`StopPhase` AS `StopPhase`,`sales`.`kss_customer`.`NextScheduledDate` AS `NextScheduledDate`,`sales`.`kss_customer`.`ARAccountLimit` AS `ARAccountLimit`,`sales`.`kss_customer`.`Terms` AS `Terms`,`sales`.`kss_customer`.`AccountOnHold` AS `AccountOnHold`,`sales`.`kss_customer`.`LastPurchaseDate` AS `LastPurchaseDate` from `sales`.`kss_customer`

-- View: syncwith.kss_customer_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `kss_customer_view` AS select `kc`.`id` AS `id`,`kc`.`Company` AS `name`,`kc`.`Address` AS `Address`,`kc`.`PostalCode` AS `Zip`,`kc`.`City` AS `City`,'CA' AS `State`,'US' AS `Country`,`kc`.`TerritoryID` AS `Territory`,`kc`.`SalesRepFullName` AS `Representative`,`kc`.`Email` AS `email`,`kc`.`Phone` AS `Phone`,`kc`.`PrimaryUserID` AS `PrimaryUserID`,`kc`.`RouteDayOfWeek` AS `Delviery Day`,`kc`.`AccountStatus` AS `Active`,`kc`.`CustomerAccountType` AS `Tags`,max(`ki`.`Date`) AS `last invoice`,sum(`ki`.`FullPrice`) AS `account` from (`sales`.`kss_customer` `kc` left join `sales`.`kss_invoice` `ki` on((`kc`.`id` = `ki`.`CustomerID`))) group by `kc`.`id`

-- View: syncwith.kss_promotion
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `kss_promotion` AS select `sales`.`kss_promotion`.`PromotionID` AS `PromotionID`,`sales`.`kss_promotion`.`PromotionName` AS `PromotionName`,`sales`.`kss_promotion`.`PromotionType` AS `PromotionType`,`sales`.`kss_promotion`.`StartDate` AS `StartDate`,`sales`.`kss_promotion`.`EndDate` AS `EndDate`,`sales`.`kss_promotion`.`Active` AS `Active`,`sales`.`kss_promotion`.`Amount` AS `Amount`,`sales`.`kss_promotion`.`Participation` AS `Participation`,`sales`.`kss_promotion`.`Condition` AS `Condition`,`sales`.`kss_promotion`.`Market` AS `Market`,`sales`.`kss_promotion`.`Memo` AS `Memo`,`sales`.`kss_promotion`.`id` AS `id` from `sales`.`kss_promotion`

-- View: syncwith.kss_promotion_product_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `kss_promotion_product_view` AS select `sales`.`kss_promotion_product`.`PromotionID` AS `PromotionID`,`sales`.`kss_promotion_product`.`ProductID` AS `ProductID`,`sales`.`kss_promotion_product`.`Type` AS `Type`,`sales`.`kss_promotion_product`.`StartDate` AS `StartDate`,`sales`.`kss_promotion_product`.`EndDate` AS `EndDate`,`sales`.`kss_promotion_product`.`Active` AS `Active`,`sales`.`kss_promotion_product`.`ContributestoQtyDiscount` AS `ContributestoQtyDiscount`,`sales`.`kss_promotion_product`.`Amount` AS `Amount`,`sales`.`kss_promotion_product`.`CaseAmount` AS `CaseAmount`,`sales`.`kss_promotion_product`.`Participation` AS `Participation`,`sales`.`kss_promotion_product`.`CaseParticipation` AS `CaseParticipation`,`sales`.`kss_promotion_product`.`Condition` AS `Condition`,`sales`.`kss_promotion_product`.`FreeUnits` AS `FreeUnits`,`sales`.`kss_promotion_product`.`id` AS `id` from `sales`.`kss_promotion_product`

-- View: syncwith.kss_sales
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `kss_sales` AS select `sales`.`kss_invoice`.`InvoiceID` AS `Invoice`,`sales`.`kss_invoice`.`InvoiceTransID` AS `InvoiceTransID`,`sales`.`kss_invoice`.`Date` AS `Date`,`sales`.`kss_invoice`.`Status` AS `Invoice Status`,`sales`.`kss_invoice`.`CustomerID` AS `CustomerID`,`sales`.`kss_invoice`.`ProductID` AS `ProductID`,`sales`.`kss_invoice`.`Units` AS `Units`,`sales`.`kss_invoice`.`FullPrice` AS `FullPrice`,`sales`.`kss_invoice`.`Discount` AS `Discount`,`sales`.`kss_invoice`.`Vol` AS `Total`,`sales`.`kss_invoice`.`Participation` AS `Participation` from (((`sales`.`kss_invoice` join `sales`.`kss_customer` on((`sales`.`kss_invoice`.`CustomerID` = `sales`.`kss_customer`.`CustomerID`))) join `sales`.`kss_sku` on((`sales`.`kss_invoice`.`ProductID` = `sales`.`kss_sku`.`ProductID`))) join `product_sku`.`sku_view` on((`sales`.`kss_invoice`.`ProductID` = `sku_view`.`kss_id`)))

-- View: syncwith.kss_sku_basic_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `kss_sku_basic_view` AS select `sales`.`kss_sku`.`id` AS `KSS id`,`sales`.`kss_sku`.`SupplierName` AS `Brand Name`,`sales`.`kss_sku`.`Brand` AS `BrandStrainPackage`,`sales`.`kss_sku`.`Package` AS `CaseQTY&PackageSizeType`,`sales`.`kss_sku`.`ProductType` AS `Category & Size`,`sales`.`kss_sku`.`ProductName` AS `ProductName`,`sales`.`kss_sku`.`Class` AS `Class`,`sales`.`kss_sku`.`WholesaleUnitsperCase` AS `CaseQTY`,`sales`.`kss_sku`.`Unit Net Weight` AS `UnitWeight`,`sales`.`kss_sku`.`Status` AS `Status`,`sales`.`kss_sku`.`UPC` AS `UPC`,`sales`.`kss_sku`.`Rank` AS `KSS Rank`,`sales`.`kss_sku`.`Price` AS `Price`,`sales`.`kss_sku`.`CasePrice` AS `CasePrice`,`sales`.`kss_sku`.`ProductMasterID` AS `ProductMasterID`,`sales`.`kss_sku`.`modified_on` AS `modified_on`,`sales`.`kss_sku`.`UpdatedBy` AS `UpdatedBy`,`sales`.`kss_sku`.`TimeCreated` AS `TimeCreated`,`sales`.`kss_sku`.`created_on` AS `created_on` from `sales`.`kss_sku` order by `sales`.`kss_sku`.`Brand` desc

-- View: syncwith.location
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `location` AS select `l`.`id` AS `id`,`l`.`location_level1` AS `location_level1`,`l`.`location_level3` AS `location_level2`,`l`.`location_level3` AS `location_level3`,`l`.`location_level3` AS `location_level4`,`l`.`location_level5` AS `location_level5`,`l`.`location_level3` AS `location_level6`,`l`.`location_level3` AS `location_level7`,`l`.`location_string` AS `location_string`,`l`.`location_class` AS `location_class`,`type`.`type` AS `location_type`,`type`.`level1` AS `location_type_level1`,`type`.`level2` AS `location_type_level2`,`type`.`level3` AS `location_type_level3`,`type`.`level4` AS `location_type_level4`,`type`.`level5` AS `location_type_level5` from (`pacstone`.`location` `l` left join `pacstone`.`location_type` `type` on((`l`.`location_type` = `type`.`id`))) where (`l`.`status` = 'active')

-- View: syncwith.package
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `package` AS select `p`.`id` AS `id`,`p`.`code` AS `package_code`,`p`.`name` AS `package_name`,`ps`.`code` AS `package_size_code`,`ps`.`name` AS `package_size_name`,`prod`.`status` AS `status` from ((`product_sku`.`product_combination` `prod` left join `product_sku`.`package` `p` on((`prod`.`package` = `p`.`id`))) left join `product_sku`.`package_size` `ps` on((`prod`.`package_size` = `ps`.`id`)))

-- View: syncwith.packing_temp
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `packing_temp` AS select `packing`.`packing_temp`.`id` AS `id`,`packing`.`packing_temp`.`transfer_metrc_id` AS `transfer_metrc_id`,`packing`.`packing_temp`.`flower_metrc_id` AS `flower_metrc_id`,`packing`.`packing_temp`.`harvest_id` AS `harvest_id`,`packing`.`packing_temp`.`property` AS `property`,`packing`.`packing_temp`.`harvest_date` AS `harvest_date`,`packing`.`packing_temp`.`harvest_week` AS `harvest_week`,`packing`.`packing_temp`.`harvest_year` AS `harvest_year`,`packing`.`packing_temp`.`strain` AS `strain`,`packing`.`packing_temp`.`short_license` AS `short_license`,`packing`.`packing_temp`.`grade` AS `grade`,`packing`.`packing_temp`.`strain_category` AS `strain_category`,`packing`.`packing_temp`.`batch_flower_size` AS `batch_flower_size`,`packing`.`packing_temp`.`batch_weight` AS `batch_weight`,`packing`.`packing_temp`.`created_on` AS `created_on`,`packing`.`packing_temp`.`created_by` AS `created_by`,`packing`.`packing_temp`.`processor_name` AS `processor_name`,`packing`.`packing_temp`.`processor_license` AS `processor_license`,`packing`.`packing_temp`.`cultivator_name` AS `cultivator_name`,`packing`.`packing_temp`.`cultivator_license` AS `cultivator_license`,`packing`.`packing_temp`.`production_number` AS `production_number`,`packing`.`packing_temp`.`pallet_metrc_id` AS `pallet_metrc_id`,`packing`.`packing_temp`.`prepacking_weight` AS `prepacking_weight`,`packing`.`packing_temp`.`action` AS `action`,`packing`.`packing_temp`.`type` AS `type`,`packing`.`packing_temp`.`weight` AS `weight`,`packing`.`packing_temp`.`kief_metrc_id` AS `kief_metrc_id`,`packing`.`packing_temp`.`kief_weight` AS `kief_weight`,`packing`.`packing_temp`.`thc_result` AS `thc_result`,`packing`.`packing_temp`.`cbd_result` AS `cbd_result`,`packing`.`packing_temp`.`cannalysis_id` AS `cannalysis_id`,`packing`.`packing_temp`.`machine_station` AS `machine_station`,`packing`.`packing_temp`.`packed_date` AS `packed_date`,`packing`.`packing_temp`.`packed_week` AS `packed_week`,`packing`.`packing_temp`.`start_machine_time` AS `start_machine_time`,`packing`.`packing_temp`.`stop_machine_time` AS `stop_machine_time`,`packing`.`packing_temp`.`unit_produced` AS `unit_produced`,`packing`.`packing_temp`.`unit_target` AS `unit_target`,`packing`.`packing_temp`.`final_unit_quantity` AS `final_unit_quantity`,`packing`.`packing_temp`.`final_batch_grams` AS `final_batch_grams`,`packing`.`packing_temp`.`final_batch_pounds` AS `final_batch_pounds`,`packing`.`packing_temp`.`general_notes` AS `general_notes`,`packing`.`packing_temp`.`case_size` AS `case_size`,`packing`.`packing_temp`.`partial_master` AS `partial_master`,`packing`.`packing_temp`.`partial_display` AS `partial_display`,`packing`.`packing_temp`.`shipped_date` AS `shipped_date`,`packing`.`packing_temp`.`shipped_week` AS `shipped_week`,`packing`.`packing_temp`.`shipped_units` AS `shipped_units`,`packing`.`packing_temp`.`manifest_metrc_id` AS `manifest_metrc_id`,`packing`.`packing_temp`.`units_inventory` AS `units_inventory`,`packing`.`packing_temp`.`in_metrc` AS `in_metrc`,`packing`.`packing_temp`.`waste_metrc` AS `waste_metrc`,`packing`.`packing_temp`.`status` AS `status`,`packing`.`packing_temp`.`process_status` AS `process_status`,`packing`.`packing_temp`.`modified_on` AS `modified_on`,`packing`.`packing_temp`.`modified_by` AS `modified_by`,`packing`.`packing_temp`.`trigger` AS `trigger`,`packing`.`packing_temp`.`field_1` AS `field_1`,`packing`.`packing_temp`.`field_2` AS `field_2`,`packing`.`packing_temp`.`field_3` AS `field_3`,`packing`.`packing_temp`.`field_4` AS `field_4`,`packing`.`packing_temp`.`field_5` AS `field_5`,`packing`.`packing_temp`.`field_6` AS `field_6`,`packing`.`packing_temp`.`f7` AS `f7`,`packing`.`packing_temp`.`f8` AS `f8`,`packing`.`packing_temp`.`f9` AS `f9`,`packing`.`packing_temp`.`sku_id` AS `sku_id`,`packing`.`packing_temp`.`packing_group_id` AS `packing_group_id`,`packing`.`packing_temp`.`stage_id` AS `stage_id` from `packing`.`packing_temp`

-- View: syncwith.plant_schedule_detailed
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `plant_schedule_detailed` AS select `cultivation`.`plant_schedule_detail`.`id` AS `id`,`cultivation`.`plant_schedule_detail`.`plant_schedule_id` AS `plant_schedule_id`,`cultivation`.`plant_schedule_detail`.`canopy_id` AS `canopy_id`,`cultivation`.`plant_schedule_detail`.`strain_id` AS `strain_id`,`cultivation`.`plant_schedule_detail`.`date` AS `date`,`cultivation`.`plant_schedule_detail`.`plant_count` AS `plant_count`,`cultivation`.`plant_schedule_detail`.`priority` AS `priority`,`cultivation`.`plant_schedule_detail`.`notes` AS `notes`,`cultivation`.`plant_schedule_detail`.`status` AS `status`,`cultivation`.`plant_schedule_detail`.`action` AS `action`,`cultivation`.`plant_schedule_detail`.`created_by` AS `created_by`,`cultivation`.`plant_schedule_detail`.`created_on` AS `created_on`,`cultivation`.`plant_schedule_detail`.`modified_by` AS `modified_by`,`cultivation`.`plant_schedule_detail`.`modified_on` AS `modified_on`,`cultivation`.`plant_schedule_detail`.`flag` AS `flag`,`cultivation`.`plant_schedule_detail`.`trigger` AS `trigger` from `cultivation`.`plant_schedule_detail` order by `cultivation`.`plant_schedule_detail`.`modified_on` desc

-- View: syncwith.plant_schedule_view
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `plant_schedule_view` AS select `ps`.`id` AS `schedule_id`,`psd`.`id` AS `detail_id`,`ps`.`transfer_type` AS `transfer_type`,`ps`.`status` AS `Status`,`ps`.`year_num` AS `year_num`,`ps`.`week_num` AS `week_num`,concat(`ps`.`year_num`,right(concat('0',`ps`.`week_num`),2)) AS `year_week`,`c`.`name` AS `name`,`c`.`capacity` AS `capacity`,`c`.`location_string` AS `location_string`,`c`.`property_id` AS `property_id`,`c`.`cannabis_license_id` AS `cannabis_license_id`,`psd`.`strain_id` AS `strain_id`,`psd`.`date` AS `date`,`psd`.`plant_count` AS `plant_count`,`psd`.`priority` AS `priority`,`psd`.`action` AS `Batch Status`,`s`.`strain_code` AS `Strain Code`,`s`.`name` AS `Strain Name`,`s`.`category` AS `strain_category` from (((`cultivation`.`plant_schedule` `ps` left join `cultivation`.`plant_schedule_detail` `psd` on((`ps`.`id` = `psd`.`plant_schedule_id`))) left join `pacstone`.`canopy` `c` on((`psd`.`canopy_id` = convert(`c`.`id` using utf8mb4)))) left join `pacstone`.`plant_strain` `s` on((`psd`.`strain_id` = convert(`s`.`id` using utf8mb4)))) where ((`psd`.`action` in ('Scheduled','In Progress')) and (`ps`.`status` = 'Active')) order by concat(`ps`.`year_num`,right(concat('0',`ps`.`week_num`),2)) desc,`ps`.`transfer_type` desc,`s`.`strain_code`

-- View: syncwith.plant_strain
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `plant_strain` AS select `strain`.`id` AS `id`,`strain`.`strain_code` AS `strain_code`,`strain`.`name` AS `name`,`strain`.`version` AS `version`,`strain`.`pacific_stone_label` AS `pacific_stone_label`,`strain`.`time_machine_label` AS `time_machine_label`,`strain`.`category` AS `category`,`strain`.`category_code` AS `category_code`,`strain`.`description` AS `description`,`strain`.`class` AS `class`,if((`strain`.`core_strain` > 0),'Core Strain',`strain`.`gh_status`) AS `Core/Status`,`strain`.`flag` AS `flag`,`strain`.`note` AS `note`,`strain`.`uid` AS `uid`,`strain`.`parent_strain` AS `parent_strain`,if((`strain`.`is_flavor` > 0),'Yes','No') AS `Is Flavor?`,if((`strain`.`is_plant` > 0),'Yes','No') AS `Is Plant?`,if((`strain`.`is_sku` > 0),'Yes','No') AS `Is SKU?` from `pacstone`.`plant_strain` `strain` where (`strain`.`gh_status` is not null)

-- View: syncwith.processing_active
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `processing_active` AS select `p`.`date` AS `date`,`p`.`processing_metrc_tag` AS `processing_batch_source_tag`,`p`.`metrc_tag` AS `metrc_tag`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,`h`.`year_week` AS `harvest_year_week`,if((right(`h`.`harvest_id`,2) = '-M'),'Manicure','Full') AS `harvest_type`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`pacstone`.`uom`.`name` AS `uom`,`p`.`quantity` AS `quantity`,`p`.`bin_count` AS `bin_count`,`c`.`name` AS `category`,`ct`.`name` AS `category_type`,`p`.`product_id` AS `size`,`p`.`grade` AS `grade`,`p`.`process_id` AS `process`,`p`.`process_queue_id` AS `process_queue`,`p`.`process_queue_type` AS `process_queue_type`,`p`.`process_log` AS `process_log`,(case when (`p`.`process_log` like '%Sorting%') then 'Sorted' when ((`p`.`process_log` like '%Trimming%') and (`p`.`process_queue_id` is null) and (`p`.`category_id` = 'SK-CTG-0001') and (not((`p`.`process_log` like '%Sorting%')))) then 'Unsorted' else '-' end) AS `qc_status`,`l`.`name` AS `location`,`p`.`harvesting_id` AS `batch_harvest_id`,`p`.`source_metrc_tag` AS `source_metrc_tag` from ((((((`processing`.`processing` `p` left join `pacstone`.`plant_strain` `s` on((convert(`s`.`id` using utf8mb4) = `p`.`strain_id`))) left join `product_sku`.`category` `c` on((`c`.`id` = `p`.`category_id`))) left join `product_sku`.`category_type` `ct` on((convert(`ct`.`id` using utf8mb4) = `p`.`category_type_id`))) left join `cultivation`.`harvesting_ref` `h` on((`h`.`id` = `p`.`harvesting_id`))) left join `pacstone`.`uom` on((convert(`pacstone`.`uom`.`id` using utf8mb4) = `p`.`uom_id`))) left join `pacstone`.`location` `l` on((convert(`l`.`id` using utf8mb4) = `p`.`location_id`))) where (`p`.`status` = 'Active') order by `p`.`date` desc

-- View: syncwith.processing_active_combined
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `processing_active_combined` AS select `processing_active`.`date` AS `date`,`processing_active`.`processing_batch_source_tag` AS `processing_batch_source_tag`,`processing_active`.`metrc_tag` AS `metrc_tag`,`processing_active`.`harvest_id` AS `harvest_id`,`processing_active`.`test` AS `test`,`processing_active`.`property_id` AS `property_id`,`processing_active`.`harvest_date` AS `harvest_date`,`processing_active`.`harvest_week` AS `harvest_week`,`processing_active`.`harvest_year` AS `harvest_year`,`processing_active`.`harvest_year_week` AS `harvest_year_week`,`processing_active`.`harvest_type` AS `harvest_type`,`processing_active`.`strain_code` AS `strain_code`,`processing_active`.`strain_name` AS `strain_name`,`processing_active`.`uom` AS `uom`,`processing_active`.`quantity` AS `quantity`,`processing_active`.`bin_count` AS `bin_count`,`processing_active`.`category` AS `category`,`processing_active`.`category_type` AS `category_type`,`processing_active`.`size` AS `size`,`processing_active`.`grade` AS `grade`,`processing_active`.`process` AS `process`,`processing_active`.`process_queue` AS `process_queue`,`processing_active`.`process_queue_type` AS `process_queue_type`,`processing_active`.`process_log` AS `process_log`,`processing_active`.`qc_status` AS `qc_status`,`processing_active`.`location` AS `location`,'Finished' AS `status` from `processing`.`processing_active` union all select `bucking_active`.`date` AS `date`,`bucking_active`.`metrc_tag` AS `processing_batch_source_tag`,`bucking_active`.`metrc_tag` AS `metrc_tag`,`bucking_active`.`harvest_id` AS `harvest_id`,`bucking_active`.`test_id` AS `test`,`bucking_active`.`property_id` AS `property_id`,`bucking_active`.`harvest_date` AS `harvest_date`,`bucking_active`.`harvest_week` AS `harvest_week`,`bucking_active`.`harvest_year` AS `harvest_year`,`bucking_active`.`harvest_year_week` AS `harvest_year_week`,`bucking_active`.`harvest_type` AS `harvest_type`,`bucking_active`.`strain_code` AS `strain_code`,`bucking_active`.`strain_name` AS `strain_name`,'Pound' AS `uom`,`bucking_active`.`active_quantity` AS `quantity`,`bucking_active`.`bin_count` AS `bin_count`,`bucking_active`.`category` AS `category`,`bucking_active`.`category_type` AS `category_type`,NULL AS `size`,NULL AS `grade`,'Bucking' AS `process`,NULL AS `process_queue`,NULL AS `process_queue_type`,'Drying' AS `process_log`,NULL AS `qc_status`,'Cure Room' AS `location`,'In Progress' AS `status` from `processing`.`bucking_active` union all select `drying_active`.`date` AS `date`,`drying_active`.`metrc_tag` AS `processing_batch_source_tag`,`drying_active`.`metrc_tag` AS `metrc_tag`,`drying_active`.`harvest_id` AS `harvest_id`,`drying_active`.`test_id` AS `test`,`drying_active`.`property_id` AS `property_id`,`drying_active`.`harvest_date` AS `harvest_date`,`drying_active`.`harvest_week` AS `harvest_week`,`drying_active`.`harvest_year` AS `harvest_year`,`drying_active`.`harvest_year_week` AS `harvest_year_week`,`drying_active`.`harvest_type` AS `harvest_type`,`drying_active`.`strain_code` AS `strain_code`,`drying_active`.`strain_name` AS `strain_name`,'Pound' AS `uom`,`drying_active`.`active_quantity` AS `quantity`,`drying_active`.`bin_count` AS `bin_count`,`drying_active`.`category` AS `category`,`drying_active`.`category_type` AS `category_type`,NULL AS `size`,NULL AS `grade`,'Drying' AS `process`,NULL AS `process_queue`,NULL AS `process_queue_type`,NULL AS `process_log`,NULL AS `qc_status`,'Cure Room' AS `location`,'In Progress' AS `status` from `processing`.`drying_active` union all select `trimming_active`.`date` AS `date`,`trimming_active`.`metrc_tag` AS `processing_batch_source_tag`,`trimming_active`.`metrc_tag` AS `metrc_tag`,`trimming_active`.`harvest_id` AS `harvest_id`,`trimming_active`.`test_id` AS `test`,`trimming_active`.`property_id` AS `property_id`,`trimming_active`.`harvest_date` AS `harvest_date`,`trimming_active`.`harvest_week` AS `harvest_week`,`trimming_active`.`harvest_year` AS `harvest_year`,`trimming_active`.`harvest_year_week` AS `harvest_year_week`,`trimming_active`.`harvest_type` AS `harvest_type`,`trimming_active`.`strain_code` AS `strain_code`,`trimming_active`.`strain_name` AS `strain_name`,'Pound' AS `uom`,`trimming_active`.`active_quantity` AS `quantity`,`trimming_active`.`bin_count` AS `bin_count`,`trimming_active`.`category` AS `category`,`trimming_active`.`category_type` AS `category_type`,NULL AS `size`,NULL AS `grade`,'Trimming' AS `process`,NULL AS `process_queue`,NULL AS `process_queue_type`,'Drying,Bucking' AS `process_log`,NULL AS `qc_status`,'Processing Room' AS `location`,'In Progress' AS `status` from `processing`.`trimming_active` union all select `sorting_active`.`date` AS `date`,`sorting_active`.`metrc_tag` AS `processing_batch_source_tag`,`sorting_active`.`metrc_tag` AS `metrc_tag`,`sorting_active`.`harvest_id` AS `harvest_id`,`sorting_active`.`test_id` AS `test`,`sorting_active`.`property_id` AS `property_id`,`sorting_active`.`harvest_date` AS `harvest_date`,`sorting_active`.`harvest_week` AS `harvest_week`,`sorting_active`.`harvest_year` AS `harvest_year`,`sorting_active`.`harvest_year_week` AS `harvest_year_week`,`sorting_active`.`harvest_type` AS `harvest_type`,`sorting_active`.`strain_code` AS `strain_code`,`sorting_active`.`strain_name` AS `strain_name`,'Pound' AS `uom`,`sorting_active`.`active_quantity` AS `quantity`,`sorting_active`.`bin_count` AS `bin_count`,`sorting_active`.`category` AS `category`,`sorting_active`.`category_type` AS `category_type`,NULL AS `size`,NULL AS `grade`,'Sorting' AS `process`,NULL AS `process_queue`,NULL AS `process_queue_type`,'Drying,Bucking,Trimming' AS `process_log`,NULL AS `qc_status`,'QA/QC' AS `location`,'In Progress' AS `status` from `processing`.`sorting_active`

-- View: syncwith.processing_active_unsorted
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `processing_active_unsorted` AS select `processing_active`.`date` AS `date`,`processing_active`.`processing_batch_source_tag` AS `processing_batch_source_tag`,`processing_active`.`metrc_tag` AS `metrc_tag`,`processing_active`.`harvest_id` AS `harvest_id`,`processing_active`.`test` AS `test`,`processing_active`.`property_id` AS `property_id`,`processing_active`.`harvest_date` AS `harvest_date`,`processing_active`.`harvest_week` AS `harvest_week`,`processing_active`.`harvest_year` AS `harvest_year`,`processing_active`.`harvest_year_week` AS `harvest_year_week`,`processing_active`.`harvest_type` AS `harvest_type`,`processing_active`.`strain_code` AS `strain_code`,`processing_active`.`strain_name` AS `strain_name`,`processing_active`.`uom` AS `uom`,`processing_active`.`quantity` AS `quantity`,`processing_active`.`bin_count` AS `bin_count`,`processing_active`.`category` AS `category`,`processing_active`.`category_type` AS `category_type`,`processing_active`.`size` AS `size`,`processing_active`.`grade` AS `grade`,`processing_active`.`process` AS `process`,`processing_active`.`process_queue` AS `process_queue`,`processing_active`.`process_queue_type` AS `process_queue_type`,`processing_active`.`process_log` AS `process_log`,`processing_active`.`qc_status` AS `qc_status`,`processing_active`.`location` AS `location` from `processing_active` where (`processing_active`.`qc_status` = 'Unsorted')

-- View: syncwith.processing_batch_last_8_WK
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `processing_batch_last_8_WK` AS select `mv`.`flowering_id` AS `flowering_id`,`mv`.`harvesting_id` AS `harvesting_id`,`mv`.`metrc_tag` AS `metrc_tag`,`mv`.`process` AS `process`,`mv`.`batch_id` AS `batch_id`,`mv`.`date` AS `date`,`mv`.`batch_status` AS `batch_status`,`mv`.`flowering_id_name` AS `flowering_id_name`,`mv`.`harvest_id` AS `harvest_id`,`mv`.`test_id` AS `test_id`,`mv`.`flowering_crop` AS `flowering_crop`,`mv`.`harvest_name` AS `harvest_name`,`mv`.`property_id` AS `property_id`,`mv`.`harvest_date` AS `harvest_date`,`mv`.`harvest_week` AS `harvest_week`,`mv`.`harvest_year` AS `harvest_year`,`mv`.`harvest_year_week` AS `harvest_year_week`,`mv`.`harvest_type` AS `harvest_type`,`mv`.`flower_plant_count` AS `flower_plant_count`,`mv`.`harvest_plant_count` AS `harvest_plant_count`,`mv`.`strain_code` AS `strain_code`,`mv`.`strain_name` AS `strain_name`,`mv`.`input_category` AS `input_category`,`mv`.`input_category_type` AS `input_category_type`,`mv`.`input_product_size` AS `input_product_size`,`mv`.`input_product_grade` AS `input_product_grade`,`mv`.`input_quantity` AS `input_quantity`,`mv`.`output_category` AS `output_category`,`mv`.`output_category_type` AS `output_category_type`,`mv`.`output_size` AS `output_size`,`mv`.`output_grade` AS `output_grade`,`mv`.`output_quantity` AS `output_quantity` from `processing`.`batch_production_MV` `mv` where (`mv`.`harvest_date` >= (curdate() - interval 8 week)) order by `mv`.`harvest_date` desc

-- View: syncwith.product_combination
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `product_combination` AS select `b`.`name` AS `brand_name`,`c`.`code` AS `category_code`,`c`.`name` AS `category_name`,`ct`.`name` AS `category_type_name`,`p`.`code` AS `package_code`,`p`.`name` AS `package_name`,`ps`.`code` AS `package_size_code`,`ps`.`name` AS `package_size_name`,`prod`.`status` AS `status`,`prod`.`id` AS `id`,`prod`.`brand` AS `brand`,`prod`.`category` AS `category`,`prod`.`category_type` AS `category_type`,`prod`.`package` AS `package`,`prod`.`package_size` AS `package_size` from (((((`product_sku`.`product_combination` `prod` left join `product_sku`.`category` `c` on((`prod`.`category` = `c`.`id`))) left join `pacstone`.`brand` `b` on((`prod`.`brand` = `b`.`id`))) left join `product_sku`.`category_type` `ct` on((`prod`.`category_type` = `ct`.`id`))) left join `product_sku`.`package` `p` on((`prod`.`package` = `p`.`id`))) left join `product_sku`.`package_size` `ps` on((`prod`.`package_size` = `ps`.`id`)))

-- View: syncwith.production_inv_iap
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `production_inv_iap` AS select `s`.`Item` AS `Item`,`s`.`Item_Name` AS `Item_Name`,`s`.`Location` AS `Location`,`s`.`Total_Qty` AS `Total Qty`,concat((trim(round((`s`.`Total_Qty` / `p`.`qty_in_pile`),2)) + 0),' ',`p`.`label_plural`) AS `Qty Display` from ((select `ial`.`inventory_item` AS `Item`,max(`item`.`name`) AS `Item_Name`,sum(`ial`.`qty_base`) AS `Total_Qty`,(case when (`l`.`location_string` = 'VEHICLE') then 'VEHICLE' when (`l`.`location_string` = 'VENDOR') then 'VENDOR' else `l`.`location_level1` end) AS `Location` from ((`pacstone_inventory`.`inventory_at_location` `ial` join `pacstone`.`location` `l` on((`ial`.`location` = `l`.`id`))) join `pacstone_inventory`.`inventory_item` `item` on((`ial`.`inventory_item` = `item`.`id`))) where ((`ial`.`status` = 'Active') and (`ial`.`qty_base` <> 0) and (`item`.`status` in ('Active','Pending Deactivation'))) group by `ial`.`inventory_item`,(case when (`l`.`location_string` = 'VEHICLE') then 'VEHICLE' when (`l`.`location_string` = 'VENDOR') then 'VENDOR' else `l`.`location_level1` end)) `s` join `pacstone_inventory`.`inventory_pile` `p` on(((`p`.`inventory_item` = `s`.`Item`) and (`p`.`is_primary_default` = 1))))

-- View: syncwith.production_inv_iap2
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `production_inv_iap2` AS select `s`.`Item` AS `Item`,`s`.`Item_Name` AS `Item_Name`,sum((case when (`s`.`Location` = 'VEHICLE') then `s`.`Total_Qty` else 0 end)) AS `VEHICLE`,sum((case when (`s`.`Location` = 'VENDOR') then `s`.`Total_Qty` else 0 end)) AS `VENDOR`,sum((case when (`s`.`Location` not in ('VEHICLE','VENDOR')) then `s`.`Total_Qty` else 0 end)) AS `Other_Locations`,concat((trim(round((sum(`s`.`Total_Qty`) / `p`.`qty_in_pile`),2)) + 0),' ',`p`.`label_plural`) AS `Qty Display` from ((select `ial`.`inventory_item` AS `Item`,max(`item`.`name`) AS `Item_Name`,sum(`ial`.`qty_base`) AS `Total_Qty`,(case when (`l`.`location_string` = 'VEHICLE') then 'VEHICLE' when (`l`.`location_string` = 'VENDOR') then 'VENDOR' else `l`.`location_level1` end) AS `Location` from ((`pacstone_inventory`.`inventory_at_location` `ial` join `pacstone`.`location` `l` on((`ial`.`location` = `l`.`id`))) join `pacstone_inventory`.`inventory_item` `item` on((`ial`.`inventory_item` = `item`.`id`))) where ((`ial`.`status` = 'Active') and (`ial`.`qty_base` <> 0) and (`item`.`status` in ('Active','Pending Deactivation'))) group by `ial`.`inventory_item`,(case when (`l`.`location_string` = 'VEHICLE') then 'VEHICLE' when (`l`.`location_string` = 'VENDOR') then 'VENDOR' else `l`.`location_level1` end)) `s` join `pacstone_inventory`.`inventory_pile` `p` on(((`p`.`inventory_item` = `s`.`Item`) and (`p`.`is_primary_default` = 1)))) group by `s`.`Item`,`s`.`Item_Name`,`p`.`label_plural`

-- View: syncwith.schedule_view
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `schedule_view` AS select `ps`.`id` AS `schedule_id`,`psd`.`id` AS `detail_id`,`ps`.`transfer_type` AS `transfer_type`,`ps`.`status` AS `Status`,`ps`.`year_num` AS `year_num`,`ps`.`week_num` AS `week_num`,concat(`ps`.`year_num`,right(concat('0',`ps`.`week_num`),2)) AS `year_week`,`c`.`name` AS `name`,`c`.`capacity` AS `capacity`,`c`.`location_string` AS `location_string`,`c`.`property_id` AS `property_id`,`c`.`cannabis_license_id` AS `cannabis_license_id`,`psd`.`strain_id` AS `strain_id`,`psd`.`date` AS `date`,`psd`.`plant_count` AS `plant_count`,`psd`.`priority` AS `priority`,`psd`.`action` AS `Batch Status`,`s`.`strain_code` AS `Strain Code`,`s`.`name` AS `Strain Name`,`s`.`category` AS `strain_category` from (((`cultivation`.`plant_schedule` `ps` left join `cultivation`.`plant_schedule_detail` `psd` on((`ps`.`id` = `psd`.`plant_schedule_id`))) left join `pacstone`.`canopy` `c` on((`psd`.`canopy_id` = convert(`c`.`id` using utf8mb4)))) left join `pacstone`.`plant_strain` `s` on((`psd`.`strain_id` = convert(`s`.`id` using utf8mb4)))) where ((`psd`.`action` in ('Scheduled','In Progress')) and (`ps`.`status` = 'Active')) order by concat(`ps`.`year_num`,right(concat('0',`ps`.`week_num`),2)) desc,`ps`.`transfer_type` desc,`s`.`strain_code`

-- View: syncwith.sku_view
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `sku_view` AS select `product_sku`.`sku`.`id` AS `id`,concat(`b`.`code`,'-',`c`.`code`,'-',`ps`.`code`,'-',`p`.`code`,'-',`s`.`id`,(case when ((`product_sku`.`sku`.`class` = 'Retail') or (`product_sku`.`sku`.`class` is null)) then '' when (`product_sku`.`sku`.`class` = 'Promo') then ' [xP]' when (`product_sku`.`sku`.`class` = 'Sample') then ' [xT]' end),coalesce(`pg`.`code`,'')) AS `sku`,`product_sku`.`sku`.`kss_id` AS `KSS ID`,concat(`b`.`name`,' - ',`c`.`name`,' ',`p`.`name`,' [',`ps`.`code`,'] - ',(case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end),(case when ((`product_sku`.`sku`.`class` = 'Retail') or (`product_sku`.`sku`.`class` is null)) then '' when (`product_sku`.`sku`.`class` = 'Promo') then ' [xP]' when (`product_sku`.`sku`.`class` = 'Sample') then ' [xT]' end),coalesce(`pg`.`name`,' ')) AS `SKU Name`,`product_sku`.`sku`.`status` AS `Status`,`product_sku`.`sku`.`stage` AS `Stage`,`b`.`name` AS `Brand`,`c`.`name` AS `Category`,`p`.`name` AS `Package`,`pc`.`display_qty` AS `Display QTY`,`ps`.`code` AS `Weight`,`ps`.`name` AS `Weight Name`,`pg`.`label` AS `SKU Group`,`pg`.`quantity` AS `SKU Group QTY`,`s`.`id` AS `Strain ID`,`s`.`strain_code` AS `Strain Code`,`s`.`name` AS `Plant Strain`,(case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end) AS `SKU Strain Name`,`s`.`category` AS `Strain Type`,`product_sku`.`sku`.`upc` AS `UPC`,`product_sku`.`sku`.`class` AS `SKU Class` from (((((((`product_sku`.`sku` left join `pacstone`.`brand` `b` on((`product_sku`.`sku`.`brand` = `b`.`id`))) left join `product_sku`.`category` `c` on((`product_sku`.`sku`.`category` = `c`.`id`))) left join `product_sku`.`package` `p` on((`product_sku`.`sku`.`package` = `p`.`id`))) left join `product_sku`.`package_size` `ps` on((`product_sku`.`sku`.`package_size` = `ps`.`id`))) left join `pacstone`.`plant_strain` `s` on((`product_sku`.`sku`.`plant_strain` = `s`.`id`))) left join `product_sku`.`product_combination` `pc` on((`product_sku`.`sku`.`product_combination` = `pc`.`id`))) left join `product_sku`.`packing_group` `pg` on((`pg`.`id` = `product_sku`.`sku`.`packing_group`))) where ((`product_sku`.`sku`.`status` = 'Active') and (`pg`.`label` <> 'Each')) order by `b`.`name`,`s`.`name`

-- View: syncwith.trimming_machine_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_machine_batch_view` AS select `h`.`flowering_id` AS `Flowering ID`,`t`.`harvesting_id` AS `Harvesting ID`,`t`.`batch_id` AS `Processing ID`,`fl`.`flowering_id` AS `FID`,`h`.`harvest_id` AS `HID`,`h`.`date` AS `Harvest Date`,week(`h`.`date`,0) AS `Harvest Week`,year(`h`.`date`) AS `Harvest Year`,`h`.`test_id` AS `Test ID`,`h`.`harvest_type` AS `Harvest Type`,`fl`.`plant_count` AS `Crop Plant Count`,`h`.`plant_count_harvested` AS `Harvested Plant Count`,max(`strain`.`strain_code`) AS `Strain ID`,max(`strain`.`name`) AS `Plant Strain`,max(`t`.`source_metrc_tag`) AS `Processing Batch METRC`,max(`t`.`processing_batch_source_tag`) AS `Source METRC`,`t`.`id` AS `Trimming Batch ID`,`t`.`metrc_tag` AS `METRC Tag`,`t`.`process_type` AS `Trimming Type`,`t`.`category_id` AS `Product Category`,`t`.`category_type_id` AS `Product Category Type`,max(`t`.`quantity`) AS `Input Lbs`,max(`SUM`.`bin_count`) AS `Bin Count Recieved`,sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) AS `Trimmed Flower lbs`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `Reg Flower - A lbs`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`product_size_id` = 'R') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `Reg Flower - B lbs`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`product_size_id` = 'R') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `Reg Flower - C lbs`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `Big Flower - A lbs`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `Small Flower - A lbs`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `Shake lbs`,sum((case when (`td`.`category_type_id` = 'SK-CTP-56d3') then `td`.`quantity` else 0 end)) AS `Trim lbs`,sum((case when ((`td`.`category_type_id` = 'SK-CTP-daf5') and (`td`.`category_id` = 'SK-CTG-a60f')) then `td`.`quantity` else 0 end)) AS `Trimming Waste lbs`,if((sum(`td`.`quantity`) is null),0,(max(`t`.`quantity`) - max(`td`.`quantity`))) AS `Misc Trimming Waste lbs`,(sum((case when ((`td`.`category_type_id` = 'SK-CTP-daf5') and (`td`.`category_id` = 'SK-CTG-a60f')) then `td`.`quantity` else 0 end)) + if((sum(`td`.`quantity`) is null),0,(max(`t`.`quantity`) - sum(`td`.`quantity`)))) AS `Total Trimmed Waste lbs`,((sum(`t`.`quantity`) - sum(`td`.`quantity`)) / sum(`t`.`quantity`)) AS `Trimmed Waste %`,count(`t`.`id`) AS `Trimmed  Flower Bins`,min(`pl`.`process_start`) AS `Process Start`,min(`pl`.`process_stop`) AS `Process Stop`,timediff(min(`pl`.`process_stop`),min(`pl`.`process_start`)) AS `Trimming Duration`,`t`.`action` AS `Process Status`,max(`pl`.`id`) AS `Process Log`,max(`pl`.`process_name`) AS `Record Status`,`t`.`status` AS `Process Queue`,count(`td`.`process_queue_id`) AS `Process Queue Count`,max(`td`.`process_queue_type`) AS `Process Queue Type`,`t`.`note` AS `Notes`,`t`.`created_by` AS `Created By`,`t`.`created_on` AS `Created On`,`t`.`modified_by` AS `Modified By`,max(`t`.`modified_on`) AS `Modified On` from ((((((`processing`.`trimming_batch` `t` left join `processing`.`trimming_details` `td` on((`t`.`id` = `td`.`trimming_batch_id`))) left join `processing`.`trimming_detail_view` `SUM` on((`t`.`id` = `SUM`.`trimming_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `t`.`harvesting_id`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `t`.`strain_id`))) left join `cultivation`.`flowering` `fl` on((`fl`.`id` = `h`.`flowering_id`))) left join `processing`.`process_log` `pl` on((`pl`.`source_id` = `t`.`id`))) where (`t`.`process_type` = 'T-zero Machine') group by `t`.`id`

-- View: syncwith.tzero_settings_batch_log
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `tzero_settings_batch_log` AS select `tb`.`harvest_metric_id` AS `Harvest Metrc Tag`,`tb`.`bucked_weight_batch` AS `Bucked Batch Weight`,`tb`.`retrim_batch` AS `Retrim Batch`,`tb`.`machine_operator` AS `Machine Operator`,`tb`.`processing_metrc_id` AS `Processing METRC ID`,`tb`.`qty_bins` AS `Bin Quantity`,`tb`.`batch_weight` AS `Batch Weight`,`tb`.`tzero_retrim_weight` AS `T-Zero Retrim Weight`,`tb`.`lbs_per_hour` AS `lbs per hour`,`tb`.`harvest_id` AS `Harvest ID`,`tb`.`date` AS `Batch Start Date`,`tb`.`week_num` AS `Week Numbers`,`tb`.`time_start` AS `Start Time`,`tb`.`time_end` AS `Finish Time`,`tb`.`time_total` AS `Total Run Time`,`tb`.`tzero_run_number` AS `T-Zero Run Count` from `processing`.`tzero_batch` `tb` where ((`tb`.`date` >= (curdate() - interval 52 week)) and (`tb`.`tzero_retrim_weight` is null))

-- View: syncwith.veg_active_inventory
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `veg_active_inventory` AS select `b`.`name` AS `name`,`b`.`date` AS `date`,`b`.`property_id` AS `property_id`,`b`.`week` AS `week`,`b`.`year` AS `year`,`b`.`year_week` AS `year_week`,`b`.`strain_id` AS `strain_id`,`b`.`license_id` AS `license_id`,`b`.`test_id` AS `test_id`,`b`.`location_string` AS `location_string`,`v`.`plant_count` AS `plant_count`,`v`.`flat_plant_count` AS `plants_per_batch`,`v`.`flats` AS `total_batch_count`,`v`.`action` AS `action` from (`cultivation`.`veg` `v` left join `pacstone`.`batch` `b` on((`v`.`batch_id` = convert(`b`.`id` using utf8mb4)))) where (`v`.`status` = 'Active')

-- View: syncwith.vendor
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `vendor` AS select `vend`.`id` AS `id`,`vend`.`category` AS `category`,`vend`.`type` AS `type`,`vend`.`name` AS `name`,`vend`.`business_entity` AS `business_entity`,`vend`.`shipping_address` AS `shipping_address`,`vend`.`mailing_address` AS `mailing_address`,`vend`.`billing_address` AS `billing_address`,`vend`.`email` AS `email`,`vend`.`phone` AS `phone`,`vend`.`contact_name` AS `contact_name`,`vend`.`contact_email` AS `contact_email`,`vend`.`contact_phone` AS `contact_phone`,`vend`.`note` AS `note`,`vend`.`status` AS `status`,`vend`.`created_on` AS `created_on`,`vend`.`created_by` AS `created_by`,`vend`.`modify_on` AS `modify_on`,`vend`.`modify_by` AS `modify_by`,`vend`.`flag` AS `flag`,`vend`.`trigger` AS `trigger`,`vend`.`cannabis_license` AS `cannabis_license`,`vend`.`cannabis_license_type` AS `cannabis_license_type` from `crm`.`company_org` `vend`

-- View: sys.host_summary
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `host_summary` (`host`,`statements`,`statement_latency`,`statement_avg_latency`,`table_scans`,`file_ios`,`file_io_latency`,`current_connections`,`total_connections`,`unique_users`,`current_memory`,`total_memory_allocated`) AS select if((`performance_schema`.`accounts`.`HOST` is null),'background',`performance_schema`.`accounts`.`HOST`) AS `host`,sum(`stmt`.`total`) AS `statements`,`sys`.`format_time`(sum(`stmt`.`total_latency`)) AS `statement_latency`,`sys`.`format_time`(ifnull((sum(`stmt`.`total_latency`) / nullif(sum(`stmt`.`total`),0)),0)) AS `statement_avg_latency`,sum(`stmt`.`full_scans`) AS `table_scans`,sum(`io`.`ios`) AS `file_ios`,`sys`.`format_time`(sum(`io`.`io_latency`)) AS `file_io_latency`,sum(`performance_schema`.`accounts`.`CURRENT_CONNECTIONS`) AS `current_connections`,sum(`performance_schema`.`accounts`.`TOTAL_CONNECTIONS`) AS `total_connections`,count(distinct `performance_schema`.`accounts`.`USER`) AS `unique_users`,`sys`.`format_bytes`(sum(`mem`.`current_allocated`)) AS `current_memory`,`sys`.`format_bytes`(sum(`mem`.`total_allocated`)) AS `total_memory_allocated` from (((`performance_schema`.`accounts` join `x$host_summary_by_statement_latency` `stmt` on((`performance_schema`.`accounts`.`HOST` = `stmt`.`host`))) join `x$host_summary_by_file_io` `io` on((`performance_schema`.`accounts`.`HOST` = `io`.`host`))) join `x$memory_by_host_by_current_bytes` `mem` on((`performance_schema`.`accounts`.`HOST` = `mem`.`host`))) group by if((`performance_schema`.`accounts`.`HOST` is null),'background',`performance_schema`.`accounts`.`HOST`)

-- View: sys.host_summary_by_file_io
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `host_summary_by_file_io` (`host`,`ios`,`io_latency`) AS select if((`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST`) AS `host`,sum(`performance_schema`.`events_waits_summary_by_host_by_event_name`.`COUNT_STAR`) AS `ios`,`sys`.`format_time`(sum(`performance_schema`.`events_waits_summary_by_host_by_event_name`.`SUM_TIMER_WAIT`)) AS `io_latency` from `performance_schema`.`events_waits_summary_by_host_by_event_name` where (`performance_schema`.`events_waits_summary_by_host_by_event_name`.`EVENT_NAME` like 'wait/io/file/%') group by if((`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST`) order by sum(`performance_schema`.`events_waits_summary_by_host_by_event_name`.`SUM_TIMER_WAIT`) desc

-- View: sys.host_summary_by_file_io_type
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `host_summary_by_file_io_type` (`host`,`event_name`,`total`,`total_latency`,`max_latency`) AS select if((`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST`) AS `host`,`performance_schema`.`events_waits_summary_by_host_by_event_name`.`EVENT_NAME` AS `event_name`,`performance_schema`.`events_waits_summary_by_host_by_event_name`.`COUNT_STAR` AS `total`,`sys`.`format_time`(`performance_schema`.`events_waits_summary_by_host_by_event_name`.`SUM_TIMER_WAIT`) AS `total_latency`,`sys`.`format_time`(`performance_schema`.`events_waits_summary_by_host_by_event_name`.`MAX_TIMER_WAIT`) AS `max_latency` from `performance_schema`.`events_waits_summary_by_host_by_event_name` where ((`performance_schema`.`events_waits_summary_by_host_by_event_name`.`EVENT_NAME` like 'wait/io/file%') and (`performance_schema`.`events_waits_summary_by_host_by_event_name`.`COUNT_STAR` > 0)) order by if((`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST`),`performance_schema`.`events_waits_summary_by_host_by_event_name`.`SUM_TIMER_WAIT` desc

-- View: sys.host_summary_by_stages
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `host_summary_by_stages` (`host`,`event_name`,`total`,`total_latency`,`avg_latency`) AS select if((`performance_schema`.`events_stages_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_stages_summary_by_host_by_event_name`.`HOST`) AS `host`,`performance_schema`.`events_stages_summary_by_host_by_event_name`.`EVENT_NAME` AS `event_name`,`performance_schema`.`events_stages_summary_by_host_by_event_name`.`COUNT_STAR` AS `total`,`sys`.`format_time`(`performance_schema`.`events_stages_summary_by_host_by_event_name`.`SUM_TIMER_WAIT`) AS `total_latency`,`sys`.`format_time`(`performance_schema`.`events_stages_summary_by_host_by_event_name`.`AVG_TIMER_WAIT`) AS `avg_latency` from `performance_schema`.`events_stages_summary_by_host_by_event_name` where (`performance_schema`.`events_stages_summary_by_host_by_event_name`.`SUM_TIMER_WAIT` <> 0) order by if((`performance_schema`.`events_stages_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_stages_summary_by_host_by_event_name`.`HOST`),`performance_schema`.`events_stages_summary_by_host_by_event_name`.`SUM_TIMER_WAIT` desc

-- View: sys.host_summary_by_statement_latency
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `host_summary_by_statement_latency` (`host`,`total`,`total_latency`,`max_latency`,`lock_latency`,`rows_sent`,`rows_examined`,`rows_affected`,`full_scans`) AS select if((`performance_schema`.`events_statements_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_statements_summary_by_host_by_event_name`.`HOST`) AS `host`,sum(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`COUNT_STAR`) AS `total`,`sys`.`format_time`(sum(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_TIMER_WAIT`)) AS `total_latency`,`sys`.`format_time`(max(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`MAX_TIMER_WAIT`)) AS `max_latency`,`sys`.`format_time`(sum(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_LOCK_TIME`)) AS `lock_latency`,sum(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_ROWS_SENT`) AS `rows_sent`,sum(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_ROWS_EXAMINED`) AS `rows_examined`,sum(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_ROWS_AFFECTED`) AS `rows_affected`,(sum(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_NO_INDEX_USED`) + sum(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_NO_GOOD_INDEX_USED`)) AS `full_scans` from `performance_schema`.`events_statements_summary_by_host_by_event_name` group by if((`performance_schema`.`events_statements_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_statements_summary_by_host_by_event_name`.`HOST`) order by sum(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_TIMER_WAIT`) desc

-- View: sys.host_summary_by_statement_type
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `host_summary_by_statement_type` (`host`,`statement`,`total`,`total_latency`,`max_latency`,`lock_latency`,`rows_sent`,`rows_examined`,`rows_affected`,`full_scans`) AS select if((`performance_schema`.`events_statements_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_statements_summary_by_host_by_event_name`.`HOST`) AS `host`,substring_index(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`EVENT_NAME`,'/',-(1)) AS `statement`,`performance_schema`.`events_statements_summary_by_host_by_event_name`.`COUNT_STAR` AS `total`,`sys`.`format_time`(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_TIMER_WAIT`) AS `total_latency`,`sys`.`format_time`(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`MAX_TIMER_WAIT`) AS `max_latency`,`sys`.`format_time`(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_LOCK_TIME`) AS `lock_latency`,`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_ROWS_SENT` AS `rows_sent`,`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_ROWS_EXAMINED` AS `rows_examined`,`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_ROWS_AFFECTED` AS `rows_affected`,(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_NO_INDEX_USED` + `performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_NO_GOOD_INDEX_USED`) AS `full_scans` from `performance_schema`.`events_statements_summary_by_host_by_event_name` where (`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_TIMER_WAIT` <> 0) order by if((`performance_schema`.`events_statements_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_statements_summary_by_host_by_event_name`.`HOST`),`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_TIMER_WAIT` desc

-- View: sys.innodb_buffer_stats_by_schema
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `innodb_buffer_stats_by_schema` (`object_schema`,`allocated`,`data`,`pages`,`pages_hashed`,`pages_old`,`rows_cached`) AS select if((locate('.',`ibp`.`TABLE_NAME`) = 0),'InnoDB System',replace(substring_index(`ibp`.`TABLE_NAME`,'.',1),'`','')) AS `object_schema`,`sys`.`format_bytes`(sum(if((`ibp`.`COMPRESSED_SIZE` = 0),16384,`ibp`.`COMPRESSED_SIZE`))) AS `allocated`,`sys`.`format_bytes`(sum(`ibp`.`DATA_SIZE`)) AS `data`,count(`ibp`.`PAGE_NUMBER`) AS `pages`,count(if((`ibp`.`IS_HASHED` = 'YES'),1,NULL)) AS `pages_hashed`,count(if((`ibp`.`IS_OLD` = 'YES'),1,NULL)) AS `pages_old`,round((sum(`ibp`.`NUMBER_RECORDS`) / count(distinct `ibp`.`INDEX_NAME`)),0) AS `rows_cached` from `information_schema`.`INNODB_BUFFER_PAGE` `ibp` where (`ibp`.`TABLE_NAME` is not null) group by `object_schema` order by sum(if((`ibp`.`COMPRESSED_SIZE` = 0),16384,`ibp`.`COMPRESSED_SIZE`)) desc

-- View: sys.innodb_buffer_stats_by_table
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `innodb_buffer_stats_by_table` (`object_schema`,`object_name`,`allocated`,`data`,`pages`,`pages_hashed`,`pages_old`,`rows_cached`) AS select if((locate('.',`ibp`.`TABLE_NAME`) = 0),'InnoDB System',replace(substring_index(`ibp`.`TABLE_NAME`,'.',1),'`','')) AS `object_schema`,replace(substring_index(`ibp`.`TABLE_NAME`,'.',-(1)),'`','') AS `object_name`,`sys`.`format_bytes`(sum(if((`ibp`.`COMPRESSED_SIZE` = 0),16384,`ibp`.`COMPRESSED_SIZE`))) AS `allocated`,`sys`.`format_bytes`(sum(`ibp`.`DATA_SIZE`)) AS `data`,count(`ibp`.`PAGE_NUMBER`) AS `pages`,count(if((`ibp`.`IS_HASHED` = 'YES'),1,NULL)) AS `pages_hashed`,count(if((`ibp`.`IS_OLD` = 'YES'),1,NULL)) AS `pages_old`,round((sum(`ibp`.`NUMBER_RECORDS`) / count(distinct `ibp`.`INDEX_NAME`)),0) AS `rows_cached` from `information_schema`.`INNODB_BUFFER_PAGE` `ibp` where (`ibp`.`TABLE_NAME` is not null) group by `object_schema`,`object_name` order by sum(if((`ibp`.`COMPRESSED_SIZE` = 0),16384,`ibp`.`COMPRESSED_SIZE`)) desc

-- View: sys.innodb_lock_waits
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `innodb_lock_waits` (`wait_started`,`wait_age`,`wait_age_secs`,`locked_table`,`locked_table_schema`,`locked_table_name`,`locked_table_partition`,`locked_table_subpartition`,`locked_index`,`locked_type`,`waiting_trx_id`,`waiting_trx_started`,`waiting_trx_age`,`waiting_trx_rows_locked`,`waiting_trx_rows_modified`,`waiting_pid`,`waiting_query`,`waiting_lock_id`,`waiting_lock_mode`,`blocking_trx_id`,`blocking_pid`,`blocking_query`,`blocking_lock_id`,`blocking_lock_mode`,`blocking_trx_started`,`blocking_trx_age`,`blocking_trx_rows_locked`,`blocking_trx_rows_modified`,`sql_kill_blocking_query`,`sql_kill_blocking_connection`) AS select `r`.`trx_wait_started` AS `wait_started`,timediff(now(),`r`.`trx_wait_started`) AS `wait_age`,timestampdiff(SECOND,`r`.`trx_wait_started`,now()) AS `wait_age_secs`,concat(`sys`.`quote_identifier`(`rl`.`OBJECT_SCHEMA`),'.',`sys`.`quote_identifier`(`rl`.`OBJECT_NAME`)) AS `locked_table`,`rl`.`OBJECT_SCHEMA` AS `locked_table_schema`,`rl`.`OBJECT_NAME` AS `locked_table_name`,`rl`.`PARTITION_NAME` AS `locked_table_partition`,`rl`.`SUBPARTITION_NAME` AS `locked_table_subpartition`,`rl`.`INDEX_NAME` AS `locked_index`,`rl`.`LOCK_TYPE` AS `locked_type`,`r`.`trx_id` AS `waiting_trx_id`,`r`.`trx_started` AS `waiting_trx_started`,timediff(now(),`r`.`trx_started`) AS `waiting_trx_age`,`r`.`trx_rows_locked` AS `waiting_trx_rows_locked`,`r`.`trx_rows_modified` AS `waiting_trx_rows_modified`,`r`.`trx_mysql_thread_id` AS `waiting_pid`,`sys`.`format_statement`(`r`.`trx_query`) AS `waiting_query`,`rl`.`ENGINE_LOCK_ID` AS `waiting_lock_id`,`rl`.`LOCK_MODE` AS `waiting_lock_mode`,`b`.`trx_id` AS `blocking_trx_id`,`b`.`trx_mysql_thread_id` AS `blocking_pid`,`sys`.`format_statement`(`b`.`trx_query`) AS `blocking_query`,`bl`.`ENGINE_LOCK_ID` AS `blocking_lock_id`,`bl`.`LOCK_MODE` AS `blocking_lock_mode`,`b`.`trx_started` AS `blocking_trx_started`,timediff(now(),`b`.`trx_started`) AS `blocking_trx_age`,`b`.`trx_rows_locked` AS `blocking_trx_rows_locked`,`b`.`trx_rows_modified` AS `blocking_trx_rows_modified`,concat('KILL QUERY ',`b`.`trx_mysql_thread_id`) AS `sql_kill_blocking_query`,concat('KILL ',`b`.`trx_mysql_thread_id`) AS `sql_kill_blocking_connection` from ((((`performance_schema`.`data_lock_waits` `w` join `information_schema`.`INNODB_TRX` `b` on((convert(`b`.`trx_id` using utf8mb4) = cast(`w`.`BLOCKING_ENGINE_TRANSACTION_ID` as char charset utf8mb4)))) join `information_schema`.`INNODB_TRX` `r` on((convert(`r`.`trx_id` using utf8mb4) = cast(`w`.`REQUESTING_ENGINE_TRANSACTION_ID` as char charset utf8mb4)))) join `performance_schema`.`data_locks` `bl` on((`bl`.`ENGINE_LOCK_ID` = `w`.`BLOCKING_ENGINE_LOCK_ID`))) join `performance_schema`.`data_locks` `rl` on((`rl`.`ENGINE_LOCK_ID` = `w`.`REQUESTING_ENGINE_LOCK_ID`))) order by `r`.`trx_wait_started`

-- View: sys.io_by_thread_by_latency
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `io_by_thread_by_latency` (`user`,`total`,`total_latency`,`min_latency`,`avg_latency`,`max_latency`,`thread_id`,`processlist_id`) AS select if((`performance_schema`.`threads`.`PROCESSLIST_ID` is null),substring_index(`performance_schema`.`threads`.`NAME`,'/',-(1)),concat(`performance_schema`.`threads`.`PROCESSLIST_USER`,'@',convert(`performance_schema`.`threads`.`PROCESSLIST_HOST` using utf8mb4))) AS `user`,sum(`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`COUNT_STAR`) AS `total`,`sys`.`format_time`(sum(`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`SUM_TIMER_WAIT`)) AS `total_latency`,`sys`.`format_time`(min(`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`MIN_TIMER_WAIT`)) AS `min_latency`,`sys`.`format_time`(avg(`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`AVG_TIMER_WAIT`)) AS `avg_latency`,`sys`.`format_time`(max(`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`MAX_TIMER_WAIT`)) AS `max_latency`,`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`THREAD_ID` AS `thread_id`,`performance_schema`.`threads`.`PROCESSLIST_ID` AS `processlist_id` from (`performance_schema`.`events_waits_summary_by_thread_by_event_name` left join `performance_schema`.`threads` on((`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`THREAD_ID` = `performance_schema`.`threads`.`THREAD_ID`))) where ((`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`EVENT_NAME` like 'wait/io/file/%') and (`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`SUM_TIMER_WAIT` > 0)) group by `performance_schema`.`events_waits_summary_by_thread_by_event_name`.`THREAD_ID`,`performance_schema`.`threads`.`PROCESSLIST_ID`,`user` order by sum(`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`SUM_TIMER_WAIT`) desc

-- View: sys.io_global_by_file_by_bytes
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `io_global_by_file_by_bytes` (`file`,`count_read`,`total_read`,`avg_read`,`count_write`,`total_written`,`avg_write`,`total`,`write_pct`) AS select `sys`.`format_path`(`performance_schema`.`file_summary_by_instance`.`FILE_NAME`) AS `file`,`performance_schema`.`file_summary_by_instance`.`COUNT_READ` AS `count_read`,`sys`.`format_bytes`(`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ`) AS `total_read`,`sys`.`format_bytes`(ifnull((`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` / nullif(`performance_schema`.`file_summary_by_instance`.`COUNT_READ`,0)),0)) AS `avg_read`,`performance_schema`.`file_summary_by_instance`.`COUNT_WRITE` AS `count_write`,`sys`.`format_bytes`(`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE`) AS `total_written`,`sys`.`format_bytes`(ifnull((`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE` / nullif(`performance_schema`.`file_summary_by_instance`.`COUNT_WRITE`,0)),0.00)) AS `avg_write`,`sys`.`format_bytes`((`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` + `performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE`)) AS `total`,ifnull(round((100 - ((`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` / nullif((`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` + `performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE`),0)) * 100)),2),0.00) AS `write_pct` from `performance_schema`.`file_summary_by_instance` order by (`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` + `performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE`) desc

-- View: sys.io_global_by_file_by_latency
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `io_global_by_file_by_latency` (`file`,`total`,`total_latency`,`count_read`,`read_latency`,`count_write`,`write_latency`,`count_misc`,`misc_latency`) AS select `sys`.`format_path`(`performance_schema`.`file_summary_by_instance`.`FILE_NAME`) AS `file`,`performance_schema`.`file_summary_by_instance`.`COUNT_STAR` AS `total`,`sys`.`format_time`(`performance_schema`.`file_summary_by_instance`.`SUM_TIMER_WAIT`) AS `total_latency`,`performance_schema`.`file_summary_by_instance`.`COUNT_READ` AS `count_read`,`sys`.`format_time`(`performance_schema`.`file_summary_by_instance`.`SUM_TIMER_READ`) AS `read_latency`,`performance_schema`.`file_summary_by_instance`.`COUNT_WRITE` AS `count_write`,`sys`.`format_time`(`performance_schema`.`file_summary_by_instance`.`SUM_TIMER_WRITE`) AS `write_latency`,`performance_schema`.`file_summary_by_instance`.`COUNT_MISC` AS `count_misc`,`sys`.`format_time`(`performance_schema`.`file_summary_by_instance`.`SUM_TIMER_MISC`) AS `misc_latency` from `performance_schema`.`file_summary_by_instance` order by `performance_schema`.`file_summary_by_instance`.`SUM_TIMER_WAIT` desc

-- View: sys.io_global_by_wait_by_bytes
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `io_global_by_wait_by_bytes` (`event_name`,`total`,`total_latency`,`min_latency`,`avg_latency`,`max_latency`,`count_read`,`total_read`,`avg_read`,`count_write`,`total_written`,`avg_written`,`total_requested`) AS select substring_index(`performance_schema`.`file_summary_by_event_name`.`EVENT_NAME`,'/',-(2)) AS `event_name`,`performance_schema`.`file_summary_by_event_name`.`COUNT_STAR` AS `total`,`sys`.`format_time`(`performance_schema`.`file_summary_by_event_name`.`SUM_TIMER_WAIT`) AS `total_latency`,`sys`.`format_time`(`performance_schema`.`file_summary_by_event_name`.`MIN_TIMER_WAIT`) AS `min_latency`,`sys`.`format_time`(`performance_schema`.`file_summary_by_event_name`.`AVG_TIMER_WAIT`) AS `avg_latency`,`sys`.`format_time`(`performance_schema`.`file_summary_by_event_name`.`MAX_TIMER_WAIT`) AS `max_latency`,`performance_schema`.`file_summary_by_event_name`.`COUNT_READ` AS `count_read`,`sys`.`format_bytes`(`performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_READ`) AS `total_read`,`sys`.`format_bytes`(ifnull((`performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_READ` / nullif(`performance_schema`.`file_summary_by_event_name`.`COUNT_READ`,0)),0)) AS `avg_read`,`performance_schema`.`file_summary_by_event_name`.`COUNT_WRITE` AS `count_write`,`sys`.`format_bytes`(`performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_WRITE`) AS `total_written`,`sys`.`format_bytes`(ifnull((`performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_WRITE` / nullif(`performance_schema`.`file_summary_by_event_name`.`COUNT_WRITE`,0)),0)) AS `avg_written`,`sys`.`format_bytes`((`performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_WRITE` + `performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_READ`)) AS `total_requested` from `performance_schema`.`file_summary_by_event_name` where ((`performance_schema`.`file_summary_by_event_name`.`EVENT_NAME` like 'wait/io/file/%') and (`performance_schema`.`file_summary_by_event_name`.`COUNT_STAR` > 0)) order by (`performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_WRITE` + `performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_READ`) desc

-- View: sys.io_global_by_wait_by_latency
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `io_global_by_wait_by_latency` (`event_name`,`total`,`total_latency`,`avg_latency`,`max_latency`,`read_latency`,`write_latency`,`misc_latency`,`count_read`,`total_read`,`avg_read`,`count_write`,`total_written`,`avg_written`) AS select substring_index(`performance_schema`.`file_summary_by_event_name`.`EVENT_NAME`,'/',-(2)) AS `event_name`,`performance_schema`.`file_summary_by_event_name`.`COUNT_STAR` AS `total`,`sys`.`format_time`(`performance_schema`.`file_summary_by_event_name`.`SUM_TIMER_WAIT`) AS `total_latency`,`sys`.`format_time`(`performance_schema`.`file_summary_by_event_name`.`AVG_TIMER_WAIT`) AS `avg_latency`,`sys`.`format_time`(`performance_schema`.`file_summary_by_event_name`.`MAX_TIMER_WAIT`) AS `max_latency`,`sys`.`format_time`(`performance_schema`.`file_summary_by_event_name`.`SUM_TIMER_READ`) AS `read_latency`,`sys`.`format_time`(`performance_schema`.`file_summary_by_event_name`.`SUM_TIMER_WRITE`) AS `write_latency`,`sys`.`format_time`(`performance_schema`.`file_summary_by_event_name`.`SUM_TIMER_MISC`) AS `misc_latency`,`performance_schema`.`file_summary_by_event_name`.`COUNT_READ` AS `count_read`,`sys`.`format_bytes`(`performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_READ`) AS `total_read`,`sys`.`format_bytes`(ifnull((`performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_READ` / nullif(`performance_schema`.`file_summary_by_event_name`.`COUNT_READ`,0)),0)) AS `avg_read`,`performance_schema`.`file_summary_by_event_name`.`COUNT_WRITE` AS `count_write`,`sys`.`format_bytes`(`performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_WRITE`) AS `total_written`,`sys`.`format_bytes`(ifnull((`performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_WRITE` / nullif(`performance_schema`.`file_summary_by_event_name`.`COUNT_WRITE`,0)),0)) AS `avg_written` from `performance_schema`.`file_summary_by_event_name` where ((`performance_schema`.`file_summary_by_event_name`.`EVENT_NAME` like 'wait/io/file/%') and (`performance_schema`.`file_summary_by_event_name`.`COUNT_STAR` > 0)) order by `performance_schema`.`file_summary_by_event_name`.`SUM_TIMER_WAIT` desc

-- View: sys.latest_file_io
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `latest_file_io` (`thread`,`file`,`latency`,`operation`,`requested`) AS select if((`processlist`.`ID` is null),concat(substring_index(`performance_schema`.`threads`.`NAME`,'/',-(1)),':',`performance_schema`.`events_waits_history_long`.`THREAD_ID`),convert(concat(`processlist`.`USER`,'@',`processlist`.`HOST`,':',`processlist`.`ID`) using utf8mb4)) AS `thread`,`sys`.`format_path`(`performance_schema`.`events_waits_history_long`.`OBJECT_NAME`) AS `file`,`sys`.`format_time`(`performance_schema`.`events_waits_history_long`.`TIMER_WAIT`) AS `latency`,`performance_schema`.`events_waits_history_long`.`OPERATION` AS `operation`,`sys`.`format_bytes`(`performance_schema`.`events_waits_history_long`.`NUMBER_OF_BYTES`) AS `requested` from ((`performance_schema`.`events_waits_history_long` join `performance_schema`.`threads` on((`performance_schema`.`events_waits_history_long`.`THREAD_ID` = `performance_schema`.`threads`.`THREAD_ID`))) left join `information_schema`.`PROCESSLIST` `processlist` on((`performance_schema`.`threads`.`PROCESSLIST_ID` = `processlist`.`ID`))) where ((`performance_schema`.`events_waits_history_long`.`OBJECT_NAME` is not null) and (`performance_schema`.`events_waits_history_long`.`EVENT_NAME` like 'wait/io/file/%')) order by `performance_schema`.`events_waits_history_long`.`TIMER_START`

-- View: sys.memory_by_host_by_current_bytes
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `memory_by_host_by_current_bytes` (`host`,`current_count_used`,`current_allocated`,`current_avg_alloc`,`current_max_alloc`,`total_allocated`) AS select if((`performance_schema`.`memory_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`memory_summary_by_host_by_event_name`.`HOST`) AS `host`,sum(`performance_schema`.`memory_summary_by_host_by_event_name`.`CURRENT_COUNT_USED`) AS `current_count_used`,`sys`.`format_bytes`(sum(`performance_schema`.`memory_summary_by_host_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`)) AS `current_allocated`,`sys`.`format_bytes`(ifnull((sum(`performance_schema`.`memory_summary_by_host_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`) / nullif(sum(`performance_schema`.`memory_summary_by_host_by_event_name`.`CURRENT_COUNT_USED`),0)),0)) AS `current_avg_alloc`,`sys`.`format_bytes`(max(`performance_schema`.`memory_summary_by_host_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`)) AS `current_max_alloc`,`sys`.`format_bytes`(sum(`performance_schema`.`memory_summary_by_host_by_event_name`.`SUM_NUMBER_OF_BYTES_ALLOC`)) AS `total_allocated` from `performance_schema`.`memory_summary_by_host_by_event_name` group by if((`performance_schema`.`memory_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`memory_summary_by_host_by_event_name`.`HOST`) order by sum(`performance_schema`.`memory_summary_by_host_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`) desc

-- View: sys.memory_by_thread_by_current_bytes
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `memory_by_thread_by_current_bytes` (`thread_id`,`user`,`current_count_used`,`current_allocated`,`current_avg_alloc`,`current_max_alloc`,`total_allocated`) AS select `mt`.`THREAD_ID` AS `thread_id`,if((`t`.`NAME` = 'thread/sql/one_connection'),concat(`t`.`PROCESSLIST_USER`,'@',convert(`t`.`PROCESSLIST_HOST` using utf8mb4)),replace(`t`.`NAME`,'thread/','')) AS `user`,sum(`mt`.`CURRENT_COUNT_USED`) AS `current_count_used`,`sys`.`format_bytes`(sum(`mt`.`CURRENT_NUMBER_OF_BYTES_USED`)) AS `current_allocated`,`sys`.`format_bytes`(ifnull((sum(`mt`.`CURRENT_NUMBER_OF_BYTES_USED`) / nullif(sum(`mt`.`CURRENT_COUNT_USED`),0)),0)) AS `current_avg_alloc`,`sys`.`format_bytes`(max(`mt`.`CURRENT_NUMBER_OF_BYTES_USED`)) AS `current_max_alloc`,`sys`.`format_bytes`(sum(`mt`.`SUM_NUMBER_OF_BYTES_ALLOC`)) AS `total_allocated` from (`performance_schema`.`memory_summary_by_thread_by_event_name` `mt` join `performance_schema`.`threads` `t` on((`mt`.`THREAD_ID` = `t`.`THREAD_ID`))) group by `mt`.`THREAD_ID`,if((`t`.`NAME` = 'thread/sql/one_connection'),concat(`t`.`PROCESSLIST_USER`,'@',convert(`t`.`PROCESSLIST_HOST` using utf8mb4)),replace(`t`.`NAME`,'thread/','')) order by sum(`mt`.`CURRENT_NUMBER_OF_BYTES_USED`) desc

-- View: sys.memory_by_user_by_current_bytes
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `memory_by_user_by_current_bytes` (`user`,`current_count_used`,`current_allocated`,`current_avg_alloc`,`current_max_alloc`,`total_allocated`) AS select if((`performance_schema`.`memory_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`memory_summary_by_user_by_event_name`.`USER`) AS `user`,sum(`performance_schema`.`memory_summary_by_user_by_event_name`.`CURRENT_COUNT_USED`) AS `current_count_used`,`sys`.`format_bytes`(sum(`performance_schema`.`memory_summary_by_user_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`)) AS `current_allocated`,`sys`.`format_bytes`(ifnull((sum(`performance_schema`.`memory_summary_by_user_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`) / nullif(sum(`performance_schema`.`memory_summary_by_user_by_event_name`.`CURRENT_COUNT_USED`),0)),0)) AS `current_avg_alloc`,`sys`.`format_bytes`(max(`performance_schema`.`memory_summary_by_user_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`)) AS `current_max_alloc`,`sys`.`format_bytes`(sum(`performance_schema`.`memory_summary_by_user_by_event_name`.`SUM_NUMBER_OF_BYTES_ALLOC`)) AS `total_allocated` from `performance_schema`.`memory_summary_by_user_by_event_name` group by if((`performance_schema`.`memory_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`memory_summary_by_user_by_event_name`.`USER`) order by sum(`performance_schema`.`memory_summary_by_user_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`) desc

-- View: sys.memory_global_by_current_bytes
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `memory_global_by_current_bytes` (`event_name`,`current_count`,`current_alloc`,`current_avg_alloc`,`high_count`,`high_alloc`,`high_avg_alloc`) AS select `performance_schema`.`memory_summary_global_by_event_name`.`EVENT_NAME` AS `event_name`,`performance_schema`.`memory_summary_global_by_event_name`.`CURRENT_COUNT_USED` AS `current_count`,`sys`.`format_bytes`(`performance_schema`.`memory_summary_global_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`) AS `current_alloc`,`sys`.`format_bytes`(ifnull((`performance_schema`.`memory_summary_global_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED` / nullif(`performance_schema`.`memory_summary_global_by_event_name`.`CURRENT_COUNT_USED`,0)),0)) AS `current_avg_alloc`,`performance_schema`.`memory_summary_global_by_event_name`.`HIGH_COUNT_USED` AS `high_count`,`sys`.`format_bytes`(`performance_schema`.`memory_summary_global_by_event_name`.`HIGH_NUMBER_OF_BYTES_USED`) AS `high_alloc`,`sys`.`format_bytes`(ifnull((`performance_schema`.`memory_summary_global_by_event_name`.`HIGH_NUMBER_OF_BYTES_USED` / nullif(`performance_schema`.`memory_summary_global_by_event_name`.`HIGH_COUNT_USED`,0)),0)) AS `high_avg_alloc` from `performance_schema`.`memory_summary_global_by_event_name` where (`performance_schema`.`memory_summary_global_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED` > 0) order by `performance_schema`.`memory_summary_global_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED` desc

-- View: sys.memory_global_total
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `memory_global_total` (`total_allocated`) AS select `sys`.`format_bytes`(sum(`performance_schema`.`memory_summary_global_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`)) AS `total_allocated` from `performance_schema`.`memory_summary_global_by_event_name`

-- View: sys.metrics
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `metrics` (`Variable_name`,`Variable_value`,`Type`,`Enabled`) AS select lower(`performance_schema`.`global_status`.`VARIABLE_NAME`) AS `Variable_name`,`performance_schema`.`global_status`.`VARIABLE_VALUE` AS `Variable_value`,'Global Status' AS `Type`,'YES' AS `Enabled` from `performance_schema`.`global_status` union all select `information_schema`.`INNODB_METRICS`.`NAME` AS `Variable_name`,`information_schema`.`INNODB_METRICS`.`COUNT` AS `Variable_value`,concat('InnoDB Metrics - ',`information_schema`.`INNODB_METRICS`.`SUBSYSTEM`) AS `Type`,if((`information_schema`.`INNODB_METRICS`.`STATUS` = 'enabled'),'YES','NO') AS `Enabled` from `information_schema`.`INNODB_METRICS` where (`information_schema`.`INNODB_METRICS`.`NAME` not in ('lock_row_lock_time','lock_row_lock_time_avg','lock_row_lock_time_max','lock_row_lock_waits','buffer_pool_reads','buffer_pool_read_requests','buffer_pool_write_requests','buffer_pool_wait_free','buffer_pool_read_ahead','buffer_pool_read_ahead_evicted','buffer_pool_pages_total','buffer_pool_pages_misc','buffer_pool_pages_data','buffer_pool_bytes_data','buffer_pool_pages_dirty','buffer_pool_bytes_dirty','buffer_pool_pages_free','buffer_pages_created','buffer_pages_written','buffer_pages_read','buffer_data_reads','buffer_data_written','file_num_open_files','os_log_bytes_written','os_log_fsyncs','os_log_pending_fsyncs','os_log_pending_writes','log_waits','log_write_requests','log_writes','innodb_dblwr_writes','innodb_dblwr_pages_written','innodb_page_size')) union all select 'memory_current_allocated' AS `Variable_name`,sum(`performance_schema`.`memory_summary_global_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`) AS `Variable_value`,'Performance Schema' AS `Type`,if(((select count(0) from `performance_schema`.`setup_instruments` where ((`performance_schema`.`setup_instruments`.`NAME` like 'memory/%') and (`performance_schema`.`setup_instruments`.`ENABLED` = 'YES'))) = 0),'NO',if(((select count(0) from `performance_schema`.`setup_instruments` where ((`performance_schema`.`setup_instruments`.`NAME` like 'memory/%') and (`performance_schema`.`setup_instruments`.`ENABLED` = 'YES'))) = (select count(0) from `performance_schema`.`setup_instruments` where (`performance_schema`.`setup_instruments`.`NAME` like 'memory/%'))),'YES','PARTIAL')) AS `Enabled` from `performance_schema`.`memory_summary_global_by_event_name` union all select 'memory_total_allocated' AS `Variable_name`,sum(`performance_schema`.`memory_summary_global_by_event_name`.`SUM_NUMBER_OF_BYTES_ALLOC`) AS `Variable_value`,'Performance Schema' AS `Type`,if(((select count(0) from `performance_schema`.`setup_instruments` where ((`performance_schema`.`setup_instruments`.`NAME` like 'memory/%') and (`performance_schema`.`setup_instruments`.`ENABLED` = 'YES'))) = 0),'NO',if(((select count(0) from `performance_schema`.`setup_instruments` where ((`performance_schema`.`setup_instruments`.`NAME` like 'memory/%') and (`performance_schema`.`setup_instruments`.`ENABLED` = 'YES'))) = (select count(0) from `performance_schema`.`setup_instruments` where (`performance_schema`.`setup_instruments`.`NAME` like 'memory/%'))),'YES','PARTIAL')) AS `Enabled` from `performance_schema`.`memory_summary_global_by_event_name` union all select 'NOW()' AS `Variable_name`,now(3) AS `Variable_value`,'System Time' AS `Type`,'YES' AS `Enabled` union all select 'UNIX_TIMESTAMP()' AS `Variable_name`,round(unix_timestamp(now(3)),3) AS `Variable_value`,'System Time' AS `Type`,'YES' AS `Enabled` order by `Type`,`Variable_name`

-- View: sys.processlist
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `processlist` (`thd_id`,`conn_id`,`user`,`db`,`command`,`state`,`time`,`current_statement`,`statement_latency`,`progress`,`lock_latency`,`rows_examined`,`rows_sent`,`rows_affected`,`tmp_tables`,`tmp_disk_tables`,`full_scan`,`last_statement`,`last_statement_latency`,`current_memory`,`last_wait`,`last_wait_latency`,`source`,`trx_latency`,`trx_state`,`trx_autocommit`,`pid`,`program_name`) AS select `pps`.`THREAD_ID` AS `thd_id`,`pps`.`PROCESSLIST_ID` AS `conn_id`,if((`pps`.`NAME` in ('thread/sql/one_connection','thread/thread_pool/tp_one_connection')),concat(`pps`.`PROCESSLIST_USER`,'@',convert(`pps`.`PROCESSLIST_HOST` using utf8mb4)),replace(`pps`.`NAME`,'thread/','')) AS `user`,`pps`.`PROCESSLIST_DB` AS `db`,`pps`.`PROCESSLIST_COMMAND` AS `command`,`pps`.`PROCESSLIST_STATE` AS `state`,`pps`.`PROCESSLIST_TIME` AS `time`,`sys`.`format_statement`(`pps`.`PROCESSLIST_INFO`) AS `current_statement`,if((`esc`.`END_EVENT_ID` is null),`sys`.`format_time`(`esc`.`TIMER_WAIT`),NULL) AS `statement_latency`,if((`esc`.`END_EVENT_ID` is null),round((100 * (`estc`.`WORK_COMPLETED` / `estc`.`WORK_ESTIMATED`)),2),NULL) AS `progress`,`sys`.`format_time`(`esc`.`LOCK_TIME`) AS `lock_latency`,`esc`.`ROWS_EXAMINED` AS `rows_examined`,`esc`.`ROWS_SENT` AS `rows_sent`,`esc`.`ROWS_AFFECTED` AS `rows_affected`,`esc`.`CREATED_TMP_TABLES` AS `tmp_tables`,`esc`.`CREATED_TMP_DISK_TABLES` AS `tmp_disk_tables`,if(((`esc`.`NO_GOOD_INDEX_USED` > 0) or (`esc`.`NO_INDEX_USED` > 0)),'YES','NO') AS `full_scan`,if((`esc`.`END_EVENT_ID` is not null),`sys`.`format_statement`(`esc`.`SQL_TEXT`),NULL) AS `last_statement`,if((`esc`.`END_EVENT_ID` is not null),`sys`.`format_time`(`esc`.`TIMER_WAIT`),NULL) AS `last_statement_latency`,`sys`.`format_bytes`(`mem`.`current_allocated`) AS `current_memory`,`ewc`.`EVENT_NAME` AS `last_wait`,if(((`ewc`.`END_EVENT_ID` is null) and (`ewc`.`EVENT_NAME` is not null)),'Still Waiting',`sys`.`format_time`(`ewc`.`TIMER_WAIT`)) AS `last_wait_latency`,`ewc`.`SOURCE` AS `source`,`sys`.`format_time`(`etc`.`TIMER_WAIT`) AS `trx_latency`,`etc`.`STATE` AS `trx_state`,`etc`.`AUTOCOMMIT` AS `trx_autocommit`,`conattr_pid`.`ATTR_VALUE` AS `pid`,`conattr_progname`.`ATTR_VALUE` AS `program_name` from (((((((`performance_schema`.`threads` `pps` left join `performance_schema`.`events_waits_current` `ewc` on((`pps`.`THREAD_ID` = `ewc`.`THREAD_ID`))) left join `performance_schema`.`events_stages_current` `estc` on((`pps`.`THREAD_ID` = `estc`.`THREAD_ID`))) left join `performance_schema`.`events_statements_current` `esc` on((`pps`.`THREAD_ID` = `esc`.`THREAD_ID`))) left join `performance_schema`.`events_transactions_current` `etc` on((`pps`.`THREAD_ID` = `etc`.`THREAD_ID`))) left join `x$memory_by_thread_by_current_bytes` `mem` on((`pps`.`THREAD_ID` = `mem`.`thread_id`))) left join `performance_schema`.`session_connect_attrs` `conattr_pid` on(((`conattr_pid`.`PROCESSLIST_ID` = `pps`.`PROCESSLIST_ID`) and (`conattr_pid`.`ATTR_NAME` = '_pid')))) left join `performance_schema`.`session_connect_attrs` `conattr_progname` on(((`conattr_progname`.`PROCESSLIST_ID` = `pps`.`PROCESSLIST_ID`) and (`conattr_progname`.`ATTR_NAME` = 'program_name')))) order by `pps`.`PROCESSLIST_TIME` desc,`last_wait_latency` desc

-- View: sys.ps_check_lost_instrumentation
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `ps_check_lost_instrumentation` (`variable_name`,`variable_value`) AS select `performance_schema`.`global_status`.`VARIABLE_NAME` AS `variable_name`,`performance_schema`.`global_status`.`VARIABLE_VALUE` AS `variable_value` from `performance_schema`.`global_status` where ((`performance_schema`.`global_status`.`VARIABLE_NAME` like 'perf%lost') and (`performance_schema`.`global_status`.`VARIABLE_VALUE` > 0))

-- View: sys.schema_auto_increment_columns
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `schema_auto_increment_columns` (`table_schema`,`table_name`,`column_name`,`data_type`,`column_type`,`is_signed`,`is_unsigned`,`max_value`,`auto_increment`,`auto_increment_ratio`) AS select `COLUMNS`.`TABLE_SCHEMA` AS `TABLE_SCHEMA`,`COLUMNS`.`TABLE_NAME` AS `TABLE_NAME`,`COLUMNS`.`COLUMN_NAME` AS `COLUMN_NAME`,`COLUMNS`.`DATA_TYPE` AS `DATA_TYPE`,`COLUMNS`.`COLUMN_TYPE` AS `COLUMN_TYPE`,(locate('unsigned',`COLUMNS`.`COLUMN_TYPE`) = 0) AS `is_signed`,(locate('unsigned',`COLUMNS`.`COLUMN_TYPE`) > 0) AS `is_unsigned`,((case `COLUMNS`.`DATA_TYPE` when 'tinyint' then 255 when 'smallint' then 65535 when 'mediumint' then 16777215 when 'int' then 4294967295 when 'bigint' then 18446744073709551615 end) >> if((locate('unsigned',`COLUMNS`.`COLUMN_TYPE`) > 0),0,1)) AS `max_value`,`TABLES`.`AUTO_INCREMENT` AS `AUTO_INCREMENT`,(`TABLES`.`AUTO_INCREMENT` / ((case `COLUMNS`.`DATA_TYPE` when 'tinyint' then 255 when 'smallint' then 65535 when 'mediumint' then 16777215 when 'int' then 4294967295 when 'bigint' then 18446744073709551615 end) >> if((locate('unsigned',`COLUMNS`.`COLUMN_TYPE`) > 0),0,1))) AS `auto_increment_ratio` from (`information_schema`.`COLUMNS` join `information_schema`.`TABLES` on(((`COLUMNS`.`TABLE_SCHEMA` = `TABLES`.`TABLE_SCHEMA`) and (`COLUMNS`.`TABLE_NAME` = `TABLES`.`TABLE_NAME`)))) where ((`COLUMNS`.`TABLE_SCHEMA` not in ('mysql','sys','INFORMATION_SCHEMA','performance_schema')) and (`TABLES`.`TABLE_TYPE` = 'BASE TABLE') and (`COLUMNS`.`EXTRA` = 'auto_increment')) order by (`TABLES`.`AUTO_INCREMENT` / ((case `COLUMNS`.`DATA_TYPE` when 'tinyint' then 255 when 'smallint' then 65535 when 'mediumint' then 16777215 when 'int' then 4294967295 when 'bigint' then 18446744073709551615 end) >> if((locate('unsigned',`COLUMNS`.`COLUMN_TYPE`) > 0),0,1))) desc,((case `COLUMNS`.`DATA_TYPE` when 'tinyint' then 255 when 'smallint' then 65535 when 'mediumint' then 16777215 when 'int' then 4294967295 when 'bigint' then 18446744073709551615 end) >> if((locate('unsigned',`COLUMNS`.`COLUMN_TYPE`) > 0),0,1))

-- View: sys.schema_index_statistics
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `schema_index_statistics` (`table_schema`,`table_name`,`index_name`,`rows_selected`,`select_latency`,`rows_inserted`,`insert_latency`,`rows_updated`,`update_latency`,`rows_deleted`,`delete_latency`) AS select `performance_schema`.`table_io_waits_summary_by_index_usage`.`OBJECT_SCHEMA` AS `table_schema`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`OBJECT_NAME` AS `table_name`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`INDEX_NAME` AS `index_name`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`COUNT_FETCH` AS `rows_selected`,`sys`.`format_time`(`performance_schema`.`table_io_waits_summary_by_index_usage`.`SUM_TIMER_FETCH`) AS `select_latency`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`COUNT_INSERT` AS `rows_inserted`,`sys`.`format_time`(`performance_schema`.`table_io_waits_summary_by_index_usage`.`SUM_TIMER_INSERT`) AS `insert_latency`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`COUNT_UPDATE` AS `rows_updated`,`sys`.`format_time`(`performance_schema`.`table_io_waits_summary_by_index_usage`.`SUM_TIMER_UPDATE`) AS `update_latency`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`COUNT_DELETE` AS `rows_deleted`,`sys`.`format_time`(`performance_schema`.`table_io_waits_summary_by_index_usage`.`SUM_TIMER_DELETE`) AS `delete_latency` from `performance_schema`.`table_io_waits_summary_by_index_usage` where (`performance_schema`.`table_io_waits_summary_by_index_usage`.`INDEX_NAME` is not null) order by `performance_schema`.`table_io_waits_summary_by_index_usage`.`SUM_TIMER_WAIT` desc

-- View: sys.schema_object_overview
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `schema_object_overview` (`db`,`object_type`,`count`) AS select `routines`.`ROUTINE_SCHEMA` AS `db`,`routines`.`ROUTINE_TYPE` AS `object_type`,count(0) AS `count` from `information_schema`.`ROUTINES` `routines` group by `routines`.`ROUTINE_SCHEMA`,`routines`.`ROUTINE_TYPE` union select `tables`.`TABLE_SCHEMA` AS `TABLE_SCHEMA`,`tables`.`TABLE_TYPE` AS `TABLE_TYPE`,count(0) AS `COUNT(*)` from `information_schema`.`TABLES` `tables` group by `tables`.`TABLE_SCHEMA`,`tables`.`TABLE_TYPE` union select `statistics`.`TABLE_SCHEMA` AS `TABLE_SCHEMA`,concat('INDEX (',`statistics`.`INDEX_TYPE`,')') AS `CONCAT('INDEX (', INDEX_TYPE, ')')`,count(0) AS `COUNT(*)` from `information_schema`.`STATISTICS` `statistics` group by `statistics`.`TABLE_SCHEMA`,`statistics`.`INDEX_TYPE` union select `triggers`.`TRIGGER_SCHEMA` AS `TRIGGER_SCHEMA`,'TRIGGER' AS `TRIGGER`,count(0) AS `COUNT(*)` from `information_schema`.`TRIGGERS` `triggers` group by `triggers`.`TRIGGER_SCHEMA` union select `events`.`EVENT_SCHEMA` AS `EVENT_SCHEMA`,'EVENT' AS `EVENT`,count(0) AS `COUNT(*)` from `information_schema`.`EVENTS` `events` group by `events`.`EVENT_SCHEMA` order by `db`,`object_type`

-- View: sys.schema_redundant_indexes
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `schema_redundant_indexes` (`table_schema`,`table_name`,`redundant_index_name`,`redundant_index_columns`,`redundant_index_non_unique`,`dominant_index_name`,`dominant_index_columns`,`dominant_index_non_unique`,`subpart_exists`,`sql_drop_index`) AS select `redundant_keys`.`table_schema` AS `table_schema`,`redundant_keys`.`table_name` AS `table_name`,`redundant_keys`.`index_name` AS `redundant_index_name`,`redundant_keys`.`index_columns` AS `redundant_index_columns`,`redundant_keys`.`non_unique` AS `redundant_index_non_unique`,`dominant_keys`.`index_name` AS `dominant_index_name`,`dominant_keys`.`index_columns` AS `dominant_index_columns`,`dominant_keys`.`non_unique` AS `dominant_index_non_unique`,if(((0 <> `redundant_keys`.`subpart_exists`) or (0 <> `dominant_keys`.`subpart_exists`)),1,0) AS `subpart_exists`,concat('ALTER TABLE `',`redundant_keys`.`table_schema`,'`.`',`redundant_keys`.`table_name`,'` DROP INDEX `',`redundant_keys`.`index_name`,'`') AS `sql_drop_index` from (`x$schema_flattened_keys` `redundant_keys` join `x$schema_flattened_keys` `dominant_keys` on(((`redundant_keys`.`table_schema` = `dominant_keys`.`table_schema`) and (`redundant_keys`.`table_name` = `dominant_keys`.`table_name`)))) where ((`redundant_keys`.`index_name` <> `dominant_keys`.`index_name`) and (((`redundant_keys`.`index_columns` = `dominant_keys`.`index_columns`) and ((`redundant_keys`.`non_unique` > `dominant_keys`.`non_unique`) or ((`redundant_keys`.`non_unique` = `dominant_keys`.`non_unique`) and (if((`redundant_keys`.`index_name` = 'PRIMARY'),'',`redundant_keys`.`index_name`) > if((`dominant_keys`.`index_name` = 'PRIMARY'),'',`dominant_keys`.`index_name`))))) or ((locate(concat(`redundant_keys`.`index_columns`,','),`dominant_keys`.`index_columns`) = 1) and (`redundant_keys`.`non_unique` = 1)) or ((locate(concat(`dominant_keys`.`index_columns`,','),`redundant_keys`.`index_columns`) = 1) and (`dominant_keys`.`non_unique` = 0))))

-- View: sys.schema_table_lock_waits
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `schema_table_lock_waits` (`object_schema`,`object_name`,`waiting_thread_id`,`waiting_pid`,`waiting_account`,`waiting_lock_type`,`waiting_lock_duration`,`waiting_query`,`waiting_query_secs`,`waiting_query_rows_affected`,`waiting_query_rows_examined`,`blocking_thread_id`,`blocking_pid`,`blocking_account`,`blocking_lock_type`,`blocking_lock_duration`,`sql_kill_blocking_query`,`sql_kill_blocking_connection`) AS select `g`.`OBJECT_SCHEMA` AS `object_schema`,`g`.`OBJECT_NAME` AS `object_name`,`pt`.`THREAD_ID` AS `waiting_thread_id`,`pt`.`PROCESSLIST_ID` AS `waiting_pid`,`sys`.`ps_thread_account`(`p`.`OWNER_THREAD_ID`) AS `waiting_account`,`p`.`LOCK_TYPE` AS `waiting_lock_type`,`p`.`LOCK_DURATION` AS `waiting_lock_duration`,`sys`.`format_statement`(`pt`.`PROCESSLIST_INFO`) AS `waiting_query`,`pt`.`PROCESSLIST_TIME` AS `waiting_query_secs`,`ps`.`ROWS_AFFECTED` AS `waiting_query_rows_affected`,`ps`.`ROWS_EXAMINED` AS `waiting_query_rows_examined`,`gt`.`THREAD_ID` AS `blocking_thread_id`,`gt`.`PROCESSLIST_ID` AS `blocking_pid`,`sys`.`ps_thread_account`(`g`.`OWNER_THREAD_ID`) AS `blocking_account`,`g`.`LOCK_TYPE` AS `blocking_lock_type`,`g`.`LOCK_DURATION` AS `blocking_lock_duration`,concat('KILL QUERY ',`gt`.`PROCESSLIST_ID`) AS `sql_kill_blocking_query`,concat('KILL ',`gt`.`PROCESSLIST_ID`) AS `sql_kill_blocking_connection` from (((((`performance_schema`.`metadata_locks` `g` join `performance_schema`.`metadata_locks` `p` on(((`g`.`OBJECT_TYPE` = `p`.`OBJECT_TYPE`) and (`g`.`OBJECT_SCHEMA` = `p`.`OBJECT_SCHEMA`) and (`g`.`OBJECT_NAME` = `p`.`OBJECT_NAME`) and (`g`.`LOCK_STATUS` = 'GRANTED') and (`p`.`LOCK_STATUS` = 'PENDING')))) join `performance_schema`.`threads` `gt` on((`g`.`OWNER_THREAD_ID` = `gt`.`THREAD_ID`))) join `performance_schema`.`threads` `pt` on((`p`.`OWNER_THREAD_ID` = `pt`.`THREAD_ID`))) left join `performance_schema`.`events_statements_current` `gs` on((`g`.`OWNER_THREAD_ID` = `gs`.`THREAD_ID`))) left join `performance_schema`.`events_statements_current` `ps` on((`p`.`OWNER_THREAD_ID` = `ps`.`THREAD_ID`))) where (`g`.`OBJECT_TYPE` = 'TABLE')

-- View: sys.schema_table_statistics
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `schema_table_statistics` (`table_schema`,`table_name`,`total_latency`,`rows_fetched`,`fetch_latency`,`rows_inserted`,`insert_latency`,`rows_updated`,`update_latency`,`rows_deleted`,`delete_latency`,`io_read_requests`,`io_read`,`io_read_latency`,`io_write_requests`,`io_write`,`io_write_latency`,`io_misc_requests`,`io_misc_latency`) AS select `pst`.`OBJECT_SCHEMA` AS `table_schema`,`pst`.`OBJECT_NAME` AS `table_name`,`sys`.`format_time`(`pst`.`SUM_TIMER_WAIT`) AS `total_latency`,`pst`.`COUNT_FETCH` AS `rows_fetched`,`sys`.`format_time`(`pst`.`SUM_TIMER_FETCH`) AS `fetch_latency`,`pst`.`COUNT_INSERT` AS `rows_inserted`,`sys`.`format_time`(`pst`.`SUM_TIMER_INSERT`) AS `insert_latency`,`pst`.`COUNT_UPDATE` AS `rows_updated`,`sys`.`format_time`(`pst`.`SUM_TIMER_UPDATE`) AS `update_latency`,`pst`.`COUNT_DELETE` AS `rows_deleted`,`sys`.`format_time`(`pst`.`SUM_TIMER_DELETE`) AS `delete_latency`,`fsbi`.`count_read` AS `io_read_requests`,`sys`.`format_bytes`(`fsbi`.`sum_number_of_bytes_read`) AS `io_read`,`sys`.`format_time`(`fsbi`.`sum_timer_read`) AS `io_read_latency`,`fsbi`.`count_write` AS `io_write_requests`,`sys`.`format_bytes`(`fsbi`.`sum_number_of_bytes_write`) AS `io_write`,`sys`.`format_time`(`fsbi`.`sum_timer_write`) AS `io_write_latency`,`fsbi`.`count_misc` AS `io_misc_requests`,`sys`.`format_time`(`fsbi`.`sum_timer_misc`) AS `io_misc_latency` from (`performance_schema`.`table_io_waits_summary_by_table` `pst` left join `x$ps_schema_table_statistics_io` `fsbi` on(((`pst`.`OBJECT_SCHEMA` = `fsbi`.`table_schema`) and (`pst`.`OBJECT_NAME` = `fsbi`.`table_name`)))) order by `pst`.`SUM_TIMER_WAIT` desc

-- View: sys.schema_table_statistics_with_buffer
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `schema_table_statistics_with_buffer` (`table_schema`,`table_name`,`rows_fetched`,`fetch_latency`,`rows_inserted`,`insert_latency`,`rows_updated`,`update_latency`,`rows_deleted`,`delete_latency`,`io_read_requests`,`io_read`,`io_read_latency`,`io_write_requests`,`io_write`,`io_write_latency`,`io_misc_requests`,`io_misc_latency`,`innodb_buffer_allocated`,`innodb_buffer_data`,`innodb_buffer_free`,`innodb_buffer_pages`,`innodb_buffer_pages_hashed`,`innodb_buffer_pages_old`,`innodb_buffer_rows_cached`) AS select `pst`.`OBJECT_SCHEMA` AS `table_schema`,`pst`.`OBJECT_NAME` AS `table_name`,`pst`.`COUNT_FETCH` AS `rows_fetched`,`sys`.`format_time`(`pst`.`SUM_TIMER_FETCH`) AS `fetch_latency`,`pst`.`COUNT_INSERT` AS `rows_inserted`,`sys`.`format_time`(`pst`.`SUM_TIMER_INSERT`) AS `insert_latency`,`pst`.`COUNT_UPDATE` AS `rows_updated`,`sys`.`format_time`(`pst`.`SUM_TIMER_UPDATE`) AS `update_latency`,`pst`.`COUNT_DELETE` AS `rows_deleted`,`sys`.`format_time`(`pst`.`SUM_TIMER_DELETE`) AS `delete_latency`,`fsbi`.`count_read` AS `io_read_requests`,`sys`.`format_bytes`(`fsbi`.`sum_number_of_bytes_read`) AS `io_read`,`sys`.`format_time`(`fsbi`.`sum_timer_read`) AS `io_read_latency`,`fsbi`.`count_write` AS `io_write_requests`,`sys`.`format_bytes`(`fsbi`.`sum_number_of_bytes_write`) AS `io_write`,`sys`.`format_time`(`fsbi`.`sum_timer_write`) AS `io_write_latency`,`fsbi`.`count_misc` AS `io_misc_requests`,`sys`.`format_time`(`fsbi`.`sum_timer_misc`) AS `io_misc_latency`,`sys`.`format_bytes`(`ibp`.`allocated`) AS `innodb_buffer_allocated`,`sys`.`format_bytes`(`ibp`.`data`) AS `innodb_buffer_data`,`sys`.`format_bytes`((`ibp`.`allocated` - `ibp`.`data`)) AS `innodb_buffer_free`,`ibp`.`pages` AS `innodb_buffer_pages`,`ibp`.`pages_hashed` AS `innodb_buffer_pages_hashed`,`ibp`.`pages_old` AS `innodb_buffer_pages_old`,`ibp`.`rows_cached` AS `innodb_buffer_rows_cached` from ((`performance_schema`.`table_io_waits_summary_by_table` `pst` left join `x$ps_schema_table_statistics_io` `fsbi` on(((`pst`.`OBJECT_SCHEMA` = `fsbi`.`table_schema`) and (`pst`.`OBJECT_NAME` = `fsbi`.`table_name`)))) left join `x$innodb_buffer_stats_by_table` `ibp` on(((`pst`.`OBJECT_SCHEMA` = convert(`ibp`.`object_schema` using utf8mb4)) and (`pst`.`OBJECT_NAME` = convert(`ibp`.`object_name` using utf8mb4))))) order by `pst`.`SUM_TIMER_WAIT` desc

-- View: sys.schema_tables_with_full_table_scans
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `schema_tables_with_full_table_scans` (`object_schema`,`object_name`,`rows_full_scanned`,`latency`) AS select `performance_schema`.`table_io_waits_summary_by_index_usage`.`OBJECT_SCHEMA` AS `object_schema`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`OBJECT_NAME` AS `object_name`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`COUNT_READ` AS `rows_full_scanned`,`sys`.`format_time`(`performance_schema`.`table_io_waits_summary_by_index_usage`.`SUM_TIMER_WAIT`) AS `latency` from `performance_schema`.`table_io_waits_summary_by_index_usage` where ((`performance_schema`.`table_io_waits_summary_by_index_usage`.`INDEX_NAME` is null) and (`performance_schema`.`table_io_waits_summary_by_index_usage`.`COUNT_READ` > 0)) order by `performance_schema`.`table_io_waits_summary_by_index_usage`.`COUNT_READ` desc

-- View: sys.schema_unused_indexes
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `schema_unused_indexes` (`object_schema`,`object_name`,`index_name`) AS select `t`.`OBJECT_SCHEMA` AS `object_schema`,`t`.`OBJECT_NAME` AS `object_name`,`t`.`INDEX_NAME` AS `index_name` from (`performance_schema`.`table_io_waits_summary_by_index_usage` `t` join `information_schema`.`STATISTICS` `s` on(((`t`.`OBJECT_SCHEMA` = convert(`s`.`TABLE_SCHEMA` using utf8mb4)) and (`t`.`OBJECT_NAME` = convert(`s`.`TABLE_NAME` using utf8mb4)) and (convert(`t`.`INDEX_NAME` using utf8) = `s`.`INDEX_NAME`)))) where ((`t`.`INDEX_NAME` is not null) and (`t`.`COUNT_STAR` = 0) and (`t`.`OBJECT_SCHEMA` <> 'mysql') and (`t`.`INDEX_NAME` <> 'PRIMARY') and (`s`.`NON_UNIQUE` = 1) and (`s`.`SEQ_IN_INDEX` = 1)) order by `t`.`OBJECT_SCHEMA`,`t`.`OBJECT_NAME`

-- View: sys.session
CREATE ALGORITHM=UNDEFINED DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `session` AS select `processlist`.`thd_id` AS `thd_id`,`processlist`.`conn_id` AS `conn_id`,`processlist`.`user` AS `user`,`processlist`.`db` AS `db`,`processlist`.`command` AS `command`,`processlist`.`state` AS `state`,`processlist`.`time` AS `time`,`processlist`.`current_statement` AS `current_statement`,`processlist`.`statement_latency` AS `statement_latency`,`processlist`.`progress` AS `progress`,`processlist`.`lock_latency` AS `lock_latency`,`processlist`.`rows_examined` AS `rows_examined`,`processlist`.`rows_sent` AS `rows_sent`,`processlist`.`rows_affected` AS `rows_affected`,`processlist`.`tmp_tables` AS `tmp_tables`,`processlist`.`tmp_disk_tables` AS `tmp_disk_tables`,`processlist`.`full_scan` AS `full_scan`,`processlist`.`last_statement` AS `last_statement`,`processlist`.`last_statement_latency` AS `last_statement_latency`,`processlist`.`current_memory` AS `current_memory`,`processlist`.`last_wait` AS `last_wait`,`processlist`.`last_wait_latency` AS `last_wait_latency`,`processlist`.`source` AS `source`,`processlist`.`trx_latency` AS `trx_latency`,`processlist`.`trx_state` AS `trx_state`,`processlist`.`trx_autocommit` AS `trx_autocommit`,`processlist`.`pid` AS `pid`,`processlist`.`program_name` AS `program_name` from `processlist` where ((`processlist`.`conn_id` is not null) and (`processlist`.`command` <> 'Daemon'))

-- View: sys.session_ssl_status
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `session_ssl_status` (`thread_id`,`ssl_version`,`ssl_cipher`,`ssl_sessions_reused`) AS select `sslver`.`THREAD_ID` AS `thread_id`,`sslver`.`VARIABLE_VALUE` AS `ssl_version`,`sslcip`.`VARIABLE_VALUE` AS `ssl_cipher`,`sslreuse`.`VARIABLE_VALUE` AS `ssl_sessions_reused` from ((`performance_schema`.`status_by_thread` `sslver` left join `performance_schema`.`status_by_thread` `sslcip` on(((`sslcip`.`THREAD_ID` = `sslver`.`THREAD_ID`) and (`sslcip`.`VARIABLE_NAME` = 'Ssl_cipher')))) left join `performance_schema`.`status_by_thread` `sslreuse` on(((`sslreuse`.`THREAD_ID` = `sslver`.`THREAD_ID`) and (`sslreuse`.`VARIABLE_NAME` = 'Ssl_sessions_reused')))) where (`sslver`.`VARIABLE_NAME` = 'Ssl_version')

-- View: sys.statement_analysis
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `statement_analysis` (`query`,`db`,`full_scan`,`exec_count`,`err_count`,`warn_count`,`total_latency`,`max_latency`,`avg_latency`,`lock_latency`,`rows_sent`,`rows_sent_avg`,`rows_examined`,`rows_examined_avg`,`rows_affected`,`rows_affected_avg`,`tmp_tables`,`tmp_disk_tables`,`rows_sorted`,`sort_merge_passes`,`digest`,`first_seen`,`last_seen`) AS select `sys`.`format_statement`(`performance_schema`.`events_statements_summary_by_digest`.`DIGEST_TEXT`) AS `query`,`performance_schema`.`events_statements_summary_by_digest`.`SCHEMA_NAME` AS `db`,if(((`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_GOOD_INDEX_USED` > 0) or (`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_INDEX_USED` > 0)),'*','') AS `full_scan`,`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR` AS `exec_count`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ERRORS` AS `err_count`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_WARNINGS` AS `warn_count`,`sys`.`format_time`(`performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT`) AS `total_latency`,`sys`.`format_time`(`performance_schema`.`events_statements_summary_by_digest`.`MAX_TIMER_WAIT`) AS `max_latency`,`sys`.`format_time`(`performance_schema`.`events_statements_summary_by_digest`.`AVG_TIMER_WAIT`) AS `avg_latency`,`sys`.`format_time`(`performance_schema`.`events_statements_summary_by_digest`.`SUM_LOCK_TIME`) AS `lock_latency`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_SENT` AS `rows_sent`,round(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_SENT` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0),0) AS `rows_sent_avg`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_EXAMINED` AS `rows_examined`,round(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_EXAMINED` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0),0) AS `rows_examined_avg`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_AFFECTED` AS `rows_affected`,round(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_AFFECTED` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0),0) AS `rows_affected_avg`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_TABLES` AS `tmp_tables`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_DISK_TABLES` AS `tmp_disk_tables`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_ROWS` AS `rows_sorted`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_MERGE_PASSES` AS `sort_merge_passes`,`performance_schema`.`events_statements_summary_by_digest`.`DIGEST` AS `digest`,`performance_schema`.`events_statements_summary_by_digest`.`FIRST_SEEN` AS `first_seen`,`performance_schema`.`events_statements_summary_by_digest`.`LAST_SEEN` AS `last_seen` from `performance_schema`.`events_statements_summary_by_digest` order by `performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT` desc

-- View: sys.statements_with_errors_or_warnings
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `statements_with_errors_or_warnings` (`query`,`db`,`exec_count`,`errors`,`error_pct`,`warnings`,`warning_pct`,`first_seen`,`last_seen`,`digest`) AS select `sys`.`format_statement`(`performance_schema`.`events_statements_summary_by_digest`.`DIGEST_TEXT`) AS `query`,`performance_schema`.`events_statements_summary_by_digest`.`SCHEMA_NAME` AS `db`,`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR` AS `exec_count`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ERRORS` AS `errors`,(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_ERRORS` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0) * 100) AS `error_pct`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_WARNINGS` AS `warnings`,(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_WARNINGS` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0) * 100) AS `warning_pct`,`performance_schema`.`events_statements_summary_by_digest`.`FIRST_SEEN` AS `first_seen`,`performance_schema`.`events_statements_summary_by_digest`.`LAST_SEEN` AS `last_seen`,`performance_schema`.`events_statements_summary_by_digest`.`DIGEST` AS `digest` from `performance_schema`.`events_statements_summary_by_digest` where ((`performance_schema`.`events_statements_summary_by_digest`.`SUM_ERRORS` > 0) or (`performance_schema`.`events_statements_summary_by_digest`.`SUM_WARNINGS` > 0)) order by `performance_schema`.`events_statements_summary_by_digest`.`SUM_ERRORS` desc,`performance_schema`.`events_statements_summary_by_digest`.`SUM_WARNINGS` desc

-- View: sys.statements_with_full_table_scans
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `statements_with_full_table_scans` (`query`,`db`,`exec_count`,`total_latency`,`no_index_used_count`,`no_good_index_used_count`,`no_index_used_pct`,`rows_sent`,`rows_examined`,`rows_sent_avg`,`rows_examined_avg`,`first_seen`,`last_seen`,`digest`) AS select `sys`.`format_statement`(`performance_schema`.`events_statements_summary_by_digest`.`DIGEST_TEXT`) AS `query`,`performance_schema`.`events_statements_summary_by_digest`.`SCHEMA_NAME` AS `db`,`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR` AS `exec_count`,`sys`.`format_time`(`performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT`) AS `total_latency`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_INDEX_USED` AS `no_index_used_count`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_GOOD_INDEX_USED` AS `no_good_index_used_count`,round((ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_INDEX_USED` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0) * 100),0) AS `no_index_used_pct`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_SENT` AS `rows_sent`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_EXAMINED` AS `rows_examined`,round((`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_SENT` / `performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`),0) AS `rows_sent_avg`,round((`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_EXAMINED` / `performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`),0) AS `rows_examined_avg`,`performance_schema`.`events_statements_summary_by_digest`.`FIRST_SEEN` AS `first_seen`,`performance_schema`.`events_statements_summary_by_digest`.`LAST_SEEN` AS `last_seen`,`performance_schema`.`events_statements_summary_by_digest`.`DIGEST` AS `digest` from `performance_schema`.`events_statements_summary_by_digest` where (((`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_INDEX_USED` > 0) or (`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_GOOD_INDEX_USED` > 0)) and (not((`performance_schema`.`events_statements_summary_by_digest`.`DIGEST_TEXT` like 'SHOW%')))) order by round((ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_INDEX_USED` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0) * 100),0) desc,`sys`.`format_time`(`performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT`) desc

-- View: sys.statements_with_runtimes_in_95th_percentile
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `statements_with_runtimes_in_95th_percentile` (`query`,`db`,`full_scan`,`exec_count`,`err_count`,`warn_count`,`total_latency`,`max_latency`,`avg_latency`,`rows_sent`,`rows_sent_avg`,`rows_examined`,`rows_examined_avg`,`first_seen`,`last_seen`,`digest`) AS select `sys`.`format_statement`(`stmts`.`DIGEST_TEXT`) AS `query`,`stmts`.`SCHEMA_NAME` AS `db`,if(((`stmts`.`SUM_NO_GOOD_INDEX_USED` > 0) or (`stmts`.`SUM_NO_INDEX_USED` > 0)),'*','') AS `full_scan`,`stmts`.`COUNT_STAR` AS `exec_count`,`stmts`.`SUM_ERRORS` AS `err_count`,`stmts`.`SUM_WARNINGS` AS `warn_count`,`sys`.`format_time`(`stmts`.`SUM_TIMER_WAIT`) AS `total_latency`,`sys`.`format_time`(`stmts`.`MAX_TIMER_WAIT`) AS `max_latency`,`sys`.`format_time`(`stmts`.`AVG_TIMER_WAIT`) AS `avg_latency`,`stmts`.`SUM_ROWS_SENT` AS `rows_sent`,round(ifnull((`stmts`.`SUM_ROWS_SENT` / nullif(`stmts`.`COUNT_STAR`,0)),0),0) AS `rows_sent_avg`,`stmts`.`SUM_ROWS_EXAMINED` AS `rows_examined`,round(ifnull((`stmts`.`SUM_ROWS_EXAMINED` / nullif(`stmts`.`COUNT_STAR`,0)),0),0) AS `rows_examined_avg`,`stmts`.`FIRST_SEEN` AS `first_seen`,`stmts`.`LAST_SEEN` AS `last_seen`,`stmts`.`DIGEST` AS `digest` from (`performance_schema`.`events_statements_summary_by_digest` `stmts` join `x$ps_digest_95th_percentile_by_avg_us` `top_percentile` on((round((`stmts`.`AVG_TIMER_WAIT` / 1000000),0) >= `top_percentile`.`avg_us`))) order by `stmts`.`AVG_TIMER_WAIT` desc

-- View: sys.statements_with_sorting
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `statements_with_sorting` (`query`,`db`,`exec_count`,`total_latency`,`sort_merge_passes`,`avg_sort_merges`,`sorts_using_scans`,`sort_using_range`,`rows_sorted`,`avg_rows_sorted`,`first_seen`,`last_seen`,`digest`) AS select `sys`.`format_statement`(`performance_schema`.`events_statements_summary_by_digest`.`DIGEST_TEXT`) AS `query`,`performance_schema`.`events_statements_summary_by_digest`.`SCHEMA_NAME` AS `db`,`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR` AS `exec_count`,`sys`.`format_time`(`performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT`) AS `total_latency`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_MERGE_PASSES` AS `sort_merge_passes`,round(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_MERGE_PASSES` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0),0) AS `avg_sort_merges`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_SCAN` AS `sorts_using_scans`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_RANGE` AS `sort_using_range`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_ROWS` AS `rows_sorted`,round(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_ROWS` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0),0) AS `avg_rows_sorted`,`performance_schema`.`events_statements_summary_by_digest`.`FIRST_SEEN` AS `first_seen`,`performance_schema`.`events_statements_summary_by_digest`.`LAST_SEEN` AS `last_seen`,`performance_schema`.`events_statements_summary_by_digest`.`DIGEST` AS `digest` from `performance_schema`.`events_statements_summary_by_digest` where (`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_ROWS` > 0) order by `performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT` desc

-- View: sys.statements_with_temp_tables
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `statements_with_temp_tables` (`query`,`db`,`exec_count`,`total_latency`,`memory_tmp_tables`,`disk_tmp_tables`,`avg_tmp_tables_per_query`,`tmp_tables_to_disk_pct`,`first_seen`,`last_seen`,`digest`) AS select `sys`.`format_statement`(`performance_schema`.`events_statements_summary_by_digest`.`DIGEST_TEXT`) AS `query`,`performance_schema`.`events_statements_summary_by_digest`.`SCHEMA_NAME` AS `db`,`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR` AS `exec_count`,`sys`.`format_time`(`performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT`) AS `total_latency`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_TABLES` AS `memory_tmp_tables`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_DISK_TABLES` AS `disk_tmp_tables`,round(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_TABLES` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0),0) AS `avg_tmp_tables_per_query`,round((ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_DISK_TABLES` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_TABLES`,0)),0) * 100),0) AS `tmp_tables_to_disk_pct`,`performance_schema`.`events_statements_summary_by_digest`.`FIRST_SEEN` AS `first_seen`,`performance_schema`.`events_statements_summary_by_digest`.`LAST_SEEN` AS `last_seen`,`performance_schema`.`events_statements_summary_by_digest`.`DIGEST` AS `digest` from `performance_schema`.`events_statements_summary_by_digest` where (`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_TABLES` > 0) order by `performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_DISK_TABLES` desc,`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_TABLES` desc

-- View: sys.user_summary
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `user_summary` (`user`,`statements`,`statement_latency`,`statement_avg_latency`,`table_scans`,`file_ios`,`file_io_latency`,`current_connections`,`total_connections`,`unique_hosts`,`current_memory`,`total_memory_allocated`) AS select if((`performance_schema`.`accounts`.`USER` is null),'background',`performance_schema`.`accounts`.`USER`) AS `user`,sum(`stmt`.`total`) AS `statements`,`sys`.`format_time`(sum(`stmt`.`total_latency`)) AS `statement_latency`,`sys`.`format_time`(ifnull((sum(`stmt`.`total_latency`) / nullif(sum(`stmt`.`total`),0)),0)) AS `statement_avg_latency`,sum(`stmt`.`full_scans`) AS `table_scans`,sum(`io`.`ios`) AS `file_ios`,`sys`.`format_time`(sum(`io`.`io_latency`)) AS `file_io_latency`,sum(`performance_schema`.`accounts`.`CURRENT_CONNECTIONS`) AS `current_connections`,sum(`performance_schema`.`accounts`.`TOTAL_CONNECTIONS`) AS `total_connections`,count(distinct `performance_schema`.`accounts`.`HOST`) AS `unique_hosts`,`sys`.`format_bytes`(sum(`mem`.`current_allocated`)) AS `current_memory`,`sys`.`format_bytes`(sum(`mem`.`total_allocated`)) AS `total_memory_allocated` from (((`performance_schema`.`accounts` left join `x$user_summary_by_statement_latency` `stmt` on((if((`performance_schema`.`accounts`.`USER` is null),'background',`performance_schema`.`accounts`.`USER`) = `stmt`.`user`))) left join `x$user_summary_by_file_io` `io` on((if((`performance_schema`.`accounts`.`USER` is null),'background',`performance_schema`.`accounts`.`USER`) = `io`.`user`))) left join `x$memory_by_user_by_current_bytes` `mem` on((if((`performance_schema`.`accounts`.`USER` is null),'background',`performance_schema`.`accounts`.`USER`) = `mem`.`user`))) group by if((`performance_schema`.`accounts`.`USER` is null),'background',`performance_schema`.`accounts`.`USER`) order by sum(`stmt`.`total_latency`) desc

-- View: sys.user_summary_by_file_io
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `user_summary_by_file_io` (`user`,`ios`,`io_latency`) AS select if((`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER`) AS `user`,sum(`performance_schema`.`events_waits_summary_by_user_by_event_name`.`COUNT_STAR`) AS `ios`,`sys`.`format_time`(sum(`performance_schema`.`events_waits_summary_by_user_by_event_name`.`SUM_TIMER_WAIT`)) AS `io_latency` from `performance_schema`.`events_waits_summary_by_user_by_event_name` where (`performance_schema`.`events_waits_summary_by_user_by_event_name`.`EVENT_NAME` like 'wait/io/file/%') group by if((`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER`) order by sum(`performance_schema`.`events_waits_summary_by_user_by_event_name`.`SUM_TIMER_WAIT`) desc

-- View: sys.user_summary_by_file_io_type
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `user_summary_by_file_io_type` (`user`,`event_name`,`total`,`latency`,`max_latency`) AS select if((`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER`) AS `user`,`performance_schema`.`events_waits_summary_by_user_by_event_name`.`EVENT_NAME` AS `event_name`,`performance_schema`.`events_waits_summary_by_user_by_event_name`.`COUNT_STAR` AS `total`,`sys`.`format_time`(`performance_schema`.`events_waits_summary_by_user_by_event_name`.`SUM_TIMER_WAIT`) AS `latency`,`sys`.`format_time`(`performance_schema`.`events_waits_summary_by_user_by_event_name`.`MAX_TIMER_WAIT`) AS `max_latency` from `performance_schema`.`events_waits_summary_by_user_by_event_name` where ((`performance_schema`.`events_waits_summary_by_user_by_event_name`.`EVENT_NAME` like 'wait/io/file%') and (`performance_schema`.`events_waits_summary_by_user_by_event_name`.`COUNT_STAR` > 0)) order by if((`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER`),`performance_schema`.`events_waits_summary_by_user_by_event_name`.`SUM_TIMER_WAIT` desc

-- View: sys.user_summary_by_stages
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `user_summary_by_stages` (`user`,`event_name`,`total`,`total_latency`,`avg_latency`) AS select if((`performance_schema`.`events_stages_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_stages_summary_by_user_by_event_name`.`USER`) AS `user`,`performance_schema`.`events_stages_summary_by_user_by_event_name`.`EVENT_NAME` AS `event_name`,`performance_schema`.`events_stages_summary_by_user_by_event_name`.`COUNT_STAR` AS `total`,`sys`.`format_time`(`performance_schema`.`events_stages_summary_by_user_by_event_name`.`SUM_TIMER_WAIT`) AS `total_latency`,`sys`.`format_time`(`performance_schema`.`events_stages_summary_by_user_by_event_name`.`AVG_TIMER_WAIT`) AS `avg_latency` from `performance_schema`.`events_stages_summary_by_user_by_event_name` where (`performance_schema`.`events_stages_summary_by_user_by_event_name`.`SUM_TIMER_WAIT` <> 0) order by if((`performance_schema`.`events_stages_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_stages_summary_by_user_by_event_name`.`USER`),`performance_schema`.`events_stages_summary_by_user_by_event_name`.`SUM_TIMER_WAIT` desc

-- View: sys.user_summary_by_statement_latency
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `user_summary_by_statement_latency` (`user`,`total`,`total_latency`,`max_latency`,`lock_latency`,`rows_sent`,`rows_examined`,`rows_affected`,`full_scans`) AS select if((`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER`) AS `user`,sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`COUNT_STAR`) AS `total`,`sys`.`format_time`(sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_TIMER_WAIT`)) AS `total_latency`,`sys`.`format_time`(sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`MAX_TIMER_WAIT`)) AS `max_latency`,`sys`.`format_time`(sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_LOCK_TIME`)) AS `lock_latency`,sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_ROWS_SENT`) AS `rows_sent`,sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_ROWS_EXAMINED`) AS `rows_examined`,sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_ROWS_AFFECTED`) AS `rows_affected`,(sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_NO_INDEX_USED`) + sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_NO_GOOD_INDEX_USED`)) AS `full_scans` from `performance_schema`.`events_statements_summary_by_user_by_event_name` group by if((`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER`) order by sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_TIMER_WAIT`) desc

-- View: sys.user_summary_by_statement_type
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `user_summary_by_statement_type` (`user`,`statement`,`total`,`total_latency`,`max_latency`,`lock_latency`,`rows_sent`,`rows_examined`,`rows_affected`,`full_scans`) AS select if((`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER`) AS `user`,substring_index(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`EVENT_NAME`,'/',-(1)) AS `statement`,`performance_schema`.`events_statements_summary_by_user_by_event_name`.`COUNT_STAR` AS `total`,`sys`.`format_time`(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_TIMER_WAIT`) AS `total_latency`,`sys`.`format_time`(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`MAX_TIMER_WAIT`) AS `max_latency`,`sys`.`format_time`(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_LOCK_TIME`) AS `lock_latency`,`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_ROWS_SENT` AS `rows_sent`,`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_ROWS_EXAMINED` AS `rows_examined`,`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_ROWS_AFFECTED` AS `rows_affected`,(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_NO_INDEX_USED` + `performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_NO_GOOD_INDEX_USED`) AS `full_scans` from `performance_schema`.`events_statements_summary_by_user_by_event_name` where (`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_TIMER_WAIT` <> 0) order by if((`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER`),`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_TIMER_WAIT` desc

-- View: sys.version
CREATE ALGORITHM=UNDEFINED DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `version` (`sys_version`,`mysql_version`) AS select '2.1.1' AS `sys_version`,version() AS `mysql_version`

-- View: sys.wait_classes_global_by_avg_latency
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `wait_classes_global_by_avg_latency` (`event_class`,`total`,`total_latency`,`min_latency`,`avg_latency`,`max_latency`) AS select substring_index(`performance_schema`.`events_waits_summary_global_by_event_name`.`EVENT_NAME`,'/',3) AS `event_class`,sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`COUNT_STAR`) AS `total`,`sys`.`format_time`(cast(sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT`) as unsigned)) AS `total_latency`,`sys`.`format_time`(min(`performance_schema`.`events_waits_summary_global_by_event_name`.`MIN_TIMER_WAIT`)) AS `min_latency`,`sys`.`format_time`(ifnull((sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT`) / nullif(sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`COUNT_STAR`),0)),0)) AS `avg_latency`,`sys`.`format_time`(cast(max(`performance_schema`.`events_waits_summary_global_by_event_name`.`MAX_TIMER_WAIT`) as unsigned)) AS `max_latency` from `performance_schema`.`events_waits_summary_global_by_event_name` where ((`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT` > 0) and (`performance_schema`.`events_waits_summary_global_by_event_name`.`EVENT_NAME` <> 'idle')) group by `event_class` order by ifnull((sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT`) / nullif(sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`COUNT_STAR`),0)),0) desc

-- View: sys.wait_classes_global_by_latency
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `wait_classes_global_by_latency` (`event_class`,`total`,`total_latency`,`min_latency`,`avg_latency`,`max_latency`) AS select substring_index(`performance_schema`.`events_waits_summary_global_by_event_name`.`EVENT_NAME`,'/',3) AS `event_class`,sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`COUNT_STAR`) AS `total`,`sys`.`format_time`(sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT`)) AS `total_latency`,`sys`.`format_time`(min(`performance_schema`.`events_waits_summary_global_by_event_name`.`MIN_TIMER_WAIT`)) AS `min_latency`,`sys`.`format_time`(ifnull((sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT`) / nullif(sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`COUNT_STAR`),0)),0)) AS `avg_latency`,`sys`.`format_time`(max(`performance_schema`.`events_waits_summary_global_by_event_name`.`MAX_TIMER_WAIT`)) AS `max_latency` from `performance_schema`.`events_waits_summary_global_by_event_name` where ((`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT` > 0) and (`performance_schema`.`events_waits_summary_global_by_event_name`.`EVENT_NAME` <> 'idle')) group by substring_index(`performance_schema`.`events_waits_summary_global_by_event_name`.`EVENT_NAME`,'/',3) order by sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT`) desc

-- View: sys.waits_by_host_by_latency
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `waits_by_host_by_latency` (`host`,`event`,`total`,`total_latency`,`avg_latency`,`max_latency`) AS select if((`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST`) AS `host`,`performance_schema`.`events_waits_summary_by_host_by_event_name`.`EVENT_NAME` AS `event`,`performance_schema`.`events_waits_summary_by_host_by_event_name`.`COUNT_STAR` AS `total`,`sys`.`format_time`(`performance_schema`.`events_waits_summary_by_host_by_event_name`.`SUM_TIMER_WAIT`) AS `total_latency`,`sys`.`format_time`(`performance_schema`.`events_waits_summary_by_host_by_event_name`.`AVG_TIMER_WAIT`) AS `avg_latency`,`sys`.`format_time`(`performance_schema`.`events_waits_summary_by_host_by_event_name`.`MAX_TIMER_WAIT`) AS `max_latency` from `performance_schema`.`events_waits_summary_by_host_by_event_name` where ((`performance_schema`.`events_waits_summary_by_host_by_event_name`.`EVENT_NAME` <> 'idle') and (`performance_schema`.`events_waits_summary_by_host_by_event_name`.`SUM_TIMER_WAIT` > 0)) order by if((`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST`),`performance_schema`.`events_waits_summary_by_host_by_event_name`.`SUM_TIMER_WAIT` desc

-- View: sys.waits_by_user_by_latency
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `waits_by_user_by_latency` (`user`,`event`,`total`,`total_latency`,`avg_latency`,`max_latency`) AS select if((`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER`) AS `user`,`performance_schema`.`events_waits_summary_by_user_by_event_name`.`EVENT_NAME` AS `event`,`performance_schema`.`events_waits_summary_by_user_by_event_name`.`COUNT_STAR` AS `total`,`sys`.`format_time`(`performance_schema`.`events_waits_summary_by_user_by_event_name`.`SUM_TIMER_WAIT`) AS `total_latency`,`sys`.`format_time`(`performance_schema`.`events_waits_summary_by_user_by_event_name`.`AVG_TIMER_WAIT`) AS `avg_latency`,`sys`.`format_time`(`performance_schema`.`events_waits_summary_by_user_by_event_name`.`MAX_TIMER_WAIT`) AS `max_latency` from `performance_schema`.`events_waits_summary_by_user_by_event_name` where ((`performance_schema`.`events_waits_summary_by_user_by_event_name`.`EVENT_NAME` <> 'idle') and (`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER` is not null) and (`performance_schema`.`events_waits_summary_by_user_by_event_name`.`SUM_TIMER_WAIT` > 0)) order by if((`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER`),`performance_schema`.`events_waits_summary_by_user_by_event_name`.`SUM_TIMER_WAIT` desc

-- View: sys.waits_global_by_latency
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `waits_global_by_latency` (`events`,`total`,`total_latency`,`avg_latency`,`max_latency`) AS select `performance_schema`.`events_waits_summary_global_by_event_name`.`EVENT_NAME` AS `event`,`performance_schema`.`events_waits_summary_global_by_event_name`.`COUNT_STAR` AS `total`,`sys`.`format_time`(`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT`) AS `total_latency`,`sys`.`format_time`(`performance_schema`.`events_waits_summary_global_by_event_name`.`AVG_TIMER_WAIT`) AS `avg_latency`,`sys`.`format_time`(`performance_schema`.`events_waits_summary_global_by_event_name`.`MAX_TIMER_WAIT`) AS `max_latency` from `performance_schema`.`events_waits_summary_global_by_event_name` where ((`performance_schema`.`events_waits_summary_global_by_event_name`.`EVENT_NAME` <> 'idle') and (`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT` > 0)) order by `performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT` desc

-- View: sys.x$host_summary
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$host_summary` (`host`,`statements`,`statement_latency`,`statement_avg_latency`,`table_scans`,`file_ios`,`file_io_latency`,`current_connections`,`total_connections`,`unique_users`,`current_memory`,`total_memory_allocated`) AS select if((`performance_schema`.`accounts`.`HOST` is null),'background',`performance_schema`.`accounts`.`HOST`) AS `host`,sum(`stmt`.`total`) AS `statements`,sum(`stmt`.`total_latency`) AS `statement_latency`,(sum(`stmt`.`total_latency`) / sum(`stmt`.`total`)) AS `statement_avg_latency`,sum(`stmt`.`full_scans`) AS `table_scans`,sum(`io`.`ios`) AS `file_ios`,sum(`io`.`io_latency`) AS `file_io_latency`,sum(`performance_schema`.`accounts`.`CURRENT_CONNECTIONS`) AS `current_connections`,sum(`performance_schema`.`accounts`.`TOTAL_CONNECTIONS`) AS `total_connections`,count(distinct `performance_schema`.`accounts`.`USER`) AS `unique_users`,sum(`mem`.`current_allocated`) AS `current_memory`,sum(`mem`.`total_allocated`) AS `total_memory_allocated` from (((`performance_schema`.`accounts` join `x$host_summary_by_statement_latency` `stmt` on((`performance_schema`.`accounts`.`HOST` = `stmt`.`host`))) join `x$host_summary_by_file_io` `io` on((`performance_schema`.`accounts`.`HOST` = `io`.`host`))) join `x$memory_by_host_by_current_bytes` `mem` on((`performance_schema`.`accounts`.`HOST` = `mem`.`host`))) group by if((`performance_schema`.`accounts`.`HOST` is null),'background',`performance_schema`.`accounts`.`HOST`)

-- View: sys.x$host_summary_by_file_io
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$host_summary_by_file_io` (`host`,`ios`,`io_latency`) AS select if((`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST`) AS `host`,sum(`performance_schema`.`events_waits_summary_by_host_by_event_name`.`COUNT_STAR`) AS `ios`,sum(`performance_schema`.`events_waits_summary_by_host_by_event_name`.`SUM_TIMER_WAIT`) AS `io_latency` from `performance_schema`.`events_waits_summary_by_host_by_event_name` where (`performance_schema`.`events_waits_summary_by_host_by_event_name`.`EVENT_NAME` like 'wait/io/file/%') group by if((`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST`) order by sum(`performance_schema`.`events_waits_summary_by_host_by_event_name`.`SUM_TIMER_WAIT`) desc

-- View: sys.x$host_summary_by_file_io_type
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$host_summary_by_file_io_type` (`host`,`event_name`,`total`,`total_latency`,`max_latency`) AS select if((`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST`) AS `host`,`performance_schema`.`events_waits_summary_by_host_by_event_name`.`EVENT_NAME` AS `event_name`,`performance_schema`.`events_waits_summary_by_host_by_event_name`.`COUNT_STAR` AS `total`,`performance_schema`.`events_waits_summary_by_host_by_event_name`.`SUM_TIMER_WAIT` AS `total_latency`,`performance_schema`.`events_waits_summary_by_host_by_event_name`.`MAX_TIMER_WAIT` AS `max_latency` from `performance_schema`.`events_waits_summary_by_host_by_event_name` where ((`performance_schema`.`events_waits_summary_by_host_by_event_name`.`EVENT_NAME` like 'wait/io/file%') and (`performance_schema`.`events_waits_summary_by_host_by_event_name`.`COUNT_STAR` > 0)) order by if((`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST`),`performance_schema`.`events_waits_summary_by_host_by_event_name`.`SUM_TIMER_WAIT` desc

-- View: sys.x$host_summary_by_stages
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$host_summary_by_stages` (`host`,`event_name`,`total`,`total_latency`,`avg_latency`) AS select if((`performance_schema`.`events_stages_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_stages_summary_by_host_by_event_name`.`HOST`) AS `host`,`performance_schema`.`events_stages_summary_by_host_by_event_name`.`EVENT_NAME` AS `event_name`,`performance_schema`.`events_stages_summary_by_host_by_event_name`.`COUNT_STAR` AS `total`,`performance_schema`.`events_stages_summary_by_host_by_event_name`.`SUM_TIMER_WAIT` AS `total_latency`,`performance_schema`.`events_stages_summary_by_host_by_event_name`.`AVG_TIMER_WAIT` AS `avg_latency` from `performance_schema`.`events_stages_summary_by_host_by_event_name` where (`performance_schema`.`events_stages_summary_by_host_by_event_name`.`SUM_TIMER_WAIT` <> 0) order by if((`performance_schema`.`events_stages_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_stages_summary_by_host_by_event_name`.`HOST`),`performance_schema`.`events_stages_summary_by_host_by_event_name`.`SUM_TIMER_WAIT` desc

-- View: sys.x$host_summary_by_statement_latency
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$host_summary_by_statement_latency` (`host`,`total`,`total_latency`,`max_latency`,`lock_latency`,`rows_sent`,`rows_examined`,`rows_affected`,`full_scans`) AS select if((`performance_schema`.`events_statements_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_statements_summary_by_host_by_event_name`.`HOST`) AS `host`,sum(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`COUNT_STAR`) AS `total`,sum(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_TIMER_WAIT`) AS `total_latency`,max(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`MAX_TIMER_WAIT`) AS `max_latency`,sum(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_LOCK_TIME`) AS `lock_latency`,sum(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_ROWS_SENT`) AS `rows_sent`,sum(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_ROWS_EXAMINED`) AS `rows_examined`,sum(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_ROWS_AFFECTED`) AS `rows_affected`,(sum(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_NO_INDEX_USED`) + sum(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_NO_GOOD_INDEX_USED`)) AS `full_scans` from `performance_schema`.`events_statements_summary_by_host_by_event_name` group by if((`performance_schema`.`events_statements_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_statements_summary_by_host_by_event_name`.`HOST`) order by sum(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_TIMER_WAIT`) desc

-- View: sys.x$host_summary_by_statement_type
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$host_summary_by_statement_type` (`host`,`statement`,`total`,`total_latency`,`max_latency`,`lock_latency`,`rows_sent`,`rows_examined`,`rows_affected`,`full_scans`) AS select if((`performance_schema`.`events_statements_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_statements_summary_by_host_by_event_name`.`HOST`) AS `host`,substring_index(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`EVENT_NAME`,'/',-(1)) AS `statement`,`performance_schema`.`events_statements_summary_by_host_by_event_name`.`COUNT_STAR` AS `total`,`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_TIMER_WAIT` AS `total_latency`,`performance_schema`.`events_statements_summary_by_host_by_event_name`.`MAX_TIMER_WAIT` AS `max_latency`,`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_LOCK_TIME` AS `lock_latency`,`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_ROWS_SENT` AS `rows_sent`,`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_ROWS_EXAMINED` AS `rows_examined`,`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_ROWS_AFFECTED` AS `rows_affected`,(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_NO_INDEX_USED` + `performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_NO_GOOD_INDEX_USED`) AS `full_scans` from `performance_schema`.`events_statements_summary_by_host_by_event_name` where (`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_TIMER_WAIT` <> 0) order by if((`performance_schema`.`events_statements_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_statements_summary_by_host_by_event_name`.`HOST`),`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_TIMER_WAIT` desc

-- View: sys.x$innodb_buffer_stats_by_schema
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$innodb_buffer_stats_by_schema` (`object_schema`,`allocated`,`data`,`pages`,`pages_hashed`,`pages_old`,`rows_cached`) AS select if((locate('.',`ibp`.`TABLE_NAME`) = 0),'InnoDB System',replace(substring_index(`ibp`.`TABLE_NAME`,'.',1),'`','')) AS `object_schema`,sum(if((`ibp`.`COMPRESSED_SIZE` = 0),16384,`ibp`.`COMPRESSED_SIZE`)) AS `allocated`,sum(`ibp`.`DATA_SIZE`) AS `data`,count(`ibp`.`PAGE_NUMBER`) AS `pages`,count(if((`ibp`.`IS_HASHED` = 'YES'),1,NULL)) AS `pages_hashed`,count(if((`ibp`.`IS_OLD` = 'YES'),1,NULL)) AS `pages_old`,round(ifnull((sum(`ibp`.`NUMBER_RECORDS`) / nullif(count(distinct `ibp`.`INDEX_NAME`),0)),0),0) AS `rows_cached` from `information_schema`.`INNODB_BUFFER_PAGE` `ibp` where (`ibp`.`TABLE_NAME` is not null) group by `object_schema` order by sum(if((`ibp`.`COMPRESSED_SIZE` = 0),16384,`ibp`.`COMPRESSED_SIZE`)) desc

-- View: sys.x$innodb_buffer_stats_by_table
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$innodb_buffer_stats_by_table` (`object_schema`,`object_name`,`allocated`,`data`,`pages`,`pages_hashed`,`pages_old`,`rows_cached`) AS select if((locate('.',`ibp`.`TABLE_NAME`) = 0),'InnoDB System',replace(substring_index(`ibp`.`TABLE_NAME`,'.',1),'`','')) AS `object_schema`,replace(substring_index(`ibp`.`TABLE_NAME`,'.',-(1)),'`','') AS `object_name`,sum(if((`ibp`.`COMPRESSED_SIZE` = 0),16384,`ibp`.`COMPRESSED_SIZE`)) AS `allocated`,sum(`ibp`.`DATA_SIZE`) AS `data`,count(`ibp`.`PAGE_NUMBER`) AS `pages`,count(if((`ibp`.`IS_HASHED` = 'YES'),1,NULL)) AS `pages_hashed`,count(if((`ibp`.`IS_OLD` = 'YES'),1,NULL)) AS `pages_old`,round(ifnull((sum(`ibp`.`NUMBER_RECORDS`) / nullif(count(distinct `ibp`.`INDEX_NAME`),0)),0),0) AS `rows_cached` from `information_schema`.`INNODB_BUFFER_PAGE` `ibp` where (`ibp`.`TABLE_NAME` is not null) group by `object_schema`,`object_name` order by sum(if((`ibp`.`COMPRESSED_SIZE` = 0),16384,`ibp`.`COMPRESSED_SIZE`)) desc

-- View: sys.x$innodb_lock_waits
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$innodb_lock_waits` (`wait_started`,`wait_age`,`wait_age_secs`,`locked_table`,`locked_table_schema`,`locked_table_name`,`locked_table_partition`,`locked_table_subpartition`,`locked_index`,`locked_type`,`waiting_trx_id`,`waiting_trx_started`,`waiting_trx_age`,`waiting_trx_rows_locked`,`waiting_trx_rows_modified`,`waiting_pid`,`waiting_query`,`waiting_lock_id`,`waiting_lock_mode`,`blocking_trx_id`,`blocking_pid`,`blocking_query`,`blocking_lock_id`,`blocking_lock_mode`,`blocking_trx_started`,`blocking_trx_age`,`blocking_trx_rows_locked`,`blocking_trx_rows_modified`,`sql_kill_blocking_query`,`sql_kill_blocking_connection`) AS select `r`.`trx_wait_started` AS `wait_started`,timediff(now(),`r`.`trx_wait_started`) AS `wait_age`,timestampdiff(SECOND,`r`.`trx_wait_started`,now()) AS `wait_age_secs`,concat(`sys`.`quote_identifier`(`rl`.`OBJECT_SCHEMA`),'.',`sys`.`quote_identifier`(`rl`.`OBJECT_NAME`)) AS `locked_table`,`rl`.`OBJECT_SCHEMA` AS `locked_table_schema`,`rl`.`OBJECT_NAME` AS `locked_table_name`,`rl`.`PARTITION_NAME` AS `locked_table_partition`,`rl`.`SUBPARTITION_NAME` AS `locked_table_subpartition`,`rl`.`INDEX_NAME` AS `locked_index`,`rl`.`LOCK_TYPE` AS `locked_type`,`r`.`trx_id` AS `waiting_trx_id`,`r`.`trx_started` AS `waiting_trx_started`,timediff(now(),`r`.`trx_started`) AS `waiting_trx_age`,`r`.`trx_rows_locked` AS `waiting_trx_rows_locked`,`r`.`trx_rows_modified` AS `waiting_trx_rows_modified`,`r`.`trx_mysql_thread_id` AS `waiting_pid`,`r`.`trx_query` AS `waiting_query`,`rl`.`ENGINE_LOCK_ID` AS `waiting_lock_id`,`rl`.`LOCK_MODE` AS `waiting_lock_mode`,`b`.`trx_id` AS `blocking_trx_id`,`b`.`trx_mysql_thread_id` AS `blocking_pid`,`b`.`trx_query` AS `blocking_query`,`bl`.`ENGINE_LOCK_ID` AS `blocking_lock_id`,`bl`.`LOCK_MODE` AS `blocking_lock_mode`,`b`.`trx_started` AS `blocking_trx_started`,timediff(now(),`b`.`trx_started`) AS `blocking_trx_age`,`b`.`trx_rows_locked` AS `blocking_trx_rows_locked`,`b`.`trx_rows_modified` AS `blocking_trx_rows_modified`,concat('KILL QUERY ',`b`.`trx_mysql_thread_id`) AS `sql_kill_blocking_query`,concat('KILL ',`b`.`trx_mysql_thread_id`) AS `sql_kill_blocking_connection` from ((((`performance_schema`.`data_lock_waits` `w` join `information_schema`.`INNODB_TRX` `b` on((convert(`b`.`trx_id` using utf8mb4) = cast(`w`.`BLOCKING_ENGINE_TRANSACTION_ID` as char charset utf8mb4)))) join `information_schema`.`INNODB_TRX` `r` on((convert(`r`.`trx_id` using utf8mb4) = cast(`w`.`REQUESTING_ENGINE_TRANSACTION_ID` as char charset utf8mb4)))) join `performance_schema`.`data_locks` `bl` on((`bl`.`ENGINE_LOCK_ID` = `w`.`BLOCKING_ENGINE_LOCK_ID`))) join `performance_schema`.`data_locks` `rl` on((`rl`.`ENGINE_LOCK_ID` = `w`.`REQUESTING_ENGINE_LOCK_ID`))) order by `r`.`trx_wait_started`

-- View: sys.x$io_by_thread_by_latency
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$io_by_thread_by_latency` (`user`,`total`,`total_latency`,`min_latency`,`avg_latency`,`max_latency`,`thread_id`,`processlist_id`) AS select if((`performance_schema`.`threads`.`PROCESSLIST_ID` is null),substring_index(`performance_schema`.`threads`.`NAME`,'/',-(1)),concat(`performance_schema`.`threads`.`PROCESSLIST_USER`,'@',convert(`performance_schema`.`threads`.`PROCESSLIST_HOST` using utf8mb4))) AS `user`,sum(`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`COUNT_STAR`) AS `total`,sum(`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`SUM_TIMER_WAIT`) AS `total_latency`,min(`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`MIN_TIMER_WAIT`) AS `min_latency`,avg(`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`AVG_TIMER_WAIT`) AS `avg_latency`,max(`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`MAX_TIMER_WAIT`) AS `max_latency`,`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`THREAD_ID` AS `thread_id`,`performance_schema`.`threads`.`PROCESSLIST_ID` AS `processlist_id` from (`performance_schema`.`events_waits_summary_by_thread_by_event_name` left join `performance_schema`.`threads` on((`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`THREAD_ID` = `performance_schema`.`threads`.`THREAD_ID`))) where ((`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`EVENT_NAME` like 'wait/io/file/%') and (`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`SUM_TIMER_WAIT` > 0)) group by `performance_schema`.`events_waits_summary_by_thread_by_event_name`.`THREAD_ID`,`performance_schema`.`threads`.`PROCESSLIST_ID`,`user` order by sum(`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`SUM_TIMER_WAIT`) desc

-- View: sys.x$io_global_by_file_by_bytes
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$io_global_by_file_by_bytes` (`file`,`count_read`,`total_read`,`avg_read`,`count_write`,`total_written`,`avg_write`,`total`,`write_pct`) AS select `performance_schema`.`file_summary_by_instance`.`FILE_NAME` AS `file`,`performance_schema`.`file_summary_by_instance`.`COUNT_READ` AS `count_read`,`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` AS `total_read`,ifnull((`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` / nullif(`performance_schema`.`file_summary_by_instance`.`COUNT_READ`,0)),0) AS `avg_read`,`performance_schema`.`file_summary_by_instance`.`COUNT_WRITE` AS `count_write`,`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE` AS `total_written`,ifnull((`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE` / nullif(`performance_schema`.`file_summary_by_instance`.`COUNT_WRITE`,0)),0.00) AS `avg_write`,(`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` + `performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE`) AS `total`,ifnull(round((100 - ((`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` / nullif((`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` + `performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE`),0)) * 100)),2),0.00) AS `write_pct` from `performance_schema`.`file_summary_by_instance` order by (`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` + `performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE`) desc

-- View: sys.x$io_global_by_file_by_latency
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$io_global_by_file_by_latency` (`file`,`total`,`total_latency`,`count_read`,`read_latency`,`count_write`,`write_latency`,`count_misc`,`misc_latency`) AS select `performance_schema`.`file_summary_by_instance`.`FILE_NAME` AS `file`,`performance_schema`.`file_summary_by_instance`.`COUNT_STAR` AS `total`,`performance_schema`.`file_summary_by_instance`.`SUM_TIMER_WAIT` AS `total_latency`,`performance_schema`.`file_summary_by_instance`.`COUNT_READ` AS `count_read`,`performance_schema`.`file_summary_by_instance`.`SUM_TIMER_READ` AS `read_latency`,`performance_schema`.`file_summary_by_instance`.`COUNT_WRITE` AS `count_write`,`performance_schema`.`file_summary_by_instance`.`SUM_TIMER_WRITE` AS `write_latency`,`performance_schema`.`file_summary_by_instance`.`COUNT_MISC` AS `count_misc`,`performance_schema`.`file_summary_by_instance`.`SUM_TIMER_MISC` AS `misc_latency` from `performance_schema`.`file_summary_by_instance` order by `performance_schema`.`file_summary_by_instance`.`SUM_TIMER_WAIT` desc

-- View: sys.x$io_global_by_wait_by_bytes
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$io_global_by_wait_by_bytes` (`event_name`,`total`,`total_latency`,`min_latency`,`avg_latency`,`max_latency`,`count_read`,`total_read`,`avg_read`,`count_write`,`total_written`,`avg_written`,`total_requested`) AS select substring_index(`performance_schema`.`file_summary_by_event_name`.`EVENT_NAME`,'/',-(2)) AS `event_name`,`performance_schema`.`file_summary_by_event_name`.`COUNT_STAR` AS `total`,`performance_schema`.`file_summary_by_event_name`.`SUM_TIMER_WAIT` AS `total_latency`,`performance_schema`.`file_summary_by_event_name`.`MIN_TIMER_WAIT` AS `min_latency`,`performance_schema`.`file_summary_by_event_name`.`AVG_TIMER_WAIT` AS `avg_latency`,`performance_schema`.`file_summary_by_event_name`.`MAX_TIMER_WAIT` AS `max_latency`,`performance_schema`.`file_summary_by_event_name`.`COUNT_READ` AS `count_read`,`performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_READ` AS `total_read`,ifnull((`performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_READ` / nullif(`performance_schema`.`file_summary_by_event_name`.`COUNT_READ`,0)),0) AS `avg_read`,`performance_schema`.`file_summary_by_event_name`.`COUNT_WRITE` AS `count_write`,`performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_WRITE` AS `total_written`,ifnull((`performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_WRITE` / nullif(`performance_schema`.`file_summary_by_event_name`.`COUNT_WRITE`,0)),0) AS `avg_written`,(`performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_WRITE` + `performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_READ`) AS `total_requested` from `performance_schema`.`file_summary_by_event_name` where ((`performance_schema`.`file_summary_by_event_name`.`EVENT_NAME` like 'wait/io/file/%') and (`performance_schema`.`file_summary_by_event_name`.`COUNT_STAR` > 0)) order by (`performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_WRITE` + `performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_READ`) desc

-- View: sys.x$io_global_by_wait_by_latency
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$io_global_by_wait_by_latency` (`event_name`,`total`,`total_latency`,`avg_latency`,`max_latency`,`read_latency`,`write_latency`,`misc_latency`,`count_read`,`total_read`,`avg_read`,`count_write`,`total_written`,`avg_written`) AS select substring_index(`performance_schema`.`file_summary_by_event_name`.`EVENT_NAME`,'/',-(2)) AS `event_name`,`performance_schema`.`file_summary_by_event_name`.`COUNT_STAR` AS `total`,`performance_schema`.`file_summary_by_event_name`.`SUM_TIMER_WAIT` AS `total_latency`,`performance_schema`.`file_summary_by_event_name`.`AVG_TIMER_WAIT` AS `avg_latency`,`performance_schema`.`file_summary_by_event_name`.`MAX_TIMER_WAIT` AS `max_latency`,`performance_schema`.`file_summary_by_event_name`.`SUM_TIMER_READ` AS `read_latency`,`performance_schema`.`file_summary_by_event_name`.`SUM_TIMER_WRITE` AS `write_latency`,`performance_schema`.`file_summary_by_event_name`.`SUM_TIMER_MISC` AS `misc_latency`,`performance_schema`.`file_summary_by_event_name`.`COUNT_READ` AS `count_read`,`performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_READ` AS `total_read`,ifnull((`performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_READ` / nullif(`performance_schema`.`file_summary_by_event_name`.`COUNT_READ`,0)),0) AS `avg_read`,`performance_schema`.`file_summary_by_event_name`.`COUNT_WRITE` AS `count_write`,`performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_WRITE` AS `total_written`,ifnull((`performance_schema`.`file_summary_by_event_name`.`SUM_NUMBER_OF_BYTES_WRITE` / nullif(`performance_schema`.`file_summary_by_event_name`.`COUNT_WRITE`,0)),0) AS `avg_written` from `performance_schema`.`file_summary_by_event_name` where ((`performance_schema`.`file_summary_by_event_name`.`EVENT_NAME` like 'wait/io/file/%') and (`performance_schema`.`file_summary_by_event_name`.`COUNT_STAR` > 0)) order by `performance_schema`.`file_summary_by_event_name`.`SUM_TIMER_WAIT` desc

-- View: sys.x$latest_file_io
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$latest_file_io` (`thread`,`file`,`latency`,`operation`,`requested`) AS select if((`processlist`.`ID` is null),concat(substring_index(`performance_schema`.`threads`.`NAME`,'/',-(1)),':',`performance_schema`.`events_waits_history_long`.`THREAD_ID`),convert(concat(`processlist`.`USER`,'@',`processlist`.`HOST`,':',`processlist`.`ID`) using utf8mb4)) AS `thread`,`performance_schema`.`events_waits_history_long`.`OBJECT_NAME` AS `file`,`performance_schema`.`events_waits_history_long`.`TIMER_WAIT` AS `latency`,`performance_schema`.`events_waits_history_long`.`OPERATION` AS `operation`,`performance_schema`.`events_waits_history_long`.`NUMBER_OF_BYTES` AS `requested` from ((`performance_schema`.`events_waits_history_long` join `performance_schema`.`threads` on((`performance_schema`.`events_waits_history_long`.`THREAD_ID` = `performance_schema`.`threads`.`THREAD_ID`))) left join `information_schema`.`PROCESSLIST` `processlist` on((`performance_schema`.`threads`.`PROCESSLIST_ID` = `processlist`.`ID`))) where ((`performance_schema`.`events_waits_history_long`.`OBJECT_NAME` is not null) and (`performance_schema`.`events_waits_history_long`.`EVENT_NAME` like 'wait/io/file/%')) order by `performance_schema`.`events_waits_history_long`.`TIMER_START`

-- View: sys.x$memory_by_host_by_current_bytes
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$memory_by_host_by_current_bytes` (`host`,`current_count_used`,`current_allocated`,`current_avg_alloc`,`current_max_alloc`,`total_allocated`) AS select if((`performance_schema`.`memory_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`memory_summary_by_host_by_event_name`.`HOST`) AS `host`,sum(`performance_schema`.`memory_summary_by_host_by_event_name`.`CURRENT_COUNT_USED`) AS `current_count_used`,sum(`performance_schema`.`memory_summary_by_host_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`) AS `current_allocated`,ifnull((sum(`performance_schema`.`memory_summary_by_host_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`) / nullif(sum(`performance_schema`.`memory_summary_by_host_by_event_name`.`CURRENT_COUNT_USED`),0)),0) AS `current_avg_alloc`,max(`performance_schema`.`memory_summary_by_host_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`) AS `current_max_alloc`,sum(`performance_schema`.`memory_summary_by_host_by_event_name`.`SUM_NUMBER_OF_BYTES_ALLOC`) AS `total_allocated` from `performance_schema`.`memory_summary_by_host_by_event_name` group by if((`performance_schema`.`memory_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`memory_summary_by_host_by_event_name`.`HOST`) order by sum(`performance_schema`.`memory_summary_by_host_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`) desc

-- View: sys.x$memory_by_thread_by_current_bytes
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$memory_by_thread_by_current_bytes` (`thread_id`,`user`,`current_count_used`,`current_allocated`,`current_avg_alloc`,`current_max_alloc`,`total_allocated`) AS select `t`.`THREAD_ID` AS `thread_id`,if((`t`.`NAME` = 'thread/sql/one_connection'),concat(`t`.`PROCESSLIST_USER`,'@',convert(`t`.`PROCESSLIST_HOST` using utf8mb4)),replace(`t`.`NAME`,'thread/','')) AS `user`,sum(`mt`.`CURRENT_COUNT_USED`) AS `current_count_used`,sum(`mt`.`CURRENT_NUMBER_OF_BYTES_USED`) AS `current_allocated`,ifnull((sum(`mt`.`CURRENT_NUMBER_OF_BYTES_USED`) / nullif(sum(`mt`.`CURRENT_COUNT_USED`),0)),0) AS `current_avg_alloc`,max(`mt`.`CURRENT_NUMBER_OF_BYTES_USED`) AS `current_max_alloc`,sum(`mt`.`SUM_NUMBER_OF_BYTES_ALLOC`) AS `total_allocated` from (`performance_schema`.`memory_summary_by_thread_by_event_name` `mt` join `performance_schema`.`threads` `t` on((`mt`.`THREAD_ID` = `t`.`THREAD_ID`))) group by `t`.`THREAD_ID`,if((`t`.`NAME` = 'thread/sql/one_connection'),concat(`t`.`PROCESSLIST_USER`,'@',convert(`t`.`PROCESSLIST_HOST` using utf8mb4)),replace(`t`.`NAME`,'thread/','')) order by sum(`mt`.`CURRENT_NUMBER_OF_BYTES_USED`) desc

-- View: sys.x$memory_by_user_by_current_bytes
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$memory_by_user_by_current_bytes` (`user`,`current_count_used`,`current_allocated`,`current_avg_alloc`,`current_max_alloc`,`total_allocated`) AS select if((`performance_schema`.`memory_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`memory_summary_by_user_by_event_name`.`USER`) AS `user`,sum(`performance_schema`.`memory_summary_by_user_by_event_name`.`CURRENT_COUNT_USED`) AS `current_count_used`,sum(`performance_schema`.`memory_summary_by_user_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`) AS `current_allocated`,ifnull((sum(`performance_schema`.`memory_summary_by_user_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`) / nullif(sum(`performance_schema`.`memory_summary_by_user_by_event_name`.`CURRENT_COUNT_USED`),0)),0) AS `current_avg_alloc`,max(`performance_schema`.`memory_summary_by_user_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`) AS `current_max_alloc`,sum(`performance_schema`.`memory_summary_by_user_by_event_name`.`SUM_NUMBER_OF_BYTES_ALLOC`) AS `total_allocated` from `performance_schema`.`memory_summary_by_user_by_event_name` group by if((`performance_schema`.`memory_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`memory_summary_by_user_by_event_name`.`USER`) order by sum(`performance_schema`.`memory_summary_by_user_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`) desc

-- View: sys.x$memory_global_by_current_bytes
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$memory_global_by_current_bytes` (`event_name`,`current_count`,`current_alloc`,`current_avg_alloc`,`high_count`,`high_alloc`,`high_avg_alloc`) AS select `performance_schema`.`memory_summary_global_by_event_name`.`EVENT_NAME` AS `event_name`,`performance_schema`.`memory_summary_global_by_event_name`.`CURRENT_COUNT_USED` AS `current_count`,`performance_schema`.`memory_summary_global_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED` AS `current_alloc`,ifnull((`performance_schema`.`memory_summary_global_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED` / nullif(`performance_schema`.`memory_summary_global_by_event_name`.`CURRENT_COUNT_USED`,0)),0) AS `current_avg_alloc`,`performance_schema`.`memory_summary_global_by_event_name`.`HIGH_COUNT_USED` AS `high_count`,`performance_schema`.`memory_summary_global_by_event_name`.`HIGH_NUMBER_OF_BYTES_USED` AS `high_alloc`,ifnull((`performance_schema`.`memory_summary_global_by_event_name`.`HIGH_NUMBER_OF_BYTES_USED` / nullif(`performance_schema`.`memory_summary_global_by_event_name`.`HIGH_COUNT_USED`,0)),0) AS `high_avg_alloc` from `performance_schema`.`memory_summary_global_by_event_name` where (`performance_schema`.`memory_summary_global_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED` > 0) order by `performance_schema`.`memory_summary_global_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED` desc

-- View: sys.x$memory_global_total
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$memory_global_total` (`total_allocated`) AS select sum(`performance_schema`.`memory_summary_global_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`) AS `total_allocated` from `performance_schema`.`memory_summary_global_by_event_name`

-- View: sys.x$processlist
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$processlist` (`thd_id`,`conn_id`,`user`,`db`,`command`,`state`,`time`,`current_statement`,`statement_latency`,`progress`,`lock_latency`,`rows_examined`,`rows_sent`,`rows_affected`,`tmp_tables`,`tmp_disk_tables`,`full_scan`,`last_statement`,`last_statement_latency`,`current_memory`,`last_wait`,`last_wait_latency`,`source`,`trx_latency`,`trx_state`,`trx_autocommit`,`pid`,`program_name`) AS select `pps`.`THREAD_ID` AS `thd_id`,`pps`.`PROCESSLIST_ID` AS `conn_id`,if((`pps`.`NAME` in ('thread/sql/one_connection','thread/thread_pool/tp_one_connection')),concat(`pps`.`PROCESSLIST_USER`,'@',convert(`pps`.`PROCESSLIST_HOST` using utf8mb4)),replace(`pps`.`NAME`,'thread/','')) AS `user`,`pps`.`PROCESSLIST_DB` AS `db`,`pps`.`PROCESSLIST_COMMAND` AS `command`,`pps`.`PROCESSLIST_STATE` AS `state`,`pps`.`PROCESSLIST_TIME` AS `time`,`pps`.`PROCESSLIST_INFO` AS `current_statement`,if((`esc`.`END_EVENT_ID` is null),`esc`.`TIMER_WAIT`,NULL) AS `statement_latency`,if((`esc`.`END_EVENT_ID` is null),round((100 * (`estc`.`WORK_COMPLETED` / `estc`.`WORK_ESTIMATED`)),2),NULL) AS `progress`,`esc`.`LOCK_TIME` AS `lock_latency`,`esc`.`ROWS_EXAMINED` AS `rows_examined`,`esc`.`ROWS_SENT` AS `rows_sent`,`esc`.`ROWS_AFFECTED` AS `rows_affected`,`esc`.`CREATED_TMP_TABLES` AS `tmp_tables`,`esc`.`CREATED_TMP_DISK_TABLES` AS `tmp_disk_tables`,if(((`esc`.`NO_GOOD_INDEX_USED` > 0) or (`esc`.`NO_INDEX_USED` > 0)),'YES','NO') AS `full_scan`,if((`esc`.`END_EVENT_ID` is not null),`esc`.`SQL_TEXT`,NULL) AS `last_statement`,if((`esc`.`END_EVENT_ID` is not null),`esc`.`TIMER_WAIT`,NULL) AS `last_statement_latency`,`mem`.`current_allocated` AS `current_memory`,`ewc`.`EVENT_NAME` AS `last_wait`,if(((`ewc`.`END_EVENT_ID` is null) and (`ewc`.`EVENT_NAME` is not null)),'Still Waiting',`ewc`.`TIMER_WAIT`) AS `last_wait_latency`,`ewc`.`SOURCE` AS `source`,`etc`.`TIMER_WAIT` AS `trx_latency`,`etc`.`STATE` AS `trx_state`,`etc`.`AUTOCOMMIT` AS `trx_autocommit`,`conattr_pid`.`ATTR_VALUE` AS `pid`,`conattr_progname`.`ATTR_VALUE` AS `program_name` from (((((((`performance_schema`.`threads` `pps` left join `performance_schema`.`events_waits_current` `ewc` on((`pps`.`THREAD_ID` = `ewc`.`THREAD_ID`))) left join `performance_schema`.`events_stages_current` `estc` on((`pps`.`THREAD_ID` = `estc`.`THREAD_ID`))) left join `performance_schema`.`events_statements_current` `esc` on((`pps`.`THREAD_ID` = `esc`.`THREAD_ID`))) left join `performance_schema`.`events_transactions_current` `etc` on((`pps`.`THREAD_ID` = `etc`.`THREAD_ID`))) left join `x$memory_by_thread_by_current_bytes` `mem` on((`pps`.`THREAD_ID` = `mem`.`thread_id`))) left join `performance_schema`.`session_connect_attrs` `conattr_pid` on(((`conattr_pid`.`PROCESSLIST_ID` = `pps`.`PROCESSLIST_ID`) and (`conattr_pid`.`ATTR_NAME` = '_pid')))) left join `performance_schema`.`session_connect_attrs` `conattr_progname` on(((`conattr_progname`.`PROCESSLIST_ID` = `pps`.`PROCESSLIST_ID`) and (`conattr_progname`.`ATTR_NAME` = 'program_name')))) order by `pps`.`PROCESSLIST_TIME` desc,`last_wait_latency` desc

-- View: sys.x$ps_digest_95th_percentile_by_avg_us
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$ps_digest_95th_percentile_by_avg_us` (`avg_us`,`percentile`) AS select `s2`.`avg_us` AS `avg_us`,ifnull((sum(`s1`.`cnt`) / nullif((select count(0) from `performance_schema`.`events_statements_summary_by_digest`),0)),0) AS `percentile` from (`x$ps_digest_avg_latency_distribution` `s1` join `x$ps_digest_avg_latency_distribution` `s2` on((`s1`.`avg_us` <= `s2`.`avg_us`))) group by `s2`.`avg_us` having (ifnull((sum(`s1`.`cnt`) / nullif((select count(0) from `performance_schema`.`events_statements_summary_by_digest`),0)),0) > 0.95) order by `percentile` limit 1

-- View: sys.x$ps_digest_avg_latency_distribution
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$ps_digest_avg_latency_distribution` (`cnt`,`avg_us`) AS select count(0) AS `cnt`,round((`performance_schema`.`events_statements_summary_by_digest`.`AVG_TIMER_WAIT` / 1000000),0) AS `avg_us` from `performance_schema`.`events_statements_summary_by_digest` group by `avg_us`

-- View: sys.x$ps_schema_table_statistics_io
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$ps_schema_table_statistics_io` (`table_schema`,`table_name`,`count_read`,`sum_number_of_bytes_read`,`sum_timer_read`,`count_write`,`sum_number_of_bytes_write`,`sum_timer_write`,`count_misc`,`sum_timer_misc`) AS select `extract_schema_from_file_name`(`performance_schema`.`file_summary_by_instance`.`FILE_NAME`) AS `table_schema`,`extract_table_from_file_name`(`performance_schema`.`file_summary_by_instance`.`FILE_NAME`) AS `table_name`,sum(`performance_schema`.`file_summary_by_instance`.`COUNT_READ`) AS `count_read`,sum(`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ`) AS `sum_number_of_bytes_read`,sum(`performance_schema`.`file_summary_by_instance`.`SUM_TIMER_READ`) AS `sum_timer_read`,sum(`performance_schema`.`file_summary_by_instance`.`COUNT_WRITE`) AS `count_write`,sum(`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE`) AS `sum_number_of_bytes_write`,sum(`performance_schema`.`file_summary_by_instance`.`SUM_TIMER_WRITE`) AS `sum_timer_write`,sum(`performance_schema`.`file_summary_by_instance`.`COUNT_MISC`) AS `count_misc`,sum(`performance_schema`.`file_summary_by_instance`.`SUM_TIMER_MISC`) AS `sum_timer_misc` from `performance_schema`.`file_summary_by_instance` group by `table_schema`,`table_name`

-- View: sys.x$schema_flattened_keys
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$schema_flattened_keys` (`table_schema`,`table_name`,`index_name`,`non_unique`,`subpart_exists`,`index_columns`) AS select `STATISTICS`.`TABLE_SCHEMA` AS `TABLE_SCHEMA`,`STATISTICS`.`TABLE_NAME` AS `TABLE_NAME`,`STATISTICS`.`INDEX_NAME` AS `INDEX_NAME`,max(`STATISTICS`.`NON_UNIQUE`) AS `non_unique`,max(if((`STATISTICS`.`SUB_PART` is null),0,1)) AS `subpart_exists`,group_concat(`STATISTICS`.`COLUMN_NAME` order by `STATISTICS`.`SEQ_IN_INDEX` ASC separator ',') AS `index_columns` from `information_schema`.`STATISTICS` where ((`STATISTICS`.`INDEX_TYPE` = 'BTREE') and (`STATISTICS`.`TABLE_SCHEMA` not in ('mysql','sys','INFORMATION_SCHEMA','PERFORMANCE_SCHEMA'))) group by `STATISTICS`.`TABLE_SCHEMA`,`STATISTICS`.`TABLE_NAME`,`STATISTICS`.`INDEX_NAME`

-- View: sys.x$schema_index_statistics
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$schema_index_statistics` (`table_schema`,`table_name`,`index_name`,`rows_selected`,`select_latency`,`rows_inserted`,`insert_latency`,`rows_updated`,`update_latency`,`rows_deleted`,`delete_latency`) AS select `performance_schema`.`table_io_waits_summary_by_index_usage`.`OBJECT_SCHEMA` AS `table_schema`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`OBJECT_NAME` AS `table_name`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`INDEX_NAME` AS `index_name`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`COUNT_FETCH` AS `rows_selected`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`SUM_TIMER_FETCH` AS `select_latency`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`COUNT_INSERT` AS `rows_inserted`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`SUM_TIMER_INSERT` AS `insert_latency`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`COUNT_UPDATE` AS `rows_updated`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`SUM_TIMER_UPDATE` AS `update_latency`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`COUNT_DELETE` AS `rows_deleted`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`SUM_TIMER_DELETE` AS `delete_latency` from `performance_schema`.`table_io_waits_summary_by_index_usage` where (`performance_schema`.`table_io_waits_summary_by_index_usage`.`INDEX_NAME` is not null) order by `performance_schema`.`table_io_waits_summary_by_index_usage`.`SUM_TIMER_WAIT` desc

-- View: sys.x$schema_table_lock_waits
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$schema_table_lock_waits` (`object_schema`,`object_name`,`waiting_thread_id`,`waiting_pid`,`waiting_account`,`waiting_lock_type`,`waiting_lock_duration`,`waiting_query`,`waiting_query_secs`,`waiting_query_rows_affected`,`waiting_query_rows_examined`,`blocking_thread_id`,`blocking_pid`,`blocking_account`,`blocking_lock_type`,`blocking_lock_duration`,`sql_kill_blocking_query`,`sql_kill_blocking_connection`) AS select `g`.`OBJECT_SCHEMA` AS `object_schema`,`g`.`OBJECT_NAME` AS `object_name`,`pt`.`THREAD_ID` AS `waiting_thread_id`,`pt`.`PROCESSLIST_ID` AS `waiting_pid`,`sys`.`ps_thread_account`(`p`.`OWNER_THREAD_ID`) AS `waiting_account`,`p`.`LOCK_TYPE` AS `waiting_lock_type`,`p`.`LOCK_DURATION` AS `waiting_lock_duration`,`pt`.`PROCESSLIST_INFO` AS `waiting_query`,`pt`.`PROCESSLIST_TIME` AS `waiting_query_secs`,`ps`.`ROWS_AFFECTED` AS `waiting_query_rows_affected`,`ps`.`ROWS_EXAMINED` AS `waiting_query_rows_examined`,`gt`.`THREAD_ID` AS `blocking_thread_id`,`gt`.`PROCESSLIST_ID` AS `blocking_pid`,`sys`.`ps_thread_account`(`g`.`OWNER_THREAD_ID`) AS `blocking_account`,`g`.`LOCK_TYPE` AS `blocking_lock_type`,`g`.`LOCK_DURATION` AS `blocking_lock_duration`,concat('KILL QUERY ',`gt`.`PROCESSLIST_ID`) AS `sql_kill_blocking_query`,concat('KILL ',`gt`.`PROCESSLIST_ID`) AS `sql_kill_blocking_connection` from (((((`performance_schema`.`metadata_locks` `g` join `performance_schema`.`metadata_locks` `p` on(((`g`.`OBJECT_TYPE` = `p`.`OBJECT_TYPE`) and (`g`.`OBJECT_SCHEMA` = `p`.`OBJECT_SCHEMA`) and (`g`.`OBJECT_NAME` = `p`.`OBJECT_NAME`) and (`g`.`LOCK_STATUS` = 'GRANTED') and (`p`.`LOCK_STATUS` = 'PENDING')))) join `performance_schema`.`threads` `gt` on((`g`.`OWNER_THREAD_ID` = `gt`.`THREAD_ID`))) join `performance_schema`.`threads` `pt` on((`p`.`OWNER_THREAD_ID` = `pt`.`THREAD_ID`))) left join `performance_schema`.`events_statements_current` `gs` on((`g`.`OWNER_THREAD_ID` = `gs`.`THREAD_ID`))) left join `performance_schema`.`events_statements_current` `ps` on((`p`.`OWNER_THREAD_ID` = `ps`.`THREAD_ID`))) where (`g`.`OBJECT_TYPE` = 'TABLE')

-- View: sys.x$schema_table_statistics
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$schema_table_statistics` (`table_schema`,`table_name`,`total_latency`,`rows_fetched`,`fetch_latency`,`rows_inserted`,`insert_latency`,`rows_updated`,`update_latency`,`rows_deleted`,`delete_latency`,`io_read_requests`,`io_read`,`io_read_latency`,`io_write_requests`,`io_write`,`io_write_latency`,`io_misc_requests`,`io_misc_latency`) AS select `pst`.`OBJECT_SCHEMA` AS `table_schema`,`pst`.`OBJECT_NAME` AS `table_name`,`pst`.`SUM_TIMER_WAIT` AS `total_latency`,`pst`.`COUNT_FETCH` AS `rows_fetched`,`pst`.`SUM_TIMER_FETCH` AS `fetch_latency`,`pst`.`COUNT_INSERT` AS `rows_inserted`,`pst`.`SUM_TIMER_INSERT` AS `insert_latency`,`pst`.`COUNT_UPDATE` AS `rows_updated`,`pst`.`SUM_TIMER_UPDATE` AS `update_latency`,`pst`.`COUNT_DELETE` AS `rows_deleted`,`pst`.`SUM_TIMER_DELETE` AS `delete_latency`,`fsbi`.`count_read` AS `io_read_requests`,`fsbi`.`sum_number_of_bytes_read` AS `io_read`,`fsbi`.`sum_timer_read` AS `io_read_latency`,`fsbi`.`count_write` AS `io_write_requests`,`fsbi`.`sum_number_of_bytes_write` AS `io_write`,`fsbi`.`sum_timer_write` AS `io_write_latency`,`fsbi`.`count_misc` AS `io_misc_requests`,`fsbi`.`sum_timer_misc` AS `io_misc_latency` from (`performance_schema`.`table_io_waits_summary_by_table` `pst` left join `x$ps_schema_table_statistics_io` `fsbi` on(((`pst`.`OBJECT_SCHEMA` = `fsbi`.`table_schema`) and (`pst`.`OBJECT_NAME` = `fsbi`.`table_name`)))) order by `pst`.`SUM_TIMER_WAIT` desc

-- View: sys.x$schema_table_statistics_with_buffer
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$schema_table_statistics_with_buffer` (`table_schema`,`table_name`,`rows_fetched`,`fetch_latency`,`rows_inserted`,`insert_latency`,`rows_updated`,`update_latency`,`rows_deleted`,`delete_latency`,`io_read_requests`,`io_read`,`io_read_latency`,`io_write_requests`,`io_write`,`io_write_latency`,`io_misc_requests`,`io_misc_latency`,`innodb_buffer_allocated`,`innodb_buffer_data`,`innodb_buffer_free`,`innodb_buffer_pages`,`innodb_buffer_pages_hashed`,`innodb_buffer_pages_old`,`innodb_buffer_rows_cached`) AS select `pst`.`OBJECT_SCHEMA` AS `table_schema`,`pst`.`OBJECT_NAME` AS `table_name`,`pst`.`COUNT_FETCH` AS `rows_fetched`,`pst`.`SUM_TIMER_FETCH` AS `fetch_latency`,`pst`.`COUNT_INSERT` AS `rows_inserted`,`pst`.`SUM_TIMER_INSERT` AS `insert_latency`,`pst`.`COUNT_UPDATE` AS `rows_updated`,`pst`.`SUM_TIMER_UPDATE` AS `update_latency`,`pst`.`COUNT_DELETE` AS `rows_deleted`,`pst`.`SUM_TIMER_DELETE` AS `delete_latency`,`fsbi`.`count_read` AS `io_read_requests`,`fsbi`.`sum_number_of_bytes_read` AS `io_read`,`fsbi`.`sum_timer_read` AS `io_read_latency`,`fsbi`.`count_write` AS `io_write_requests`,`fsbi`.`sum_number_of_bytes_write` AS `io_write`,`fsbi`.`sum_timer_write` AS `io_write_latency`,`fsbi`.`count_misc` AS `io_misc_requests`,`fsbi`.`sum_timer_misc` AS `io_misc_latency`,`ibp`.`allocated` AS `innodb_buffer_allocated`,`ibp`.`data` AS `innodb_buffer_data`,(`ibp`.`allocated` - `ibp`.`data`) AS `innodb_buffer_free`,`ibp`.`pages` AS `innodb_buffer_pages`,`ibp`.`pages_hashed` AS `innodb_buffer_pages_hashed`,`ibp`.`pages_old` AS `innodb_buffer_pages_old`,`ibp`.`rows_cached` AS `innodb_buffer_rows_cached` from ((`performance_schema`.`table_io_waits_summary_by_table` `pst` left join `x$ps_schema_table_statistics_io` `fsbi` on(((`pst`.`OBJECT_SCHEMA` = `fsbi`.`table_schema`) and (`pst`.`OBJECT_NAME` = `fsbi`.`table_name`)))) left join `x$innodb_buffer_stats_by_table` `ibp` on(((`pst`.`OBJECT_SCHEMA` = convert(`ibp`.`object_schema` using utf8mb4)) and (`pst`.`OBJECT_NAME` = convert(`ibp`.`object_name` using utf8mb4))))) order by `pst`.`SUM_TIMER_WAIT` desc

-- View: sys.x$schema_tables_with_full_table_scans
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$schema_tables_with_full_table_scans` (`object_schema`,`object_name`,`rows_full_scanned`,`latency`) AS select `performance_schema`.`table_io_waits_summary_by_index_usage`.`OBJECT_SCHEMA` AS `object_schema`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`OBJECT_NAME` AS `object_name`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`COUNT_READ` AS `rows_full_scanned`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`SUM_TIMER_WAIT` AS `latency` from `performance_schema`.`table_io_waits_summary_by_index_usage` where ((`performance_schema`.`table_io_waits_summary_by_index_usage`.`INDEX_NAME` is null) and (`performance_schema`.`table_io_waits_summary_by_index_usage`.`COUNT_READ` > 0)) order by `performance_schema`.`table_io_waits_summary_by_index_usage`.`COUNT_READ` desc

-- View: sys.x$session
CREATE ALGORITHM=UNDEFINED DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$session` AS select `x$processlist`.`thd_id` AS `thd_id`,`x$processlist`.`conn_id` AS `conn_id`,`x$processlist`.`user` AS `user`,`x$processlist`.`db` AS `db`,`x$processlist`.`command` AS `command`,`x$processlist`.`state` AS `state`,`x$processlist`.`time` AS `time`,`x$processlist`.`current_statement` AS `current_statement`,`x$processlist`.`statement_latency` AS `statement_latency`,`x$processlist`.`progress` AS `progress`,`x$processlist`.`lock_latency` AS `lock_latency`,`x$processlist`.`rows_examined` AS `rows_examined`,`x$processlist`.`rows_sent` AS `rows_sent`,`x$processlist`.`rows_affected` AS `rows_affected`,`x$processlist`.`tmp_tables` AS `tmp_tables`,`x$processlist`.`tmp_disk_tables` AS `tmp_disk_tables`,`x$processlist`.`full_scan` AS `full_scan`,`x$processlist`.`last_statement` AS `last_statement`,`x$processlist`.`last_statement_latency` AS `last_statement_latency`,`x$processlist`.`current_memory` AS `current_memory`,`x$processlist`.`last_wait` AS `last_wait`,`x$processlist`.`last_wait_latency` AS `last_wait_latency`,`x$processlist`.`source` AS `source`,`x$processlist`.`trx_latency` AS `trx_latency`,`x$processlist`.`trx_state` AS `trx_state`,`x$processlist`.`trx_autocommit` AS `trx_autocommit`,`x$processlist`.`pid` AS `pid`,`x$processlist`.`program_name` AS `program_name` from `x$processlist` where ((`x$processlist`.`conn_id` is not null) and (`x$processlist`.`command` <> 'Daemon'))

-- View: sys.x$statement_analysis
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$statement_analysis` (`query`,`db`,`full_scan`,`exec_count`,`err_count`,`warn_count`,`total_latency`,`max_latency`,`avg_latency`,`lock_latency`,`rows_sent`,`rows_sent_avg`,`rows_examined`,`rows_examined_avg`,`rows_affected`,`rows_affected_avg`,`tmp_tables`,`tmp_disk_tables`,`rows_sorted`,`sort_merge_passes`,`digest`,`first_seen`,`last_seen`) AS select `performance_schema`.`events_statements_summary_by_digest`.`DIGEST_TEXT` AS `query`,`performance_schema`.`events_statements_summary_by_digest`.`SCHEMA_NAME` AS `db`,if(((`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_GOOD_INDEX_USED` > 0) or (`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_INDEX_USED` > 0)),'*','') AS `full_scan`,`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR` AS `exec_count`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ERRORS` AS `err_count`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_WARNINGS` AS `warn_count`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT` AS `total_latency`,`performance_schema`.`events_statements_summary_by_digest`.`MAX_TIMER_WAIT` AS `max_latency`,`performance_schema`.`events_statements_summary_by_digest`.`AVG_TIMER_WAIT` AS `avg_latency`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_LOCK_TIME` AS `lock_latency`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_SENT` AS `rows_sent`,round(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_SENT` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0),0) AS `rows_sent_avg`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_EXAMINED` AS `rows_examined`,round(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_EXAMINED` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0),0) AS `rows_examined_avg`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_AFFECTED` AS `rows_affected`,round(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_AFFECTED` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0),0) AS `rows_affected_avg`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_TABLES` AS `tmp_tables`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_DISK_TABLES` AS `tmp_disk_tables`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_ROWS` AS `rows_sorted`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_MERGE_PASSES` AS `sort_merge_passes`,`performance_schema`.`events_statements_summary_by_digest`.`DIGEST` AS `digest`,`performance_schema`.`events_statements_summary_by_digest`.`FIRST_SEEN` AS `first_seen`,`performance_schema`.`events_statements_summary_by_digest`.`LAST_SEEN` AS `last_seen` from `performance_schema`.`events_statements_summary_by_digest` order by `performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT` desc

-- View: sys.x$statements_with_errors_or_warnings
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$statements_with_errors_or_warnings` (`query`,`db`,`exec_count`,`errors`,`error_pct`,`warnings`,`warning_pct`,`first_seen`,`last_seen`,`digest`) AS select `performance_schema`.`events_statements_summary_by_digest`.`DIGEST_TEXT` AS `query`,`performance_schema`.`events_statements_summary_by_digest`.`SCHEMA_NAME` AS `db`,`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR` AS `exec_count`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ERRORS` AS `errors`,(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_ERRORS` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0) * 100) AS `error_pct`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_WARNINGS` AS `warnings`,(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_WARNINGS` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0) * 100) AS `warning_pct`,`performance_schema`.`events_statements_summary_by_digest`.`FIRST_SEEN` AS `first_seen`,`performance_schema`.`events_statements_summary_by_digest`.`LAST_SEEN` AS `last_seen`,`performance_schema`.`events_statements_summary_by_digest`.`DIGEST` AS `digest` from `performance_schema`.`events_statements_summary_by_digest` where ((`performance_schema`.`events_statements_summary_by_digest`.`SUM_ERRORS` > 0) or (`performance_schema`.`events_statements_summary_by_digest`.`SUM_WARNINGS` > 0)) order by `performance_schema`.`events_statements_summary_by_digest`.`SUM_ERRORS` desc,`performance_schema`.`events_statements_summary_by_digest`.`SUM_WARNINGS` desc

-- View: sys.x$statements_with_full_table_scans
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$statements_with_full_table_scans` (`query`,`db`,`exec_count`,`total_latency`,`no_index_used_count`,`no_good_index_used_count`,`no_index_used_pct`,`rows_sent`,`rows_examined`,`rows_sent_avg`,`rows_examined_avg`,`first_seen`,`last_seen`,`digest`) AS select `performance_schema`.`events_statements_summary_by_digest`.`DIGEST_TEXT` AS `query`,`performance_schema`.`events_statements_summary_by_digest`.`SCHEMA_NAME` AS `db`,`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR` AS `exec_count`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT` AS `total_latency`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_INDEX_USED` AS `no_index_used_count`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_GOOD_INDEX_USED` AS `no_good_index_used_count`,round((ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_INDEX_USED` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0) * 100),0) AS `no_index_used_pct`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_SENT` AS `rows_sent`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_EXAMINED` AS `rows_examined`,round((`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_SENT` / `performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`),0) AS `rows_sent_avg`,round((`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_EXAMINED` / `performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`),0) AS `rows_examined_avg`,`performance_schema`.`events_statements_summary_by_digest`.`FIRST_SEEN` AS `first_seen`,`performance_schema`.`events_statements_summary_by_digest`.`LAST_SEEN` AS `last_seen`,`performance_schema`.`events_statements_summary_by_digest`.`DIGEST` AS `digest` from `performance_schema`.`events_statements_summary_by_digest` where (((`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_INDEX_USED` > 0) or (`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_GOOD_INDEX_USED` > 0)) and (not((`performance_schema`.`events_statements_summary_by_digest`.`DIGEST_TEXT` like 'SHOW%')))) order by round((ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_INDEX_USED` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0) * 100),0) desc,`performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT` desc

-- View: sys.x$statements_with_runtimes_in_95th_percentile
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$statements_with_runtimes_in_95th_percentile` (`query`,`db`,`full_scan`,`exec_count`,`err_count`,`warn_count`,`total_latency`,`max_latency`,`avg_latency`,`rows_sent`,`rows_sent_avg`,`rows_examined`,`rows_examined_avg`,`first_seen`,`last_seen`,`digest`) AS select `stmts`.`DIGEST_TEXT` AS `query`,`stmts`.`SCHEMA_NAME` AS `db`,if(((`stmts`.`SUM_NO_GOOD_INDEX_USED` > 0) or (`stmts`.`SUM_NO_INDEX_USED` > 0)),'*','') AS `full_scan`,`stmts`.`COUNT_STAR` AS `exec_count`,`stmts`.`SUM_ERRORS` AS `err_count`,`stmts`.`SUM_WARNINGS` AS `warn_count`,`stmts`.`SUM_TIMER_WAIT` AS `total_latency`,`stmts`.`MAX_TIMER_WAIT` AS `max_latency`,`stmts`.`AVG_TIMER_WAIT` AS `avg_latency`,`stmts`.`SUM_ROWS_SENT` AS `rows_sent`,round(ifnull((`stmts`.`SUM_ROWS_SENT` / nullif(`stmts`.`COUNT_STAR`,0)),0),0) AS `rows_sent_avg`,`stmts`.`SUM_ROWS_EXAMINED` AS `rows_examined`,round(ifnull((`stmts`.`SUM_ROWS_EXAMINED` / nullif(`stmts`.`COUNT_STAR`,0)),0),0) AS `rows_examined_avg`,`stmts`.`FIRST_SEEN` AS `first_seen`,`stmts`.`LAST_SEEN` AS `last_seen`,`stmts`.`DIGEST` AS `digest` from (`performance_schema`.`events_statements_summary_by_digest` `stmts` join `x$ps_digest_95th_percentile_by_avg_us` `top_percentile` on((round((`stmts`.`AVG_TIMER_WAIT` / 1000000),0) >= `top_percentile`.`avg_us`))) order by `stmts`.`AVG_TIMER_WAIT` desc

-- View: sys.x$statements_with_sorting
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$statements_with_sorting` (`query`,`db`,`exec_count`,`total_latency`,`sort_merge_passes`,`avg_sort_merges`,`sorts_using_scans`,`sort_using_range`,`rows_sorted`,`avg_rows_sorted`,`first_seen`,`last_seen`,`digest`) AS select `performance_schema`.`events_statements_summary_by_digest`.`DIGEST_TEXT` AS `query`,`performance_schema`.`events_statements_summary_by_digest`.`SCHEMA_NAME` AS `db`,`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR` AS `exec_count`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT` AS `total_latency`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_MERGE_PASSES` AS `sort_merge_passes`,round(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_MERGE_PASSES` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0),0) AS `avg_sort_merges`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_SCAN` AS `sorts_using_scans`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_RANGE` AS `sort_using_range`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_ROWS` AS `rows_sorted`,round(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_ROWS` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0),0) AS `avg_rows_sorted`,`performance_schema`.`events_statements_summary_by_digest`.`FIRST_SEEN` AS `first_seen`,`performance_schema`.`events_statements_summary_by_digest`.`LAST_SEEN` AS `last_seen`,`performance_schema`.`events_statements_summary_by_digest`.`DIGEST` AS `digest` from `performance_schema`.`events_statements_summary_by_digest` where (`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_ROWS` > 0) order by `performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT` desc

-- View: sys.x$statements_with_temp_tables
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$statements_with_temp_tables` (`query`,`db`,`exec_count`,`total_latency`,`memory_tmp_tables`,`disk_tmp_tables`,`avg_tmp_tables_per_query`,`tmp_tables_to_disk_pct`,`first_seen`,`last_seen`,`digest`) AS select `performance_schema`.`events_statements_summary_by_digest`.`DIGEST_TEXT` AS `query`,`performance_schema`.`events_statements_summary_by_digest`.`SCHEMA_NAME` AS `db`,`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR` AS `exec_count`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT` AS `total_latency`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_TABLES` AS `memory_tmp_tables`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_DISK_TABLES` AS `disk_tmp_tables`,round(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_TABLES` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0),0) AS `avg_tmp_tables_per_query`,round((ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_DISK_TABLES` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_TABLES`,0)),0) * 100),0) AS `tmp_tables_to_disk_pct`,`performance_schema`.`events_statements_summary_by_digest`.`FIRST_SEEN` AS `first_seen`,`performance_schema`.`events_statements_summary_by_digest`.`LAST_SEEN` AS `last_seen`,`performance_schema`.`events_statements_summary_by_digest`.`DIGEST` AS `digest` from `performance_schema`.`events_statements_summary_by_digest` where (`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_TABLES` > 0) order by `performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_DISK_TABLES` desc,`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_TABLES` desc

-- View: sys.x$user_summary
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$user_summary` (`user`,`statements`,`statement_latency`,`statement_avg_latency`,`table_scans`,`file_ios`,`file_io_latency`,`current_connections`,`total_connections`,`unique_hosts`,`current_memory`,`total_memory_allocated`) AS select if((`performance_schema`.`accounts`.`USER` is null),'background',`performance_schema`.`accounts`.`USER`) AS `user`,sum(`stmt`.`total`) AS `statements`,sum(`stmt`.`total_latency`) AS `statement_latency`,ifnull((sum(`stmt`.`total_latency`) / nullif(sum(`stmt`.`total`),0)),0) AS `statement_avg_latency`,sum(`stmt`.`full_scans`) AS `table_scans`,sum(`io`.`ios`) AS `file_ios`,sum(`io`.`io_latency`) AS `file_io_latency`,sum(`performance_schema`.`accounts`.`CURRENT_CONNECTIONS`) AS `current_connections`,sum(`performance_schema`.`accounts`.`TOTAL_CONNECTIONS`) AS `total_connections`,count(distinct `performance_schema`.`accounts`.`HOST`) AS `unique_hosts`,sum(`mem`.`current_allocated`) AS `current_memory`,sum(`mem`.`total_allocated`) AS `total_memory_allocated` from (((`performance_schema`.`accounts` left join `x$user_summary_by_statement_latency` `stmt` on((if((`performance_schema`.`accounts`.`USER` is null),'background',`performance_schema`.`accounts`.`USER`) = `stmt`.`user`))) left join `x$user_summary_by_file_io` `io` on((if((`performance_schema`.`accounts`.`USER` is null),'background',`performance_schema`.`accounts`.`USER`) = `io`.`user`))) left join `x$memory_by_user_by_current_bytes` `mem` on((if((`performance_schema`.`accounts`.`USER` is null),'background',`performance_schema`.`accounts`.`USER`) = `mem`.`user`))) group by if((`performance_schema`.`accounts`.`USER` is null),'background',`performance_schema`.`accounts`.`USER`) order by sum(`stmt`.`total_latency`) desc

-- View: sys.x$user_summary_by_file_io
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$user_summary_by_file_io` (`user`,`ios`,`io_latency`) AS select if((`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER`) AS `user`,sum(`performance_schema`.`events_waits_summary_by_user_by_event_name`.`COUNT_STAR`) AS `ios`,sum(`performance_schema`.`events_waits_summary_by_user_by_event_name`.`SUM_TIMER_WAIT`) AS `io_latency` from `performance_schema`.`events_waits_summary_by_user_by_event_name` where (`performance_schema`.`events_waits_summary_by_user_by_event_name`.`EVENT_NAME` like 'wait/io/file/%') group by if((`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER`) order by sum(`performance_schema`.`events_waits_summary_by_user_by_event_name`.`SUM_TIMER_WAIT`) desc

-- View: sys.x$user_summary_by_file_io_type
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$user_summary_by_file_io_type` (`user`,`event_name`,`total`,`latency`,`max_latency`) AS select if((`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER`) AS `user`,`performance_schema`.`events_waits_summary_by_user_by_event_name`.`EVENT_NAME` AS `event_name`,`performance_schema`.`events_waits_summary_by_user_by_event_name`.`COUNT_STAR` AS `total`,`performance_schema`.`events_waits_summary_by_user_by_event_name`.`SUM_TIMER_WAIT` AS `latency`,`performance_schema`.`events_waits_summary_by_user_by_event_name`.`MAX_TIMER_WAIT` AS `max_latency` from `performance_schema`.`events_waits_summary_by_user_by_event_name` where ((`performance_schema`.`events_waits_summary_by_user_by_event_name`.`EVENT_NAME` like 'wait/io/file%') and (`performance_schema`.`events_waits_summary_by_user_by_event_name`.`COUNT_STAR` > 0)) order by if((`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER`),`performance_schema`.`events_waits_summary_by_user_by_event_name`.`SUM_TIMER_WAIT` desc

-- View: sys.x$user_summary_by_stages
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$user_summary_by_stages` (`user`,`event_name`,`total`,`total_latency`,`avg_latency`) AS select if((`performance_schema`.`events_stages_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_stages_summary_by_user_by_event_name`.`USER`) AS `user`,`performance_schema`.`events_stages_summary_by_user_by_event_name`.`EVENT_NAME` AS `event_name`,`performance_schema`.`events_stages_summary_by_user_by_event_name`.`COUNT_STAR` AS `total`,`performance_schema`.`events_stages_summary_by_user_by_event_name`.`SUM_TIMER_WAIT` AS `total_latency`,`performance_schema`.`events_stages_summary_by_user_by_event_name`.`AVG_TIMER_WAIT` AS `avg_latency` from `performance_schema`.`events_stages_summary_by_user_by_event_name` where (`performance_schema`.`events_stages_summary_by_user_by_event_name`.`SUM_TIMER_WAIT` <> 0) order by if((`performance_schema`.`events_stages_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_stages_summary_by_user_by_event_name`.`USER`),`performance_schema`.`events_stages_summary_by_user_by_event_name`.`SUM_TIMER_WAIT` desc

-- View: sys.x$user_summary_by_statement_latency
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$user_summary_by_statement_latency` (`user`,`total`,`total_latency`,`max_latency`,`lock_latency`,`rows_sent`,`rows_examined`,`rows_affected`,`full_scans`) AS select if((`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER`) AS `user`,sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`COUNT_STAR`) AS `total`,sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_TIMER_WAIT`) AS `total_latency`,sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`MAX_TIMER_WAIT`) AS `max_latency`,sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_LOCK_TIME`) AS `lock_latency`,sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_ROWS_SENT`) AS `rows_sent`,sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_ROWS_EXAMINED`) AS `rows_examined`,sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_ROWS_AFFECTED`) AS `rows_affected`,(sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_NO_INDEX_USED`) + sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_NO_GOOD_INDEX_USED`)) AS `full_scans` from `performance_schema`.`events_statements_summary_by_user_by_event_name` group by if((`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER`) order by sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_TIMER_WAIT`) desc

-- View: sys.x$user_summary_by_statement_type
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$user_summary_by_statement_type` (`user`,`statement`,`total`,`total_latency`,`max_latency`,`lock_latency`,`rows_sent`,`rows_examined`,`rows_affected`,`full_scans`) AS select if((`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER`) AS `user`,substring_index(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`EVENT_NAME`,'/',-(1)) AS `statement`,`performance_schema`.`events_statements_summary_by_user_by_event_name`.`COUNT_STAR` AS `total`,`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_TIMER_WAIT` AS `total_latency`,`performance_schema`.`events_statements_summary_by_user_by_event_name`.`MAX_TIMER_WAIT` AS `max_latency`,`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_LOCK_TIME` AS `lock_latency`,`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_ROWS_SENT` AS `rows_sent`,`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_ROWS_EXAMINED` AS `rows_examined`,`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_ROWS_AFFECTED` AS `rows_affected`,(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_NO_INDEX_USED` + `performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_NO_GOOD_INDEX_USED`) AS `full_scans` from `performance_schema`.`events_statements_summary_by_user_by_event_name` where (`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_TIMER_WAIT` <> 0) order by if((`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER`),`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_TIMER_WAIT` desc

-- View: sys.x$wait_classes_global_by_avg_latency
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$wait_classes_global_by_avg_latency` (`event_class`,`total`,`total_latency`,`min_latency`,`avg_latency`,`max_latency`) AS select substring_index(`performance_schema`.`events_waits_summary_global_by_event_name`.`EVENT_NAME`,'/',3) AS `event_class`,sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`COUNT_STAR`) AS `total`,sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT`) AS `total_latency`,min(`performance_schema`.`events_waits_summary_global_by_event_name`.`MIN_TIMER_WAIT`) AS `min_latency`,ifnull((sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT`) / nullif(sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`COUNT_STAR`),0)),0) AS `avg_latency`,max(`performance_schema`.`events_waits_summary_global_by_event_name`.`MAX_TIMER_WAIT`) AS `max_latency` from `performance_schema`.`events_waits_summary_global_by_event_name` where ((`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT` > 0) and (`performance_schema`.`events_waits_summary_global_by_event_name`.`EVENT_NAME` <> 'idle')) group by `event_class` order by ifnull((sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT`) / nullif(sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`COUNT_STAR`),0)),0) desc

-- View: sys.x$wait_classes_global_by_latency
CREATE ALGORITHM=TEMPTABLE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$wait_classes_global_by_latency` (`event_class`,`total`,`total_latency`,`min_latency`,`avg_latency`,`max_latency`) AS select substring_index(`performance_schema`.`events_waits_summary_global_by_event_name`.`EVENT_NAME`,'/',3) AS `event_class`,sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`COUNT_STAR`) AS `total`,sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT`) AS `total_latency`,min(`performance_schema`.`events_waits_summary_global_by_event_name`.`MIN_TIMER_WAIT`) AS `min_latency`,ifnull((sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT`) / nullif(sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`COUNT_STAR`),0)),0) AS `avg_latency`,max(`performance_schema`.`events_waits_summary_global_by_event_name`.`MAX_TIMER_WAIT`) AS `max_latency` from `performance_schema`.`events_waits_summary_global_by_event_name` where ((`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT` > 0) and (`performance_schema`.`events_waits_summary_global_by_event_name`.`EVENT_NAME` <> 'idle')) group by substring_index(`performance_schema`.`events_waits_summary_global_by_event_name`.`EVENT_NAME`,'/',3) order by sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT`) desc

-- View: sys.x$waits_by_host_by_latency
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$waits_by_host_by_latency` (`host`,`event`,`total`,`total_latency`,`avg_latency`,`max_latency`) AS select if((`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST`) AS `host`,`performance_schema`.`events_waits_summary_by_host_by_event_name`.`EVENT_NAME` AS `event`,`performance_schema`.`events_waits_summary_by_host_by_event_name`.`COUNT_STAR` AS `total`,`performance_schema`.`events_waits_summary_by_host_by_event_name`.`SUM_TIMER_WAIT` AS `total_latency`,`performance_schema`.`events_waits_summary_by_host_by_event_name`.`AVG_TIMER_WAIT` AS `avg_latency`,`performance_schema`.`events_waits_summary_by_host_by_event_name`.`MAX_TIMER_WAIT` AS `max_latency` from `performance_schema`.`events_waits_summary_by_host_by_event_name` where ((`performance_schema`.`events_waits_summary_by_host_by_event_name`.`EVENT_NAME` <> 'idle') and (`performance_schema`.`events_waits_summary_by_host_by_event_name`.`SUM_TIMER_WAIT` > 0)) order by if((`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST` is null),'background',`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST`),`performance_schema`.`events_waits_summary_by_host_by_event_name`.`SUM_TIMER_WAIT` desc

-- View: sys.x$waits_by_user_by_latency
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$waits_by_user_by_latency` (`user`,`event`,`total`,`total_latency`,`avg_latency`,`max_latency`) AS select if((`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER`) AS `user`,`performance_schema`.`events_waits_summary_by_user_by_event_name`.`EVENT_NAME` AS `event`,`performance_schema`.`events_waits_summary_by_user_by_event_name`.`COUNT_STAR` AS `total`,`performance_schema`.`events_waits_summary_by_user_by_event_name`.`SUM_TIMER_WAIT` AS `total_latency`,`performance_schema`.`events_waits_summary_by_user_by_event_name`.`AVG_TIMER_WAIT` AS `avg_latency`,`performance_schema`.`events_waits_summary_by_user_by_event_name`.`MAX_TIMER_WAIT` AS `max_latency` from `performance_schema`.`events_waits_summary_by_user_by_event_name` where ((`performance_schema`.`events_waits_summary_by_user_by_event_name`.`EVENT_NAME` <> 'idle') and (`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER` is not null) and (`performance_schema`.`events_waits_summary_by_user_by_event_name`.`SUM_TIMER_WAIT` > 0)) order by if((`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_waits_summary_by_user_by_event_name`.`USER`),`performance_schema`.`events_waits_summary_by_user_by_event_name`.`SUM_TIMER_WAIT` desc

-- View: sys.x$waits_global_by_latency
CREATE ALGORITHM=MERGE DEFINER=`mysql.sys`@`localhost` SQL SECURITY INVOKER VIEW `x$waits_global_by_latency` (`events`,`total`,`total_latency`,`avg_latency`,`max_latency`) AS select `performance_schema`.`events_waits_summary_global_by_event_name`.`EVENT_NAME` AS `event`,`performance_schema`.`events_waits_summary_global_by_event_name`.`COUNT_STAR` AS `total`,`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT` AS `total_latency`,`performance_schema`.`events_waits_summary_global_by_event_name`.`AVG_TIMER_WAIT` AS `avg_latency`,`performance_schema`.`events_waits_summary_global_by_event_name`.`MAX_TIMER_WAIT` AS `max_latency` from `performance_schema`.`events_waits_summary_global_by_event_name` where ((`performance_schema`.`events_waits_summary_global_by_event_name`.`EVENT_NAME` <> 'idle') and (`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT` > 0)) order by `performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT` desc

-- View: testing_irrigation.flowering_week2
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `flowering_week2` AS select `fw`.`id` AS `id`,`fw`.`group` AS `group`,`fw`.`week1_date` AS `week1_date`,`fw`.`rotation_interval` AS `rotation_interval`,`fw`.`modified_on` AS `modified_on`,`fw`.`modified_by` AS `modified_by`,(((week(curdate(),3) - week(`fw`.`week1_date`,3)) % `fw`.`rotation_interval`) + 1) AS `Current Week` from `flowering_week` `fw`

-- View: testing_irrigation.irrigation_data_gds_join
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `irrigation_data_gds_join` AS select `id`.`id` AS `id`,concat(`cs1`.`icon`,`id`.`ec_dripper`) AS `EC_Drip_C`,concat(`cs2`.`icon`,`id`.`ec_drain`) AS `EC_Drain_C`,concat(`cs3`.`icon`,`id`.`ph_dripper`) AS `pH_Drip_C`,concat(`cs4`.`icon`,`id`.`ph_drain`) AS `pH_Drain_C`,concat(`cs5`.`icon`,round((`id`.`percent_drainage` * 100),0),'%') AS `Overdrain_C` from (((((`irrigation_data` `id` left join `color_scale` `cs1` on((`cs1`.`key` = convert(`id`.`ec_dripper_colored` using utf8mb4)))) left join `color_scale` `cs2` on((`cs2`.`key` = convert(`id`.`ec_drain_colored` using utf8mb4)))) left join `color_scale` `cs3` on((`cs3`.`key` = convert(`id`.`ph_dripper_colored` using utf8mb4)))) left join `color_scale` `cs4` on((`cs4`.`key` = convert(`id`.`ph_drain_colored` using utf8mb4)))) left join `color_scale` `cs5` on((`cs5`.`key` = convert(`id`.`percent_drainage_colored` using utf8mb4))))

-- View: testing_irrigation.irrigation_data_recent
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `irrigation_data_recent` AS select `irrigation_data`.`id` AS `id`,`irrigation_data`.`label` AS `label`,`irrigation_data`.`created_on` AS `created_on`,`irrigation_data`.`employee` AS `employee`,`irrigation_data`.`account` AS `account`,`irrigation_data`.`user_id` AS `user_id`,`irrigation_data`.`date` AS `date`,`irrigation_data`.`week_num` AS `week_num`,`irrigation_data`.`scan_or_manual` AS `scan_or_manual`,`irrigation_data`.`property_id` AS `property_id`,`irrigation_data`.`location_id` AS `location_id`,`irrigation_data`.`location_scan` AS `location_scan`,`irrigation_data`.`location_type` AS `location_type`,`irrigation_data`.`location_level1` AS `location_level1`,`irrigation_data`.`location_level2` AS `location_level2`,`irrigation_data`.`location_level3` AS `location_level3`,`irrigation_data`.`location_level4` AS `location_level4`,`irrigation_data`.`location_level5` AS `location_level5`,`irrigation_data`.`location_level6` AS `location_level6`,`irrigation_data`.`location_level7` AS `location_level7`,`irrigation_data`.`ec_dripper` AS `ec_dripper`,`irrigation_data`.`ec_drain` AS `ec_drain`,`irrigation_data`.`ph_dripper` AS `ph_dripper`,`irrigation_data`.`ph_drain` AS `ph_drain`,`irrigation_data`.`volume_irrigation` AS `volume_irrigation`,`irrigation_data`.`volume_drainage` AS `volume_drainage`,`irrigation_data`.`percent_drainage` AS `percent_drainage`,`irrigation_data`.`total_drain` AS `total_drain`,`irrigation_data`.`qty_drip_plant` AS `qty_drip_plant`,`irrigation_data`.`qty_plant_drain` AS `qty_plant_drain`,`irrigation_data`.`qty_shots_day` AS `qty_shots_day`,`irrigation_data`.`drippers` AS `drippers`,`irrigation_data`.`ec` AS `ec`,`irrigation_data`.`ph` AS `ph`,`irrigation_data`.`chlorine` AS `chlorine`,`irrigation_data`.`alkalinity` AS `alkalinity`,`irrigation_data`.`radiation` AS `radiation`,`irrigation_data`.`confirm` AS `confirm`,`irrigation_data`.`notes` AS `notes`,`irrigation_data`.`trigger` AS `trigger`,`irrigation_data`.`time_stamp` AS `time_stamp`,`irrigation_data`.`field_1` AS `field_1`,`irrigation_data`.`field_2` AS `field_2`,`irrigation_data`.`plant_week` AS `plant_week`,`irrigation_data`.`valve_week` AS `valve_week`,`irrigation_data`.`ec_dripper_colored` AS `ec_dripper_colored`,`irrigation_data`.`ec_drain_colored` AS `ec_drain_colored`,`irrigation_data`.`ph_dripper_colored` AS `ph_dripper_colored`,`irrigation_data`.`ph_drain_colored` AS `ph_drain_colored`,`irrigation_data`.`volume_irrigation_colored` AS `volume_irrigation_colored`,`irrigation_data`.`volume_drainage_colored` AS `volume_drainage_colored`,`irrigation_data`.`percent_drainage_colored` AS `percent_drainage_colored`,`irrigation_data`.`total_drain_colored` AS `total_drain_colored`,`irrigation_data`.`qty_drip_plant_colored` AS `qty_drip_plant_colored`,`irrigation_data`.`qty_shots_day_colored` AS `qty_shots_day_colored`,`irrigation_data`.`drippers_colored` AS `drippers_colored`,`irrigation_data`.`ec_colored` AS `ec_colored`,`irrigation_data`.`ph_colored` AS `ph_colored`,`irrigation_data`.`chlorine_colored` AS `chlorine_colored`,`irrigation_data`.`alkalinity_colored` AS `alkalinity_colored`,`irrigation_data`.`radiation_colored` AS `radiation_colored`,`irrigation_data`.`server_ts` AS `server_ts`,`irrigation_data`.`plant_stage` AS `plant_stage`,`irrigation_data`.`growers_note` AS `growers_note`,`irrigation_data`.`growers_instruction` AS `growers_instruction`,`irrigation_data`.`for_yesterday` AS `for_yesterday`,`irrigation_data`.`peroxide_fertmix` AS `peroxide_fertmix`,`irrigation_data`.`peroxide_fertmix_colored` AS `peroxide_fertmix_colored`,`irrigation_data`.`peroxide_valve` AS `peroxide_valve`,`irrigation_data`.`peroxide_valve_colored` AS `peroxide_valve_colored`,`irrigation_data`.`test_type` AS `test_type`,`irrigation_data`.`fertmix_reading` AS `fertmix_reading`,`irrigation_data`.`h2o2` AS `h2o2`,`irrigation_data`.`h2o2_colored` AS `h2o2_colored`,`irrigation_data`.`notes_other` AS `notes_other` from `irrigation_data` order by `irrigation_data`.`created_on` desc limit 1000

-- View: transfers.distributor_order_items
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `distributor_order_items` AS select `di`.`id` AS `id`,`od`.`uid` AS `order_id`,`sku`.`sku` AS `sku_id`,`sku`.`name` AS `sku_name`,`sku`.`kss_id` AS `kss_id`,`di`.`strain_id` AS `strain_id`,`b`.`name` AS `brand`,`cat`.`name` AS `product_category`,`ct`.`name` AS `product_type`,`p`.`name` AS `package`,`ps`.`code` AS `package_size`,`pacstone`.`uom`.`name` AS `uom`,`di`.`quantity` AS `quantity`,`di`.`thc_result` AS `thc_label`,`di`.`product_batch_number` AS `product_batch_number`,`di`.`metrc_id` AS `metrc_id`,`pi`.`source_metrc_id` AS `source_metrc_id`,`od`.`location_id` AS `location_id`,`c`.`name` AS `vendor_name`,`od`.`ship_date` AS `ship_date`,`od`.`metrc_manifest` AS `metrc_manifest`,`od`.`action` AS `order_status` from (((((((((((`order_distributor_item` `di` left join `order_distributor` `od` on((`di`.`id_order` = `od`.`id`))) left join `crm`.`company_org` `c` on((`od`.`vendor_id` = convert(`c`.`id` using utf8mb4)))) left join `product_sku`.`sku_view` `sku` on((`di`.`product_sku` = `sku`.`id`))) left join `product_sku`.`category` `cat` on((`di`.`product_category` = `cat`.`id`))) left join `product_sku`.`category_type` `ct` on((`di`.`product_type` = convert(`ct`.`id` using utf8mb4)))) left join `product_sku`.`package` `p` on((`di`.`package_id` = `p`.`id`))) left join `product_sku`.`package_size` `ps` on((`di`.`package_weight` = `ps`.`id`))) left join `pacstone`.`brand` `b` on((`di`.`brand` = convert(`b`.`id` using utf8mb4)))) left join `pacstone`.`uom` on((`di`.`uom_id` = convert(`pacstone`.`uom`.`id` using utf8mb4)))) left join `packing`.`product_inventory` `pi` on((`di`.`packing_id` = `pi`.`id`))) left join `cultivation`.`harvesting_ref` `h` on((`di`.`harvest_id` = `h`.`id`))) where ((`od`.`action` <> 'Deleted') and (`di`.`action` <> 'Deleted'))

-- View: transfers.distributor_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `distributor_view` AS select `di`.`metrc_id` AS `metrc_id`,`di`.`metrc_harvest_id` AS `metrc_harvest_name`,(case when (`di`.`harvest_id` like '%{MULTI_}%') then `di`.`harvest_id` else `h`.`harvest_id` end) AS `harvest_id`,`sku`.`name` AS `sku_name`,`di`.`strain_id` AS `strain_id`,`b`.`name` AS `brand`,`cat`.`name` AS `product_category`,`ct`.`name` AS `product_type`,`p`.`name` AS `package`,`ps`.`code` AS `package_size`,`di`.`weight` AS `weight`,`di`.`quantity` AS `quantity`,`di`.`product_batch_number` AS `product_batch_number`,`di`.`sample_id` AS `sample_id`,`di`.`thc_result` AS `thc_result`,`di`.`thc_coa` AS `thc_coa`,`c`.`name` AS `vendor_name`,`od`.`uid` AS `order_name`,`od`.`date` AS `order_creation_date`,`od`.`location_id` AS `location_id`,`od`.`est_ship_date` AS `est_ship_date`,`od`.`ship_date` AS `ship_date`,year(`od`.`ship_date`) AS `year_shipped`,week(`od`.`ship_date`,0) AS `week_shipped`,yearweek(`od`.`ship_date`,0) AS `year_week_shipped`,`od`.`metrc_manifest` AS `metrc_manifest`,`od`.`po_number` AS `po_number`,`od`.`driver_information` AS `driver_information`,`od`.`vehicle_information` AS `vehicle_information` from (((((((((`order_distributor_item` `di` left join `order_distributor` `od` on((`di`.`id_order` = `od`.`id`))) left join `crm`.`company_org` `c` on((`od`.`vendor_id` = convert(`c`.`id` using utf8mb4)))) left join `product_sku`.`sku_view` `sku` on((`di`.`product_sku` = `sku`.`id`))) left join `product_sku`.`category` `cat` on((`di`.`product_category` = `cat`.`id`))) left join `product_sku`.`category_type` `ct` on((`di`.`product_type` = convert(`ct`.`id` using utf8mb4)))) left join `product_sku`.`package` `p` on((`di`.`package_id` = `p`.`id`))) left join `product_sku`.`package_size` `ps` on((`di`.`package_weight` = `ps`.`id`))) left join `pacstone`.`brand` `b` on((`di`.`brand` = convert(`b`.`id` using utf8mb4)))) left join `cultivation`.`harvesting_ref` `h` on((`di`.`harvest_id` = `h`.`id`))) where ((`od`.`action` <> 'Deleted') and (`od`.`ship_date` is not null) and (year(`od`.`ship_date`) > 2019) and (`di`.`action` <> 'Deleted'))

-- View: transfers.plant_transfers_by_canopy
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `plant_transfers_by_canopy` AS select `pto`.`transfer_type` AS `transfer_type`,`pto`.`week_num` AS `transfer_week_num`,`pto`.`year_num` AS `transfer_year_num`,`pto`.`year_week` AS `transfer_year_week`,`ptt`.`uid` AS `trip_name`,`ptt`.`created_on` AS `trip_created_on`,`c`.`name` AS `name`,`c`.`capacity` AS `standard_canopy_capacity`,`pttd`.`strain_id` AS `strain_id`,`pttd`.`metrc_plant_tag` AS `metrc_plant_tag`,`pttd`.`transfer_quantity` AS `plant_count_transferred`,`pttd`.`metrc_transfer_package` AS `metrc_package_tag`,`pttd`.`notes` AS `notes_from_sending`,`ptr`.`received_quantity` AS `plant_count_received`,`ptr`.`first_metrc_plant_tag` AS `first_metrc_plant_tag`,`ptr`.`last_metrc_plant_tag` AS `last_metrc_plant_tag`,`ptr`.`metrc_plant_tag_count` AS `plant_count_scanned`,`ptr`.`metrc_planting_tag` AS `metrc_planting_tag`,`ptr`.`notes` AS `notes_from_receiving` from ((((`plant_transfer_order` `pto` left join `pacstone`.`canopy` `c` on((convert(`c`.`id` using utf8mb4) = `pto`.`canopy_id`))) left join `plant_transfer_trip` `ptt` on((`pto`.`id` = `ptt`.`transfer_order_id`))) left join `plant_transfer_trip_detail` `pttd` on((`pto`.`id` = `pttd`.`transfer_order_id`))) left join `plant_tags_received` `ptr` on((`pttd`.`id` = `ptr`.`transfer_trip_detail_id`))) where ((`ptt`.`action` <> 'Deleted') and (`pttd`.`action` <> 'Deleted') and (`ptr`.`action` <> 'Deleted') and (`ptr`.`created_on` > (curdate() - 22)))

-- View: transfers.plant_transfers_by_license
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `plant_transfers_by_license` AS select `pto`.`transfer_type` AS `transfer_type`,`pto`.`year_num` AS `year_num`,`pto`.`week_num` AS `transfer_week_num`,`pto`.`year_week` AS `year_week`,`c`.`property_id` AS `property_id`,`c`.`cannabis_license_id` AS `cannabis_license_id`,`c`.`name` AS `name`,`c`.`capacity` AS `standard_canopy_capacity`,`pttd`.`strain_id` AS `strain_id`,`pttd`.`metrc_plant_tag` AS `metrc_plant_tag`,`pttd`.`transfer_quantity` AS `plant_count_transferred`,`pttd`.`metrc_transfer_package` AS `metrc_package_tag`,`pttd`.`notes` AS `notes_from_sending`,`pttd`.`created_on` AS `plant_tag_created_on`,`ptr`.`received_quantity` AS `plant_count_received`,`ptr`.`first_metrc_plant_tag` AS `first_metrc_plant_tag`,`ptr`.`last_metrc_plant_tag` AS `last_metrc_plant_tag`,`ptr`.`metrc_plant_tag_count` AS `plant_count_scanned`,`ptr`.`metrc_planting_tag` AS `metrc_planting_tag`,`ptr`.`notes` AS `notes_from_receiving`,`ptr`.`created_on` AS `plant_tag_received_on`,`ptr`.`dead_plant_count` AS `transfer_dead_plant_count`,if((`vb`.`action` = 'Plant Waste'),`vb`.`plant_count`,0) AS `veg_dead_plant_count` from ((((`plant_transfer_order` `pto` left join `pacstone`.`canopy` `c` on((convert(`c`.`id` using utf8mb4) = `pto`.`canopy_id`))) left join `plant_transfer_trip_detail` `pttd` on((`pto`.`id` = `pttd`.`transfer_order_id`))) left join `plant_tags_received` `ptr` on((`pttd`.`id` = `ptr`.`transfer_trip_detail_id`))) left join `cultivation`.`veg_batch` `vb` on((`vb`.`id` = `ptr`.`inventory_id`))) where ((`pttd`.`action` <> 'Deleted') and (`ptr`.`action` <> 'Deleted') and (`ptr`.`created_on` > (curdate() - 22)))

-- View: transfers.plant_transfers_by_license_all
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `plant_transfers_by_license_all` AS select `pto`.`transfer_type` AS `transfer_type`,`pto`.`year_num` AS `year_num`,`pto`.`week_num` AS `transfer_week_num`,`pto`.`year_week` AS `year_week`,`c`.`property_id` AS `property_id`,`c`.`cannabis_license_id` AS `cannabis_license_id`,`c`.`name` AS `name`,`c`.`capacity` AS `standard_canopy_capacity`,`pttd`.`strain_id` AS `strain_id`,`pttd`.`metrc_plant_tag` AS `metrc_plant_tag`,`pttd`.`transfer_quantity` AS `plant_count_transferred`,`pttd`.`metrc_transfer_package` AS `metrc_package_tag`,`pttd`.`notes` AS `notes_from_sending`,`pttd`.`created_on` AS `plant_tag_created_on`,`ptr`.`received_quantity` AS `plant_count_received`,`ptr`.`first_metrc_plant_tag` AS `first_metrc_plant_tag`,`ptr`.`last_metrc_plant_tag` AS `last_metrc_plant_tag`,`ptr`.`metrc_plant_tag_count` AS `plant_count_scanned`,`ptr`.`metrc_planting_tag` AS `metrc_planting_tag`,`ptr`.`notes` AS `notes_from_receiving`,`ptr`.`created_on` AS `plant_tag_received_on`,`ptr`.`dead_plant_count` AS `transfer_dead_plant_count`,if((`vb`.`action` = 'Plant Waste'),`vb`.`plant_count`,0) AS `veg_dead_plant_count` from ((((`plant_transfer_order` `pto` left join `pacstone`.`canopy` `c` on((convert(`c`.`id` using utf8mb4) = `pto`.`canopy_id`))) left join `plant_transfer_trip_detail` `pttd` on((`pto`.`id` = `pttd`.`transfer_order_id`))) left join `plant_tags_received` `ptr` on((`pttd`.`id` = `ptr`.`transfer_trip_detail_id`))) left join `cultivation`.`veg_batch` `vb` on((`vb`.`id` = `ptr`.`inventory_id`))) where ((`pttd`.`action` <> 'Deleted') and (`ptr`.`action` <> 'Deleted') and (`ptr`.`created_on` > (curdate() - 31)))

-- View: transfers.plant_transfers_csv
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `plant_transfers_csv` AS select `pto`.`transfer_type` AS `transfer_type`,`pto`.`year_num` AS `year_num`,`pto`.`week_num` AS `transfer_week_num`,`pto`.`year_week` AS `year_week`,`c`.`cannabis_license_id` AS `cannabis_license_id`,`c`.`name` AS `name`,`c`.`property_id` AS `property_id`,`pttd`.`strain_id` AS `strain_id`,`pttd`.`metrc_plant_tag` AS `metrc_plant_tag`,`pttd`.`transfer_quantity` AS `plant_count_transferred`,`pttd`.`metrc_transfer_package` AS `metrc_package_tag`,`pttd`.`item` AS `item`,`pttd`.`blank` AS `blank`,`pttd`.`metrc_note` AS `metrc_note`,`pttd`.`trade_sample` AS `trade_sample`,`pttd`.`donation` AS `donation`,`pttd`.`metrc_location` AS `metrc_location`,`pttd`.`created_on` AS `sent_created_on`,cast(`pttd`.`created_on` as date) AS `package_sent_date`,`ptr`.`received_quantity` AS `plant_count_received`,`ptr`.`metrc_planting_tag` AS `metrc_planting_tag`,`ptr`.`metrc_text_from` AS `metrc_text_from`,`ptr`.`metrc_text_to` AS `metrc_text_to`,`ptr`.`metrc_uom` AS `metrc_uom`,`ptr`.`metrc_strain_name` AS `metrc_strain_name`,`ptr`.`first_metrc_plant_tag` AS `first_metrc_plant_tag`,`ptr`.`last_metrc_plant_tag` AS `last_metrc_plant_tag`,`ptr`.`metrc_plant_tag_count` AS `plant_count_scanned`,`ptr`.`created_on` AS `received_created_on`,cast(`ptr`.`created_on` as date) AS `package_received_date`,`ptr`.`quotation_marks` AS `quotation_marks` from (((`plant_transfer_order` `pto` left join `pacstone`.`canopy` `c` on((convert(`c`.`id` using utf8mb4) = `pto`.`canopy_id`))) left join `plant_transfer_trip_detail` `pttd` on((`pto`.`id` = `pttd`.`transfer_order_id`))) left join `plant_tags_received` `ptr` on((`pttd`.`id` = `ptr`.`transfer_trip_detail_id`))) where ((`pto`.`action` <> 'Deleted') and (`pttd`.`action` <> 'Deleted') and (`ptr`.`action` <> 'Deleted') and (`ptr`.`created_on` > (curdate() - interval 22 day)))

-- View: transfers.plant_transfers_history_csv
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `plant_transfers_history_csv` AS select `pto`.`transfer_type` AS `transfer_type`,`pto`.`year_num` AS `year_num`,`pto`.`week_num` AS `transfer_week_num`,`pto`.`year_week` AS `year_week`,`c`.`cannabis_license_id` AS `cannabis_license_id`,`c`.`name` AS `name`,`c`.`property_id` AS `property_id`,`pttd`.`strain_id` AS `strain_id`,`pttd`.`metrc_plant_tag` AS `metrc_plant_tag`,`pttd`.`transfer_quantity` AS `plant_count_transferred`,`pttd`.`metrc_transfer_package` AS `metrc_package_tag`,`pttd`.`item` AS `item`,`pttd`.`blank` AS `blank`,`pttd`.`metrc_note` AS `metrc_note`,`pttd`.`trade_sample` AS `trade_sample`,`pttd`.`donation` AS `donation`,`pttd`.`metrc_location` AS `metrc_location`,`pttd`.`created_on` AS `sent_created_on`,cast(`pttd`.`created_on` as date) AS `package_sent_date`,`ptr`.`received_quantity` AS `plant_count_received`,`ptr`.`metrc_planting_tag` AS `metrc_planting_tag`,`ptr`.`metrc_text_from` AS `metrc_text_from`,`ptr`.`metrc_text_to` AS `metrc_text_to`,`ptr`.`metrc_uom` AS `metrc_uom`,`ptr`.`metrc_strain_name` AS `metrc_strain_name`,`ptr`.`first_metrc_plant_tag` AS `first_metrc_plant_tag`,`ptr`.`last_metrc_plant_tag` AS `last_metrc_plant_tag`,`ptr`.`metrc_plant_tag_count` AS `plant_count_scanned`,`h`.`processing_metrc_id` AS `metrc_processing_tag`,`h`.`metrc_harvest_name` AS `metrc_harvest_name`,`f`.`plant_count` AS `total_planted_count`,`h`.`plant_count_harvested` AS `total_harvested_count`,`h`.`wet` AS `harvest_wet_weight`,`h`.`waste` AS `harvest_waste_weight`,`ptr`.`created_on` AS `received_created_on`,cast(`ptr`.`created_on` as date) AS `package_received_date`,`ptr`.`quotation_marks` AS `quotation_marks` from (((((`plant_transfer_order` `pto` left join `pacstone`.`canopy` `c` on((convert(`c`.`id` using utf8mb4) = `pto`.`canopy_id`))) left join `plant_transfer_trip_detail` `pttd` on((`pto`.`id` = `pttd`.`transfer_order_id`))) left join `plant_tags_received` `ptr` on((`pttd`.`id` = `ptr`.`transfer_trip_detail_id`))) left join `cultivation`.`flowering` `f` on((`pto`.`id` = `f`.`transfer_order_id`))) left join `cultivation`.`harvesting` `h` on((`f`.`id` = `h`.`flowering_id`))) where ((`pto`.`action` <> 'Deleted') and (`pttd`.`action` <> 'Deleted') and (`ptr`.`action` <> 'Deleted'))

-- View: transfers.processing_wholesale_transfers
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `processing_wholesale_transfers` AS select `t`.`transfer_date` AS `transfer_date`,`td`.`strain_id` AS `strain_id`,`c`.`name` AS `product_category`,`ct`.`name` AS `product_type`,`td`.`product_size` AS `product_size`,`p`.`grade` AS `product_grade`,`td`.`quantity` AS `quantity`,'Pound' AS `uom`,`td`.`metrc_id` AS `metrc_tag`,`td`.`transfer_status` AS `status` from ((((`transfer_order_detail` `td` left join `transfer_order` `t` on((`td`.`id_transfer_order` = `t`.`id`))) left join `processing`.`processing` `p` on((`td`.`inventory_id` = `p`.`id`))) left join `product_sku`.`category_type` `ct` on((`td`.`product_type` = `ct`.`id`))) left join `product_sku`.`category` `c` on((`td`.`product_category` = `c`.`id`))) where ((`t`.`location_debit` = 'MV') and (`t`.`location_id_credit` = 'LOC1002') and (`td`.`transfer_status` = 'Accepted')) order by `t`.`transfer_date` desc

-- View: transfers.processor_locations
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `processor_locations` AS select `l`.`id` AS `location_id`,`l`.`name` AS `location_name`,`l`.`location_level1` AS `location_level1`,`lic`.`number` AS `license_number`,concat(`l`.`name`,' - ',`l`.`location_level1`) AS `label` from (`pacstone`.`location` `l` left join `pacstone`.`cannabis_license` `lic` on((`l`.`location_level1` = `lic`.`property`))) where (((`l`.`notes` like '%Property%') and (`l`.`status` = 'active') and (`lic`.`category` = 'Processor')) or (`lic`.`category` = 'Microbusiness'))

-- View: transfers.transfer_veg_to_flowering
CREATE ALGORITHM=UNDEFINED DEFINER=`muro`@`%` SQL SECURITY DEFINER VIEW `transfer_veg_to_flowering` AS select `ps`.`week_num` AS `week`,`cas`.`name` AS `schedule_canopy`,`psd`.`strain_id` AS `schedule_strain`,`psd`.`plant_count` AS `schedule_plant_count`,`cao`.`name` AS `order_canopy`,`pto`.`strain_id` AS `order_strain`,`pto`.`plant_count` AS `order_plant_count`,`ptt`.`strain_id` AS `transfer_strain`,`ptt`.`plant_count` AS `transfer_plant_count`,`ttd`.`strain_id` AS `transfer_detail_strain`,`ttd`.`plant_batch_quantity` AS `batch_quantity`,`ttd`.`transfer_quantity` AS `transfer_quantity`,`ptr`.`strain_id` AS `received_strain`,`ptr`.`received_quantity` AS `received_quantity`,`ptr`.`dead_plant_count` AS `received_dead_plants`,`ptr`.`metrc_plant_tag_count` AS `planted_tag_count`,`ptr`.`metrc_plant_tag` AS `received_plant_tag`,`vgb`.`plant_count` AS `batch_plant_quantity`,`vgb`.`metrc_plant_tag` AS `batch_plant_tag`,`ptr`.`metrc_planting_tag` AS `planting_tag`,(case when ((`psd`.`strain_id` <> `pto`.`strain_id`) and (`pto`.`strain_id` <> `ptt`.`strain_id`) and (`ptt`.`strain_id` <> `ttd`.`strain_id`) and (`ttd`.`strain_id` <> `ptr`.`strain_id`)) then '☐' when ((`psd`.`strain_id` = `pto`.`strain_id`) and (`pto`.`strain_id` = `ptt`.`strain_id`) and (`ptt`.`strain_id` = `ttd`.`strain_id`) and (`ttd`.`strain_id` = `ptr`.`strain_id`)) then '✅' end) AS `strain_match`,(case when ((`ttd`.`metrc_plant_tag` <> `ptr`.`metrc_plant_tag`) and (`ptr`.`metrc_plant_tag` <> `vgb`.`metrc_plant_tag`)) then '☐' when ((`ttd`.`metrc_plant_tag` = `ptr`.`metrc_plant_tag`) and (`ptr`.`metrc_plant_tag` = `vgb`.`metrc_plant_tag`)) then '✅' end) AS `plant_tag_match`,`ps`.`id` AS `schedule_id`,`psd`.`id` AS `s_detail_id`,`pto`.`id` AS `order_id`,`ptt`.`id` AS `trip_id`,`ttd`.`id` AS `t_detail_id`,`ptr`.`id` AS `received_id`,`vgb`.`id` AS `veg_batch_id`,`ps`.`created_on` AS `schedule_start`,`psd`.`created_on` AS `s_detail_start`,`pto`.`created_on` AS `order+start`,`ptt`.`created_on` AS `trip_start`,`ttd`.`created_on` AS `t_detail_start`,`ptr`.`created_on` AS `received_start`,`vgb`.`created_on` AS `veg_batch_start` from ((((((((`cultivation`.`veg_batch` `vgb` left join `plant_tags_received` `ptr` on((`vgb`.`id` = `ptr`.`inventory_id`))) left join `plant_transfer_trip_detail` `ttd` on((`ttd`.`id` = `ptr`.`transfer_trip_detail_id`))) left join `plant_transfer_trip` `ptt` on((`ptt`.`id` = `ttd`.`transfer_trip_id`))) left join `plant_transfer_order` `pto` on((`pto`.`id` = `ptt`.`transfer_order_id`))) left join `cultivation`.`plant_schedule_detail` `psd` on((`psd`.`id` = `pto`.`schedule_detail_id`))) left join `cultivation`.`plant_schedule` `ps` on((`ps`.`id` = `psd`.`plant_schedule_id`))) left join `pacstone`.`canopy` `cas` on((convert(`cas`.`id` using utf8mb4) = `pto`.`canopy_id`))) left join `pacstone`.`canopy` `cao` on((convert(`cao`.`id` using utf8mb4) = `psd`.`canopy_id`))) where ((`ptr`.`metrc_plant_tag` is not null) and (`ptr`.`action` <> 'Deleted'))

-- View: transfers.veg_transfers_metrc_csv
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `veg_transfers_metrc_csv` AS select `pto`.`uid` AS `transfer_order_name`,`ptt`.`uid` AS `trip_name`,`pto`.`year_num` AS `year_num`,`pto`.`week_num` AS `transfer_week`,`pto`.`year_week` AS `year_week`,`c`.`cannabis_license_id` AS `license`,`c`.`name` AS `canopy_name`,`c`.`property_id` AS `property`,`ptr`.`strain_id` AS `strain_id`,`ptr`.`metrc_plant_tag` AS `metrc_plant_tag`,`ptr`.`received_quantity` AS `plant_count_transferred`,`ptr`.`metrc_transfer_package` AS `metrc_package_tag`,`ptr`.`metrc_transfer_item` AS `item`,'' AS `blank`,`ptr`.`metrc_transfer_note` AS `metrc_note`,'FALSE' AS `trade_sample`,'FALSE' AS `donation`,'' AS `metrc_location`,`ptr`.`received_quantity` AS `plant_count_received`,`ptr`.`metrc_planting_tag` AS `metrc_planting_tag`,`ptr`.`metrc_text_from` AS `metrc_text_from`,`ptr`.`metrc_text_to` AS `metrc_text_to`,`ptr`.`metrc_uom` AS `metrc_uom`,`ptr`.`metrc_strain_name` AS `metrc_strain_name`,`ptr`.`first_metrc_plant_tag` AS `first_metrc_plant_tag`,`ptr`.`last_metrc_plant_tag` AS `last_metrc_plant_tag`,`ptr`.`metrc_plant_tag_count` AS `plant_count_scanned`,cast(`ptr`.`created_on` as date) AS `package_date`,`ptr`.`quotation_marks` AS `quotation_marks` from (((((`plant_tags_received` `ptr` left join `plant_transfer_order` `pto` on((`ptr`.`transfer_order_id` = `pto`.`id`))) left join `plant_transfer_trip` `ptt` on((`ptt`.`id` = `ptr`.`transfer_trip_id`))) left join `pacstone`.`canopy` `c` on((convert(`c`.`id` using utf8mb4) = `pto`.`canopy_id`))) left join `cultivation`.`flowering` `f` on((`pto`.`id` = `f`.`transfer_order_id`))) left join `cultivation`.`harvesting` `h` on((`f`.`id` = `h`.`flowering_id`))) where ((`pto`.`action` <> 'Deleted') and (`ptr`.`action` <> 'Deleted') and (`ptr`.`created_on` >= (curdate() - interval 30 day))) order by `pto`.`year_week` desc,`ptr`.`metrc_transfer_package`

-- View: wholesale.wholesale_inventory
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `wholesale_inventory` AS select `ws`.`id` AS `id`,`ws`.`metrc_tag` AS `metrc_tag`,`h`.`harvest_id` AS `harvest_id`,`ws`.`strain_id` AS `strain_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,`h`.`year_week` AS `harvest_year_week`,`h`.`license_id` AS `license_id`,`h`.`crop_name` AS `crop`,`c`.`name` AS `category`,`ct`.`name` AS `category_type`,`ws`.`product_id` AS `product_size`,NULL AS `color`,NULL AS `grade`,`pacstone`.`uom`.`name` AS `uom`,`ws`.`quantity` AS `quantity`,`l`.`name` AS `location`,if((`ws`.`action` = 'Packed'),'Yes','No') AS `packed`,if((`ws`.`stage_id` = 'Transfer'),'Transfer','Inventory') AS `stage` from (((((`wholesale` `ws` left join `product_sku`.`category_type` `ct` on((`ws`.`category_type_id` = convert(`ct`.`id` using utf8mb4)))) left join `product_sku`.`category` `c` on((`ws`.`category_id` = `c`.`id`))) left join `cultivation`.`harvesting_ref` `h` on((`ws`.`harvesting_id` = `h`.`id`))) left join `pacstone`.`uom` on((`ws`.`uom_id` = convert(`pacstone`.`uom`.`id` using utf8mb4)))) left join `pacstone`.`location` `l` on((`ws`.`location_id` = convert(`l`.`id` using utf8mb4)))) where (`ws`.`status` = 'active') union select `wpt`.`id` AS `id`,`wpt`.`metrc_id` AS `metrc_id`,`wpt`.`harvest_id` AS `harvest_id`,`wpt`.`strain` AS `strain`,`h`.`date` AS `date`,`h`.`week_num` AS `week_num`,`h`.`year_num` AS `year_num`,`h`.`year_week` AS `year_week`,`h`.`license_id` AS `license_id`,`h`.`crop_name` AS `crop_name`,`c`.`name` AS `name`,`ct`.`name` AS `name`,`wpt`.`size` AS `size`,`wpt`.`color` AS `color`,`wpt`.`grade` AS `grade`,NULL AS `Pound`,`wpt`.`weight` AS `weight`,`l`.`name` AS `name`,if((`wpt`.`ready` = 'Packed'),'Yes','No') AS `packed`,'Wholesale Packing' AS `stage` from ((((`wholesale_packing_temp` `wpt` left join `product_sku`.`category_type` `ct` on((`wpt`.`category_type` = convert(`ct`.`id` using utf8mb4)))) left join `product_sku`.`category` `c` on((`wpt`.`category` = `c`.`id`))) left join `cultivation`.`harvesting_ref` `h` on((`wpt`.`harvest_id` = `h`.`harvest_id`))) left join `pacstone`.`location` `l` on((`wpt`.`location_id` = convert(`l`.`id` using utf8mb4)))) where (`wpt`.`status` = 'active')

-- View: wholesale.wholesale_sold
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `wholesale_sold` AS select `w`.`unique_id` AS `order_uid`,`c`.`name` AS `customer`,`w`.`date` AS `order_date`,cast(`w`.`pickup_date` as date) AS `pickup_date`,week(`w`.`pickup_date`,0) AS `pickup_week`,year(`w`.`pickup_date`) AS `pickup_year`,concat(year(`w`.`pickup_date`),right(concat('0',week(`w`.`pickup_date`,0)),2)) AS `pickup_year_week`,`woi`.`metrc_id` AS `metrc_id`,`woi`.`weight` AS `weight`,`woi`.`strain_id` AS `strain_id`,`s`.`name` AS `strain_name`,`woi`.`harvest_id` AS `harvest_id`,`woi`.`product_category` AS `product_category`,`woi`.`product_type` AS `product_type`,`woi`.`grade` AS `grade`,`woi`.`color` AS `color`,`woi`.`unit_price` AS `unit_price`,`w`.`shipper_facility_license_number` AS `shipper_facility_license_number`,`w`.`manifest_id` AS `manifest_id`,`w`.`po_number` AS `po_number`,`woi`.`action` AS `status` from (((`wholesale_order_item` `woi` left join `wholesale_order` `w` on((`w`.`id` = `woi`.`id_sales_order`))) left join `crm`.`company_org` `c` on((`w`.`vendor_id` = convert(`c`.`id` using utf8mb4)))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `woi`.`strain_id`))) where ((`woi`.`action` = 'Sold') or (`woi`.`action` = 'Accepted'))

-- View: wip.StrainComparison
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `StrainComparison` AS select `ps`.`name` AS `name`,`ps`.`id` AS `id`,`ps`.`strain_code` AS `strain_code`,`it`.`Name` AS `item_name`,`it`.`StrainName` AS `StrainName` from (`pacstone`.`plant_strain` `ps` left join `metrc`.`items` `it` on((`ps`.`name` = `it`.`StrainName`))) group by `ps`.`id`,`ps`.`strain_code`,`it`.`Name`,`it`.`StrainName`

-- View: wip.batch_production_harvest_flat1
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `batch_production_harvest_flat1` AS select max(`h`.`flowering_id`) AS `flowering_id`,`h`.`harvesting_id` AS `harvesting_id`,max(`h`.`flowering_id_name`) AS `flowering_batch`,`h`.`harvest_id` AS `harvest_batch`,max(`h`.`test_id`) AS `test_id`,if((max(`h`.`test_id`) is null),`h`.`harvest_id`,concat(`h`.`harvest_id`,'-',max(`h`.`test_id`))) AS `harvest_batch_test_id`,max(`h`.`property_id`) AS `property_id`,max(`h`.`license_id`) AS `license`,max(`h`.`strain_id`) AS `strain_id`,max(`s`.`name`) AS `strain_name`,if((max(`s`.`core_strain`) = 1),'YES','NO') AS `core_strain`,max(`h`.`harvest_date`) AS `harvest_date`,max(`h`.`harvest_week`) AS `harvest_week`,max(`h`.`harvest_year`) AS `harvest_year`,if(((0 <> (`h`.`harvest_type` = 'Manicure')) or (0 <> (`h`.`harvest_type` = 'Fresh Frozen'))),NULL,max(`h`.`flower_plant_count`)) AS `planted_count`,if(((0 <> (`h`.`harvest_type` = 'Manicure')) or (0 <> (`h`.`harvest_type` = 'Fresh Frozen'))),NULL,`h`.`harvest_plant_count`) AS `harvested_count`,min(`d`.`start_date`) AS `input_date_drying`,max(`d`.`input_quantity`) AS `wet_weight` from ((((((`processing`.`drying_prod_flat_all_group` `d` left join `processing`.`bucking_prod_flat_all_group` `b` on((`b`.`harvesting_id` = `d`.`harvesting_id`))) left join `processing`.`trimming_machine_prod_flat_group` `tm` on((`tm`.`harvesting_id` = `d`.`harvesting_id`))) left join `processing`.`trimming_hand_prod_flat_group` `th` on((`th`.`harvesting_id` = `d`.`harvesting_id`))) left join `processing`.`sorting_prod_flat_all_group` `s` on((`s`.`harvesting_id` = `d`.`harvesting_id`))) left join `cultivation`.`harvest_prod_view` `h` on((`d`.`harvesting_id` = `h`.`harvesting_id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) where ((`h`.`harvest_year` > 2022) and (`tm`.`batch_status` = 'Finished') and (`d`.`input_quantity` > 0) and (`h`.`harvest_id` like '%-M')) group by `h`.`harvesting_id`,`h`.`harvest_type`,`h`.`harvest_id` order by `h`.`harvest_year` desc,`h`.`harvest_week` desc,`h`.`harvest_id`

-- View: wip.bucked_flower_view
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `bucked_flower_view` AS select `h`.`crop_id` AS `Crop ID`,`h`.`crop_name` AS `Crop Label`,`h`.`plant_count_harvested` AS `Harvested Plants`,`bb`.`metrc_tag` AS `METRC Tag`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,`strain`.`strain_code` AS `strain_code`,`strain`.`name` AS `Strain Name`,sum(`bd`.`quantity`) AS `Buck Process lbs`,sum((case when (`pp`.`category_type_id` = 'SK-CTP-0001') then `pp`.`quantity` else 0 end)) AS `Drying Flower lbs`,count(`bd`.`quantity`) AS `Process Bins`,`bb`.`action` AS `Process Stage`,`bb`.`created_on` AS `Start Time`,if((`bb`.`action` = 'Finished'),cast(`bb`.`modified_on` as datetime),NULL) AS `date_finished` from ((((((`processing`.`bucked_batch` `bb` left join `processing`.`bucked_details` `bd` on((`bb`.`id` = `bd`.`bucked_batch_id`))) left join `cultivation`.`harvesting_ref` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `bb`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `bb`.`category_type_id`))) left join `processing`.`processing` `pp` on((`pp`.`id` = `bb`.`source_id`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `bb`.`strain_id`))) where (`h`.`date` > (curdate() - interval 12 week)) group by `h`.`crop_id`,`h`.`crop_name`,`h`.`plant_count_harvested`,`bb`.`metrc_tag`,`h`.`date`,`h`.`harvest_id`,`h`.`test_id`,`h`.`week_num`,`h`.`year_num`,`strain`.`strain_code`,`strain`.`name`,`bb`.`action`,`bb`.`created_on`,`bb`.`modified_on`,`pp`.`category_type_id` order by `h`.`date` desc

-- View: wip.each_sku_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `each_sku_view` AS select `product_sku`.`sku`.`id` AS `id`,concat(`b`.`code`,'-',`c`.`code`,'-',`ps`.`code`,'-',`p`.`code`,'-',`s`.`id`,(case when ((`product_sku`.`sku`.`class` = 'Retail') or (`product_sku`.`sku`.`class` is null)) then '' when (`product_sku`.`sku`.`class` = 'Promo') then ' [xP]' when (`product_sku`.`sku`.`class` = 'Sample') then ' [xT]' end),coalesce(`pg`.`code`,'')) AS `sku`,`product_sku`.`sku`.`kss_id` AS `kss_id`,concat(`b`.`name`,' - ',`c`.`name`,' ',`p`.`name`,' [',`ps`.`code`,'] - ',(case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end),(case when ((`product_sku`.`sku`.`class` = 'Retail') or (`product_sku`.`sku`.`class` is null)) then '' when (`product_sku`.`sku`.`class` = 'Promo') then ' [xP]' when (`product_sku`.`sku`.`class` = 'Sample') then ' [xT]' end),coalesce(`pg`.`name`,' ')) AS `name`,`product_sku`.`sku`.`status` AS `status`,`b`.`code` AS `brand_code`,`b`.`name` AS `brand_name`,`c`.`code` AS `category_code`,`c`.`name` AS `category_name`,`p`.`code` AS `package_code`,`pg`.`type` AS `type` from (((((((`product_sku`.`sku` left join `pacstone`.`brand` `b` on((`product_sku`.`sku`.`brand` = `b`.`id`))) left join `product_sku`.`category` `c` on((`product_sku`.`sku`.`category` = `c`.`id`))) left join `product_sku`.`package` `p` on((`product_sku`.`sku`.`package` = `p`.`id`))) left join `product_sku`.`package_size` `ps` on((`product_sku`.`sku`.`package_size` = `ps`.`id`))) left join `pacstone`.`plant_strain` `s` on((`product_sku`.`sku`.`plant_strain` = `s`.`id`))) left join `product_sku`.`product_combination` `pc` on((`product_sku`.`sku`.`product_combination` = `pc`.`id`))) left join `product_sku`.`packing_group` `pg` on((`pg`.`id` = `product_sku`.`sku`.`packing_group`))) where ((`pg`.`type` = 'Each') and (`product_sku`.`sku`.`class` = 'Retail'))

-- View: wip.harvest_processing_packages_flat
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `harvest_processing_packages_flat` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`harvesting_id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_batch`,max(`h`.`harvest_date`) AS `harvest_date`,max(`h`.`harvest_year`) AS `harvest_year`,max(`h`.`harvest_week`) AS `harvest_week`,min(`d`.`start_date`) AS `input_date_drying`,`h`.`metrc_tag` AS `harvest_tag`,max(`d`.`input_quantity`) AS `input_drying`,max(`d`.`output_quantity`) AS `output_drying`,(max(`d`.`input_quantity`) - max(`d`.`output_quantity`)) AS `moisture_loss`,max(`d`.`batch_status`) AS `status_drying`,min(`b`.`start_date`) AS `input_date_bucking`,max(`tm`.`input_quantity`) AS `output_bucking`,(max(`b`.`input_quantity`) - max(`b`.`output_quantity`)) AS `bucking_waste_weight`,max(`b`.`batch_status`) AS `status_bucking`,max(`tm`.`trim_output`) AS `total_trim`,if((max(`tm`.`trim_output`) = 0),'',max(`trim`.`metrc_tag`)) AS `trim_metrc_tag`,min(`tm`.`start_date`) AS `input_date_tzero`,max(`tm`.`batch_status`) AS `status_tzero`,if((max(`tm`.`sml_a_flower_output`) = 0),'',max(`packa`.`metrc_tag`)) AS `subbatch_metrc_tag`,max(`tm`.`sml_a_flower_output`) AS `subbatch_smalls`,if((max(`tm`.`b_flower_output`) = 0),'',max(`packb`.`metrc_tag`)) AS `b_grade_metrc_tag`,max(`tm`.`b_flower_output`) AS `subbatch_b_grade`,if((max(`tm`.`c_flower_output`) = 0),'',max(`packc`.`metrc_tag`)) AS `c_grade_metrc_tag`,max(`tm`.`c_flower_output`) AS `subbatch_c_grade`,(max(`tm`.`sml_a_flower_output`) + max(`tm`.`b_flower_output`)) AS `subbatch_smalls_and_b_batch`,(max(`tm`.`b_flower_output`) + max(`packc`.`c_flower_output`)) AS `subbatch_b_and_c`,((max(`tm`.`sml_a_flower_output`) + max(`tm`.`b_flower_output`)) + max(`packc`.`c_flower_output`)) AS `all_batches`,min(`th`.`start_date`) AS `hand_trimming_start`,min(`s`.`start_date`) AS `input_date_sorter`,max(`s`.`input_quantity`) AS `input_sorting_weight` from ((((((((((`processing`.`drying_prod_flat_all_group` `d` left join `processing`.`bucking_prod_flat_all_group` `b` on((`b`.`harvesting_id` = `d`.`harvesting_id`))) left join `processing`.`trimming_machine_prod_flat_group` `tm` on((`tm`.`harvesting_id` = `d`.`harvesting_id`))) left join `processing`.`trimming_hand_prod_flat_group` `th` on((`th`.`harvesting_id` = `d`.`harvesting_id`))) left join `processing`.`sorting_prod_flat_all_group` `s` on((`s`.`harvesting_id` = `d`.`harvesting_id`))) left join `cultivation`.`harvest_prod_view` `h` on((`d`.`harvesting_id` = `h`.`harvesting_id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) left join `compliance`.`trimming_detail_package` `trim` on(((`d`.`harvesting_id` = `trim`.`harvesting_id`) and (`tm`.`trim_output` = `trim`.`trim_output`)))) left join `compliance`.`trimming_detail_package` `packa` on(((`d`.`harvesting_id` = `packa`.`harvesting_id`) and (`tm`.`sml_a_flower_output` = `packa`.`sml_a_flower_output`)))) left join `compliance`.`trimming_detail_package` `packb` on(((`d`.`harvesting_id` = `packb`.`harvesting_id`) and (`tm`.`b_flower_output` = `packb`.`b_flower_output`)))) left join `compliance`.`trimming_detail_package` `packc` on(((`d`.`harvesting_id` = `packc`.`harvesting_id`) and (`tm`.`c_flower_output` = `packc`.`c_flower_output`)))) where ((`h`.`harvest_year` > 2022) and (`tm`.`batch_status` = 'Finished') and (`d`.`input_quantity` > 0)) group by `h`.`harvesting_id`,`h`.`harvest_type`,`h`.`harvest_id` order by `h`.`harvest_date` desc

-- View: wip.item_use_by_location_plus
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `item_use_by_location_plus` AS select `pi`.`id` AS `id`,`pi`.`purchase_order` AS `purchase_order`,`pi`.`transaction_date` AS `transaction_date`,`pi`.`transaction_time` AS `transaction_time`,`pi`.`user` AS `user`,`pi`.`transaction_type` AS `transaction_type`,`tran`.`type` AS `Transaction_Type_Name`,`pi`.`label` AS `label`,`type`.`type` AS `item_type`,`pi`.`item_cat1` AS `item_cat1`,`pi`.`item_cat2` AS `item_cat2`,`pi`.`item_cat3` AS `item_cat3`,`pi`.`item_cat4` AS `item_cat4`,`pi`.`item_cat5` AS `item_cat5`,`pi`.`item_cat6` AS `item_cat6`,`pi`.`item_cat7` AS `item_cat7`,`type`.`type` AS `Item_Type_Name`,`pi`.`id` AS `Item_ID`,`item`.`name` AS `Item_Name`,`item`.`cat1` AS `Item_grouping_1`,`item`.`cat2` AS `Item_Description_2`,`item`.`cat3` AS `Item_Description_3`,`item`.`cat4` AS `Item_Description_4`,`item`.`cat5` AS `Item_Description_5`,`item`.`cat6` AS `Item_Description_6`,`item`.`cat7` AS `Item_Description_7`,`pi`.`inventory_vendor` AS `inventory_vendor`,`pi`.`inventory_pile` AS `inventory_pile`,`pile`.`qty_in_pile` AS `conatiner_size`,`pile`.`label` AS `pile_label`,`pi`.`pile_qty` AS `pile_qty`,`pi`.`base_qty` AS `base_qty`,`pi`.`audit_comment` AS `audit_comment`,`pi`.`property_for_purchase` AS `property_for_purchase`,`pi`.`location_debit` AS `location_debit`,if((`from`.`name` is null),'',`from`.`name`) AS `location_debit_name`,`pi`.`location_credit` AS `location_credit`,if((`too`.`name` is null),'',`too`.`name`) AS `location_credit_name`,`pi`.`inventory_at_location_debit` AS `inventory_at_location_debit`,`pi`.`inventory_at_location_credit` AS `inventory_at_location_credit`,`pi`.`trigger` AS `trigger`,`pi`.`status` AS `status`,`pi`.`created_on` AS `created_on`,`pi`.`created_by` AS `created_by`,`pi`.`modified_on` AS `modified_on`,`pi`.`modified_by` AS `modified_by`,`pi`.`inventory_available` AS `inventory_available`,`pi`.`flag` AS `flag`,`pi`.`note` AS `note`,`pi`.`reason` AS `reason`,`pi`.`inventory_request` AS `inventory_request`,`pi`.`est_delivery_date` AS `est_delivery_date`,`pi`.`3` AS `3`,`pi`.`4` AS `4`,`pi`.`5` AS `5`,`pi`.`add_or_remove` AS `add_or_remove`,`pi`.`delete_reason` AS `delete_reason`,`pi`.`freeze_item` AS `freeze_item`,`pi`.`audit_item` AS `audit_item` from ((((((`pacstone_inventory`.`inventory_transaction` `pi` left join `pacstone_inventory`.`inventory_item` `item` on((`pi`.`inventory_item` = `item`.`id`))) left join `pacstone_inventory`.`inventory_item_type` `type` on((`pi`.`item_type` = `type`.`id`))) left join `pacstone_inventory`.`inventory_pile` `pile` on((`pi`.`inventory_pile` = `pile`.`id`))) left join `pacstone_inventory`.`transaction_type` `tran` on((`pi`.`transaction_type` = `tran`.`id`))) left join `pacstone`.`location` `from` on((`pi`.`location_debit` = `from`.`id`))) left join `pacstone`.`location` `too` on((`pi`.`location_credit` = `too`.`id`))) where ((`pi`.`transaction_date` is not null) and (`item`.`status` = 'Active')) order by `pi`.`created_on` desc

-- View: wip.json_create_package_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `json_create_package_view` AS select json_object('Tag',`cp`.`Tag`,'Item',`cp`.`Item`,'Quantity',`cp`.`Quantity`,'UnitofMeasure',`cp`.`UnitofMeasure`,'PatientLicenseNumber',`cp`.`PatientLicenseNumber`,'Note',`cp`.`Note`,'IsProductionBatch',`cp`.`IsProductionBatch`,'ProductionBatchNumber',`cp`.`ProductionBatchNumber`,'IsDonation',`cp`.`IsDonation`,'IsTradeSample',`cp`.`IsTradeSample`,'ProductRequiresRemediation',`cp`.`ProductRequiresRemediation`,'UseSameItem',`cp`.`UseSameItem`,'ActualDate',`cp`.`ActualDate`,'ExpirationDate',`cp`.`ExpirationDate`,'SellByDate',`cp`.`SellByDate`,'UseByDate',`cp`.`UseByDate`,'UnitOfMeasure',`cp`.`UnitofMeasure`,'Ingredients',json_object('Package',`In`.`Package_Parent`,'Quantity',`In`.`Quantity`,'UnitOfMeasure',`In`.`UnitofMeasure`),'RequiredLabTestBatches',`cp`.`RequiredLabTestBatches`,'created_on',`cp`.`created_on`,'created_by',`cp`.`created_by`) AS `json_data` from (`pacstone_dev`.`create_package` `cp` left join `pacstone_dev`.`Ingredients` `In` on((`In`.`PackageID` = `cp`.`Ingredients`)))

-- View: wip.preroll_production_view2
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `preroll_production_view2` AS select `e`.`Employee Name` AS `employee_name`,`e`.`Group` AS `employee_group`,(case when (`e`.`Group` = 'A') then '1st' when (`e`.`Group` = 'B') then '1st' when (`e`.`Group` = 'C') then '1st' when (`e`.`Group` = 'D') then '1st' when ((`e`.`Group` = 'E') and (`e`.`Work Schedule Start` = '1:00:00 PM')) then '2nd' when ((`e`.`Group` = 'E') and (`e`.`Work Schedule Start` = '12:30:00 PM')) then '2nd' when ((`e`.`Group` = 'E') and (`e`.`Work Schedule Start` = '5:00:00 PM')) then '3rd' when ((`e`.`Group` = 'E') and (`e`.`Work Schedule Start` = '5:05:00 PM')) then '3rd' when ((`e`.`Group` = 'E') and (`e`.`Work Schedule Start` = '4:30:00 PM')) then '3rd' when (`e`.`Group` = 'F') then '1st' else NULL end) AS `employee_shift`,`e`.`status` AS `employee_status`,`ent`.`date` AS `date`,week(`ent`.`date`,0) AS `week`,monthname(`ent`.`date`) AS `month`,year(`ent`.`date`) AS `year`,`a`.`name` AS `activity`,(sum(`ent`.`minutes_no_breaks`) / 60) AS `total_hours`,sum((`ent`.`quantity` * `ent`.`ratio`)) AS `total_quantity`,(sum((`ent`.`quantity` * `ent`.`ratio`)) / 14) AS `total_cases` from ((`packing`.`packing_kpi_entries` `ent` left join `packing`.`packing_kpi_employee` `e` on((`e`.`Employee ID` = `ent`.`employee_id`))) left join `packing`.`packing_kpi_activity` `a` on((`ent`.`activity` = `a`.`id`))) where ((`a`.`name` = 'Haciendo cigarro') and (`ent`.`approved_on` is not null)) group by `e`.`Employee Name`,`ent`.`date`,`a`.`name`,`e`.`Group`,`e`.`Work Schedule Start`,`e`.`status` order by `ent`.`date` desc

-- View: wip.prerroll_production_view_total_CasesCheck
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `prerroll_production_view_total_CasesCheck` AS select (sum((`ent`.`quantity` * `ent`.`ratio`)) / 14) AS `total_cases` from (`packing`.`packing_kpi_entries` `ent` left join `packing`.`packing_kpi_activity` `a` on((`ent`.`activity` = `a`.`id`))) where (`a`.`name` = 'Haciendo cigarro')

-- View: wip.processing_delta_view1
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `processing_delta_view1` AS select `p`.`strain_id` AS `strain_id`,`p`.`harvest_week` AS `week_num`,`p`.`harvest_year` AS `year_num`,`p`.`year_week` AS `year_week`,`p`.`harvest_date` AS `harvest_date`,`p`.`property` AS `property_id`,`p`.`harvest_id` AS `harvest_id`,`p`.`plant_count` AS `plant_count`,(((((`p`.`big_a_flower_output` + `p`.`reg_a_flower_output`) + `p`.`sml_a_flower_output`) + `p`.`b_flower_output`) + `p`.`retrim_a_output`) + `p`.`retrim_b_output`) AS `tzero_a_b_retrim`,(`p`.`c_flower_output` + `p`.`retrim_c_output`) AS `tzero_c`,`p`.`trim_output` AS `tzero_trim`,`p`.`sugar_shake_output` AS `tzero_shake`,`p`.`total_waste_output` AS `tzero_waste`,((`p`.`input_qty` - `p`.`output_qty`) / `p`.`input_qty`) AS `tzero_shrink`,`p`.`process_action` AS `tzero_flower_status`,if((`p`.`harvest_year` = 2021),((((((`p`.`big_a_flower_output` + `p`.`reg_a_flower_output`) + `p`.`sml_a_flower_output`) + `p`.`b_flower_output`) + `p`.`retrim_a_output`) + `p`.`retrim_b_output`) * 16),0) AS `2021_total_oz`,if((`p`.`harvest_year` = 2021),`p`.`plant_count`,0) AS `2021_plants`,if((`p`.`harvest_year` = 2022),((((((`p`.`big_a_flower_output` + `p`.`reg_a_flower_output`) + `p`.`sml_a_flower_output`) + `p`.`b_flower_output`) + `p`.`retrim_a_output`) + `p`.`retrim_b_output`) * 16),0) AS `2022_total_oz`,if((`p`.`harvest_year` = 2022),`p`.`plant_count`,0) AS `2022_plants`,if((`p`.`harvest_year` = 2023),((((((`p`.`big_a_flower_output` + `p`.`reg_a_flower_output`) + `p`.`sml_a_flower_output`) + `p`.`b_flower_output`) + `p`.`retrim_a_output`) + `p`.`retrim_b_output`) * 16),0) AS `2023_total_oz`,if((`p`.`harvest_year` = 2023),`p`.`plant_count`,0) AS `2023_plants`,if((`p`.`harvest_year` = 2024),((((((`p`.`big_a_flower_output` + `p`.`reg_a_flower_output`) + `p`.`sml_a_flower_output`) + `p`.`b_flower_output`) + `p`.`retrim_a_output`) + `p`.`retrim_b_output`) * 16),0) AS `2024_total_oz`,if((`p`.`harvest_year` = 2024),`p`.`plant_count`,0) AS `2024_plants`,`pc`.`processing_count` AS `processing_count`,`hc`.`harvesting_count` AS `harvesting_count` from ((`processing`.`trimming_t0_report` `p` left join (select `trimming_t0_report`.`year_week` AS `year_week`,count(distinct `trimming_t0_report`.`harvesting_id`) AS `processing_count` from `processing`.`trimming_t0_report` where (right(`trimming_t0_report`.`harvest_id`,2) <> '-M') group by `trimming_t0_report`.`year_week`) `pc` on((`p`.`year_week` = `pc`.`year_week`))) left join (select `harvesting_ref`.`year_week` AS `year_week`,count(distinct `harvesting_ref`.`id`) AS `harvesting_count` from `cultivation`.`harvesting_ref` where (right(`harvesting_ref`.`harvest_id`,2) <> '-M') group by `harvesting_ref`.`year_week`) `hc` on((`p`.`year_week` = `hc`.`year_week`))) where (right(`p`.`harvest_id`,2) <> '-M') group by `p`.`strain_id`,`p`.`harvest_week`,`p`.`harvest_year`,`p`.`year_week`,`p`.`harvest_date`,`p`.`property`,`p`.`harvest_id`,`p`.`plant_count`,`p`.`big_a_flower_output`,`p`.`reg_a_flower_output`,`p`.`sml_a_flower_output`,`p`.`b_flower_output`,`p`.`retrim_a_output`,`p`.`retrim_b_output`,`p`.`c_flower_output`,`p`.`retrim_c_output`,`p`.`trim_output`,`p`.`sugar_shake_output`,`p`.`total_waste_output`,`p`.`input_qty`,`p`.`output_qty`,`p`.`process_action`,`pc`.`processing_count`,`hc`.`harvesting_count` having (`pc`.`processing_count` = `hc`.`harvesting_count`) order by `p`.`year_week` desc

-- View: wip.processing_latest_week1
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `processing_latest_week1` AS select `processing_delta_view`.`strain_id` AS `strain_id`,`processing_delta_view`.`week_num` AS `week_num`,`processing_delta_view`.`year_num` AS `year_num`,`processing_delta_view`.`year_week` AS `year_week`,`processing_delta_view`.`harvest_date` AS `harvest_date`,`processing_delta_view`.`harvest_id` AS `harvest_id`,`processing_delta_view`.`property_id` AS `property_id`,`processing_delta_view`.`plant_count` AS `plant_count`,`processing_delta_view`.`tzero_a_b_retrim` AS `tzero_a_b_retrim`,`processing_delta_view`.`tzero_c` AS `tzero_c`,`processing_delta_view`.`tzero_trim` AS `tzero_trim`,`processing_delta_view`.`tzero_shake` AS `tzero_shake`,`processing_delta_view`.`tzero_waste` AS `tzero_waste`,`processing_delta_view`.`tzero_shrink` AS `tzero_shrink`,`processing_delta_view`.`tzero_flower_status` AS `tzero_flower_status`,`processing_delta_view`.`2021_total_oz` AS `2021_total_oz`,`processing_delta_view`.`2021_plants` AS `2021_plants`,`processing_delta_view`.`2022_total_oz` AS `2022_total_oz`,`processing_delta_view`.`2022_plants` AS `2022_plants`,`processing_delta_view`.`2023_total_oz` AS `2023_total_oz`,`processing_delta_view`.`2023_plants` AS `2023_plants`,`processing_delta_view`.`2024_total_oz` AS `2024_total_oz`,`processing_delta_view`.`2024_plants` AS `2024_plants`,`processing_delta_view`.`processing_count` AS `processing_count`,`processing_delta_view`.`harvesting_count` AS `harvesting_count` from `processing`.`processing_delta_view` where ((select max(`processing_delta_view`.`year_week`) from `processing`.`processing_delta_view`) in (`processing_delta_view`.`year_week`,(`processing_delta_view`.`year_week` + 100),(`processing_delta_view`.`year_week` + 200)))

-- View: wip.processing_packages
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `processing_packages` AS select `proc`.`metrc_tag` AS `metrc_tag`,`proc`.`id` AS `id`,`proc`.`note` AS `processing_notes`,`dry`.`note` AS `dry_notes`,`dry`.`id` AS `dry.id`,`buck`.`note` AS `buck_notes`,`buck`.`id` AS `buck_id`,`trim`.`note` AS `trim_notes`,`trim`.`id` AS `trim_id`,`sort`.`note` AS `sorting_notes`,`sort`.`id` AS `sort_id`,`har`.`id` AS `har_id`,`har`.`notes` AS `notes` from (((((`processing`.`processing` `proc` left join `processing`.`dry_details` `dry` on((`dry`.`dry_batch_id` = `proc`.`source_id`))) left join `processing`.`bucked_details` `buck` on((`buck`.`bucked_batch_id` = `proc`.`source_id`))) left join `processing`.`trimming_details` `trim` on((`trim`.`trimming_batch_id` = `proc`.`source_id`))) left join `processing`.`sorter_details` `sort` on((`sort`.`sorter_batch_id` = `proc`.`source_id`))) left join `cultivation`.`harvesting` `har` on((`proc`.`source_id` = `har`.`id`)))

-- View: wip.processing_prod_view2
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `processing_prod_view2` AS select `h`.`flowering_id` AS `flowering_id`,`p`.`harvesting_id` AS `harvesting_id`,`p`.`metrc_tag` AS `metrc_tag`,(case when (`p`.`process_queue_type` = 'Hand Trimming') then 'Hand Trimming' when (`p`.`process_queue_type` = 'T-zero Machine') then 'Trimming' when (`p`.`process_queue_id` = 'QC-Sorting') then 'Sorting' when (`p`.`process_queue_id` = 'Drying') then 'Drying' when (`p`.`process_queue_id` = 'Bucking') then 'Bucking' else NULL end) AS `process`,`p`.`id` AS `batch_id`,`p`.`date` AS `date`,'In Queue' AS `batch_status`,`f`.`flowering_id` AS `flowering_id_name`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,NULL AS `flower_plant_count`,NULL AS `harvest_plant_count`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`cat`.`name` AS `input_category`,`ct`.`name` AS `input_category_type`,NULL AS `input_product_size`,NULL AS `input_product_grade`,sum(`p`.`quantity`) AS `input_quantity`,NULL AS `output_category`,NULL AS `output_category_type`,NULL AS `output_size`,NULL AS `output_grade`,NULL AS `output_quantity` from (((((`processing`.`processing` `p` left join `cultivation`.`harvesting` `h` on((`h`.`id` = `p`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `p`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `p`.`category_type_id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) left join `cultivation`.`flowering` `f` on((`f`.`id` = `h`.`flowering_id`))) where ((`p`.`process_queue_id` is not null) and (`p`.`status` = 'Active') and (`h`.`harvest_id` like '%-M')) group by `p`.`harvesting_id`,`p`.`metrc_tag`,`h`.`test_id`,`p`.`process_queue_id`,`h`.`harvest_id`,`p`.`date`,`h`.`property_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`cat`.`name`,`ct`.`name`,`p`.`id`,`h`.`flowering_id`,`f`.`flowering_id` order by `p`.`date` desc

-- View: wip.processing_summary
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `processing_summary` AS select `metrc_tags`.`metrc_tag` AS `metrc_tag`,coalesce(`p`.`quantity`,0) AS `processing_quantity`,`p`.`status` AS `processing_status`,coalesce(`bb`.`quantity`,0) AS `bucked_batch_quantity`,`bb`.`status` AS `bucked_batch_status`,coalesce(`bd`.`quantity`,0) AS `bucked_details_quantity`,`bd`.`status` AS `bucked_details_status`,((coalesce(`p`.`quantity`,0) + coalesce(`bb`.`quantity`,0)) + coalesce(`bd`.`quantity`,0)) AS `total_quantity` from ((((select `processing`.`processing`.`metrc_tag` AS `metrc_tag` from `processing`.`processing` union select `processing`.`bucked_batch`.`metrc_tag` AS `metrc_tag` from `processing`.`bucked_batch` union select `processing`.`bucked_details`.`metrc_tag` AS `metrc_tag` from `processing`.`bucked_details`) `metrc_tags` left join `processing`.`processing` `p` on((`metrc_tags`.`metrc_tag` = `p`.`metrc_tag`))) left join `processing`.`bucked_batch` `bb` on((`metrc_tags`.`metrc_tag` = `bb`.`metrc_tag`))) left join `processing`.`bucked_details` `bd` on((`metrc_tags`.`metrc_tag` = `bd`.`metrc_tag`)))

-- View: wip.sku_pivot_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sku_pivot_view` AS select `sv`.`name` AS `name`,`sv`.`strain_name` AS `brand_strain_name`,max(`sv`.`status`) AS `status`,`sv`.`brand_code` AS `brand_code`,max((case when (`sv`.`category_name` is not null) then '✅' else '' end)) AS `category_check`,max((case when (`sv`.`package_name` is not null) then '✅' else '' end)) AS `package_check`,max((case when (`sv`.`package_size_name` is not null) then '✅' else '' end)) AS `package_size_check`,max((case when (`sv`.`upc_base` is not null) then '✅' else '' end)) AS `upc_base_check`,max((case when (`sv`.`image` is not null) then '✅' else '' end)) AS `image_check` from (`sku_view2` `sv` left join `pacstone`.`plant_strain` `ps` on(((`ps`.`id` = `sv`.`strain_code`) and (`ps`.`status` = 'Active')))) group by `sv`.`name`,`sv`.`strain_code`,`sv`.`brand_code` order by `sv`.`strain_code`

-- View: wip.sku_view2
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sku_view2` AS select `product_sku`.`sku`.`id` AS `id`,concat(`b`.`code`,'-',`c`.`code`,'-',`ps`.`code`,'-',`p`.`code`,'-',`s`.`id`,(case when ((`product_sku`.`sku`.`class` = 'Retail') or (`product_sku`.`sku`.`class` is null)) then '' when (`product_sku`.`sku`.`class` = 'Promo') then ' [xP]' when (`product_sku`.`sku`.`class` = 'Sample') then ' [xT]' end),coalesce(`pg`.`code`,'')) AS `sku`,`product_sku`.`sku`.`kss_id` AS `kss_id`,concat(`b`.`name`,' - ',`c`.`name`,' ',`p`.`name`,' [',`ps`.`code`,'] - ',(case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end),(case when ((`product_sku`.`sku`.`class` = 'Retail') or (`product_sku`.`sku`.`class` is null)) then '' when (`product_sku`.`sku`.`class` = 'Promo') then ' [xP]' when (`product_sku`.`sku`.`class` = 'Sample') then ' [xT]' end),coalesce(`pg`.`name`,' ')) AS `name`,`product_sku`.`sku`.`status` AS `status`,`product_sku`.`sku`.`upc_base` AS `upc_base`,`kss`.`ProductImageURL` AS `image`,`b`.`code` AS `brand_code`,`b`.`name` AS `brand_name`,`c`.`code` AS `category_code`,`c`.`name` AS `category_name`,`p`.`code` AS `package_code`,`p`.`name` AS `package_name`,`pc`.`id` AS `product_combination_code`,`pc`.`display_qty` AS `display_qty`,`ps`.`code` AS `package_size_code`,`ps`.`name` AS `package_size_name`,`product_sku`.`sku`.`packing_group` AS `packing_group_id`,`pg`.`label` AS `packing_group_label`,`pg`.`quantity` AS `quantity`,`s`.`id` AS `strain_code`,(case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end) AS `strain_name`,`s`.`category` AS `strain_category`,`product_sku`.`sku`.`upc` AS `UPC`,`product_sku`.`sku`.`class` AS `class`,`product_sku`.`sku`.`source_sku` AS `source_sku` from ((((((((`product_sku`.`sku` left join `pacstone`.`brand` `b` on((`product_sku`.`sku`.`brand` = `b`.`id`))) left join `product_sku`.`category` `c` on((`product_sku`.`sku`.`category` = `c`.`id`))) left join `product_sku`.`package` `p` on((`product_sku`.`sku`.`package` = `p`.`id`))) left join `product_sku`.`package_size` `ps` on((`product_sku`.`sku`.`package_size` = `ps`.`id`))) left join `pacstone`.`plant_strain` `s` on((`product_sku`.`sku`.`plant_strain` = `s`.`id`))) left join `product_sku`.`product_combination` `pc` on((`product_sku`.`sku`.`product_combination` = `pc`.`id`))) left join `product_sku`.`packing_group` `pg` on((`pg`.`id` = `product_sku`.`sku`.`packing_group`))) left join `sales`.`kss_sku` `kss` on((`kss`.`id` = `product_sku`.`sku`.`kss_id`)))

-- View: wip.sorting_prod_flat_all2
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorting_prod_flat_all2` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,min(`bb`.`date`) AS `start_date`,coalesce(sum(`bb_sub`.`quantity`),0) AS `input_quantity`,sum(`td`.`quantity`) AS `output_quantity`,sum(if((`td`.`category_type_id` = 'SK-CTP-56d3'),`td`.`quantity`,0)) AS `trim_output`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `sugar_shake_output`,sum(if((`td`.`category_id` = 'SK-CTG-0001'),`td`.`quantity`,0)) AS `total_flower_output_quantity`,sum(if(((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001')),`td`.`quantity`,0)) AS `big_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `big_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `big_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `big_x_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'M') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `mids_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'M') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `mids_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'M') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `mids_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'M') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `mids_x_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `smalls_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `smalls_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `smalls_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `smalls_x_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'MS') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `microsmalls_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'MS') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `microsmalls_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'MS') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `microsmalls_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'MS') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `microsmalls_x_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `regs_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `regs_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `regs_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `regs_x_flower_output`,sum((case when (`td`.`category_id` = 'SK-CTG-b89a') then `td`.`quantity` else 0 end)) AS `kief_output`,sum((case when (`td`.`category_id` = 'SK-CTG-a60f') then `td`.`quantity` else 0 end)) AS `waste_output`,if((`bb`.`action` = 'Stopped'),'In Progress',`bb`.`action`) AS `batch_status` from (((`processing`.`sorter_details` `td` left join `processing`.`sorter_batch` `bb` on((`bb`.`id` = `td`.`sorter_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join (select `processing`.`sorter_batch`.`metrc_tag` AS `metrc_tag`,sum(`processing`.`sorter_batch`.`quantity`) AS `quantity` from `processing`.`sorter_batch` group by `processing`.`sorter_batch`.`metrc_tag`) `bb_sub` on((`bb_sub`.`metrc_tag` = `bb`.`metrc_tag`))) where (`h`.`year_num` > 2021) group by `h`.`flowering_id`,`h`.`id`,`h`.`harvest_id`,`bb`.`action`,`bb`.`metrc_tag`

-- View: wip.sorting_prod_flat_all_group2
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorting_prod_flat_all_group2` AS select `td`.`harvesting_id` AS `harvesting_id`,sum(`td`.`total_flower_output_quantity`) AS `total_flower_output_quantity`,sum(`td`.`big_a_flower_output`) AS `big_a_flower_output`,sum(`td`.`big_b_flower_output`) AS `big_b_flower_output`,sum(`td`.`big_c_flower_output`) AS `big_c_flower_output`,sum(`td`.`big_x_flower_output`) AS `big_x_flower_output`,sum(`td`.`mids_a_flower_output`) AS `mids_a_flower_output`,sum(`td`.`mids_b_flower_output`) AS `mids_b_flower_output`,sum(`td`.`mids_c_flower_output`) AS `mids_c_flower_output`,sum(`td`.`mids_x_flower_output`) AS `mids_x_flower_output`,sum(`td`.`smalls_a_flower_output`) AS `smalls_a_flower_output`,sum(`td`.`smalls_b_flower_output`) AS `smalls_b_flower_output`,sum(`td`.`smalls_c_flower_output`) AS `smalls_c_flower_output`,sum(`td`.`smalls_x_flower_output`) AS `smalls_x_flower_output`,sum(`td`.`microsmalls_a_flower_output`) AS `microsmalls_a_flower_output`,sum(`td`.`microsmalls_b_flower_output`) AS `microsmalls_b_flower_output`,sum(`td`.`microsmalls_c_flower_output`) AS `microsmalls_c_flower_output`,sum(`td`.`microsmalls_x_flower_output`) AS `microsmalls_x_flower_output`,sum(`td`.`regs_a_flower_output`) AS `regs_a_flower_output`,sum(`td`.`regs_b_flower_output`) AS `regs_b_flower_output`,sum(`td`.`regs_c_flower_output`) AS `regs_c_flower_output`,sum(`td`.`regs_x_flower_output`) AS `regs_x_flower_output`,sum(`td`.`kief_output`) AS `kief_output`,sum(`td`.`waste_output`) AS `waste_output` from `sorting_prod_flat_all2` `td` group by `td`.`harvesting_id`

-- View: wip.trimming_t0_report1
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_t0_report1` AS select `t`.`metrc_tag` AS `metrc_tag`,`t`.`processing_batch_source_tag` AS `processing_batch_source_tag`,`h`.`id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`date` AS `harvest_date`,`h`.`property_id` AS `property`,`h`.`year_num` AS `harvest_year`,`h`.`week_num` AS `harvest_week`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `year_week`,`strain`.`strain_code` AS `strain_id`,`strain`.`name` AS `strain_name`,`h`.`harvest_type` AS `harvest_type`,(case when (`h`.`harvest_type` = 'Partial') then (select sum(`cultivation`.`harvesting`.`plant_count_harvested`) from `cultivation`.`harvesting` where ((`cultivation`.`harvesting`.`processing_metrc_id` = `t`.`processing_batch_source_tag`) and (`cultivation`.`harvesting`.`harvest_type` = 'Partial'))) else max(`h`.`plant_count_harvested`) end) AS `plant_count`,max(`t`.`date`) AS `t0_date`,max(`t`.`quantity`) AS `input_qty`,`subq`.`output_qty` AS `output_qty`,sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) AS `total_flower_output_quantity`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `big_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `reg_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `sml_a_flower_output`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `sugar_shake_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `c_flower_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'A')) then `td`.`quantity` else 0 end)) AS `retrim_a_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'B')) then `td`.`quantity` else 0 end)) AS `retrim_b_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'C')) then `td`.`quantity` else 0 end)) AS `retrim_c_output`,sum(if((`td`.`category_id` = 'SK-CTG-a60f'),`td`.`quantity`,0)) AS `total_waste_output`,sum((case when (`td`.`category_type_id` = 'SK-CTP-56d3') then `td`.`quantity` else 0 end)) AS `trim_output`,`t`.`action` AS `process_action` from (((((`processing`.`trimming_batch` `t` left join `processing`.`trimming_details` `td` on((`t`.`id` = `td`.`trimming_batch_id`))) left join `processing`.`trimming_view` `SUM` on((`t`.`id` = `SUM`.`trimming_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`processing_metrc_id` = `t`.`processing_batch_source_tag`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `t`.`strain_id`))) left join (select `td2`.`trimming_batch_id` AS `trimming_batch_id`,sum(`td2`.`quantity`) AS `output_qty` from `processing`.`trimming_details` `td2` group by `td2`.`trimming_batch_id`) `subq` on((`t`.`id` = `subq`.`trimming_batch_id`))) where (((`t`.`process_type` = 'T-zero Machine') and (`t`.`action` = 'Finished')) or ((`t`.`process_type` = 'Hand Trimming') and (`t`.`action` = 'Finished') and exists(select 1 from `processing`.`trimming_batch` `t2` where ((`t2`.`processing_batch_source_tag` = `t`.`processing_batch_source_tag`) and (`t2`.`process_type` = 'T-zero Machine') and (`t2`.`action` = 'Finished'))) is false)) group by `t`.`metrc_tag`,`t`.`processing_batch_source_tag`,`h`.`id`,`h`.`harvest_id`,`h`.`test_id`,`h`.`date`,`h`.`property_id`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`strain`.`strain_code`,`strain`.`name`,`t`.`action`,`subq`.`output_qty`

-- View: wip.veg_batch_classold
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `veg_batch_classold` AS select `vb`.`id` AS `id`,`vb`.`veg_id` AS `veg_id`,`vb`.`metrc_plant_tag` AS `metrc_plant_tag`,`vb`.`plant_count` AS `plant_count`,`vb`.`note` AS `veg_batch_note`,`vb`.`action` AS `veg_batch_action`,`vb`.`created_on` AS `created_on`,`vb`.`plant_class` AS `plant_class`,`v`.`batch_id` AS `batch_id`,`b`.`name` AS `veg_batch_name`,`b`.`property_id` AS `property_id`,`b`.`week` AS `week`,`b`.`year` AS `year`,`b`.`strain_id` AS `strain_id`,`b`.`license_id` AS `license_id`,`b`.`location_id` AS `location_id`,`b`.`location_string` AS `location_string` from ((`cultivation`.`veg_batch` `vb` left join `cultivation`.`veg` `v` on((`v`.`id` = `vb`.`veg_id`))) left join `pacstone`.`batch` `b` on((`v`.`batch_id` = convert(`b`.`id` using utf8mb4)))) where (`vb`.`plant_class` is not null)

