-- View: batch_production
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `batch_production` AS select `drying_prod_view`.`flowering_id` AS `flowering_id`,`drying_prod_view`.`harvesting_id` AS `harvesting_id`,`drying_prod_view`.`metrc_tag` AS `metrc_tag`,`drying_prod_view`.`process` AS `process`,`drying_prod_view`.`batch_id` AS `batch_id`,`drying_prod_view`.`date` AS `date`,`drying_prod_view`.`batch_status` AS `batch_status`,`drying_prod_view`.`flowering_id_name` AS `flowering_id_name`,`drying_prod_view`.`harvest_id` AS `harvest_id`,`drying_prod_view`.`test_id` AS `test_id`,if((`drying_prod_view`.`test_id` is null),`drying_prod_view`.`flowering_id_name`,concat(`drying_prod_view`.`flowering_id_name`,'-',`drying_prod_view`.`test_id`)) AS `flowering_crop`,if((`drying_prod_view`.`test_id` is null),`drying_prod_view`.`harvest_id`,concat(`drying_prod_view`.`harvest_id`,'-',`drying_prod_view`.`test_id`)) AS `harvest_name`,`drying_prod_view`.`property_id` AS `property_id`,`drying_prod_view`.`harvest_date` AS `harvest_date`,`drying_prod_view`.`harvest_week` AS `harvest_week`,`drying_prod_view`.`harvest_year` AS `harvest_year`,`drying_prod_view`.`harvest_year_week` AS `harvest_year_week`,`drying_prod_view`.`harvest_type` AS `harvest_type`,`drying_prod_view`.`flower_plant_count` AS `flower_plant_count`,`drying_prod_view`.`harvest_plant_count` AS `harvest_plant_count`,`drying_prod_view`.`strain_code` AS `strain_code`,`drying_prod_view`.`strain_name` AS `strain_name`,`drying_prod_view`.`category` AS `input_category`,`drying_prod_view`.`category_type` AS `input_category_type`,`drying_prod_view`.`product_size` AS `input_product_size`,`drying_prod_view`.`product_grade` AS `input_product_grade`,`drying_prod_view`.`input_quantity` AS `input_quantity`,`drying_prod_view`.`output_category` AS `output_category`,`drying_prod_view`.`output_category_type` AS `output_category_type`,NULL AS `output_size`,NULL AS `output_grade`,`drying_prod_view`.`output_quantity` AS `output_quantity` from `drying_prod_view` where (`drying_prod_view`.`harvest_year_week` > 202253) union all select `harvest_prod_view`.`flowering_id` AS `flowering_id`,`harvest_prod_view`.`harvesting_id` AS `harvesting_id`,`harvest_prod_view`.`metrc_tag` AS `metrc_tag`,`harvest_prod_view`.`process` AS `process`,`harvest_prod_view`.`batch_id` AS `batch_id`,`harvest_prod_view`.`date` AS `date`,`harvest_prod_view`.`batch_status` AS `batch_status`,`harvest_prod_view`.`flowering_id_name` AS `flowering_id_name`,`harvest_prod_view`.`harvest_id` AS `harvest_id`,`harvest_prod_view`.`test_id` AS `test_id`,if((`harvest_prod_view`.`test_id` is null),`harvest_prod_view`.`flowering_id_name`,concat(`harvest_prod_view`.`flowering_id_name`,'-',`harvest_prod_view`.`test_id`)) AS `flowering_crop`,if((`harvest_prod_view`.`test_id` is null),`harvest_prod_view`.`harvest_id`,concat(`harvest_prod_view`.`harvest_id`,'-',`harvest_prod_view`.`test_id`)) AS `harvest_name`,`harvest_prod_view`.`property_id` AS `property_id`,`harvest_prod_view`.`harvest_date` AS `harvest_date`,`harvest_prod_view`.`harvest_week` AS `harvest_week`,`harvest_prod_view`.`harvest_year` AS `harvest_year`,`harvest_prod_view`.`harvest_year_week` AS `harvest_year_week`,`harvest_prod_view`.`harvest_type` AS `harvest_type`,`harvest_prod_view`.`flower_plant_count` AS `flower_plant_count`,`harvest_prod_view`.`harvest_plant_count` AS `harvest_plant_count`,`harvest_prod_view`.`strain_code` AS `strain_code`,`harvest_prod_view`.`strain_name` AS `strain_name`,`harvest_prod_view`.`category` AS `input_category`,`harvest_prod_view`.`category_type` AS `input_category_type`,NULL AS `input_product_size`,NULL AS `input_product_grade`,NULL AS `input_quantity`,NULL AS `output_category`,NULL AS `output_category_type`,NULL AS `output_size`,NULL AS `output_grade`,`harvest_prod_view`.`output_quantity` AS `output_quantity` from `cultivation`.`harvest_prod_view` where (`harvest_prod_view`.`harvest_year_week` > 202253) union all select `bucking_prod_view`.`flowering_id` AS `flowering_id`,`bucking_prod_view`.`harvesting_id` AS `harvesting_id`,`bucking_prod_view`.`metrc_tag` AS `metrc_tag`,`bucking_prod_view`.`process` AS `process`,`bucking_prod_view`.`batch_id` AS `batch_id`,`bucking_prod_view`.`date` AS `date`,`bucking_prod_view`.`batch_status` AS `batch_status`,`bucking_prod_view`.`flowering_id_name` AS `flowering_id_name`,`bucking_prod_view`.`harvest_id` AS `harvest_id`,`bucking_prod_view`.`test_id` AS `test_id`,if((`bucking_prod_view`.`test_id` is null),`bucking_prod_view`.`flowering_id_name`,concat(`bucking_prod_view`.`flowering_id_name`,'-',`bucking_prod_view`.`test_id`)) AS `flowering_crop`,if((`bucking_prod_view`.`test_id` is null),`bucking_prod_view`.`harvest_id`,concat(`bucking_prod_view`.`harvest_id`,'-',`bucking_prod_view`.`test_id`)) AS `harvest_name`,`bucking_prod_view`.`property_id` AS `property_id`,`bucking_prod_view`.`harvest_date` AS `harvest_date`,`bucking_prod_view`.`harvest_week` AS `harvest_week`,`bucking_prod_view`.`harvest_year` AS `harvest_year`,`bucking_prod_view`.`harvest_year_week` AS `harvest_year_week`,`bucking_prod_view`.`harvest_type` AS `harvest_type`,`bucking_prod_view`.`flower_plant_count` AS `flower_plant_count`,`bucking_prod_view`.`harvest_plant_count` AS `harvest_plant_count`,`bucking_prod_view`.`strain_code` AS `strain_code`,`bucking_prod_view`.`strain_name` AS `strain_name`,`bucking_prod_view`.`category` AS `input_category`,`bucking_prod_view`.`category_type` AS `input_category_type`,`bucking_prod_view`.`product_size` AS `input_product_size`,`bucking_prod_view`.`product_grade` AS `input_product_grade`,`bucking_prod_view`.`input_quantity` AS `input_quantity`,`bucking_prod_view`.`output_category` AS `output_category`,`bucking_prod_view`.`output_category_type` AS `output_category_type`,NULL AS `output_size`,NULL AS `output_grade`,`bucking_prod_view`.`output_quantity` AS `output_quantity` from `bucking_prod_view` where (`bucking_prod_view`.`harvest_year_week` > 202253) union all select `trimming_prod_view`.`flowering_id` AS `flowering_id`,`trimming_prod_view`.`harvesting_id` AS `harvesting_id`,`trimming_prod_view`.`metrc_tag` AS `metrc_tag`,`trimming_prod_view`.`process` AS `process`,`trimming_prod_view`.`batch_id` AS `batch_id`,`trimming_prod_view`.`date` AS `date`,`trimming_prod_view`.`batch_status` AS `batch_status`,`trimming_prod_view`.`flowering_id_name` AS `flowering_id_name`,`trimming_prod_view`.`harvest_id` AS `harvest_id`,`trimming_prod_view`.`test_id` AS `test_id`,if((`trimming_prod_view`.`test_id` is null),`trimming_prod_view`.`flowering_id_name`,concat(`trimming_prod_view`.`flowering_id_name`,'-',`trimming_prod_view`.`test_id`)) AS `flowering_crop`,if((`trimming_prod_view`.`test_id` is null),`trimming_prod_view`.`harvest_id`,concat(`trimming_prod_view`.`harvest_id`,'-',`trimming_prod_view`.`test_id`)) AS `harvest_name`,`trimming_prod_view`.`property_id` AS `property_id`,`trimming_prod_view`.`harvest_date` AS `harvest_date`,`trimming_prod_view`.`harvest_week` AS `harvest_week`,`trimming_prod_view`.`harvest_year` AS `harvest_year`,`trimming_prod_view`.`harvest_year_week` AS `harvest_year_week`,`trimming_prod_view`.`harvest_type` AS `harvest_type`,`trimming_prod_view`.`flower_plant_count` AS `flower_plant_count`,`trimming_prod_view`.`harvest_plant_count` AS `harvest_plant_count`,`trimming_prod_view`.`strain_code` AS `strain_code`,`trimming_prod_view`.`strain_name` AS `strain_name`,`trimming_prod_view`.`input_category` AS `input_category`,`trimming_prod_view`.`input_category_type` AS `input_category_type`,`trimming_prod_view`.`input_product_size` AS `input_product_size`,`trimming_prod_view`.`input_product_grade` AS `input_product_grade`,`trimming_prod_view`.`input_quantity` AS `input_quantity`,`trimming_prod_view`.`output_category` AS `output_category`,`trimming_prod_view`.`output_category_type` AS `output_category_type`,`trimming_prod_view`.`output_size` AS `output_size`,`trimming_prod_view`.`output_grade` AS `output_grade`,`trimming_prod_view`.`output_quantity` AS `output_quantity` from `trimming_prod_view` where (`trimming_prod_view`.`harvest_year_week` > 202253) union all select `sorting_prod_view`.`flowering_id` AS `flowering_id`,`sorting_prod_view`.`harvesting_id` AS `harvesting_id`,`sorting_prod_view`.`metrc_tag` AS `metrc_tag`,`sorting_prod_view`.`process` AS `process`,`sorting_prod_view`.`batch_id` AS `batch_id`,`sorting_prod_view`.`date` AS `date`,`sorting_prod_view`.`batch_status` AS `batch_status`,`sorting_prod_view`.`flowering_id_name` AS `flowering_id_name`,`sorting_prod_view`.`harvest_id` AS `harvest_id`,`sorting_prod_view`.`test_id` AS `test_id`,if((`sorting_prod_view`.`test_id` is null),`sorting_prod_view`.`flowering_id_name`,concat(`sorting_prod_view`.`flowering_id_name`,'-',`sorting_prod_view`.`test_id`)) AS `flowering_crop`,if((`sorting_prod_view`.`test_id` is null),`sorting_prod_view`.`harvest_id`,concat(`sorting_prod_view`.`harvest_id`,'-',`sorting_prod_view`.`test_id`)) AS `harvest_name`,`sorting_prod_view`.`property_id` AS `property_id`,`sorting_prod_view`.`harvest_date` AS `harvest_date`,`sorting_prod_view`.`harvest_week` AS `harvest_week`,`sorting_prod_view`.`harvest_year` AS `harvest_year`,`sorting_prod_view`.`harvest_year_week` AS `harvest_year_week`,`sorting_prod_view`.`harvest_type` AS `harvest_type`,`sorting_prod_view`.`flower_plant_count` AS `flower_plant_count`,`sorting_prod_view`.`harvest_plant_count` AS `harvest_plant_count`,`sorting_prod_view`.`strain_code` AS `strain_code`,`sorting_prod_view`.`strain_name` AS `strain_name`,`sorting_prod_view`.`input_category` AS `input_category`,`sorting_prod_view`.`input_category_type` AS `input_category_type`,`sorting_prod_view`.`input_product_size` AS `input_product_size`,`sorting_prod_view`.`input_product_grade` AS `input_product_grade`,`sorting_prod_view`.`input_quantity` AS `input_quantity`,`sorting_prod_view`.`output_category` AS `output_category`,`sorting_prod_view`.`output_category_type` AS `output_category_type`,`sorting_prod_view`.`output_size` AS `output_size`,`sorting_prod_view`.`output_grade` AS `output_grade`,`sorting_prod_view`.`output_quantity` AS `output_quantity` from `sorting_prod_view` where (`sorting_prod_view`.`harvest_year_week` > 202253) union all select `processing_prod_view`.`flowering_id` AS `flowering_id`,`processing_prod_view`.`harvesting_id` AS `harvesting_id`,`processing_prod_view`.`metrc_tag` AS `metrc_tag`,`processing_prod_view`.`process` AS `process`,`processing_prod_view`.`batch_id` AS `batch_id`,`processing_prod_view`.`date` AS `date`,`processing_prod_view`.`batch_status` AS `batch_status`,`processing_prod_view`.`flowering_id_name` AS `flowering_id_name`,`processing_prod_view`.`harvest_id` AS `harvest_id`,`processing_prod_view`.`test_id` AS `test_id`,if((`processing_prod_view`.`test_id` is null),`processing_prod_view`.`flowering_id_name`,concat(`processing_prod_view`.`flowering_id_name`,'-',`processing_prod_view`.`test_id`)) AS `flowering_crop`,if((`processing_prod_view`.`test_id` is null),`processing_prod_view`.`harvest_id`,concat(`processing_prod_view`.`harvest_id`,'-',`processing_prod_view`.`test_id`)) AS `harvest_name`,`processing_prod_view`.`property_id` AS `property_id`,`processing_prod_view`.`harvest_date` AS `harvest_date`,`processing_prod_view`.`harvest_week` AS `harvest_week`,`processing_prod_view`.`harvest_year` AS `harvest_year`,`processing_prod_view`.`harvest_year_week` AS `harvest_year_week`,`processing_prod_view`.`harvest_type` AS `harvest_type`,`processing_prod_view`.`flower_plant_count` AS `flower_plant_count`,`processing_prod_view`.`harvest_plant_count` AS `harvest_plant_count`,`processing_prod_view`.`strain_code` AS `strain_code`,`processing_prod_view`.`strain_name` AS `strain_name`,`processing_prod_view`.`input_category` AS `input_category`,`processing_prod_view`.`input_category_type` AS `input_category_type`,`processing_prod_view`.`input_product_size` AS `input_product_size`,`processing_prod_view`.`input_product_grade` AS `input_product_grade`,`processing_prod_view`.`input_quantity` AS `input_quantity`,`processing_prod_view`.`output_category` AS `output_category`,`processing_prod_view`.`output_category_type` AS `output_category_type`,`processing_prod_view`.`output_size` AS `output_size`,`processing_prod_view`.`output_grade` AS `output_grade`,`processing_prod_view`.`output_quantity` AS `output_quantity` from `processing_prod_view` order by `harvest_year_week` desc,`harvest_name`;

-- View: batch_production_flowering_flat
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `batch_production_flowering_flat` AS select `f`.`id` AS `flowering_id`,`f`.`flowering_id` AS `flowering_batch`,`f`.`test_id` AS `test_id`,`f`.`property_id` AS `property_id`,`f`.`date` AS `planting_date`,`f`.`week_num` AS `planting_week`,`f`.`year_num` AS `planting_year`,`f`.`license_id` AS `license`,`f`.`strain_id` AS `strain_id`,`ps`.`name` AS `strain_name`,`f`.`plant_count` AS `planted_count`,sum(`h`.`harvest_plant_count`) AS `harvested_count`,`d`.`input_quantity` AS `input_drying`,`d`.`output_quantity` AS `output_drying`,round((100 - ((`d`.`output_quantity` * 100) / `d`.`input_quantity`)),3) AS `drying_loss_pct`,NULL AS `status_drying`,`b`.`input_quantity` AS `input_bucking`,`b`.`output_quantity` AS `output_bucking`,round((100 - ((`b`.`output_quantity` * 100) / `b`.`input_quantity`)),3) AS `bucking_loss_pct`,NULL AS `status_bucking`,`tm`.`input_quantity` AS `input_tzero`,`tm`.`output_quantity` AS `output_tzero`,`tm`.`big_a_flower_output` AS `tzero_big_a`,`tm`.`reg_a_flower_output` AS `tzero_reg_a`,`tm`.`sml_a_flower_output` AS `tzero_small_a`,`tm`.`b_flower_output` AS `tzero_b`,`tm`.`c_flower_output` AS `tzero_c`,`tm`.`retrim_a_output` AS `a_for_retrim`,`tm`.`retrim_b_output` AS `b_for_retrim`,`tm`.`retrim_c_output` AS `c_for_retrim`,(((((ifnull(`tm`.`big_a_flower_output`,0) + ifnull(`tm`.`reg_a_flower_output`,0)) + ifnull(`tm`.`sml_a_flower_output`,0)) + ifnull(`tm`.`b_flower_output`,0)) + ifnull(`tm`.`retrim_a_output`,0)) + `tm`.`retrim_b_output`) AS `tzero_ab`,`tm`.`total_flower_output_quantity` AS `tzero_abc`,((((((ifnull(`tm`.`big_a_flower_output`,0) + ifnull(`tm`.`reg_a_flower_output`,0)) + ifnull(`tm`.`sml_a_flower_output`,0)) + ifnull(`tm`.`b_flower_output`,0)) + ifnull(`tm`.`retrim_a_output`,0)) + ifnull(`tm`.`retrim_b_output`,0)) + ifnull(`tm`.`sugar_shake_output`,0)) AS `tzero_ab_shake`,(ifnull(`tm`.`total_flower_output_quantity`,0) + ifnull(`tm`.`sugar_shake_output`,0)) AS `tzero_abc_shake`,`tm`.`trim_output` AS `tzero_trim`,`tm`.`sugar_shake_output` AS `tzero_shake`,`tm`.`waste_output` AS `tzero_waste`,round((100 - ((`tm`.`output_quantity` * 100) / `tm`.`input_quantity`)),3) AS `tzero_loss_pct`,NULL AS `status_tzero`,`th`.`input_quantity` AS `input_retrim`,`th`.`output_quantity` AS `output_retrim`,`th`.`a_flower_output` AS `retrim_a`,`th`.`b_flower_output` AS `retrim_b`,`th`.`c_flower_output` AS `retrim_c`,`th`.`sugar_shake_output` AS `retrim_shake`,`th`.`waste_output` AS `retrim_waste`,round((100 - ((`th`.`output_quantity` * 100) / `th`.`input_quantity`)),3) AS `retrim_loss_pct`,NULL AS `status_retrim`,`s`.`input_quantity` AS `sorter_input`,`s`.`output_quantity` AS `sorter_output`,`s`.`big_a_flower_output` AS `sorter_big_a`,`s`.`big_b_flower_output` AS `sorter_big_b`,`s`.`big_c_flower_output` AS `sorter_big_c`,`s`.`big_x_flower_output` AS `sorter_big_x`,`s`.`mids_a_flower_output` AS `sorter_mids_a`,`s`.`mids_b_flower_output` AS `sorter_mids_b`,`s`.`mids_c_flower_output` AS `sorter_mids_c`,`s`.`mids_x_flower_output` AS `sorter_mids_x`,`s`.`smalls_a_flower_output` AS `sorter_smalls_a`,`s`.`smalls_b_flower_output` AS `sorter_smalls_b`,`s`.`smalls_c_flower_output` AS `sorter_smalls_c`,`s`.`smalls_x_flower_output` AS `sorter_smalls_x`,`s`.`microsmalls_a_flower_output` AS `sorter_micros_a`,`s`.`microsmalls_b_flower_output` AS `sorter_micros_b`,`s`.`microsmalls_c_flower_output` AS `sorter_micros_c`,`s`.`microsmalls_x_flower_output` AS `sorter_micros_x`,`s`.`regs_a_flower_output` AS `sorter_regs_a`,`s`.`regs_b_flower_output` AS `sorter_regs_b`,`s`.`regs_c_flower_output` AS `sorter_regs_c`,`s`.`regs_x_flower_output` AS `sorter_regs_x`,`s`.`total_flower_output_quantity` AS `sorter_flower`,`s`.`trim_output` AS `sorter_trim`,`s`.`sugar_shake_output` AS `sorter_shake`,`s`.`kief_output` AS `sorter_kief`,`s`.`waste_output` AS `sorter_waste`,NULL AS `sorter_status`,`s`.`big_a_flower_output` AS `total_a_bigs`,`s`.`mids_a_flower_output` AS `total_a_mids`,`s`.`smalls_a_flower_output` AS `total_a_smalls`,`s`.`microsmalls_a_flower_output` AS `total_a_micros`,((((((ifnull(`tm`.`b_flower_output`,0) + ifnull(`s`.`big_b_flower_output`,0)) + ifnull(`th`.`b_flower_output`,0)) + ifnull(`s`.`mids_b_flower_output`,0)) + ifnull(`s`.`smalls_b_flower_output`,0)) + ifnull(`s`.`microsmalls_b_flower_output`,0)) + ifnull(`s`.`regs_b_flower_output`,0)) AS `total_b`,((((((ifnull(`tm`.`c_flower_output`,0) + ifnull(`th`.`c_flower_output`,0)) + ifnull(`s`.`big_c_flower_output`,0)) + ifnull(`s`.`mids_c_flower_output`,0)) + ifnull(`s`.`smalls_c_flower_output`,0)) + ifnull(`s`.`microsmalls_c_flower_output`,0)) + ifnull(`s`.`regs_c_flower_output`,0)) AS `total_c`,((ifnull(`tm`.`sugar_shake_output`,0) + ifnull(`th`.`sugar_shake_output`,0)) + ifnull(`s`.`sugar_shake_output`,0)) AS `total_shake`,`tm`.`trim_output` AS `total_trim`,((ifnull(`tm`.`waste_output`,0) + ifnull(`th`.`waste_output`,0)) + ifnull(`s`.`waste_output`,0)) AS `total_waste`,((((((((((((((((((((((((ifnull(`s`.`big_a_flower_output`,0) + ifnull(`s`.`mids_a_flower_output`,0)) + ifnull(`s`.`smalls_a_flower_output`,0)) + ifnull(`s`.`microsmalls_a_flower_output`,0)) + ifnull(`th`.`b_flower_output`,0)) + ifnull(`tm`.`b_flower_output`,0)) + ifnull(`s`.`big_b_flower_output`,0)) + ifnull(`s`.`mids_b_flower_output`,0)) + ifnull(`s`.`smalls_b_flower_output`,0)) + ifnull(`s`.`microsmalls_b_flower_output`,0)) + ifnull(`s`.`regs_b_flower_output`,0)) + ifnull(`tm`.`c_flower_output`,0)) + ifnull(`th`.`c_flower_output`,0)) + ifnull(`s`.`big_c_flower_output`,0)) + ifnull(`s`.`mids_c_flower_output`,0)) + ifnull(`s`.`smalls_c_flower_output`,0)) + ifnull(`s`.`microsmalls_c_flower_output`,0)) + ifnull(`s`.`regs_c_flower_output`,0)) + ifnull(`tm`.`sugar_shake_output`,0)) + ifnull(`th`.`sugar_shake_output`,0)) + ifnull(`s`.`sugar_shake_output`,0)) + ifnull(`tm`.`trim_output`,0)) + ifnull(`tm`.`waste_output`,0)) + ifnull(`th`.`waste_output`,0)) + ifnull(`s`.`waste_output`,0)) AS `total`,round(((((((((((((ifnull(`s`.`big_a_flower_output`,0) + ifnull(`s`.`mids_a_flower_output`,0)) + ifnull(`s`.`smalls_a_flower_output`,0)) + ifnull(`s`.`microsmalls_a_flower_output`,0)) + ifnull(`tm`.`b_flower_output`,0)) + ifnull(`th`.`b_flower_output`,0)) + ifnull(`s`.`big_b_flower_output`,0)) + ifnull(`s`.`mids_b_flower_output`,0)) + ifnull(`s`.`smalls_b_flower_output`,0)) + ifnull(`s`.`microsmalls_b_flower_output`,0)) + ifnull(`s`.`regs_b_flower_output`,0)) * 16) / sum(`h`.`harvest_plant_count`)),3) AS `oz_plant_h`,round(((((((((((((((((((((((((((ifnull(`s`.`big_a_flower_output`,0) + ifnull(`s`.`mids_a_flower_output`,0)) + ifnull(`s`.`smalls_a_flower_output`,0)) + ifnull(`s`.`microsmalls_a_flower_output`,0)) + ifnull(`tm`.`b_flower_output`,0)) + ifnull(`th`.`b_flower_output`,0)) + ifnull(`s`.`big_b_flower_output`,0)) + ifnull(`s`.`mids_b_flower_output`,0)) + ifnull(`s`.`smalls_b_flower_output`,0)) + ifnull(`s`.`microsmalls_b_flower_output`,0)) + ifnull(`s`.`regs_b_flower_output`,0)) + ifnull(`tm`.`c_flower_output`,0)) + ifnull(`th`.`c_flower_output`,0)) + ifnull(`s`.`big_c_flower_output`,0)) + ifnull(`s`.`mids_c_flower_output`,0)) + ifnull(`s`.`smalls_c_flower_output`,0)) + ifnull(`s`.`microsmalls_c_flower_output`,0)) + ifnull(`s`.`regs_c_flower_output`,0)) + ifnull(`tm`.`sugar_shake_output`,0)) + ifnull(`th`.`sugar_shake_output`,0)) + ifnull(`s`.`sugar_shake_output`,0)) + ifnull(`tm`.`trim_output`,0)) + ifnull(`tm`.`waste_output`,0)) + ifnull(`th`.`waste_output`,0)) + ifnull(`s`.`waste_output`,0)) * 100) / `tm`.`input_quantity`),2) AS `pct_completed` from (((((((`drying_prod_flat` `d` left join `bucking_prod_flat` `b` on((`b`.`flowering_id` = `d`.`flowering_id`))) left join `trimming_machine_prod_flat` `tm` on((`tm`.`flowering_id` = `d`.`flowering_id`))) left join `trimming_hand_prod_flat` `th` on((`th`.`flowering_id` = `d`.`flowering_id`))) left join `sorting_prod_flat` `s` on((`s`.`flowering_id` = `d`.`flowering_id`))) left join `cultivation`.`flowering` `f` on((`f`.`id` = `d`.`flowering_id`))) left join `cultivation`.`harvest_prod_view` `h` on((`f`.`id` = `h`.`flowering_id`))) left join `pacstone`.`plant_strain` `ps` on((`ps`.`id` = `h`.`strain_id`))) where ((`f`.`year_num` > 2022) and (`tm`.`batch_status` = 'Finished')) group by `f`.`id`,`f`.`flowering_id`,`ps`.`name`,`f`.`test_id`,`f`.`property_id`,`f`.`date`,`f`.`week_num`,`f`.`year_num`,`tm`.`total_flower_output_quantity`,`f`.`license_id`,`s`.`total_flower_output_quantity`,`f`.`strain_id`,`f`.`plant_count`,`d`.`input_quantity`,`d`.`output_quantity`,`d`.`batch_status`,`b`.`input_quantity`,`b`.`output_quantity`,`b`.`batch_status`,`tm`.`input_quantity`,`tm`.`big_a_flower_output`,`tm`.`reg_a_flower_output`,`tm`.`sml_a_flower_output`,`tm`.`b_flower_output`,`tm`.`c_flower_output`,`tm`.`retrim_a_output`,`tm`.`retrim_b_output`,`tm`.`retrim_c_output`,`tm`.`trim_output`,`tm`.`sugar_shake_output`,`tm`.`waste_output`,`tm`.`output_quantity`,`tm`.`batch_status`,`th`.`input_quantity`,`th`.`a_flower_output`,`th`.`b_flower_output`,`th`.`c_flower_output`,`th`.`sugar_shake_output`,`th`.`waste_output`,`th`.`output_quantity`,`th`.`batch_status`,`s`.`input_quantity`,`s`.`output_quantity`,`s`.`trim_output`,`s`.`total_flower_output_quantity`,`s`.`sugar_shake_output`,`s`.`big_a_flower_output`,`s`.`big_b_flower_output`,`s`.`big_c_flower_output`,`s`.`big_x_flower_output`,`s`.`mids_a_flower_output`,`s`.`mids_b_flower_output`,`s`.`mids_c_flower_output`,`s`.`mids_x_flower_output`,`s`.`smalls_a_flower_output`,`s`.`smalls_b_flower_output`,`s`.`smalls_c_flower_output`,`s`.`smalls_x_flower_output`,`s`.`microsmalls_a_flower_output`,`s`.`microsmalls_b_flower_output`,`s`.`microsmalls_c_flower_output`,`s`.`microsmalls_x_flower_output`,`s`.`regs_a_flower_output`,`s`.`regs_b_flower_output`,`s`.`regs_c_flower_output`,`s`.`regs_x_flower_output`,`s`.`kief_output`,`s`.`waste_output`,`s`.`batch_status` order by `f`.`date` desc;

-- View: batch_production_harvest_2022
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `batch_production_harvest_2022` AS select max(`h`.`flowering_id`) AS `flowering_id`,`h`.`harvesting_id` AS `harvesting_id`,max(`h`.`flowering_id_name`) AS `flowering_batch`,`h`.`harvest_id` AS `harvest_batch`,max(`h`.`test_id`) AS `test_id`,if((max(`h`.`test_id`) is null),`h`.`harvest_id`,concat(`h`.`harvest_id`,'-',max(`h`.`test_id`))) AS `harvest_batch_test_id`,max(`h`.`property_id`) AS `property_id`,max(`h`.`license_id`) AS `license`,max(`h`.`strain_id`) AS `strain_id`,max(`ps`.`name`) AS `strain_name`,if((max(`ps`.`core_strain`) = 1),'YES','NO') AS `core_strain`,max(`h`.`harvest_date`) AS `harvest_date`,max(`h`.`harvest_week`) AS `harvest_week`,quarter(max(`h`.`harvest_date`)) AS `harvest_quarter`,max(`h`.`harvest_year`) AS `harvest_year`,if(((0 <> (`h`.`harvest_type` = 'Manicure')) or (0 <> (`h`.`harvest_type` = 'Fresh Frozen'))),NULL,max(`h`.`flower_plant_count`)) AS `planted_count`,if(((0 <> (`h`.`harvest_type` = 'Manicure')) or (0 <> (`h`.`harvest_type` = 'Fresh Frozen'))),NULL,`h`.`harvest_plant_count`) AS `harvested_count`,min(`d`.`start_date`) AS `input_date_drying`,max(`d`.`input_quantity`) AS `input_drying`,max(`d`.`output_quantity`) AS `output_drying`,round((100 - (max((`d`.`output_quantity` * 100)) / max(`d`.`input_quantity`))),3) AS `drying_loss_pct`,max(`d`.`batch_status`) AS `status_drying`,min(`b`.`start_date`) AS `input_date_bucking`,max(`b`.`input_quantity`) AS `input_bucking`,max(`b`.`output_quantity`) AS `output_bucking`,round((100 - (max((`b`.`output_quantity` * 100)) / max(`b`.`input_quantity`))),3) AS `bucking_loss_pct`,max(`b`.`batch_status`) AS `status_bucking`,min(`tm`.`start_date`) AS `input_date_tzero`,max(`tm`.`input_quantity`) AS `input_tzero`,max(`tm`.`output_quantity`) AS `output_tzero`,max(`tm`.`big_a_flower_output`) AS `tzero_big_a`,max(`tm`.`medium_a_flower_output`) AS `tzero_mids_a`,max(`tm`.`reg_a_flower_output`) AS `tzero_reg_a`,max(`tm`.`sml_a_flower_output`) AS `tzero_small_a`,max(`tm`.`micro_a_flower_output`) AS `tzero_micros_a`,max(`tm`.`b_flower_output`) AS `tzero_b`,max(`tm`.`c_flower_output`) AS `tzero_c`,max(`tm`.`retrim_a_output`) AS `a_for_retrim`,max(`tm`.`retrim_b_output`) AS `b_for_retrim`,max(`tm`.`retrim_c_output`) AS `c_for_retrim`,(((((((ifnull(max(`tm`.`micro_a_flower_output`),0) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`b_flower_output`),0)) + ifnull(max(`tm`.`retrim_a_output`),0)) + ifnull(max(`tm`.`retrim_b_output`),0)) AS `tzero_ab`,((((((((ifnull(max(`tm`.`micro_a_flower_output`),0) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`b_flower_output`),0)) + ifnull(max(`tm`.`retrim_a_output`),0)) + ifnull(max(`tm`.`retrim_b_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) AS `tzero_ab_shake`,max(`tm`.`total_flower_output_quantity`) AS `tzero_abc`,(((((((((ifnull(max(`tm`.`micro_a_flower_output`),0) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`b_flower_output`),0)) + ifnull(max(`tm`.`retrim_a_output`),0)) + ifnull(max(`tm`.`retrim_b_output`),0)) + ifnull(max(`tm`.`c_flower_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) AS `tzero_abc_shake`,max(`tm`.`trim_output`) AS `tzero_trim`,max(`tm`.`sugar_shake_output`) AS `tzero_shake`,max(`tm`.`waste_output`) AS `tzero_waste`,round((100 - ((max(`tm`.`output_quantity`) * 100) / max(`tm`.`input_quantity`))),3) AS `tzero_loss_pct`,max(`tm`.`batch_status`) AS `status_tzero`,min(`th`.`start_date`) AS `input_date_retrim`,max(`th`.`input_quantity`) AS `input_retrim`,max(`th`.`output_quantity`) AS `output_retrim`,max(`th`.`a_flower_output`) AS `retrim_a`,max(`th`.`b_flower_output`) AS `retrim_b`,max(`th`.`c_flower_output`) AS `retrim_c`,max(`th`.`sugar_shake_output`) AS `retrim_shake`,max(`th`.`waste_output`) AS `retrim_waste`,round((100 - ((max(`th`.`output_quantity`) * 100) / nullif(max(`th`.`input_quantity`),0))),3) AS `retrim_loss_pct`,max(`th`.`batch_status`) AS `status_retrim`,min(`s`.`start_date`) AS `input_date_sorter`,max(`s`.`input_quantity`) AS `sorter_input`,max(`s`.`output_quantity`) AS `sorter_output`,max(`s`.`big_a_flower_output`) AS `sorter_big_a`,max(`s`.`big_b_flower_output`) AS `sorter_big_b`,max(`s`.`big_c_flower_output`) AS `sorter_big_c`,max(`s`.`big_x_flower_output`) AS `sorter_big_x`,max(`s`.`mids_a_flower_output`) AS `sorter_mids_a`,max(`s`.`mids_b_flower_output`) AS `sorter_mids_b`,max(`s`.`mids_c_flower_output`) AS `sorter_mids_c`,max(`s`.`mids_x_flower_output`) AS `sorter_mids_x`,max(`s`.`smalls_a_flower_output`) AS `sorter_smalls_a`,max(`s`.`smalls_b_flower_output`) AS `sorter_smalls_b`,max(`s`.`smalls_c_flower_output`) AS `sorter_smalls_c`,max(`s`.`smalls_x_flower_output`) AS `sorter_smalls_x`,max(`s`.`microsmalls_a_flower_output`) AS `sorter_micros_a`,max(`s`.`microsmalls_b_flower_output`) AS `sorter_micros_b`,max(`s`.`microsmalls_c_flower_output`) AS `sorter_micros_c`,max(`s`.`microsmalls_x_flower_output`) AS `sorter_micros_x`,max(`s`.`regs_a_flower_output`) AS `sorter_regs_a`,max(`s`.`regs_b_flower_output`) AS `sorter_regs_b`,max(`s`.`regs_c_flower_output`) AS `sorter_regs_c`,max(`s`.`regs_x_flower_output`) AS `sorter_regs_x`,max(`s`.`total_flower_output_quantity`) AS `sorter_flower`,max(`s`.`trim_output`) AS `sorter_trim`,max(`s`.`sugar_shake_output`) AS `sorter_shake`,max(`s`.`kief_output`) AS `sorter_kief`,max(`s`.`waste_output`) AS `sorter_waste`,round((100 - ((max(`s`.`output_quantity`) * 100) / nullif(max(`s`.`input_quantity`),0))),3) AS `sorter_loss_pct`,max(`s`.`batch_status`) AS `sorter_status`,if((max(`ps`.`core_strain`) = 0),max(`tm`.`big_a_flower_output`),(ifnull(max(`s`.`big_a_flower_output`),0) + ifnull(max(`s`.`big_x_flower_output`),0))) AS `total_a_bigs`,if((max(`ps`.`core_strain`) = 0),max(`tm`.`medium_a_flower_output`),(ifnull(max(`s`.`mids_a_flower_output`),0) + ifnull(max(`s`.`mids_x_flower_output`),0))) AS `total_a_mids`,if((max(`ps`.`core_strain`) = 0),max(`tm`.`sml_a_flower_output`),(ifnull(max(`s`.`smalls_a_flower_output`),0) + ifnull(max(`s`.`smalls_x_flower_output`),0))) AS `total_a_smalls`,if((max(`ps`.`core_strain`) = 0),max(`tm`.`micro_a_flower_output`),(ifnull(max(`s`.`microsmalls_a_flower_output`),0) + ifnull(max(`s`.`microsmalls_x_flower_output`),0))) AS `total_a_micros`,if((max(`ps`.`core_strain`) = 0),max(`tm`.`reg_a_flower_output`),(ifnull(max(`s`.`regs_a_flower_output`),0) + ifnull(max(`s`.`regs_x_flower_output`),0))) AS `total_a_regs`,((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`th`.`b_flower_output`),0)) + ifnull(max(`s`.`big_b_flower_output`),0)) + ifnull(max(`s`.`mids_b_flower_output`),0)) + ifnull(max(`s`.`smalls_b_flower_output`),0)) + ifnull(max(`s`.`microsmalls_b_flower_output`),0)) + ifnull(max(`s`.`regs_b_flower_output`),0)) AS `total_b`,((((((ifnull(max(`tm`.`c_flower_output`),0) + ifnull(max(`th`.`c_flower_output`),0)) + ifnull(max(`s`.`big_c_flower_output`),0)) + ifnull(max(`s`.`mids_c_flower_output`),0)) + ifnull(max(`s`.`smalls_c_flower_output`),0)) + ifnull(max(`s`.`microsmalls_c_flower_output`),0)) + ifnull(max(`s`.`regs_c_flower_output`),0)) AS `total_c`,((ifnull(max(`tm`.`sugar_shake_output`),0) + ifnull(max(`th`.`sugar_shake_output`),0)) + ifnull(max(`s`.`sugar_shake_output`),0)) AS `total_shake`,max(`tm`.`trim_output`) AS `total_trim`,max(`s`.`kief_output`) AS `total_kief`,((ifnull(max(`tm`.`waste_output`),0) + ifnull(max(`th`.`waste_output`),0)) + ifnull(max(`s`.`waste_output`),0)) AS `total_waste`,if((max(`ps`.`core_strain`) = 0),(((((((((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`tm`.`c_flower_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) + ifnull(max(`tm`.`trim_output`),0)) + ifnull(max(`tm`.`waste_output`),0)) + ifnull(max(`th`.`b_flower_output`),0)) + ifnull(max(`th`.`c_flower_output`),0)) + ifnull(max(`th`.`sugar_shake_output`),0)) + ifnull(max(`th`.`waste_output`),0)) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`micro_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)),(((((((((((((((((((((((((((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`tm`.`c_flower_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) + ifnull(max(`tm`.`trim_output`),0)) + ifnull(max(`tm`.`waste_output`),0)) + ifnull(max(`th`.`b_flower_output`),0)) + ifnull(max(`th`.`c_flower_output`),0)) + ifnull(max(`th`.`sugar_shake_output`),0)) + ifnull(max(`th`.`waste_output`),0)) + ifnull(max(`s`.`big_a_flower_output`),0)) + ifnull(max(`s`.`big_x_flower_output`),0)) + ifnull(max(`s`.`mids_a_flower_output`),0)) + ifnull(max(`s`.`mids_x_flower_output`),0)) + ifnull(max(`s`.`smalls_a_flower_output`),0)) + ifnull(max(`s`.`smalls_x_flower_output`),0)) + ifnull(max(`s`.`microsmalls_a_flower_output`),0)) + ifnull(max(`s`.`microsmalls_x_flower_output`),0)) + ifnull(max(`s`.`regs_a_flower_output`),0)) + ifnull(max(`s`.`regs_x_flower_output`),0)) + ifnull(max(`s`.`big_b_flower_output`),0)) + ifnull(max(`s`.`mids_b_flower_output`),0)) + ifnull(max(`s`.`smalls_b_flower_output`),0)) + ifnull(max(`s`.`microsmalls_b_flower_output`),0)) + ifnull(max(`s`.`regs_b_flower_output`),0)) + ifnull(max(`s`.`big_c_flower_output`),0)) + ifnull(max(`s`.`mids_c_flower_output`),0)) + ifnull(max(`s`.`smalls_c_flower_output`),0)) + ifnull(max(`s`.`microsmalls_c_flower_output`),0)) + ifnull(max(`s`.`regs_c_flower_output`),0)) + ifnull(max(`s`.`sugar_shake_output`),0)) + ifnull(max(`s`.`waste_output`),0)) + ifnull(max(`s`.`kief_output`),0))) AS `total`,if((max(`ps`.`core_strain`) = 0),round((((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`micro_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)) * 16) / nullif(`h`.`harvest_plant_count`,0)),3),round(((((((((((((((((ifnull(max(`s`.`big_a_flower_output`),0) + ifnull(max(`s`.`big_x_flower_output`),0)) + ifnull(max(`s`.`mids_a_flower_output`),0)) + ifnull(max(`s`.`mids_x_flower_output`),0)) + ifnull(max(`s`.`smalls_a_flower_output`),0)) + ifnull(max(`s`.`smalls_x_flower_output`),0)) + ifnull(max(`s`.`microsmalls_a_flower_output`),0)) + ifnull(max(`s`.`microsmalls_x_flower_output`),0)) + ifnull(max(`s`.`regs_a_flower_output`),0)) + ifnull(max(`s`.`regs_x_flower_output`),0)) + ifnull(max(`s`.`big_b_flower_output`),0)) + ifnull(max(`s`.`mids_b_flower_output`),0)) + ifnull(max(`s`.`smalls_b_flower_output`),0)) + ifnull(max(`s`.`microsmalls_b_flower_output`),0)) + ifnull(max(`s`.`regs_b_flower_output`),0)) * 16) / nullif(`h`.`harvest_plant_count`,0)),3)) AS `oz_plant_h`,if((max(`ps`.`core_strain`) = 0),round((((((((((((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`tm`.`c_flower_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) + ifnull(max(`tm`.`trim_output`),0)) + ifnull(max(`tm`.`waste_output`),0)) + ifnull(max(`th`.`b_flower_output`),0)) + ifnull(max(`th`.`c_flower_output`),0)) + ifnull(max(`th`.`sugar_shake_output`),0)) + ifnull(max(`th`.`waste_output`),0)) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`micro_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)) * 100) / nullif(max(`tm`.`input_quantity`),0)),2),round((((((((((((((((((((((((((((((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`tm`.`c_flower_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) + ifnull(max(`tm`.`trim_output`),0)) + ifnull(max(`tm`.`waste_output`),0)) + ifnull(max(`th`.`b_flower_output`),0)) + ifnull(max(`th`.`c_flower_output`),0)) + ifnull(max(`th`.`sugar_shake_output`),0)) + ifnull(max(`th`.`waste_output`),0)) + ifnull(max(`s`.`big_a_flower_output`),0)) + ifnull(max(`s`.`big_x_flower_output`),0)) + ifnull(max(`s`.`mids_a_flower_output`),0)) + ifnull(max(`s`.`mids_x_flower_output`),0)) + ifnull(max(`s`.`smalls_a_flower_output`),0)) + ifnull(max(`s`.`smalls_x_flower_output`),0)) + ifnull(max(`s`.`microsmalls_a_flower_output`),0)) + ifnull(max(`s`.`microsmalls_x_flower_output`),0)) + ifnull(max(`s`.`regs_a_flower_output`),0)) + ifnull(max(`s`.`regs_x_flower_output`),0)) + ifnull(max(`s`.`big_b_flower_output`),0)) + ifnull(max(`s`.`mids_b_flower_output`),0)) + ifnull(max(`s`.`smalls_b_flower_output`),0)) + ifnull(max(`s`.`microsmalls_b_flower_output`),0)) + ifnull(max(`s`.`regs_b_flower_output`),0)) + ifnull(max(`s`.`big_c_flower_output`),0)) + ifnull(max(`s`.`mids_c_flower_output`),0)) + ifnull(max(`s`.`smalls_c_flower_output`),0)) + ifnull(max(`s`.`microsmalls_c_flower_output`),0)) + ifnull(max(`s`.`regs_c_flower_output`),0)) + ifnull(max(`s`.`sugar_shake_output`),0)) + ifnull(max(`s`.`kief_output`),0)) + ifnull(max(`s`.`waste_output`),0)) * 100) / nullif(max(`tm`.`input_quantity`),0)),2)) AS `pct_completed` from ((((((`drying_prod_flat_all_group` `d` left join `bucking_prod_flat_all_group` `b` on((`b`.`harvesting_id` = `d`.`harvesting_id`))) left join `trimming_machine_prod_flat_group` `tm` on((`tm`.`harvesting_id` = `d`.`harvesting_id`))) left join `trimming_hand_prod_flat_group` `th` on((`th`.`harvesting_id` = `d`.`harvesting_id`))) left join `sorting_prod_flat_all_group` `s` on((`s`.`harvesting_id` = `d`.`harvesting_id`))) left join `cultivation`.`harvest_prod_view` `h` on((`d`.`harvesting_id` = `h`.`harvesting_id`))) left join `pacstone`.`plant_strain` `ps` on((`ps`.`id` = `h`.`strain_id`))) where ((`h`.`harvest_year` = 2022) and (`tm`.`batch_status` = 'Finished') and (`d`.`input_quantity` > 0)) group by `h`.`harvesting_id`,`h`.`harvest_type`,`h`.`harvest_id` order by `h`.`harvest_year` desc,`h`.`harvest_week` desc,`h`.`harvest_id`;

-- View: batch_production_harvest_flat
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `batch_production_harvest_flat` AS select max(`h`.`flowering_id`) AS `flowering_id`,`h`.`harvesting_id` AS `harvesting_id`,max(`h`.`flowering_id_name`) AS `flowering_batch`,`h`.`harvest_id` AS `harvest_batch`,max(`h`.`test_id`) AS `test_id`,if((max(`h`.`test_id`) is null),`h`.`harvest_id`,concat(`h`.`harvest_id`,'-',max(`h`.`test_id`))) AS `harvest_batch_test_id`,max(`h`.`property_id`) AS `property_id`,max(`h`.`license_id`) AS `license`,max(`h`.`strain_id`) AS `strain_id`,max(`ps`.`name`) AS `strain_name`,if((max(`ps`.`core_strain`) = 1),'YES','NO') AS `core_strain`,max(`h`.`harvest_date`) AS `harvest_date`,max(`h`.`harvest_week`) AS `harvest_week`,quarter(max(`h`.`harvest_date`)) AS `harvest_quarter`,max(`h`.`harvest_year`) AS `harvest_year`,if(((0 <> (`h`.`harvest_type` = 'Manicure')) or (0 <> (`h`.`harvest_type` = 'Fresh Frozen'))),NULL,max(`h`.`flower_plant_count`)) AS `planted_count`,if(((0 <> (`h`.`harvest_type` = 'Manicure')) or (0 <> (`h`.`harvest_type` = 'Fresh Frozen'))),NULL,`h`.`harvest_plant_count`) AS `harvested_count`,min(`d`.`start_date`) AS `input_date_drying`,max(`d`.`input_quantity`) AS `input_drying`,max(`d`.`output_quantity`) AS `output_drying`,round((100 - (max((`d`.`output_quantity` * 100)) / max(`d`.`input_quantity`))),3) AS `drying_loss_pct`,max(`d`.`batch_status`) AS `status_drying`,min(`b`.`start_date`) AS `input_date_bucking`,max(`b`.`input_quantity`) AS `input_bucking`,max(`b`.`output_quantity`) AS `output_bucking`,round((100 - (max((`b`.`output_quantity` * 100)) / max(`b`.`input_quantity`))),3) AS `bucking_loss_pct`,max(`b`.`batch_status`) AS `status_bucking`,min(`tm`.`start_date`) AS `input_date_tzero`,max(`tm`.`input_quantity`) AS `input_tzero`,max(`tm`.`output_quantity`) AS `output_tzero`,max(`tm`.`big_a_flower_output`) AS `tzero_big_a`,max(`tm`.`medium_a_flower_output`) AS `tzero_mids_a`,max(`tm`.`reg_a_flower_output`) AS `tzero_reg_a`,max(`tm`.`sml_a_flower_output`) AS `tzero_small_a`,max(`tm`.`micro_a_flower_output`) AS `tzero_micros_a`,max(`tm`.`b_flower_output`) AS `tzero_b`,max(`tm`.`c_flower_output`) AS `tzero_c`,max(`tm`.`retrim_a_output`) AS `a_for_retrim`,max(`tm`.`retrim_b_output`) AS `b_for_retrim`,max(`tm`.`retrim_c_output`) AS `c_for_retrim`,(((((((ifnull(max(`tm`.`micro_a_flower_output`),0) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`b_flower_output`),0)) + ifnull(max(`tm`.`retrim_a_output`),0)) + ifnull(max(`tm`.`retrim_b_output`),0)) AS `tzero_ab`,((((((((ifnull(max(`tm`.`micro_a_flower_output`),0) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`b_flower_output`),0)) + ifnull(max(`tm`.`retrim_a_output`),0)) + ifnull(max(`tm`.`retrim_b_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) AS `tzero_ab_shake`,max(`tm`.`total_flower_output_quantity`) AS `tzero_abc`,(((((((((ifnull(max(`tm`.`micro_a_flower_output`),0) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`b_flower_output`),0)) + ifnull(max(`tm`.`retrim_a_output`),0)) + ifnull(max(`tm`.`retrim_b_output`),0)) + ifnull(max(`tm`.`c_flower_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) AS `tzero_abc_shake`,max(`tm`.`trim_output`) AS `tzero_trim`,max(`tm`.`sugar_shake_output`) AS `tzero_shake`,max(`tm`.`waste_output`) AS `tzero_waste`,round((100 - ((max(`tm`.`output_quantity`) * 100) / max(`tm`.`input_quantity`))),3) AS `tzero_loss_pct`,max(`tm`.`batch_status`) AS `status_tzero`,min(`th`.`start_date`) AS `input_date_retrim`,max(`th`.`input_quantity`) AS `input_retrim`,max(`th`.`output_quantity`) AS `output_retrim`,max(`th`.`a_flower_output`) AS `retrim_a`,max(`th`.`b_flower_output`) AS `retrim_b`,max(`th`.`c_flower_output`) AS `retrim_c`,max(`th`.`sugar_shake_output`) AS `retrim_shake`,max(`th`.`waste_output`) AS `retrim_waste`,round((100 - ((max(`th`.`output_quantity`) * 100) / nullif(max(`th`.`input_quantity`),0))),3) AS `retrim_loss_pct`,max(`th`.`batch_status`) AS `status_retrim`,min(`s`.`start_date`) AS `input_date_sorter`,max(`s`.`input_quantity`) AS `sorter_input`,max(`s`.`output_quantity`) AS `sorter_output`,max(`s`.`big_a_flower_output`) AS `sorter_big_a`,max(`s`.`big_b_flower_output`) AS `sorter_big_b`,max(`s`.`big_c_flower_output`) AS `sorter_big_c`,max(`s`.`big_x_flower_output`) AS `sorter_big_x`,max(`s`.`mids_a_flower_output`) AS `sorter_mids_a`,max(`s`.`mids_b_flower_output`) AS `sorter_mids_b`,max(`s`.`mids_c_flower_output`) AS `sorter_mids_c`,max(`s`.`mids_x_flower_output`) AS `sorter_mids_x`,max(`s`.`smalls_a_flower_output`) AS `sorter_smalls_a`,max(`s`.`smalls_b_flower_output`) AS `sorter_smalls_b`,max(`s`.`smalls_c_flower_output`) AS `sorter_smalls_c`,max(`s`.`smalls_x_flower_output`) AS `sorter_smalls_x`,max(`s`.`microsmalls_a_flower_output`) AS `sorter_micros_a`,max(`s`.`microsmalls_b_flower_output`) AS `sorter_micros_b`,max(`s`.`microsmalls_c_flower_output`) AS `sorter_micros_c`,max(`s`.`microsmalls_x_flower_output`) AS `sorter_micros_x`,max(`s`.`regs_a_flower_output`) AS `sorter_regs_a`,max(`s`.`regs_b_flower_output`) AS `sorter_regs_b`,max(`s`.`regs_c_flower_output`) AS `sorter_regs_c`,max(`s`.`regs_x_flower_output`) AS `sorter_regs_x`,max(`s`.`total_flower_output_quantity`) AS `sorter_flower`,max(`s`.`trim_output`) AS `sorter_trim`,max(`s`.`sugar_shake_output`) AS `sorter_shake`,max(`s`.`kief_output`) AS `sorter_kief`,max(`s`.`waste_output`) AS `sorter_waste`,round((100 - ((max(`s`.`output_quantity`) * 100) / nullif(max(`s`.`input_quantity`),0))),3) AS `sorter_loss_pct`,max(`s`.`batch_status`) AS `sorter_status`,if((max(`ps`.`core_strain`) = 0),max(`tm`.`big_a_flower_output`),(ifnull(max(`s`.`big_a_flower_output`),0) + ifnull(max(`s`.`big_x_flower_output`),0))) AS `total_a_bigs`,if((max(`ps`.`core_strain`) = 0),max(`tm`.`medium_a_flower_output`),(ifnull(max(`s`.`mids_a_flower_output`),0) + ifnull(max(`s`.`mids_x_flower_output`),0))) AS `total_a_mids`,if((max(`ps`.`core_strain`) = 0),max(`tm`.`sml_a_flower_output`),(ifnull(max(`s`.`smalls_a_flower_output`),0) + ifnull(max(`s`.`smalls_x_flower_output`),0))) AS `total_a_smalls`,if((max(`ps`.`core_strain`) = 0),max(`tm`.`micro_a_flower_output`),(ifnull(max(`s`.`microsmalls_a_flower_output`),0) + ifnull(max(`s`.`microsmalls_x_flower_output`),0))) AS `total_a_micros`,if((max(`ps`.`core_strain`) = 0),max(`tm`.`reg_a_flower_output`),(ifnull(max(`s`.`regs_a_flower_output`),0) + ifnull(max(`s`.`regs_x_flower_output`),0))) AS `total_a_regs`,((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`th`.`b_flower_output`),0)) + ifnull(max(`s`.`big_b_flower_output`),0)) + ifnull(max(`s`.`mids_b_flower_output`),0)) + ifnull(max(`s`.`smalls_b_flower_output`),0)) + ifnull(max(`s`.`microsmalls_b_flower_output`),0)) + ifnull(max(`s`.`regs_b_flower_output`),0)) AS `total_b`,((((((ifnull(max(`tm`.`c_flower_output`),0) + ifnull(max(`th`.`c_flower_output`),0)) + ifnull(max(`s`.`big_c_flower_output`),0)) + ifnull(max(`s`.`mids_c_flower_output`),0)) + ifnull(max(`s`.`smalls_c_flower_output`),0)) + ifnull(max(`s`.`microsmalls_c_flower_output`),0)) + ifnull(max(`s`.`regs_c_flower_output`),0)) AS `total_c`,((ifnull(max(`tm`.`sugar_shake_output`),0) + ifnull(max(`th`.`sugar_shake_output`),0)) + ifnull(max(`s`.`sugar_shake_output`),0)) AS `total_shake`,max(`tm`.`trim_output`) AS `total_trim`,max(`s`.`kief_output`) AS `total_kief`,((ifnull(max(`tm`.`waste_output`),0) + ifnull(max(`th`.`waste_output`),0)) + ifnull(max(`s`.`waste_output`),0)) AS `total_waste`,if((max(`ps`.`core_strain`) = 0),(((((((((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`tm`.`c_flower_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) + ifnull(max(`tm`.`trim_output`),0)) + ifnull(max(`tm`.`waste_output`),0)) + ifnull(max(`th`.`b_flower_output`),0)) + ifnull(max(`th`.`c_flower_output`),0)) + ifnull(max(`th`.`sugar_shake_output`),0)) + ifnull(max(`th`.`waste_output`),0)) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`micro_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)),(((((((((((((((((((((((((((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`tm`.`c_flower_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) + ifnull(max(`tm`.`trim_output`),0)) + ifnull(max(`tm`.`waste_output`),0)) + ifnull(max(`th`.`b_flower_output`),0)) + ifnull(max(`th`.`c_flower_output`),0)) + ifnull(max(`th`.`sugar_shake_output`),0)) + ifnull(max(`th`.`waste_output`),0)) + ifnull(max(`s`.`big_a_flower_output`),0)) + ifnull(max(`s`.`big_x_flower_output`),0)) + ifnull(max(`s`.`mids_a_flower_output`),0)) + ifnull(max(`s`.`mids_x_flower_output`),0)) + ifnull(max(`s`.`smalls_a_flower_output`),0)) + ifnull(max(`s`.`smalls_x_flower_output`),0)) + ifnull(max(`s`.`microsmalls_a_flower_output`),0)) + ifnull(max(`s`.`microsmalls_x_flower_output`),0)) + ifnull(max(`s`.`regs_a_flower_output`),0)) + ifnull(max(`s`.`regs_x_flower_output`),0)) + ifnull(max(`s`.`big_b_flower_output`),0)) + ifnull(max(`s`.`mids_b_flower_output`),0)) + ifnull(max(`s`.`smalls_b_flower_output`),0)) + ifnull(max(`s`.`microsmalls_b_flower_output`),0)) + ifnull(max(`s`.`regs_b_flower_output`),0)) + ifnull(max(`s`.`big_c_flower_output`),0)) + ifnull(max(`s`.`mids_c_flower_output`),0)) + ifnull(max(`s`.`smalls_c_flower_output`),0)) + ifnull(max(`s`.`microsmalls_c_flower_output`),0)) + ifnull(max(`s`.`regs_c_flower_output`),0)) + ifnull(max(`s`.`sugar_shake_output`),0)) + ifnull(max(`s`.`waste_output`),0)) + ifnull(max(`s`.`kief_output`),0))) AS `total`,if((max(`ps`.`core_strain`) = 0),round((((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`micro_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)) * 16) / nullif(`h`.`harvest_plant_count`,0)),3),round(((((((((((((((((ifnull(max(`s`.`big_a_flower_output`),0) + ifnull(max(`s`.`big_x_flower_output`),0)) + ifnull(max(`s`.`mids_a_flower_output`),0)) + ifnull(max(`s`.`mids_x_flower_output`),0)) + ifnull(max(`s`.`smalls_a_flower_output`),0)) + ifnull(max(`s`.`smalls_x_flower_output`),0)) + ifnull(max(`s`.`microsmalls_a_flower_output`),0)) + ifnull(max(`s`.`microsmalls_x_flower_output`),0)) + ifnull(max(`s`.`regs_a_flower_output`),0)) + ifnull(max(`s`.`regs_x_flower_output`),0)) + ifnull(max(`s`.`big_b_flower_output`),0)) + ifnull(max(`s`.`mids_b_flower_output`),0)) + ifnull(max(`s`.`smalls_b_flower_output`),0)) + ifnull(max(`s`.`microsmalls_b_flower_output`),0)) + ifnull(max(`s`.`regs_b_flower_output`),0)) * 16) / nullif(`h`.`harvest_plant_count`,0)),3)) AS `oz_plant_h`,if((max(`ps`.`core_strain`) = 0),round((((((((((((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`tm`.`c_flower_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) + ifnull(max(`tm`.`trim_output`),0)) + ifnull(max(`tm`.`waste_output`),0)) + ifnull(max(`th`.`b_flower_output`),0)) + ifnull(max(`th`.`c_flower_output`),0)) + ifnull(max(`th`.`sugar_shake_output`),0)) + ifnull(max(`th`.`waste_output`),0)) + ifnull(max(`tm`.`big_a_flower_output`),0)) + ifnull(max(`tm`.`medium_a_flower_output`),0)) + ifnull(max(`tm`.`sml_a_flower_output`),0)) + ifnull(max(`tm`.`micro_a_flower_output`),0)) + ifnull(max(`tm`.`reg_a_flower_output`),0)) * 100) / nullif(max(`tm`.`input_quantity`),0)),2),round((((((((((((((((((((((((((((((((((ifnull(max(`tm`.`b_flower_output`),0) + ifnull(max(`tm`.`c_flower_output`),0)) + ifnull(max(`tm`.`sugar_shake_output`),0)) + ifnull(max(`tm`.`trim_output`),0)) + ifnull(max(`tm`.`waste_output`),0)) + ifnull(max(`th`.`b_flower_output`),0)) + ifnull(max(`th`.`c_flower_output`),0)) + ifnull(max(`th`.`sugar_shake_output`),0)) + ifnull(max(`th`.`waste_output`),0)) + ifnull(max(`s`.`big_a_flower_output`),0)) + ifnull(max(`s`.`big_x_flower_output`),0)) + ifnull(max(`s`.`mids_a_flower_output`),0)) + ifnull(max(`s`.`mids_x_flower_output`),0)) + ifnull(max(`s`.`smalls_a_flower_output`),0)) + ifnull(max(`s`.`smalls_x_flower_output`),0)) + ifnull(max(`s`.`microsmalls_a_flower_output`),0)) + ifnull(max(`s`.`microsmalls_x_flower_output`),0)) + ifnull(max(`s`.`regs_a_flower_output`),0)) + ifnull(max(`s`.`regs_x_flower_output`),0)) + ifnull(max(`s`.`big_b_flower_output`),0)) + ifnull(max(`s`.`mids_b_flower_output`),0)) + ifnull(max(`s`.`smalls_b_flower_output`),0)) + ifnull(max(`s`.`microsmalls_b_flower_output`),0)) + ifnull(max(`s`.`regs_b_flower_output`),0)) + ifnull(max(`s`.`big_c_flower_output`),0)) + ifnull(max(`s`.`mids_c_flower_output`),0)) + ifnull(max(`s`.`smalls_c_flower_output`),0)) + ifnull(max(`s`.`microsmalls_c_flower_output`),0)) + ifnull(max(`s`.`regs_c_flower_output`),0)) + ifnull(max(`s`.`sugar_shake_output`),0)) + ifnull(max(`s`.`kief_output`),0)) + ifnull(max(`s`.`waste_output`),0)) * 100) / nullif(max(`tm`.`input_quantity`),0)),2)) AS `pct_completed` from ((((((`drying_prod_flat_all_group` `d` left join `bucking_prod_flat_all_group` `b` on((`b`.`harvesting_id` = `d`.`harvesting_id`))) left join `trimming_machine_prod_flat_group` `tm` on((`tm`.`harvesting_id` = `d`.`harvesting_id`))) left join `trimming_hand_prod_flat_group` `th` on((`th`.`harvesting_id` = `d`.`harvesting_id`))) left join `sorting_prod_flat_all_group` `s` on((`s`.`harvesting_id` = `d`.`harvesting_id`))) left join `cultivation`.`harvest_prod_view` `h` on((`d`.`harvesting_id` = `h`.`harvesting_id`))) left join `pacstone`.`plant_strain` `ps` on((`ps`.`id` = `h`.`strain_id`))) where ((`h`.`harvest_year` > 2022) and (`tm`.`batch_status` = 'Finished') and (`d`.`input_quantity` > 0)) group by `h`.`harvesting_id`,`h`.`harvest_type`,`h`.`harvest_id` order by `h`.`harvest_year` desc,`h`.`harvest_week` desc,`h`.`harvest_id`;

-- View: bucking_active
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `bucking_active` AS select `bb`.`metrc_tag` AS `metrc_tag`,`bb`.`date` AS `date`,`bb`.`harvesting_id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`cat`.`name` AS `category`,`ct`.`name` AS `category_type`,max(`bb`.`quantity`) AS `input_quantity`,sum(`bd`.`quantity`) AS `output_quantity`,sum((case when (`bd`.`status` = 'Active') then `bd`.`quantity` else 0 end)) AS `active_output`,sum((case when (`bd`.`status` = 'Inactive') then `bd`.`quantity` else 0 end)) AS `inactive_output`,(max(`bb`.`quantity`) - sum((case when (`bd`.`status` = 'Inactive') then `bd`.`quantity` else 0 end))) AS `active_quantity`,count(`bd`.`quantity`) AS `bin_count`,`bb`.`action` AS `process_action` from (((((`bucked_details` `bd` left join `bucked_batch` `bb` on((`bb`.`id` = `bd`.`bucked_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `bb`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `bb`.`category_type_id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) where ((`bb`.`status` = 'Active') and ((`bd`.`status` in ('Active','Inactive')) or (`bd`.`id` is null))) group by `bb`.`harvesting_id`,`bb`.`metrc_tag`,`h`.`test_id`,`bb`.`action`,`h`.`harvest_id`,`bb`.`date`,`h`.`property_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`cat`.`name`,`ct`.`name`;

-- View: bucking_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `bucking_batch_view` AS select `h`.`flowering_id` AS `Flowering ID`,`bb`.`harvesting_id` AS `Harvesting ID`,`bb`.`batch_id` AS `Processing ID`,`fl`.`flowering_id` AS `FID`,`h`.`harvest_id` AS `HID`,`fl`.`date` AS `Date of Flip to Flower`,`h`.`date` AS `Harvest Date`,week(`h`.`date`,0) AS `Harvest Week`,year(`h`.`date`) AS `Harvest Year`,`h`.`test_id` AS `Test ID`,`h`.`harvest_type` AS `Harvest Type`,max(`strain`.`strain_code`) AS `Strain ID`,max(`strain`.`name`) AS `Plant Strain`,max(`bb`.`source_metrc_tag`) AS `Processing Batch METRC`,max(`bb`.`processing_batch_source_tag`) AS `Source METRC`,max(`bb`.`id`) AS `Bucking Batch ID`,max(`bb`.`metrc_tag`) AS `METRC Tag`,`fl`.`plant_count` AS `Crop Plant Count`,`h`.`plant_count_harvested` AS `Harvested Plant Count`,max(`bdsum`.`bin_count`) AS `Bin Count Recieved`,`h`.`wet` AS `Wet Weight lbs`,sum(`bb`.`quantity`) AS `Dry Plant Weight lbs`,sum(`bdsum`.`total_quantity`) AS `Bucked Flower lbs`,(`h`.`wet` - sum(`bb`.`quantity`)) AS `Moisture Loss lbs`,(1 - (sum(`bdsum`.`total_quantity`) / `h`.`wet`)) AS `Moisture Loss %`,(sum(`bb`.`quantity`) - sum(`bdsum`.`total_quantity`)) AS `Bucked Waste lbs`,((sum(`bb`.`quantity`) - sum(`bdsum`.`total_quantity`)) / sum(`bb`.`quantity`)) AS `Waste Loss %`,sum(`bdsum`.`bin_count`) AS `Bucked Flower Bins`,max(`pl`.`process_start`) AS `Bucking Start`,max(`pl`.`process_stop`) AS `Bucking Stop`,timediff(max(`pl`.`process_stop`),max(`pl`.`process_start`)) AS `Bucking Duration`,max(`bb`.`status`) AS `Proces Status`,max(`pl`.`id`) AS `process_log`,max(`bb`.`status`) AS `Record Status`,max(`bdsum`.`process_queue`) AS `Process Queue`,max(`bdsum`.`process_queue_type`) AS `Process Queue type`,max(`bb`.`note`) AS `Notes`,max(`bb`.`created_by`) AS `Created By`,max(`bb`.`created_on`) AS `Created On`,week(`bb`.`created_on`,0) AS `Week`,year(`bb`.`created_on`) AS `Year`,max(`bb`.`modified_by`) AS `Modified By`,max(`bb`.`modified_by`) AS `Modified On` from (((((`bucked_batch` `bb` left join `bucking_detail_view` `bdsum` on((`bb`.`id` = `bdsum`.`bucked_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `cultivation`.`flowering` `fl` on((`fl`.`id` = `h`.`flowering_id`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `bb`.`strain_id`))) left join `process_log` `pl` on((`bb`.`source_id` = `pl`.`source_id`))) where (`h`.`year_num` > 2020) group by `bb`.`id` order by `h`.`date` desc;

-- View: bucking_crop_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `bucking_crop_batch_view` AS select `bb`.`Flowering ID` AS `Flowering ID`,max(`bb`.`Harvesting ID`) AS `Harvesting ID`,max(`bb`.`Harvesting ID`) AS `Processing ID`,max(`bb`.`FID`) AS `FID`,min(`bb`.`HID`) AS `HID`,max(`bb`.`Date of Flip to Flower`) AS `Flower Flip Date`,min(`bb`.`Harvest Date`) AS `Harvest Date`,count(`bb`.`Test ID`) AS `Test Record Count`,max(`bb`.`Crop Plant Count`) AS `Crop Plant Count`,count(`bb`.`Harvesting ID`) AS `Harvest Record Count`,max(`bb`.`Harvested Plant Count`) AS `Harvested Plant Count`,max(`bb`.`Strain ID`) AS `Strain ID`,max(`bb`.`Plant Strain`) AS `Plant Strain`,max(`bb`.`Wet Weight lbs`) AS `Wet Weight lbs`,max(`bb`.`Moisture Loss lbs`) AS `Moisture Loss lbs`,avg(`bb`.`Moisture Loss %`) AS `Moisture loss %`,max(`bb`.`Dry Plant Weight lbs`) AS `Dry Plant Weight lbs`,max(`bb`.`Bucked Flower lbs`) AS `Bucked Flower lbs`,sum(`bb`.`Bucked Waste lbs`) AS `Bucked Waste lbs`,max(`bb`.`Waste Loss %`) AS `Bucked Waste %`,(sum(`bb`.`Bucking Duration`) / sum(`bb`.`Bucked Flower Bins`)) AS `Bucking Duration`,count(`bb`.`Bucked Flower Bins`) AS `Bucking Records`,count(`bb`.`Bucked Flower Bins`) AS `Batches Complete`,if((count(`bb`.`Bucked Flower Bins`) = count(if((`bbo`.`action` = 'Finished'),`bbo`.`id`,NULL))),'Complete','In Progress') AS `Crop Bucking Status` from (`bucking_batch_view` `bb` left join `bucked_batch` `bbo` on((`bb`.`Harvesting ID` = `bbo`.`harvesting_id`))) group by `bb`.`Flowering ID`;

-- View: bucking_data
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `bucking_data` AS select `bb`.`metrc_tag` AS `metrc_tag`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,`strain`.`strain_code` AS `strain_code`,sum(`bd`.`quantity`) AS `quantity`,count(`bd`.`quantity`) AS `bin_count`,`bb`.`action` AS `process_action`,`bb`.`date` AS `date_started`,if((`bb`.`action` = 'Finished'),cast(`bb`.`modified_on` as date),NULL) AS `date_finished` from ((((((`bucked_batch` `bb` left join `bucked_details` `bd` on((`bb`.`id` = `bd`.`bucked_batch_id`))) left join `cultivation`.`harvesting_ref` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `bb`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `bb`.`category_type_id`))) left join `pacstone`.`uom` on((`pacstone`.`uom`.`id` = `bb`.`uom_id`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `bb`.`strain_id`))) where (`h`.`year_num` > 2020) group by `bb`.`harvesting_id`,`bb`.`metrc_tag`,`bb`.`processing_batch_source_tag`,`strain`.`name`,`strain`.`strain_code`,`bb`.`category_id`,`bb`.`category_type_id`,`bb`.`uom_id`,`bb`.`quantity`,`bb`.`action`,`bb`.`date`,`bb`.`modified_on` order by `bb`.`modified_on` desc;

-- View: bucking_detail_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `bucking_detail_view` AS select `bd`.`bucked_batch_id` AS `bucked_batch_id`,sum(`bd`.`quantity`) AS `total_quantity`,count(`bd`.`quantity`) AS `bin_count`,if((count(`bd`.`quantity`) = count(if((`bb`.`action` = 'Finished'),`bb`.`id`,NULL))),'Complete','In Progress') AS `process_status`,count(if((`bb`.`action` = 'Finished'),1,NULL)) AS `batches_complete`,max(`bd`.`process_queue_id`) AS `process_queue`,max(`bd`.`process_queue_type`) AS `process_queue_type` from (`bucked_details` `bd` left join `bucked_batch` `bb` on((`bb`.`id` = `bd`.`bucked_batch_id`))) group by `bd`.`bucked_batch_id`;

-- View: bucking_harvest_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `bucking_harvest_batch_view` AS select `bb`.`Flowering ID` AS `Flowering ID`,`bb`.`Harvesting ID` AS `Harvesting ID`,`bb`.`Harvesting ID` AS `Processing ID`,`bb`.`HID` AS `HID`,`bb`.`FID` AS `FID`,`bb`.`Date of Flip to Flower` AS `Flower Flip Date`,`bb`.`Harvest Date` AS `Harvest Date`,`bb`.`Test ID` AS `Test ID`,`bb`.`Crop Plant Count` AS `Crop Plant Count`,`bb`.`Harvested Plant Count` AS `Harvested Plant Count`,max(`bb`.`Strain ID`) AS `Strain ID`,max(`bb`.`Plant Strain`) AS `Plant Strain`,max(`bb`.`Wet Weight lbs`) AS `Wet Weight lbs`,max(`bb`.`Moisture Loss lbs`) AS `Moisture Loss lbs`,avg(`bb`.`Moisture Loss %`) AS `Moisture loss %`,max(`bb`.`Dry Plant Weight lbs`) AS `Dry Plant Weight lbs`,max(`bb`.`Bucked Flower lbs`) AS `Bucked Flower lbs`,sum(`bb`.`Bucked Waste lbs`) AS `Bucked Waste lbs`,max(`bb`.`Waste Loss %`) AS `Bucked Waste %`,(sum(`bb`.`Bucking Duration`) / sum(`bb`.`Bucked Flower Bins`)) AS `Bucking Duration`,count(`bb`.`Bucked Flower Bins`) AS `Bucking Records`,count(`bb`.`Bucked Flower Bins`) AS `Batches Complete`,if((count(`bb`.`Bucked Flower Bins`) = count(if((`bbo`.`action` = 'Finished'),`bbo`.`id`,NULL))),'Complete','In Progress') AS `Crop Bucking Status` from (`bucking_batch_view` `bb` left join `bucked_batch` `bbo` on((`bb`.`Harvesting ID` = `bbo`.`harvesting_id`))) group by `bb`.`Harvesting ID`;

-- View: bucking_prod_flat
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `bucking_prod_flat` AS select max(`bd`.`flowering_id`) AS `flowering_id`,min(`bd`.`start_date`) AS `start_date`,sum(`bd`.`input_quantity`) AS `input_quantity`,sum(`bd`.`output_quantity`) AS `output_quantity`,max(`bd`.`batch_status`) AS `batch_status` from `bucking_prod_flat_all` `bd` group by `bd`.`flowering_id`;

-- View: bucking_prod_flat_all
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `bucking_prod_flat_all` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`bb`.`metrc_tag` AS `metrc_tag`,min(`bb`.`date`) AS `start_date`,(select sum(`bb_sub`.`quantity`) from `bucked_batch` `bb_sub` where (`bb_sub`.`metrc_tag` = `bb`.`metrc_tag`)) AS `input_quantity`,sum(`bd`.`quantity`) AS `output_quantity`,if((`bb`.`action` = 'Stopped'),'In Progress',`bb`.`action`) AS `batch_status` from ((`bucked_details` `bd` left join `bucked_batch` `bb` on((`bb`.`id` = `bd`.`bucked_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) where (`h`.`year_num` > 2021) group by `h`.`flowering_id`,`h`.`id`,`bb`.`metrc_tag`,`h`.`harvest_id`,`bb`.`action`;

-- View: bucking_prod_flat_all_group
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `bucking_prod_flat_all_group` AS select `td`.`flowering_id` AS `flowering_id`,`td`.`harvesting_id` AS `harvesting_id`,`td`.`harvest_id` AS `harvest_id`,min(`td`.`start_date`) AS `start_date`,sum(`td`.`input_quantity`) AS `input_quantity`,sum(`td`.`output_quantity`) AS `output_quantity`,max(`td`.`batch_status`) AS `batch_status` from `bucking_prod_flat_all` `td` group by `td`.`flowering_id`,`td`.`harvesting_id`,`td`.`harvest_id`;

-- View: bucking_prod_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `bucking_prod_view` AS select `h`.`flowering_id` AS `flowering_id`,`bb`.`harvesting_id` AS `harvesting_id`,`bb`.`metrc_tag` AS `metrc_tag`,'Bucking' AS `process`,`bb`.`id` AS `batch_id`,`bb`.`date` AS `date`,if((`bb`.`action` = 'Stopped'),'In Progress',`bb`.`action`) AS `batch_status`,`f`.`flowering_id` AS `flowering_id_name`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,NULL AS `flower_plant_count`,NULL AS `harvest_plant_count`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`cat`.`name` AS `category`,`ct`.`name` AS `category_type`,NULL AS `product_size`,NULL AS `product_grade`,max(`bb`.`quantity`) AS `input_quantity`,sum(`bd`.`quantity`) AS `output_quantity`,`cate`.`name` AS `output_category`,`cty`.`name` AS `output_category_type` from ((((((((`bucked_batch` `bb` left join `bucked_details` `bd` on((`bb`.`id` = `bd`.`bucked_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `bb`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `bb`.`category_type_id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) left join `cultivation`.`flowering` `f` on((`f`.`id` = `h`.`flowering_id`))) left join `product_sku`.`category` `cate` on((`cate`.`id` = `bd`.`category_id`))) left join `product_sku`.`category_type` `cty` on((`cty`.`id` = `bd`.`category_type_id`))) group by `bb`.`harvesting_id`,`bb`.`metrc_tag`,`h`.`test_id`,`bb`.`action`,`h`.`harvest_id`,`bb`.`date`,`h`.`property_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`cat`.`name`,`ct`.`name`,`bb`.`id`,`h`.`flowering_id`,`f`.`flowering_id`,`cate`.`name`,`cty`.`name` order by `bb`.`date` desc,`bb`.`action`;

-- View: bucking_ref
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `bucking_ref` AS select `bb`.`metrc_tag` AS `metrc_tag`,`bb`.`harvesting_id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`strain`.`strain_code` AS `strain_code`,sum(`bd`.`quantity`) AS `quantity`,count(`bd`.`quantity`) AS `bin_count`,`bb`.`action` AS `process_action`,if((`bb`.`action` = 'Finished'),cast(`bb`.`modified_on` as date),NULL) AS `date_finished` from ((((((`bucked_batch` `bb` left join `bucked_details` `bd` on((`bb`.`id` = `bd`.`bucked_batch_id`))) left join `cultivation`.`harvesting_ref` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `bb`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `bb`.`category_type_id`))) left join `pacstone`.`uom` on((`pacstone`.`uom`.`id` = `bb`.`uom_id`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `bb`.`strain_id`))) where (`h`.`year_num` > 2020) group by `bb`.`harvesting_id`,`bb`.`metrc_tag`,`bb`.`processing_batch_source_tag`,`strain`.`name`,`strain`.`strain_code`,`bb`.`category_id`,`bb`.`category_type_id`,`bb`.`uom_id`,`bb`.`quantity`,`bb`.`action`,`bb`.`modified_on` order by `bb`.`modified_on` desc;

-- View: drying_active
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `drying_active` AS select `bb`.`metrc_tag` AS `metrc_tag`,`bb`.`date` AS `date`,`bb`.`harvesting_id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`cat`.`name` AS `category`,`ct`.`name` AS `category_type`,max(`bb`.`quantity`) AS `input_quantity`,sum(`bd`.`quantity`) AS `output_quantity`,sum((case when (`bd`.`status` = 'Active') then `bd`.`quantity` else 0 end)) AS `active_output`,sum((case when (`bd`.`status` = 'Inactive') then `bd`.`quantity` else 0 end)) AS `inactive_output`,(max(`bb`.`quantity`) - sum((case when (`bd`.`status` = 'Inactive') then `bd`.`quantity` else 0 end))) AS `active_quantity`,count(`bd`.`quantity`) AS `bin_count`,`bb`.`action` AS `process_action` from (((((`dry_batch` `bb` left join `dry_details` `bd` on((`bb`.`id` = `bd`.`dry_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `bb`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `bb`.`category_type_id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) where ((`bb`.`status` = 'Active') and ((`bd`.`status` in ('Active','Inactive')) or (`bd`.`id` is null))) group by `bb`.`harvesting_id`,`bb`.`metrc_tag`,`h`.`test_id`,`bb`.`action`,`h`.`harvest_id`,`bb`.`date`,`h`.`property_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`cat`.`name`,`ct`.`name`;

-- View: drying_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `drying_batch_view` AS select `h`.`flowering_id` AS `Flowering ID`,`db`.`harvesting_id` AS `Harvesting ID`,`db`.`batch_id` AS `Processing ID`,`fl`.`flowering_id` AS `FID`,`h`.`harvest_id` AS `HID`,`fl`.`date` AS `Date of Flip to Flower`,`h`.`date` AS `Harvest Date`,week(`h`.`date`,0) AS `Harvest Week`,year(`h`.`date`) AS `Harvest Year`,`h`.`test_id` AS `Test ID`,`h`.`harvest_type` AS `Harvest Type`,`fl`.`plant_count` AS `Crop Plant Count`,`h`.`plant_count_harvested` AS `Harvested Plant Count`,max(`strain`.`strain_code`) AS `Strain ID`,max(`strain`.`name`) AS `Plant Strain`,max(`db`.`source_metrc_tag`) AS `Processing Batch METRC`,max(`db`.`processing_batch_source_tag`) AS `Source METRC`,max(`db`.`id`) AS `Dry Batch ID`,`db`.`metrc_tag` AS `METRC Tag`,`db`.`quantity` AS `Wet Weight lbs`,max(`h`.`bin_quantity`) AS `Bin Count Recieved`,sum(`ddsum`.`total_quantity`) AS `Dry Weight lbs`,(`db`.`quantity` - sum(`ddsum`.`total_quantity`)) AS `Moisture Loss lbs`,((max(`db`.`quantity`) - sum(`ddsum`.`total_quantity`)) / max(`db`.`quantity`)) AS `Moisture Loss %`,sum(`ddsum`.`output_bin_count`) AS `Dry Plant Bins`,max(`pl`.`process_start`) AS `Drying Start`,max(`pl`.`process_stop`) AS `Drying Stop`,timediff(max(`pl`.`process_stop`),max(`pl`.`process_start`)) AS `Drying Duration`,max(`ddsum`.`process_status`) AS `Process Status`,max(`pl`.`action`) AS `Process Log`,max(`db`.`status`) AS `Record Status`,max(`ddsum`.`process_queue`) AS `Process Queue`,max(`ddsum`.`process_queue_type`) AS `Process type`,max(`db`.`note`) AS `Notes`,max(`db`.`created_by`) AS `Created By`,max(`db`.`created_on`) AS `Created On`,week(max(`db`.`created_on`),0) AS `Drying Started Week`,year(max(`db`.`created_on`)) AS `Drying Started Year`,max(`db`.`modified_by`) AS `Modified By`,max(`db`.`modified_by`) AS `Modified On` from (((((`dry_batch` `db` left join `drying_detail_view` `ddsum` on((`db`.`id` = `ddsum`.`dry_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `db`.`harvesting_id`))) left join `cultivation`.`flowering` `fl` on((`fl`.`id` = `h`.`flowering_id`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `db`.`strain_id`))) left join `process_log` `pl` on((`pl`.`source_id` = `db`.`source_id`))) where (`h`.`year_num` > 2022) group by `db`.`id` order by `h`.`date` desc;

-- View: drying_crop_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `drying_crop_batch_view` AS select `db`.`Flowering ID` AS `Flowering ID`,max(`db`.`Harvesting ID`) AS `Harvesting ID`,max(`db`.`Processing ID`) AS `Processing ID`,min(`db`.`HID`) AS `HID`,min(`db`.`FID`) AS `FID`,count(`db`.`Test ID`) AS `Test Record Count`,max(`db`.`Crop Plant Count`) AS `Crop Plant Count`,count(`db`.`Harvested Plant Count`) AS `Harvested Plant Count`,min(`db`.`Harvest Date`) AS `Harvest Date`,count(`db`.`Harvesting ID`) AS `Harvest Record Count`,max(`db`.`Strain ID`) AS `Strain ID`,max(`db`.`Plant Strain`) AS `Plant Strain`,sum(`db`.`Wet Weight lbs`) AS `Wet Weight lbs`,sum(`db`.`Dry Weight lbs`) AS `Dry Weight lbs`,sum(`db`.`Moisture Loss lbs`) AS `Moisture Loss lbs`,avg(`db`.`Moisture Loss %`) AS `Moisture Loss %`,max(`db`.`Drying Duration`) AS `Dry Duration`,sum(`db`.`Dry Plant Bins`) AS `Drying Records`,max(`db`.`Dry Plant Bins`) AS `Batches Complete`,if((count(`db`.`Dry Plant Bins`) = count(if((`dbo`.`action` = 'Finished'),`dbo`.`id`,0))),'Complete','In Progress') AS `Drying Status` from (`drying_batch_view` `db` left join `dry_batch` `dbo` on((`db`.`Harvesting ID` = `dbo`.`harvesting_id`))) group by `db`.`Flowering ID`;

-- View: drying_detail_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `drying_detail_view` AS select `dd`.`dry_batch_id` AS `dry_batch_id`,sum(`dd`.`quantity`) AS `total_quantity`,(`db`.`quantity` - sum(`dd`.`quantity`)) AS `loss_qty`,count(if((`db`.`action` = 'Finished'),`db`.`id`,0)) AS `batches_complete`,count(`dd`.`quantity`) AS `output_bin_count`,if((count(`dd`.`quantity`) = count(if((`db`.`action` = 'Finished'),`db`.`id`,0))),'Complete','In Progress') AS `process_status`,max(`dd`.`process_queue_id`) AS `process_queue`,max(`dd`.`process_queue_type`) AS `process_queue_type` from ((`dry_details` `dd` left join `dry_batch` `db` on((`db`.`id` = `dd`.`dry_batch_id`))) left join `process_log` `pl` on((`pl`.`source_id` = `db`.`source_id`))) group by `dd`.`dry_batch_id`,`dd`.`modified_on`,`dd`.`created_on`;

-- View: drying_harvest_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `drying_harvest_batch_view` AS select `db`.`Flowering ID` AS `Flowering ID`,`db`.`Harvesting ID` AS `Harvesting ID`,max(`db`.`Processing ID`) AS `Processing ID`,`db`.`HID` AS `HID`,`db`.`FID` AS `FID`,`db`.`Date of Flip to Flower` AS `Flower Flip Date`,`db`.`Harvest Date` AS `Harvest Date`,`db`.`Test ID` AS `Test ID`,`db`.`Harvest Type` AS `Harvest Type`,`db`.`Crop Plant Count` AS `Crop Plant Count`,`db`.`Harvested Plant Count` AS `Harvested Plant Count`,max(`db`.`Strain ID`) AS `Strain ID`,max(`db`.`Plant Strain`) AS `Plant Strain`,sum(`db`.`Wet Weight lbs`) AS `Wet Weight lbs`,sum(`db`.`Dry Weight lbs`) AS `Dry Weight lbs`,sum(`db`.`Moisture Loss lbs`) AS `Moisture Loss lbs`,avg(`db`.`Moisture Loss %`) AS `Moisture Loss %`,max(`db`.`Drying Duration`) AS `Dry Duration`,sum(`db`.`Dry Plant Bins`) AS `Drying Records`,max(`db`.`Dry Plant Bins`) AS `Batches Complete`,if((count(`db`.`Dry Plant Bins`) = count(if((`dbo`.`action` = 'Finished'),`dbo`.`id`,0))),'Complete','In Progress') AS `Drying Status` from (`drying_batch_view` `db` left join `dry_batch` `dbo` on((`db`.`Harvesting ID` = `dbo`.`harvesting_id`))) group by `db`.`Harvesting ID`;

-- View: drying_prod_flat
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `drying_prod_flat` AS select max(`bd`.`flowering_id`) AS `flowering_id`,min(`bd`.`start_date`) AS `start_date`,sum(`bd`.`input_quantity`) AS `input_quantity`,sum(`bd`.`output_quantity`) AS `output_quantity`,max(`bd`.`batch_status`) AS `batch_status` from `drying_prod_flat_all` `bd` group by `bd`.`flowering_id`;

-- View: drying_prod_flat_all
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `drying_prod_flat_all` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`bb`.`metrc_tag` AS `metrc_tag`,min(`bb`.`date`) AS `start_date`,(select sum(`bb_sub`.`quantity`) from `dry_batch` `bb_sub` where (`bb_sub`.`metrc_tag` = `bb`.`metrc_tag`)) AS `input_quantity`,sum(`bd`.`quantity`) AS `output_quantity`,if((`bb`.`action` = 'Stopped'),'In Progress',`bb`.`action`) AS `batch_status` from ((`dry_details` `bd` left join `dry_batch` `bb` on((`bb`.`id` = `bd`.`dry_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) where (`h`.`year_num` > 2021) group by `h`.`flowering_id`,`h`.`id`,`bb`.`metrc_tag`,`h`.`harvest_id`,`bb`.`action`;

-- View: drying_prod_flat_all_group
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `drying_prod_flat_all_group` AS select `td`.`flowering_id` AS `flowering_id`,`td`.`harvesting_id` AS `harvesting_id`,`td`.`harvest_id` AS `harvest_id`,min(`td`.`start_date`) AS `start_date`,sum(`td`.`input_quantity`) AS `input_quantity`,sum(`td`.`output_quantity`) AS `output_quantity`,max(`td`.`batch_status`) AS `batch_status` from `drying_prod_flat_all` `td` group by `td`.`flowering_id`,`td`.`harvesting_id`,`td`.`harvest_id`;

-- View: drying_prod_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `drying_prod_view` AS select `h`.`flowering_id` AS `flowering_id`,`bb`.`harvesting_id` AS `harvesting_id`,`bb`.`metrc_tag` AS `metrc_tag`,'Drying' AS `process`,`bb`.`id` AS `batch_id`,`bb`.`date` AS `date`,if((`bb`.`action` = 'Stopped'),'In Progress',`bb`.`action`) AS `batch_status`,`f`.`flowering_id` AS `flowering_id_name`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,NULL AS `flower_plant_count`,NULL AS `harvest_plant_count`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`cat`.`name` AS `category`,`ct`.`name` AS `category_type`,NULL AS `product_size`,NULL AS `product_grade`,max(`bb`.`quantity`) AS `input_quantity`,sum(`bd`.`quantity`) AS `output_quantity`,`cate`.`name` AS `output_category`,`cty`.`name` AS `output_category_type` from ((((((((`dry_batch` `bb` left join `dry_details` `bd` on((`bb`.`id` = `bd`.`dry_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `bb`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `bb`.`category_type_id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) left join `cultivation`.`flowering` `f` on((`f`.`id` = `h`.`flowering_id`))) left join `product_sku`.`category` `cate` on((`cate`.`id` = `bd`.`category_id`))) left join `product_sku`.`category_type` `cty` on((`cty`.`id` = `bd`.`category_type_id`))) group by `bb`.`harvesting_id`,`bb`.`metrc_tag`,`h`.`test_id`,`bb`.`action`,`h`.`harvest_id`,`bb`.`date`,`h`.`property_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`cat`.`name`,`ct`.`name`,`bb`.`id`,`h`.`flowering_id`,`f`.`flowering_id`,`cate`.`name`,`cty`.`name` order by `bb`.`date` desc,`bb`.`action`;

-- View: manicured_batch_data
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `manicured_batch_data` AS select max(`h`.`flowering_id`) AS `flowering_id`,`h`.`harvesting_id` AS `harvesting_id`,max(`h`.`flowering_id_name`) AS `flowering_batch`,`h`.`harvest_id` AS `harvest_batch`,max(`h`.`test_id`) AS `test_id`,max(`h`.`property_id`) AS `property_id`,max(`h`.`license_id`) AS `license`,max(`h`.`strain_id`) AS `strain_id`,max(`s`.`name`) AS `strain_name`,if((max(`s`.`core_strain`) = 1),'YES','NO') AS `core_strain`,max(`h`.`harvest_date`) AS `harvest_date`,max(`h`.`harvest_week`) AS `harvest_week`,max(`h`.`harvest_year`) AS `harvest_year`,max(`d`.`input_quantity`) AS `wet_weight` from ((((((`drying_prod_flat_all_group` `d` left join `bucking_prod_flat_all_group` `b` on((`b`.`harvesting_id` = `d`.`harvesting_id`))) left join `trimming_machine_prod_flat_group` `tm` on((`tm`.`harvesting_id` = `d`.`harvesting_id`))) left join `trimming_hand_prod_flat_group` `th` on((`th`.`harvesting_id` = `d`.`harvesting_id`))) left join `sorting_prod_flat_all_group` `s` on((`s`.`harvesting_id` = `d`.`harvesting_id`))) left join `cultivation`.`harvest_prod_view` `h` on((`d`.`harvesting_id` = `h`.`harvesting_id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) where ((`h`.`harvest_year` > 2022) and (`tm`.`batch_status` = 'Finished') and (`d`.`input_quantity` > 0) and (`h`.`harvest_id` like '%-M')) group by `h`.`harvesting_id`,`h`.`harvest_type`,`h`.`harvest_id` order by `h`.`harvest_year` desc,`h`.`harvest_week` desc,`h`.`harvest_id`;

-- View: process_status
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `process_status` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`id` AS `harvesting_id`,`h`.`processing_metrc_id` AS `processing_metrc_tag`,`f`.`flowering_id` AS `flowering_batch`,`h`.`harvest_id` AS `harvesting_batch`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`bb`.`uid` AS `drying_batch`,`bb`.`date` AS `drying_start_date`,if((`bb`.`action` = 'Stopped'),'In Progress',`bb`.`action`) AS `drying_status`,(case when (`bb`.`action` = 'Finished') then '✔️' when (`bb`.`action` = 'In Progress') then '' else NULL end) AS `drying_status_box`,max(`bb`.`quantity`) AS `drying_input_quantity`,`buc`.`uid` AS `bucking_batch`,`buc`.`date` AS `bucking_start_date`,if((`buc`.`action` = 'Stopped'),'In Progress',`buc`.`action`) AS `bucking_status`,max(`buc`.`quantity`) AS `bucking_input_quantity`,`t`.`uid` AS `trimming_batch`,`t`.`date` AS `trimming_start_date`,if((`t`.`action` = 'Stopped'),'In Progress',`t`.`action`) AS `trimming_status`,max(`t`.`quantity`) AS `trimming_input_quantity`,`bs`.`uid` AS `sorter_batch`,`bs`.`date` AS `sorter_start_date`,if((`bs`.`action` = 'Stopped'),'In Progress',`bs`.`action`) AS `sorter_status`,max(`bs`.`quantity`) AS `sorter_input_quantity` from ((((((`dry_batch` `bb` left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `bucked_batch` `buc` on((`buc`.`harvesting_id` = `h`.`id`))) left join `trimming_batch` `t` on((`t`.`harvesting_id` = `h`.`id`))) left join `sorter_batch` `bs` on((`bs`.`harvesting_id` = `h`.`id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) left join `cultivation`.`flowering` `f` on((`f`.`id` = `h`.`flowering_id`))) where ((year(`bb`.`date`) >= 2023) and (`t`.`process_type` = 'T-zero Machine')) group by `h`.`flowering_id`,`h`.`id`,`h`.`processing_metrc_id`,`f`.`flowering_id`,`h`.`harvest_id`,`h`.`test_id`,`h`.`property_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`bb`.`uid`,`bb`.`date`,`bb`.`action`,`buc`.`uid`,`buc`.`date`,`buc`.`action`,`t`.`uid`,`t`.`date`,`t`.`action`,`bs`.`uid`,`bs`.`date`,`bs`.`action` order by `bb`.`date` desc,`bb`.`action`;

-- View: processing_active
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `processing_active` AS select `p`.`date` AS `date`,`p`.`processing_metrc_tag` AS `processing_batch_source_tag`,`p`.`metrc_tag` AS `metrc_tag`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,`h`.`year_week` AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`pacstone`.`uom`.`name` AS `uom`,`p`.`quantity` AS `quantity`,`p`.`bin_count` AS `bin_count`,`c`.`name` AS `category`,`ct`.`name` AS `category_type`,`p`.`product_id` AS `size`,`p`.`grade` AS `grade`,(case when (`p`.`process_queue_type` = 'Hand Trimming') then 'Hand Trimming' when (`p`.`process_queue_id` is not null) then `p`.`process_queue_id` else `p`.`process_id` end) AS `process`,`p`.`process_queue_id` AS `process_queue`,`p`.`process_queue_type` AS `process_queue_type`,`p`.`process_log` AS `process_log`,(case when (`p`.`process_queue_id` is not null) then 'In Queue' when (`p`.`process_id` = 'Transfer') then 'Received' else 'Finished' end) AS `status`,(case when ((`p`.`process_log` like '%Sorting%') or (`p`.`process_id` = 'QC-Sorting') or (`p`.`source_batch_id` is not null)) then 'Sorted' when ((`p`.`process_log` like '%Trimming%') and ((`p`.`process_queue_id` is null) or (`p`.`process_queue_id` = 'QC-Sorting')) and (`p`.`category_id` = 'SK-CTG-0001') and (not((`p`.`process_log` like '%Sorting%')))) then 'Unsorted' else '-' end) AS `qc_status`,`l`.`name` AS `location` from ((((((`processing` `p` left join `pacstone`.`plant_strain` `s` on((convert(`s`.`id` using utf8mb4) = `p`.`strain_id`))) left join `product_sku`.`category` `c` on((`c`.`id` = `p`.`category_id`))) left join `product_sku`.`category_type` `ct` on((convert(`ct`.`id` using utf8mb4) = `p`.`category_type_id`))) left join `cultivation`.`harvesting_ref` `h` on((`h`.`id` = `p`.`harvesting_id`))) left join `pacstone`.`uom` on((convert(`pacstone`.`uom`.`id` using utf8mb4) = `p`.`uom_id`))) left join `pacstone`.`location` `l` on((convert(`l`.`id` using utf8mb4) = `p`.`location_id`))) where (`p`.`status` = 'Active');

-- View: processing_active_combined
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `processing_active_combined` AS select `processing_active`.`date` AS `date`,`processing_active`.`processing_batch_source_tag` AS `processing_batch_source_tag`,`processing_active`.`metrc_tag` AS `metrc_tag`,`processing_active`.`harvest_id` AS `harvest_id`,`processing_active`.`test` AS `test`,`processing_active`.`property_id` AS `property_id`,`processing_active`.`harvest_date` AS `harvest_date`,`processing_active`.`harvest_week` AS `harvest_week`,`processing_active`.`harvest_year` AS `harvest_year`,`processing_active`.`harvest_year_week` AS `harvest_year_week`,`processing_active`.`harvest_type` AS `harvest_type`,`processing_active`.`strain_code` AS `strain_code`,`processing_active`.`strain_name` AS `strain_name`,`processing_active`.`uom` AS `uom`,`processing_active`.`quantity` AS `quantity`,`processing_active`.`bin_count` AS `bin_count`,`processing_active`.`category` AS `category`,`processing_active`.`category_type` AS `category_type`,`processing_active`.`size` AS `size`,`processing_active`.`grade` AS `grade`,`processing_active`.`process` AS `process`,`processing_active`.`process_log` AS `process_log`,`processing_active`.`qc_status` AS `qc_status`,`processing_active`.`location` AS `location`,`processing_active`.`status` AS `status` from `processing_active` union all select `bucking_active`.`date` AS `date`,`bucking_active`.`metrc_tag` AS `processing_batch_source_tag`,`bucking_active`.`metrc_tag` AS `metrc_tag`,`bucking_active`.`harvest_id` AS `harvest_id`,`bucking_active`.`test_id` AS `test`,`bucking_active`.`property_id` AS `property_id`,`bucking_active`.`harvest_date` AS `harvest_date`,`bucking_active`.`harvest_week` AS `harvest_week`,`bucking_active`.`harvest_year` AS `harvest_year`,`bucking_active`.`harvest_year_week` AS `harvest_year_week`,`bucking_active`.`harvest_type` AS `harvest_type`,`bucking_active`.`strain_code` AS `strain_code`,`bucking_active`.`strain_name` AS `strain_name`,'Pound' AS `uom`,`bucking_active`.`active_quantity` AS `quantity`,`bucking_active`.`bin_count` AS `bin_count`,`bucking_active`.`category` AS `category`,`bucking_active`.`category_type` AS `category_type`,NULL AS `size`,NULL AS `grade`,'Bucking' AS `process`,'Drying' AS `process_log`,NULL AS `qc_status`,'Cure Room' AS `location`,'In Progress' AS `status` from `bucking_active` union all select `drying_active`.`date` AS `date`,`drying_active`.`metrc_tag` AS `processing_batch_source_tag`,`drying_active`.`metrc_tag` AS `metrc_tag`,`drying_active`.`harvest_id` AS `harvest_id`,`drying_active`.`test_id` AS `test`,`drying_active`.`property_id` AS `property_id`,`drying_active`.`harvest_date` AS `harvest_date`,`drying_active`.`harvest_week` AS `harvest_week`,`drying_active`.`harvest_year` AS `harvest_year`,`drying_active`.`harvest_year_week` AS `harvest_year_week`,`drying_active`.`harvest_type` AS `harvest_type`,`drying_active`.`strain_code` AS `strain_code`,`drying_active`.`strain_name` AS `strain_name`,'Pound' AS `uom`,`drying_active`.`active_quantity` AS `quantity`,`drying_active`.`bin_count` AS `bin_count`,`drying_active`.`category` AS `category`,`drying_active`.`category_type` AS `category_type`,NULL AS `size`,NULL AS `grade`,'Drying' AS `process`,NULL AS `process_log`,NULL AS `qc_status`,'Cure Room' AS `location`,'In Progress' AS `status` from `drying_active` union all select `trimming_active`.`date` AS `date`,`trimming_active`.`metrc_tag` AS `processing_batch_source_tag`,`trimming_active`.`metrc_tag` AS `metrc_tag`,`trimming_active`.`harvest_id` AS `harvest_id`,`trimming_active`.`test_id` AS `test`,`trimming_active`.`property_id` AS `property_id`,`trimming_active`.`harvest_date` AS `harvest_date`,`trimming_active`.`harvest_week` AS `harvest_week`,`trimming_active`.`harvest_year` AS `harvest_year`,`trimming_active`.`harvest_year_week` AS `harvest_year_week`,`trimming_active`.`harvest_type` AS `harvest_type`,`trimming_active`.`strain_code` AS `strain_code`,`trimming_active`.`strain_name` AS `strain_name`,'Pound' AS `uom`,`trimming_active`.`active_quantity` AS `quantity`,`trimming_active`.`bin_count` AS `bin_count`,`trimming_active`.`category` AS `category`,`trimming_active`.`category_type` AS `category_type`,NULL AS `size`,NULL AS `grade`,`trimming_active`.`process` AS `process`,'Drying,Bucking' AS `process_log`,NULL AS `qc_status`,'Processing Room' AS `location`,'In Progress' AS `status` from `trimming_active` union all select `sorting_active`.`date` AS `date`,`sorting_active`.`metrc_tag` AS `processing_batch_source_tag`,`sorting_active`.`metrc_tag` AS `metrc_tag`,`sorting_active`.`harvest_id` AS `harvest_id`,`sorting_active`.`test_id` AS `test`,`sorting_active`.`property_id` AS `property_id`,`sorting_active`.`harvest_date` AS `harvest_date`,`sorting_active`.`harvest_week` AS `harvest_week`,`sorting_active`.`harvest_year` AS `harvest_year`,`sorting_active`.`harvest_year_week` AS `harvest_year_week`,`sorting_active`.`harvest_type` AS `harvest_type`,`sorting_active`.`strain_code` AS `strain_code`,`sorting_active`.`strain_name` AS `strain_name`,'Pound' AS `uom`,`sorting_active`.`active_quantity` AS `quantity`,`sorting_active`.`bin_count` AS `bin_count`,`sorting_active`.`category` AS `category`,`sorting_active`.`category_type` AS `category_type`,NULL AS `size`,NULL AS `grade`,'Sorting' AS `process`,'Drying,Bucking,Trimming' AS `process_log`,NULL AS `qc_status`,'QA/QC' AS `location`,'In Progress' AS `status` from `sorting_active`;

-- View: processing_batch_inprogress
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `processing_batch_inprogress` AS select `bucking_active`.`date` AS `date`,`bucking_active`.`metrc_tag` AS `processing_batch_source_tag`,`bucking_active`.`metrc_tag` AS `metrc_tag`,`bucking_active`.`harvest_id` AS `harvest_id`,`bucking_active`.`test_id` AS `test`,`bucking_active`.`property_id` AS `property_id`,`bucking_active`.`harvest_date` AS `harvest_date`,`bucking_active`.`harvest_week` AS `harvest_week`,`bucking_active`.`harvest_year` AS `harvest_year`,`bucking_active`.`harvest_year_week` AS `harvest_year_week`,`bucking_active`.`harvest_type` AS `harvest_type`,`bucking_active`.`strain_code` AS `strain_code`,`bucking_active`.`strain_name` AS `strain_name`,'Pound' AS `uom`,`bucking_active`.`input_quantity` AS `input_quantity`,`bucking_active`.`output_quantity` AS `output_quantity`,`bucking_active`.`bin_count` AS `bin_count`,`bucking_active`.`category` AS `category`,`bucking_active`.`category_type` AS `category_type`,NULL AS `size`,NULL AS `grade`,'Bucking' AS `process`,NULL AS `process_queue`,NULL AS `process_queue_type`,'Drying' AS `process_log`,NULL AS `qc_status`,NULL AS `location`,'In Progress' AS `status` from `bucking_active` union all select `drying_active`.`date` AS `date`,`drying_active`.`metrc_tag` AS `processing_batch_source_tag`,`drying_active`.`metrc_tag` AS `metrc_tag`,`drying_active`.`harvest_id` AS `harvest_id`,`drying_active`.`test_id` AS `test`,`drying_active`.`property_id` AS `property_id`,`drying_active`.`harvest_date` AS `harvest_date`,`drying_active`.`harvest_week` AS `harvest_week`,`drying_active`.`harvest_year` AS `harvest_year`,`drying_active`.`harvest_year_week` AS `harvest_year_week`,`drying_active`.`harvest_type` AS `harvest_type`,`drying_active`.`strain_code` AS `strain_code`,`drying_active`.`strain_name` AS `strain_name`,'Pound' AS `uom`,`drying_active`.`input_quantity` AS `input_quantity`,`drying_active`.`output_quantity` AS `output_quantity`,`drying_active`.`bin_count` AS `bin_count`,`drying_active`.`category` AS `category`,`drying_active`.`category_type` AS `category_type`,NULL AS `size`,NULL AS `grade`,'Drying' AS `process`,NULL AS `process_queue`,NULL AS `process_queue_type`,NULL AS `process_log`,NULL AS `qc_status`,NULL AS `location`,'In Progress' AS `status` from `drying_active` union all select `trimming_active`.`date` AS `date`,`trimming_active`.`metrc_tag` AS `processing_batch_source_tag`,`trimming_active`.`metrc_tag` AS `metrc_tag`,`trimming_active`.`harvest_id` AS `harvest_id`,`trimming_active`.`test_id` AS `test`,`trimming_active`.`property_id` AS `property_id`,`trimming_active`.`harvest_date` AS `harvest_date`,`trimming_active`.`harvest_week` AS `harvest_week`,`trimming_active`.`harvest_year` AS `harvest_year`,`trimming_active`.`harvest_year_week` AS `harvest_year_week`,`trimming_active`.`harvest_type` AS `harvest_type`,`trimming_active`.`strain_code` AS `strain_code`,`trimming_active`.`strain_name` AS `strain_name`,'Pound' AS `uom`,`trimming_active`.`input_quantity` AS `input_quantity`,`trimming_active`.`output_quantity` AS `output_quantity`,`trimming_active`.`bin_count` AS `bin_count`,`trimming_active`.`category` AS `category`,`trimming_active`.`category_type` AS `category_type`,NULL AS `size`,NULL AS `grade`,'Trimming' AS `process`,NULL AS `process_queue`,NULL AS `process_queue_type`,'Drying,Bucking' AS `process_log`,NULL AS `qc_status`,NULL AS `location`,'In Progress' AS `status` from `trimming_active` union all select `sorting_active`.`date` AS `date`,`sorting_active`.`metrc_tag` AS `processing_batch_source_tag`,`sorting_active`.`metrc_tag` AS `metrc_tag`,`sorting_active`.`harvest_id` AS `harvest_id`,`sorting_active`.`test_id` AS `test`,`sorting_active`.`property_id` AS `property_id`,`sorting_active`.`harvest_date` AS `harvest_date`,`sorting_active`.`harvest_week` AS `harvest_week`,`sorting_active`.`harvest_year` AS `harvest_year`,`sorting_active`.`harvest_year_week` AS `harvest_year_week`,`sorting_active`.`harvest_type` AS `harvest_type`,`sorting_active`.`strain_code` AS `strain_code`,`sorting_active`.`strain_name` AS `strain_name`,'Pound' AS `uom`,`sorting_active`.`input_quantity` AS `input_quantity`,`sorting_active`.`output_quantity` AS `output_quantity`,`sorting_active`.`bin_count` AS `bin_count`,`sorting_active`.`category` AS `category`,`sorting_active`.`category_type` AS `category_type`,NULL AS `size`,NULL AS `grade`,'Sorting' AS `process`,NULL AS `process_queue`,NULL AS `process_queue_type`,'Drying,Bucking,Trimming' AS `process_log`,NULL AS `qc_status`,NULL AS `location`,'In Progress' AS `status` from `sorting_active` order by `date` desc;

-- View: processing_c_log_all_view
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `processing_c_log_all_view` AS select `processing_changelog`.`change_id` AS `change_id`,`processing_changelog`.`ts` AS `ts`,`processing_changelog`.`sql_action` AS `sql_action`,`processing_changelog`.`id` AS `id`,`processing_changelog`.`source_id` AS `source_id`,`processing_changelog`.`uid` AS `uid`,`processing_changelog`.`batch_id` AS `batch_id`,`processing_changelog`.`metrc_id` AS `metrc_id`,`processing_changelog`.`metrc_tag` AS `metrc_tag`,`processing_changelog`.`source_metrc_id` AS `source_metrc_id`,`processing_changelog`.`source_metrc_tag` AS `source_metrc_tag`,`processing_changelog`.`stage_id` AS `stage_id`,`processing_changelog`.`date` AS `date`,`processing_changelog`.`source_batch_id` AS `source_batch_id`,`processing_changelog`.`harvesting_id` AS `harvesting_id`,`processing_changelog`.`test_id` AS `test_id`,`processing_changelog`.`product_id` AS `product_id`,`processing_changelog`.`category_id` AS `category_id`,`processing_changelog`.`category_type_id` AS `category_type_id`,`processing_changelog`.`package_id` AS `package_id`,`processing_changelog`.`bin_count` AS `bin_count`,`processing_changelog`.`class_id` AS `class_id`,`processing_changelog`.`uom_id` AS `uom_id`,`processing_changelog`.`quantity` AS `quantity`,`processing_changelog`.`location_id` AS `location_id`,`processing_changelog`.`metrc_location` AS `metrc_location`,`processing_changelog`.`note` AS `note`,`processing_changelog`.`process_id` AS `process_id`,`processing_changelog`.`process_log` AS `process_log`,`processing_changelog`.`status` AS `status`,`processing_changelog`.`action` AS `action`,`processing_changelog`.`user` AS `user`,`processing_changelog`.`modified_on` AS `modified_on`,`processing_changelog`.`modified_by` AS `modified_by`,`processing_changelog`.`modified_type` AS `modified_type`,`processing_changelog`.`created_on` AS `created_on`,`processing_changelog`.`created_by` AS `created_by`,`processing_changelog`.`metrc_modified_on` AS `metrc_modified_on`,`processing_changelog`.`flag` AS `flag`,`processing_changelog`.`trigger` AS `trigger`,`processing_changelog`.`strain_id` AS `strain_id`,`processing_changelog`.`grade` AS `grade`,`processing_changelog`.`metrc_on` AS `metrc_on`,`processing_changelog`.`metrc_by` AS `metrc_by`,`processing_changelog`.`sku_priority` AS `sku_priority`,`processing_changelog`.`processing_metrc_tag` AS `processing_metrc_tag`,`processing_changelog`.`process_queue_id` AS `process_queue_id`,`processing_changelog`.`process_queue_type` AS `process_queue_type`,`processing_changelog`.`verified_on` AS `verified_on`,`processing_changelog`.`verified_by` AS `verified_by` from `processing_changelog`;

-- View: processing_c_log_week_view
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `processing_c_log_week_view` AS select `processing_changelog`.`change_id` AS `change_id`,`processing_changelog`.`ts` AS `ts`,`processing_changelog`.`sql_action` AS `sql_action`,`processing_changelog`.`id` AS `id`,`processing_changelog`.`source_id` AS `source_id`,`processing_changelog`.`uid` AS `uid`,`processing_changelog`.`batch_id` AS `batch_id`,`processing_changelog`.`metrc_id` AS `metrc_id`,`processing_changelog`.`metrc_tag` AS `metrc_tag`,`processing_changelog`.`source_metrc_id` AS `source_metrc_id`,`processing_changelog`.`source_metrc_tag` AS `source_metrc_tag`,`processing_changelog`.`stage_id` AS `stage_id`,`processing_changelog`.`date` AS `date`,`processing_changelog`.`source_batch_id` AS `source_batch_id`,`processing_changelog`.`harvesting_id` AS `harvesting_id`,`processing_changelog`.`test_id` AS `test_id`,`processing_changelog`.`product_id` AS `product_id`,`processing_changelog`.`category_id` AS `category_id`,`processing_changelog`.`category_type_id` AS `category_type_id`,`processing_changelog`.`package_id` AS `package_id`,`processing_changelog`.`bin_count` AS `bin_count`,`processing_changelog`.`class_id` AS `class_id`,`processing_changelog`.`uom_id` AS `uom_id`,`processing_changelog`.`quantity` AS `quantity`,`processing_changelog`.`location_id` AS `location_id`,`processing_changelog`.`metrc_location` AS `metrc_location`,`processing_changelog`.`note` AS `note`,`processing_changelog`.`process_id` AS `process_id`,`processing_changelog`.`process_log` AS `process_log`,`processing_changelog`.`status` AS `status`,`processing_changelog`.`action` AS `action`,`processing_changelog`.`user` AS `user`,`processing_changelog`.`modified_on` AS `modified_on`,`processing_changelog`.`modified_by` AS `modified_by`,`processing_changelog`.`modified_type` AS `modified_type`,`processing_changelog`.`created_on` AS `created_on`,`processing_changelog`.`created_by` AS `created_by`,`processing_changelog`.`metrc_modified_on` AS `metrc_modified_on`,`processing_changelog`.`flag` AS `flag`,`processing_changelog`.`trigger` AS `trigger`,`processing_changelog`.`strain_id` AS `strain_id`,`processing_changelog`.`grade` AS `grade`,`processing_changelog`.`metrc_on` AS `metrc_on`,`processing_changelog`.`metrc_by` AS `metrc_by`,`processing_changelog`.`sku_priority` AS `sku_priority`,`processing_changelog`.`processing_metrc_tag` AS `processing_metrc_tag`,`processing_changelog`.`process_queue_id` AS `process_queue_id`,`processing_changelog`.`process_queue_type` AS `process_queue_type`,`processing_changelog`.`verified_on` AS `verified_on`,`processing_changelog`.`verified_by` AS `verified_by` from `processing_changelog` where (`processing_changelog`.`modified_on` >= (curdate() - interval 7 day));

-- View: processing_crop_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `processing_crop_batch_view` AS select `phbv`.`FID` AS `FID`,count(`phbv`.`HID`) AS `Harvest Record Count`,min(`phbv`.`Flower Flip Date`) AS `Flower Date`,min(`phbv`.`HID`) AS `Main Harvest Name`,max(`phbv`.`Harvest Date`) AS `Harvest Start`,max(`phbv`.`Week Harvest`) AS `Week Finished Harvesting`,max(`phbv`.`Year of Harvest`) AS `Year of Harvest`,max(`phbv`.`Harvested Plant Count`) AS `Largest Harvest Plant Count`,min(`phbv`.`Strain ID`) AS `Strain ID`,min(`phbv`.`Plant Strain`) AS `Plant Strain`,sum(`phbv`.`Wet Weight lbs`) AS `Crop Wet Weight`,sum(`phbv`.`Dry Weight lbs`) AS `Crop Dry Weight`,sum(`phbv`.`Moisture Loss lbs`) AS `Crop Moisture Loss`,concat(round(avg(`phbv`.`Moisture Loss %`),2),'%') AS `Average Moisture loss`,sum(`phbv`.`Bucked Flower lbs`) AS `Crop Bucked Flower lbs`,sum(`phbv`.`Bucked Waste lbs`) AS `Crop Bucked Waste lbs`,concat(round(avg(`phbv`.`Bucked Waste %`),2),'%') AS `Average Bucking Waste %`,sum(`phbv`.`Total Flower from Harvest`) AS `Crop Total Flower`,sum(`phbv`.`Total Trim from Harvest`) AS `Crop Total Trim`,max(`phbv`.`Flower / Trim`) AS `Flower / Trim`,sum(`phbv`.`Total Waste from Harvest`) AS `Crop Waste`,round(avg(`phbv`.`Pounds per Plant`),2) AS `Average Pounds per Plant`,round(avg(`phbv`.`Ounces per plant`),2) AS `Average Ounces per Plant`,round(avg(`phbv`.`Grams per plant`),2) AS `Average Grams per Plant`,sum(`phbv`.`Total Sorted Flower from Harvest`) AS `Total Sorted Flower from Crop`,sum(`phbv`.`Big Flower lbs`) AS `Big Flower lbs from Crop`,sum(`phbv`.`Reg Flower lbs`) AS `Reg Flower lbs from Crop`,sum(`phbv`.`Small Flower lbs`) AS `Small Flower lbs from Crop`,sum(`phbv`.`Micro Flower lbs`) AS `Micro Flower lbs from Crop`,sum(`phbv`.`Micro Small Flower lbs`) AS `Micro Small Flower lbs from Crop`,sum(`phbv`.`Total Big Flower - AAA lbs`) AS `Big Flower - AAA lbs from Crop`,sum(`phbv`.`Total Big Flower - A lbs`) AS `Big Flower - A lbs from Crop`,sum(`phbv`.`Total Big Flower - B lbs`) AS `Big Flower - B lbs from Crop`,sum(`phbv`.`Total Big Flower - X lbs`) AS `Big Flower - X lbs from Crop`,sum(`phbv`.`Total Reg Flower - A lbs`) AS `Reg Flower - AAA lbs from Crop`,sum(`phbv`.`Total Reg Flower - B lbs`) AS `Reg Flower - A lbs from Crop`,sum(`phbv`.`Total Reg Flower - C lbs`) AS `Reg Flower - C lbs from Crop`,sum(`phbv`.`Total Reg Flower - X lbs`) AS `Reg Flower - X lbs from Crop`,sum(`phbv`.`Total Small Flower - AAA lbs`) AS `Small Flower - AAA lbs from Crop`,sum(`phbv`.`Total Small Flower - A lbs`) AS `Small Flower - A lbs from Crop`,sum(`phbv`.`Total Small Flower - B lbs`) AS `Small Flower - B lbs from Crop`,sum(`phbv`.`Total Small Flower - C lbs`) AS `Small Flower - C lbs from Crop`,sum(`phbv`.`Total Small Flower - X lbs`) AS `Small Flower - X lbs from Crop`,sum(`phbv`.`Total Micro Flower - A lbs`) AS `Micro Flower - A lbs from Crop`,sum(`phbv`.`Total Micro Flower - B lbs`) AS `Micro Flower - B lbs from Crop`,sum(`phbv`.`Total Micro Flower - X lbs`) AS `Micro Flower - X lbs from Crop`,sum(`phbv`.`Total Micro Small Flower - A lbs`) AS `Micro Small Flower - A lbs from Crop`,sum(`phbv`.`Total Micro Small Flower - B lbs`) AS `Micro Small Flower - B lbs from Crop`,sum(`phbv`.`Total Micro Small Flower - X lbs`) AS `Micro Small Flwoer - X lbs from Crop` from `processing_harvest_batch_view` `phbv` group by `phbv`.`FID` order by min(`phbv`.`Harvest Date`) desc;

-- View: processing_crop_view
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `processing_crop_view` AS select `p`.`id` AS `id`,`p`.`source_id` AS `source_id`,`p`.`uid` AS `uid`,`p`.`batch_id` AS `batch_id`,`p`.`metrc_id` AS `metrc_id`,`p`.`metrc_tag` AS `metrc_tag`,`p`.`source_metrc_id` AS `source_metrc_id`,`p`.`source_metrc_tag` AS `source_metrc_tag`,`p`.`stage_id` AS `stage_id`,`p`.`date` AS `date`,`p`.`source_batch_id` AS `source_batch_id`,`p`.`harvesting_id` AS `harvesting_id`,`p`.`test_id` AS `test_id`,`p`.`product_id` AS `product_id`,`p`.`category_id` AS `category_id`,`p`.`category_type_id` AS `category_type_id`,`p`.`package_id` AS `package_id`,`p`.`bin_count` AS `bin_count`,`p`.`class_id` AS `class_id`,`p`.`uom_id` AS `uom_id`,`p`.`quantity` AS `quantity`,`p`.`location_id` AS `location_id`,`p`.`metrc_location` AS `metrc_location`,`p`.`note` AS `note`,`p`.`process_id` AS `process_id`,`p`.`process_log` AS `process_log`,`p`.`status` AS `status`,`p`.`action` AS `action`,`p`.`user` AS `user`,`p`.`modified_on` AS `modified_on`,`p`.`modified_by` AS `modified_by`,`p`.`modified_type` AS `modified_type`,`p`.`created_on` AS `created_on`,`p`.`created_by` AS `created_by`,`p`.`metrc_modified_on` AS `metrc_modified_on`,`p`.`flag` AS `flag`,`p`.`trigger` AS `trigger`,`p`.`strain_id` AS `strain_id`,`p`.`grade` AS `grade`,`p`.`metrc_on` AS `metrc_on`,`p`.`metrc_by` AS `metrc_by`,`p`.`sku_priority` AS `sku_priority`,`p`.`processing_metrc_tag` AS `processing_metrc_tag`,`p`.`process_queue_id` AS `process_queue_id`,`p`.`process_queue_type` AS `process_queue_type`,`p`.`verified_on` AS `verified_on`,`p`.`verified_by` AS `verified_by`,`c`.`flowering_id` AS `flowering_id` from (`processing` `p` join `cultivation`.`harvesting` `c` on((`p`.`harvesting_id` = `c`.`id`)));

-- View: processing_delta_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `processing_delta_view` AS select `p`.`strain_id` AS `strain_id`,`p`.`harvest_week` AS `week_num`,`p`.`harvest_year` AS `year_num`,`p`.`year_week` AS `year_week`,`p`.`harvest_date` AS `harvest_date`,`p`.`property` AS `property_id`,`p`.`harvest_id` AS `harvest_id`,`p`.`plant_count` AS `plant_count`,(((((`p`.`big_a_flower_output` + `p`.`reg_a_flower_output`) + `p`.`sml_a_flower_output`) + `p`.`b_flower_output`) + `p`.`retrim_a_output`) + `p`.`retrim_b_output`) AS `tzero_a_b_retrim`,(`p`.`c_flower_output` + `p`.`retrim_c_output`) AS `tzero_c`,`p`.`trim_output` AS `tzero_trim`,`p`.`sugar_shake_output` AS `tzero_shake`,`p`.`total_waste_output` AS `tzero_waste`,((`p`.`input_qty` - `p`.`output_qty`) / `p`.`input_qty`) AS `tzero_shrink`,`p`.`process_action` AS `tzero_flower_status`,if((`p`.`harvest_year` = 2021),((((((`p`.`big_a_flower_output` + `p`.`reg_a_flower_output`) + `p`.`sml_a_flower_output`) + `p`.`b_flower_output`) + `p`.`retrim_a_output`) + `p`.`retrim_b_output`) * 16),0) AS `2021_total_oz`,if((`p`.`harvest_year` = 2021),`p`.`plant_count`,0) AS `2021_plants`,if((`p`.`harvest_year` = 2022),((((((`p`.`big_a_flower_output` + `p`.`reg_a_flower_output`) + `p`.`sml_a_flower_output`) + `p`.`b_flower_output`) + `p`.`retrim_a_output`) + `p`.`retrim_b_output`) * 16),0) AS `2022_total_oz`,if((`p`.`harvest_year` = 2022),`p`.`plant_count`,0) AS `2022_plants`,if((`p`.`harvest_year` = 2023),((((((`p`.`big_a_flower_output` + `p`.`reg_a_flower_output`) + `p`.`sml_a_flower_output`) + `p`.`b_flower_output`) + `p`.`retrim_a_output`) + `p`.`retrim_b_output`) * 16),0) AS `2023_total_oz`,if((`p`.`harvest_year` = 2023),`p`.`plant_count`,0) AS `2023_plants`,if((`p`.`harvest_year` = 2024),((((((`p`.`big_a_flower_output` + `p`.`reg_a_flower_output`) + `p`.`sml_a_flower_output`) + `p`.`b_flower_output`) + `p`.`retrim_a_output`) + `p`.`retrim_b_output`) * 16),0) AS `2024_total_oz`,if((`p`.`harvest_year` = 2024),`p`.`plant_count`,0) AS `2024_plants`,`pc`.`processing_count` AS `processing_count`,`hc`.`harvesting_count` AS `harvesting_count` from ((`trimming_t0_report` `p` left join (select `trimming_t0_report`.`year_week` AS `year_week`,count(distinct `trimming_t0_report`.`harvesting_id`) AS `processing_count` from `trimming_t0_report` where (right(`trimming_t0_report`.`harvest_id`,2) <> '-M') group by `trimming_t0_report`.`year_week`) `pc` on((`p`.`year_week` = `pc`.`year_week`))) left join (select `harvesting_ref`.`year_week` AS `year_week`,count(distinct `harvesting_ref`.`id`) AS `harvesting_count` from `cultivation`.`harvesting_ref` where (right(`harvesting_ref`.`harvest_id`,2) <> '-M') group by `harvesting_ref`.`year_week`) `hc` on((`p`.`year_week` = `hc`.`year_week`))) where (right(`p`.`harvest_id`,2) <> '-M') group by `p`.`strain_id`,`p`.`harvest_week`,`p`.`harvest_year`,`p`.`year_week`,`p`.`harvest_date`,`p`.`property`,`p`.`harvest_id`,`p`.`plant_count`,`p`.`big_a_flower_output`,`p`.`reg_a_flower_output`,`p`.`sml_a_flower_output`,`p`.`b_flower_output`,`p`.`retrim_a_output`,`p`.`retrim_b_output`,`p`.`c_flower_output`,`p`.`retrim_c_output`,`p`.`trim_output`,`p`.`sugar_shake_output`,`p`.`total_waste_output`,`p`.`input_qty`,`p`.`output_qty`,`p`.`process_action`,`pc`.`processing_count`,`hc`.`harvesting_count` having (`pc`.`processing_count` = `hc`.`harvesting_count`) order by `p`.`year_week` desc;

-- View: processing_finished_weeks
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `processing_finished_weeks` AS select `trimming_t0_report`.`harvest_week` AS `week_num`,`trimming_t0_report`.`harvest_year` AS `year_num`,`trimming_t0_report`.`year_week` AS `year_week` from `trimming_t0_report` where (right(`trimming_t0_report`.`harvest_id`,2) <> '-M') group by `trimming_t0_report`.`harvest_week`,`trimming_t0_report`.`harvest_year` order by `trimming_t0_report`.`harvest_year` desc,`trimming_t0_report`.`harvest_week` desc;

-- View: processing_harvest_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `processing_harvest_batch_view` AS select `bv`.`HID` AS `HID`,`fl`.`flowering_id` AS `FID`,`bv`.`Flower Flip Date` AS `Flower Flip Date`,`bv`.`Harvest Date` AS `Harvest Date`,week(`bv`.`Harvest Date`,0) AS `Week Harvest`,year(`bv`.`Harvest Date`) AS `Year of Harvest`,if((`bv`.`Harvested Plant Count` is null),`dv`.`Harvested Plant Count`,`bv`.`Harvested Plant Count`) AS `Harvested Plant Count`,`bv`.`Strain ID` AS `Strain ID`,`bv`.`Plant Strain` AS `Plant Strain`,if((`bv`.`Wet Weight lbs` is null),`dv`.`Wet Weight lbs`,`bv`.`Wet Weight lbs`) AS `Wet Weight lbs`,if((`dv`.`Dry Weight lbs` is null),`bv`.`Dry Plant Weight lbs`,`dv`.`Dry Weight lbs`) AS `Dry Weight lbs`,if((`dv`.`Moisture Loss lbs` is null),`bv`.`Moisture Loss lbs`,`dv`.`Moisture Loss lbs`) AS `Moisture Loss lbs`,if((`bv`.`Bucked Waste %` is null),concat(round((`dv`.`Moisture Loss %` * 97),2),'%'),concat(round((`bv`.`Moisture loss %` * 97),2),'%')) AS `Moisture Loss %`,`bv`.`Dry Plant Weight lbs` AS `Bucking Intake`,if((`bv`.`Bucked Flower lbs` is null),'Pending Bucking',`bv`.`Bucked Flower lbs`) AS `Bucked Flower lbs`,if((`bv`.`Bucked Waste lbs` is null),'',`bv`.`Bucked Waste lbs`) AS `Bucked Waste lbs`,if((`bv`.`Bucked Waste lbs` is null),'',concat(round((`bv`.`Bucked Waste %` * 100),2),'%')) AS `Bucked Waste %`,if((`tv`.`Total Flower from Harvest` is null),'Pending Trimming',`tv`.`Total Flower from Harvest`) AS `Total Flower from Harvest`,if((`tv`.`Total Trim from Harvest` is null),'',`tv`.`Total Trim from Harvest`) AS `Total Trim from Harvest`,if((`tv`.`Total Flower from Harvest` is null),'',if((`tv`.`Total Trim from Harvest` = 0),'No Trim',concat(round(((`tv`.`Total Flower from Harvest` / (`tv`.`Total Flower from Harvest` + `tv`.`Total Trim from Harvest`)) * 100),2),'% / ',round(((`tv`.`Total Trim from Harvest` / (`tv`.`Total Trim from Harvest` + `tv`.`Total Flower from Harvest`)) * 100),2),'%'))) AS `Flower / Trim`,if((`tv`.`Total Waste from Harvest` is null),'',`tv`.`Total Waste from Harvest`) AS `Total Waste from Harvest`,if((`tv`.`lbs per plant` is null),'',round(`tv`.`lbs per plant`,4)) AS `Pounds per Plant`,if((`tv`.`Ounces per plant` is null),'',round(`tv`.`Ounces per plant`,3)) AS `Ounces per plant`,if((`tv`.`Grams per plant` is null),'',round(`tv`.`Grams per plant`,2)) AS `Grams per plant`,if((`sv`.`Total Sorted Flower from Harvest` is null),'Not Sorted',round(`sv`.`Total Sorted Flower from Harvest`,2)) AS `Total Sorted Flower from Harvest`,if((`sv`.`Big Flower lbs` is null),'',round(`sv`.`Big Flower lbs`,2)) AS `Big Flower lbs`,if((`sv`.`Reg Flower lbs` is null),'',round(`sv`.`Reg Flower lbs`,2)) AS `Reg Flower lbs`,if((`sv`.`Small Flower lbs` is null),'',round(`sv`.`Small Flower lbs`,2)) AS `Small Flower lbs`,if((`sv`.`Micro Flower lbs` is null),'',round(`sv`.`Micro Flower lbs`,2)) AS `Micro Flower lbs`,if((`sv`.`Micro Small Flower lbs` is null),'',round(`sv`.`Micro Small Flower lbs`,2)) AS `Micro Small Flower lbs`,if((`sv`.`Total Big Flower - AAA lbs` is null),'',round(`sv`.`Total Big Flower - AAA lbs`,2)) AS `Total Big Flower - AAA lbs`,if((`sv`.`Total Big Flower - A lbs` is null),'',round(`sv`.`Total Big Flower - A lbs`,2)) AS `Total Big Flower - A lbs`,if((`sv`.`Total Big Flower - B lbs` is null),'',round(`sv`.`Total Big Flower - B lbs`,2)) AS `Total Big Flower - B lbs`,if((`sv`.`Total Big Flower - X lbs` is null),'',round(`sv`.`Total Big Flower - X lbs`,2)) AS `Total Big Flower - X lbs`,if((`sv`.`Total Reg Flower - A lbs` is null),'',round(`sv`.`Total Reg Flower - A lbs`,2)) AS `Total Reg Flower - A lbs`,if((`sv`.`Total Reg Flower - B lbs` is null),'',round(`sv`.`Total Reg Flower - B lbs`,2)) AS `Total Reg Flower - B lbs`,if((`sv`.`Total Reg Flower - C lbs` is null),'',round(`sv`.`Total Reg Flower - C lbs`,2)) AS `Total Reg Flower - C lbs`,if((`sv`.`Total Reg Flower - X lbs` is null),'',round(`sv`.`Total Reg Flower - X lbs`,2)) AS `Total Reg Flower - X lbs`,if((`sv`.`Total Small Flower - AAA lbs` is null),'',round(`sv`.`Total Small Flower - AAA lbs`,2)) AS `Total Small Flower - AAA lbs`,if((`sv`.`Total Small Flower - A lbs` is null),'',round(`sv`.`Total Small Flower - A lbs`,2)) AS `Total Small Flower - A lbs`,if((`sv`.`Total Small Flower - B lbs` is null),'',`sv`.`Total Small Flower - B lbs`) AS `Total Small Flower - B lbs`,if((`sv`.`Total Small Flower - C lbs` is null),'',round(`sv`.`Total Small Flower - C lbs`,2)) AS `Total Small Flower - C lbs`,if((`sv`.`Total Small Flower - X lbs` is null),'',round(`sv`.`Total Small Flower - X lbs`,2)) AS `Total Small Flower - X lbs`,if((`sv`.`Total Micro Flower - A lbs` is null),'',round(`sv`.`Total Micro Flower - A lbs`,2)) AS `Total Micro Flower - A lbs`,if((`sv`.`Total Micro Flower - B lbs` is null),'',round(`sv`.`Total Micro Flower - B lbs`,2)) AS `Total Micro Flower - B lbs`,if((`sv`.`Total Micro Flower - X lbs` is null),'',round(`sv`.`Total Micro Flower - X lbs`,2)) AS `Total Micro Flower - X lbs`,if((`sv`.`Total Micro Small Flower - A lbs` is null),'',round(`sv`.`Total Micro Small Flower - A lbs`,2)) AS `Total Micro Small Flower - A lbs`,if((`sv`.`Total Micro Small Flower - B lbs` is null),'',round(`sv`.`Total Micro Small Flower - B lbs`,2)) AS `Total Micro Small Flower - B lbs`,if((`sv`.`Total Micro Small Flower - X lbs` is null),'',round(`sv`.`Total Micro Small Flower - X lbs`,2)) AS `Total Micro Small Flower - X lbs` from ((((`bucking_harvest_batch_view` `bv` left join `drying_harvest_batch_view` `dv` on((`bv`.`Harvesting ID` = `dv`.`Harvesting ID`))) left join `trimming_harvest_batch_view` `tv` on((`tv`.`Harvesting ID` = `bv`.`Harvesting ID`))) left join `sorter_harvest_batch_view` `sv` on((`sv`.`Harvesting ID` = `bv`.`Harvesting ID`))) left join `cultivation`.`flowering` `fl` on((`bv`.`Flowering ID` = `fl`.`id`))) order by `dv`.`Harvest Date` desc;

-- View: processing_latest_week
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `processing_latest_week` AS select `processing_delta_view`.`strain_id` AS `strain_id`,`processing_delta_view`.`week_num` AS `week_num`,`processing_delta_view`.`year_num` AS `year_num`,`processing_delta_view`.`year_week` AS `year_week`,`processing_delta_view`.`harvest_date` AS `harvest_date`,`processing_delta_view`.`harvest_id` AS `harvest_id`,`processing_delta_view`.`property_id` AS `property_id`,`processing_delta_view`.`plant_count` AS `plant_count`,`processing_delta_view`.`tzero_a_b_retrim` AS `tzero_a_b_retrim`,`processing_delta_view`.`tzero_c` AS `tzero_c`,`processing_delta_view`.`tzero_trim` AS `tzero_trim`,`processing_delta_view`.`tzero_shake` AS `tzero_shake`,`processing_delta_view`.`tzero_waste` AS `tzero_waste`,`processing_delta_view`.`tzero_shrink` AS `tzero_shrink`,`processing_delta_view`.`tzero_flower_status` AS `tzero_flower_status`,`processing_delta_view`.`2021_total_oz` AS `2021_total_oz`,`processing_delta_view`.`2021_plants` AS `2021_plants`,`processing_delta_view`.`2022_total_oz` AS `2022_total_oz`,`processing_delta_view`.`2022_plants` AS `2022_plants`,`processing_delta_view`.`2023_total_oz` AS `2023_total_oz`,`processing_delta_view`.`2023_plants` AS `2023_plants`,`processing_delta_view`.`2024_total_oz` AS `2024_total_oz`,`processing_delta_view`.`2024_plants` AS `2024_plants`,`processing_delta_view`.`processing_count` AS `processing_count`,`processing_delta_view`.`harvesting_count` AS `harvesting_count` from `processing_delta_view` where ((select max(`processing_delta_view`.`year_week`) from `processing_delta_view`) in (`processing_delta_view`.`year_week`,(`processing_delta_view`.`year_week` + 100),(`processing_delta_view`.`year_week` + 200)));

-- View: processing_prod_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `processing_prod_view` AS select `h`.`flowering_id` AS `flowering_id`,`p`.`harvesting_id` AS `harvesting_id`,`p`.`metrc_tag` AS `metrc_tag`,(case when (`p`.`process_queue_type` = 'Hand Trimming') then 'Hand Trimming' when (`p`.`process_queue_type` = 'T-zero Machine') then 'Trimming' when (`p`.`process_queue_id` = 'QC-Sorting') then 'Sorting' when (`p`.`process_queue_id` = 'Drying') then 'Drying' when (`p`.`process_queue_id` = 'Bucking') then 'Bucking' else NULL end) AS `process`,`p`.`id` AS `batch_id`,`p`.`date` AS `date`,'In Queue' AS `batch_status`,`f`.`flowering_id` AS `flowering_id_name`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,NULL AS `flower_plant_count`,NULL AS `harvest_plant_count`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`cat`.`name` AS `input_category`,`ct`.`name` AS `input_category_type`,NULL AS `input_product_size`,NULL AS `input_product_grade`,sum(`p`.`quantity`) AS `input_quantity`,NULL AS `output_category`,NULL AS `output_category_type`,NULL AS `output_size`,NULL AS `output_grade`,NULL AS `output_quantity` from (((((`processing` `p` left join `cultivation`.`harvesting` `h` on((`h`.`id` = `p`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `p`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `p`.`category_type_id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) left join `cultivation`.`flowering` `f` on((`f`.`id` = `h`.`flowering_id`))) where ((`p`.`process_queue_id` is not null) and (`p`.`status` = 'Active')) group by `p`.`harvesting_id`,`p`.`metrc_tag`,`h`.`test_id`,`p`.`process_queue_id`,`h`.`harvest_id`,`p`.`date`,`h`.`property_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`cat`.`name`,`ct`.`name`,`p`.`id`,`h`.`flowering_id`,`f`.`flowering_id` order by `p`.`date` desc;

-- View: sorter_crop_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorter_crop_batch_view` AS select `sm`.`Flowering ID` AS `Flowering ID`,max(`sm`.`Harvesting ID`) AS `Harvesting ID`,max(`sm`.`Harvesting ID`) AS `Processing ID`,max(`sm`.`HID`) AS `HID`,max(`sm`.`Test Record Count`) AS `Test Record Count`,max(`sm`.`Crop Plant Count`) AS `Crop Plant Count`,max(`sm`.`Harvested Plant Count`) AS `Harvested Plant Count`,max(`sm`.`Harvest Record Count`) AS `Harvest Record Count`,max(`sm`.`Strain ID`) AS `Strain ID`,max(`sm`.`Plant Strain`) AS `Plant Strain`,if((((max(`sm`.`Sorted Flower lbs`) - max(`sh`.`Input Flower lbs`)) + max(`sh`.`Sorted Flower lbs`)) is null),max(`sm`.`Sorted Flower lbs`),(max(`sm`.`Sorted Flower lbs`) + max(`sh`.`Sorted Flower lbs`))) AS `Total Sorted Flower from Harvest`,max(`sm`.`Input lbs`) AS `Machine Sorting Input lbs`,sum(`sm`.`Sorted Flower lbs`) AS `Machine Sorted Flower lbs`,if((max(`sh`.`Input Flower lbs`) is null),0,max(`sh`.`Input Flower lbs`)) AS `Hand Sorted Input Flower lbs`,if((max(`sh`.`Sorted Flower lbs`) is null),0,max(`sh`.`Sorted Flower lbs`)) AS `Total Hand Sorted Flower lbs`,if((max(`sh`.`Shake lbs`) is null),0,max(`sh`.`Shake lbs`)) AS `Hand Sorted Shake lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Big Flower - AAA lbs`),(max(`sm`.`Big Flower - AAA lbs`) + max(`sh`.`Big Flower - AAA lbs`))) AS `Total Big Flower - AAA lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Big Flower - A lbs`),(max(`sm`.`Big Flower - A lbs`) + max(`sh`.`Big Flower - A lbs`))) AS `Total Big Flower - A lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Big Flower - B lbs`),(max(`sm`.`Big Flower - B lbs`) + max(`sh`.`Big Flower - B lbs`))) AS `Total Big Flower - B lbs`,max(`sm`.`Big Flower - X lbs`) AS `Total Big Flower - X lbs`,max(`sm`.`Reg Flower - A lbs`) AS `Total Reg Flower - A lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Reg Flower - B lbs`),(max(`sm`.`Reg Flower - B lbs`) + max(`sh`.`Reg Flower - B lbs`))) AS `Total Reg Flower - B lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Reg Flower - C lbs`),(max(`sm`.`Reg Flower - C lbs`) + max(`sh`.`Reg Flower - C lbs`))) AS `Total Reg Flower - C lbs`,max(`sm`.`Reg Flower - X lbs`) AS `Total Reg Flower - X lbs`,max(`sm`.`Small Flower - AAA lbs`) AS `Total Small Flower - AAA lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Small Flower - A lbs`),(max(`sm`.`Small Flower - A lbs`) + max(`sh`.`Small Flower - A lbs`))) AS `Total Small Flower - A lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Small Flower - B lbs`),(max(`sm`.`Small Flower - B lbs`) + max(`sh`.`Small Flower - B lbs`))) AS `Total Small Flower - B lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Small Flower - C lbs`),(max(`sm`.`Small Flower - C lbs`) + max(`sh`.`Small Flower - C lbs`))) AS `Total Small Flower - C lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Small Flower - X lbs`),(max(`sm`.`Small Flower - X lbs`) + max(`sh`.`Small Flower - X lbs`))) AS `Total Small Flower - X lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Micros Flower - A lbs`),(max(`sm`.`Micros Flower - A lbs`) + max(`sh`.`Micros Flower - A lbs`))) AS `Total Micro Flower - A lbs`,max(`sm`.`Micros Flower - B lbs`) AS `Total Micro Flower - B lbs`,max(`sm`.`Micros Flower - X lbs`) AS `Total Micro Flower - X lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Micro Small Flower - A lbs`),(max(`sm`.`Micro Small Flower - A lbs`) + max(`sh`.`Micro Small Flower - A lbs`))) AS `Total Micro Small Flower - A lbs`,max(`sm`.`Micro Small Flower - B lbs`) AS `Total Micro Small Flower - B lbs`,max(`sm`.`Micro Small Flower - X lbs`) AS `Total Micro Small Flower - X lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Shake lbs`),(max(`sm`.`Shake lbs`) + max(`sh`.`Shake lbs`))) AS `Total Shake lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Trim lbs`),(max(`sm`.`Trim lbs`) + max(`sh`.`Trim lbs`))) AS `Total Trim lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Kief lbs`),(max(`sm`.`Kief lbs`) + max(`sh`.`Kief lbs`))) AS `Total Kief lbs` from (`sorter_machine_crop_batch_view` `sm` left join `sorter_hand_crop_batch_view` `sh` on((`sh`.`Flowering ID` = `sm`.`Flowering ID`))) group by `sm`.`Flowering ID`;

-- View: sorter_detail_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorter_detail_view` AS select `sb`.`harvesting_id` AS `harvesting_id`,max(`sb`.`date`) AS `sorter_INdate`,sum(`sb`.`quantity`) AS `input_quantity` from ((`sorter_batch` `sb` left join `sorter_details` `s` on((`sb`.`id` = `s`.`sorter_batch_id`))) left join `cultivation`.`harvesting` `h` on((`sb`.`harvesting_id` = `h`.`id`))) group by `sb`.`harvesting_id`;

-- View: sorter_hand_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorter_hand_batch_view` AS select `h`.`flowering_id` AS `Flowering ID`,`h`.`id` AS `Harvesting ID`,`sb`.`batch_id` AS `Processing ID`,`h`.`harvest_id` AS `HID`,`h`.`test_id` AS `Test ID`,max(`h`.`harvest_type`) AS `Harvest Type`,`fl`.`plant_count` AS `Crop Plant Count`,`h`.`plant_count_harvested` AS `Harvested Plant Count`,max(`strain`.`strain_code`) AS `Strain ID`,max(`strain`.`name`) AS `Plant Strain`,max(`sb`.`source_metrc_tag`) AS `Processing Batch METRC`,max(`sb`.`processing_batch_source_tag`) AS `Source METRC`,`sb`.`id` AS `Machine Sorting Batch ID`,`sb`.`metrc_tag` AS `METRC Tag`,`sb`.`process_type` AS `Sorting Type`,`sb`.`category_id` AS `Product Category`,`sb`.`category_type_id` AS `Product Category Type`,max(`sb`.`quantity`) AS `Input lbs`,max(`sb`.`bin_count`) AS `Bin Count Recieved`,sum(`sd`.`quantity`) AS `Sorted Flower lbs`,sum((case when ((`sd`.`product_size_id` = 'B') and (`sd`.`product_grade_id` = 'AAA')) then `sd`.`quantity` else 0 end)) AS `Big Flower - AAA lbs`,sum((case when ((`sd`.`product_size_id` = 'B') and (`sd`.`product_grade_id` = 'A')) then `sd`.`quantity` else 0 end)) AS `Big Flower - A lbs`,sum((case when ((`sd`.`product_size_id` = 'B') and (`sd`.`product_grade_id` = 'B')) then `sd`.`quantity` else 0 end)) AS `Big Flower - B lbs`,sum((case when ((`sd`.`product_size_id` = 'R') and (`sd`.`product_grade_id` = 'B')) then `sd`.`quantity` else 0 end)) AS `Reg Flower - B lbs`,sum((case when ((`sd`.`product_size_id` = 'R') and (`sd`.`product_grade_id` = 'C')) then `sd`.`quantity` else 0 end)) AS `Reg Flower - C lbs`,sum((case when ((`sd`.`product_size_id` = 'S') and (`sd`.`product_grade_id` = 'A')) then `sd`.`quantity` else 0 end)) AS `Small Flower - A lbs`,sum((case when ((`sd`.`product_size_id` = 'S') and (`sd`.`product_grade_id` = 'B')) then `sd`.`quantity` else 0 end)) AS `Small Flower - B lbs`,sum((case when ((`sd`.`product_size_id` = 'S') and (`sd`.`product_grade_id` = 'C')) then `sd`.`quantity` else 0 end)) AS `Small Flower - C lbs`,sum((case when ((`sd`.`product_size_id` = 'S') and (`sd`.`product_grade_id` is null)) then `sd`.`quantity` else 0 end)) AS `Small Flower - X lbs`,sum((case when ((`sd`.`product_size_id` = 'M') and (`sd`.`product_grade_id` = 'A')) then `sd`.`quantity` else 0 end)) AS `Micros Flower - A lbs`,sum((case when ((`sd`.`product_size_id` = 'MS') and (`sd`.`product_grade_id` = 'A')) then `sd`.`quantity` else 0 end)) AS `Micro Small Flower - A lbs`,sum(if((`sd`.`product_size_id` = 'B'),`sd`.`quantity`,'')) AS `Big Flower lbs`,sum(if((`sd`.`product_size_id` = 'R'),`sd`.`quantity`,'')) AS `Reg Flower lbs`,sum(if((`sd`.`product_size_id` = 'S'),`sd`.`quantity`,'')) AS `Small Flower lbs`,sum(if((`sd`.`product_size_id` = 'M'),`sd`.`quantity`,'')) AS `Micros Flower lbs`,sum(if((`sd`.`product_size_id` = 'MS'),`sd`.`quantity`,'')) AS `Micro Small Flower lbs`,sum(if((`sd`.`category_type_id` = 'SK-CTP-5844'),`sd`.`quantity`,0)) AS `Shake lbs`,sum(if((`sd`.`category_type_id` = 'SK-CTP-56d3'),`sd`.`quantity`,0)) AS `Trim lbs`,sum(if((`sd`.`category_id` = 'SK-CTG-b89a'),`sd`.`quantity`,0)) AS `Kief lbs`,sum(if((`sd`.`category_id` = 'SK-CTG-a60f'),`sd`.`quantity`,0)) AS `Waste lbs` from (((((`sorter_batch` `sb` left join `sorter_details` `sd` on((`sb`.`id` = `sd`.`sorter_batch_id`))) left join `cultivation`.`harvesting` `h` on((`sb`.`harvesting_id` = `h`.`id`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `sb`.`strain_id`))) left join `process_log` `pl` on((`pl`.`source_id` = `sb`.`source_id`))) left join `cultivation`.`flowering` `fl` on((`fl`.`id` = `h`.`flowering_id`))) where (`sb`.`process_type` is null) group by `sb`.`id`;

-- View: sorter_hand_crop_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorter_hand_crop_batch_view` AS select `sb`.`Flowering ID` AS `Flowering ID`,max(`sb`.`Harvesting ID`) AS `Harvesting ID`,max(`sb`.`Processing ID`) AS `Processing ID`,min(`sb`.`HID`) AS `HID`,count(`sb`.`Test ID`) AS `Test Record Count`,max(`sb`.`Crop Plant Count`) AS `Crop Plant Count`,max(`sb`.`Harvested Plant Count`) AS `Harvested Plant Count`,count(`sb`.`Harvesting ID`) AS `Harvest Record Count`,max(`sb`.`Strain ID`) AS `Strain ID`,max(`sb`.`Plant Strain`) AS `Plant Strain`,max(`sb`.`Processing Batch METRC`) AS `Processing Batch METRC`,max(`sb`.`Source METRC`) AS `Source METRC`,max(`sb`.`Input lbs`) AS `Input Flower lbs`,sum(`sb`.`Bin Count Recieved`) AS `Bin Count Recieved`,sum(`sb`.`Sorted Flower lbs`) AS `Sorted Flower lbs`,sum(`sb`.`Big Flower - AAA lbs`) AS `Big Flower - AAA lbs`,sum(`sb`.`Big Flower - A lbs`) AS `Big Flower - A lbs`,sum(`sb`.`Big Flower - B lbs`) AS `Big Flower - B lbs`,sum(`sb`.`Reg Flower - B lbs`) AS `Reg Flower - B lbs`,sum(`sb`.`Reg Flower - C lbs`) AS `Reg Flower - C lbs`,sum(`sb`.`Small Flower - A lbs`) AS `Small Flower - A lbs`,sum(`sb`.`Small Flower - B lbs`) AS `Small Flower - B lbs`,sum(`sb`.`Small Flower - C lbs`) AS `Small Flower - C lbs`,sum(`sb`.`Small Flower - X lbs`) AS `Small Flower - X lbs`,sum(`sb`.`Micros Flower - A lbs`) AS `Micros Flower - A lbs`,sum(`sb`.`Micro Small Flower - A lbs`) AS `Micro Small Flower - A lbs`,sum(`sb`.`Shake lbs`) AS `Shake lbs`,sum(`sb`.`Trim lbs`) AS `Trim lbs`,sum(`sb`.`Kief lbs`) AS `Kief lbs` from `sorter_hand_batch_view` `sb` group by `sb`.`Harvesting ID`;

-- View: sorter_hand_harvest_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorter_hand_harvest_batch_view` AS select min(`sb`.`Flowering ID`) AS `Flowering ID`,min(`sb`.`Crop Plant Count`) AS `Crop Plant Count`,count(`sb`.`Flowering ID`) AS `Count of Flowering ID`,`sb`.`Harvesting ID` AS `Harvesting ID`,max(`sb`.`Processing ID`) AS `Processing ID`,`sb`.`HID` AS `HID`,count(`sb`.`Test ID`) AS `Harvest Test Record Count`,count(`sb`.`Harvested Plant Count`) AS `Harvested Plant Count`,max(`sb`.`Strain ID`) AS `Strain ID`,max(`sb`.`Plant Strain`) AS `Plant Strain`,max(`sb`.`Processing Batch METRC`) AS `Processing Batch METRC`,max(`sb`.`Source METRC`) AS `Source METRC`,max(`sb`.`Input lbs`) AS `Input Flower lbs`,sum(`sb`.`Bin Count Recieved`) AS `Bin Count Recieved`,sum(`sb`.`Sorted Flower lbs`) AS `Sorted Flower lbs`,sum(`sb`.`Big Flower - AAA lbs`) AS `Big Flower - AAA lbs`,sum(`sb`.`Big Flower - A lbs`) AS `Big Flower - A lbs`,sum(`sb`.`Big Flower - B lbs`) AS `Big Flower - B lbs`,sum(`sb`.`Reg Flower - B lbs`) AS `Reg Flower - B lbs`,sum(`sb`.`Reg Flower - C lbs`) AS `Reg Flower - C lbs`,sum(`sb`.`Small Flower - A lbs`) AS `Small Flower - A lbs`,sum(`sb`.`Small Flower - B lbs`) AS `Small Flower - B lbs`,sum(`sb`.`Small Flower - C lbs`) AS `Small Flower - C lbs`,sum(`sb`.`Small Flower - X lbs`) AS `Small Flower - X lbs`,sum(`sb`.`Micros Flower - A lbs`) AS `Micros Flower - A lbs`,sum(`sb`.`Micro Small Flower - A lbs`) AS `Micro Small Flower - A lbs`,sum(`sb`.`Big Flower lbs`) AS `Big Flower lbs`,sum(`sb`.`Reg Flower lbs`) AS `Reg Flower lbs`,sum(`sb`.`Small Flower lbs`) AS `Small Flower lbs`,sum(`sb`.`Micros Flower lbs`) AS `Micro Flower lbs`,sum(`sb`.`Micro Small Flower lbs`) AS `Micro Small Flower lbs`,sum(`sb`.`Shake lbs`) AS `Shake lbs`,sum(`sb`.`Trim lbs`) AS `Trim lbs`,sum(`sb`.`Kief lbs`) AS `Kief lbs` from `sorter_hand_batch_view` `sb` group by `sb`.`Harvesting ID`;

-- View: sorter_harvest_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorter_harvest_batch_view` AS select min(`sm`.`Flowering ID`) AS `Flowering ID`,`sm`.`Harvesting ID` AS `Harvesting ID`,max(`sm`.`Harvesting ID`) AS `Processing ID`,max(`sm`.`HID`) AS `HID`,max(`sm`.`Test Record Count`) AS `Test Record Count`,max(`sm`.`Crop Plant Count`) AS `Crop Plant Count`,max(`sm`.`Harvested Plant Count`) AS `Harvested Plant Count`,max(`sm`.`Strain ID`) AS `Strain ID`,max(`sm`.`Plant Strain`) AS `Plant Strain`,if((((max(`sm`.`Sorted Flower lbs`) - max(`sh`.`Input Flower lbs`)) + max(`sh`.`Sorted Flower lbs`)) is null),max(`sm`.`Sorted Flower lbs`),((max(`sm`.`Sorted Flower lbs`) + max(`sh`.`Sorted Flower lbs`)) - max(`sh`.`Input Flower lbs`))) AS `Total Sorted Flower from Harvest`,if((sum(`sh`.`Big Flower lbs`) is null),sum(`sm`.`Big Flower lbs`),(sum(`sm`.`Big Flower lbs`) + sum(`sh`.`Big Flower lbs`))) AS `Big Flower lbs`,if((sum(`sh`.`Reg Flower lbs`) is null),sum(`sm`.`Reg Flower lbs`),(sum(`sm`.`Reg Flower lbs`) + sum(`sh`.`Reg Flower lbs`))) AS `Reg Flower lbs`,if((sum(`sh`.`Small Flower lbs`) is null),sum(`sm`.`Small Flower lbs`),(sum(`sm`.`Small Flower lbs`) + sum(`sh`.`Small Flower lbs`))) AS `Small Flower lbs`,if((sum(`sh`.`Micro Flower lbs`) is null),sum(`sm`.`Micro Flower lbs`),(sum(`sm`.`Micro Flower lbs`) + sum(`sh`.`Micro Flower lbs`))) AS `Micro Flower lbs`,if((sum(`sh`.`Micro Small Flower lbs`) is null),sum(`sm`.`Micro Small Flower lbs`),(sum(`sm`.`Micro Small Flower lbs`) + sum(`sh`.`Micro Small Flower lbs`))) AS `Micro Small Flower lbs`,max(`sm`.`Input lbs`) AS `Machine Sorting Input lbs`,sum(`sm`.`Sorted Flower lbs`) AS `Machine Sorted Flower lbs`,if((max(`sh`.`Input Flower lbs`) is null),0,max(`sh`.`Input Flower lbs`)) AS `Hand Sorted Input Flower lbs`,if((max(`sh`.`Sorted Flower lbs`) is null),0,max(`sh`.`Sorted Flower lbs`)) AS `Total Hand Sorted Flower lbs`,if((max(`sh`.`Shake lbs`) is null),0,max(`sh`.`Shake lbs`)) AS `Hand Sorted Shake lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Big Flower - AAA lbs`),(max(`sm`.`Big Flower - AAA lbs`) + max(`sh`.`Big Flower - AAA lbs`))) AS `Total Big Flower - AAA lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Big Flower - A lbs`),(max(`sm`.`Big Flower - A lbs`) + max(`sh`.`Big Flower - A lbs`))) AS `Total Big Flower - A lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Big Flower - B lbs`),(max(`sm`.`Big Flower - B lbs`) + max(`sh`.`Big Flower - B lbs`))) AS `Total Big Flower - B lbs`,max(`sm`.`Big Flower - X lbs`) AS `Total Big Flower - X lbs`,max(`sm`.`Reg Flower - A lbs`) AS `Total Reg Flower - A lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Reg Flower - B lbs`),(max(`sm`.`Reg Flower - B lbs`) + max(`sh`.`Reg Flower - B lbs`))) AS `Total Reg Flower - B lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Reg Flower - C lbs`),(max(`sm`.`Reg Flower - C lbs`) + max(`sh`.`Reg Flower - C lbs`))) AS `Total Reg Flower - C lbs`,max(`sm`.`Reg Flower - X lbs`) AS `Total Reg Flower - X lbs`,max(`sm`.`Small Flower - AAA lbs`) AS `Total Small Flower - AAA lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Small Flower - A lbs`),(max(`sm`.`Small Flower - A lbs`) + max(`sh`.`Small Flower - A lbs`))) AS `Total Small Flower - A lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Small Flower - B lbs`),(max(`sm`.`Small Flower - B lbs`) + max(`sh`.`Small Flower - B lbs`))) AS `Total Small Flower - B lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Small Flower - C lbs`),(max(`sm`.`Small Flower - C lbs`) + max(`sh`.`Small Flower - C lbs`))) AS `Total Small Flower - C lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Small Flower - X lbs`),(max(`sm`.`Small Flower - X lbs`) + max(`sh`.`Small Flower - X lbs`))) AS `Total Small Flower - X lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Micros Flower - A lbs`),(max(`sm`.`Micros Flower - A lbs`) + max(`sh`.`Micros Flower - A lbs`))) AS `Total Micro Flower - A lbs`,max(`sm`.`Micros Flower - B lbs`) AS `Total Micro Flower - B lbs`,max(`sm`.`Micros Flower - X lbs`) AS `Total Micro Flower - X lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Micro Small Flower - A lbs`),(max(`sm`.`Micro Small Flower - A lbs`) + max(`sh`.`Micro Small Flower - A lbs`))) AS `Total Micro Small Flower - A lbs`,max(`sm`.`Micro Small Flower - B lbs`) AS `Total Micro Small Flower - B lbs`,max(`sm`.`Micro Small Flower - X lbs`) AS `Total Micro Small Flower - X lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Shake lbs`),(max(`sm`.`Shake lbs`) + max(`sh`.`Shake lbs`))) AS `Total Shake lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Trim lbs`),(max(`sm`.`Trim lbs`) + max(`sh`.`Trim lbs`))) AS `Total Trim lbs`,if((max(`sh`.`HID`) is null),max(`sm`.`Kief lbs`),(max(`sm`.`Kief lbs`) + max(`sh`.`Kief lbs`))) AS `Total Kief lbs` from (`sorter_machine_harvest_batch_view` `sm` left join `sorter_hand_harvest_batch_view` `sh` on((`sh`.`Harvesting ID` = `sm`.`Harvesting ID`))) group by `sm`.`Harvesting ID`;

-- View: sorter_input
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorter_input` AS select `sb`.`id` AS `ID`,`sb`.`date` AS `Date`,`h`.`harvest_id` AS `Harvest ID`,`strain`.`strain_code` AS `Strain ID`,`strain`.`name` AS `Strain Name`,`sb`.`metrc_tag` AS `Sorter Batch Tag`,`sb`.`quantity` AS `Sorter Batch Weight`,`p`.`grade` AS `Sorter Batch Grade`,`sb`.`process_type` AS `Sorter Batch Type`,`c`.`code` AS `Category`,`ct`.`name` AS `Type`,`sb`.`quantity` AS `Weight`,`sb`.`status` AS `Status`,`sb`.`modified_on` AS `Modified On`,`sb`.`modified_by` AS `Modified By`,`sb`.`created_on` AS `Created On`,`sb`.`created_by` AS `Created By` from (((((`sorter_batch` `sb` left join `cultivation`.`harvesting` `h` on((`h`.`id` = `sb`.`harvesting_id`))) left join `product_sku`.`category` `c` on((`c`.`id` = `sb`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `sb`.`category_type_id`))) left join `processing` `p` on((`p`.`id` = `sb`.`source_id`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `sb`.`strain_id`))) order by `sb`.`date` desc,`sb`.`status` desc,`sb`.`metrc_tag` desc;

-- View: sorter_machine_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorter_machine_batch_view` AS select `h`.`flowering_id` AS `Flowering ID`,`h`.`id` AS `Harvesting ID`,`sb`.`batch_id` AS `Processing ID`,`h`.`harvest_id` AS `HID`,max(`h`.`test_id`) AS `Test ID`,max(`h`.`harvest_type`) AS `Harvest Type`,`fl`.`plant_count` AS `Crop Plant Count`,`h`.`plant_count_harvested` AS `Harvested Plant Count`,max(`strain`.`strain_code`) AS `Strain ID`,max(`strain`.`name`) AS `Plant Strain`,max(`sb`.`source_metrc_tag`) AS `Processing Batch METRC`,max(`sb`.`processing_batch_source_tag`) AS `Source METRC`,`sb`.`id` AS `Machine Sorting Batch ID`,`sb`.`metrc_tag` AS `METRC Tag`,`sb`.`process_type` AS `Sorting Type`,`sb`.`category_id` AS `Product Category`,`sb`.`category_type_id` AS `Product Category Type`,max(`sb`.`quantity`) AS `Input lbs`,count(`sb`.`id`) AS `Bin Count Recieved`,sum(`sd`.`quantity`) AS `Sorted Flower lbs`,sum((case when ((`sd`.`product_size_id` = 'B') and (`sd`.`product_grade_id` = 'AAA')) then `sd`.`quantity` else '' end)) AS `Big Flower - AAA lbs`,sum((case when ((`sd`.`product_size_id` = 'B') and (`sd`.`product_grade_id` = 'A')) then `sd`.`quantity` else '' end)) AS `Big Flower - A lbs`,sum((case when ((`sd`.`product_size_id` = 'B') and (`sd`.`product_grade_id` = 'B')) then `sd`.`quantity` else '' end)) AS `Big Flower - B lbs`,sum((case when ((`sd`.`product_size_id` = 'B') and (`sd`.`product_grade_id` is null)) then `sd`.`quantity` else '' end)) AS `Big Flower - X lbs`,sum(if((`sd`.`product_size_id` = 'B'),`sd`.`quantity`,'')) AS `Big Flower lbs`,sum((case when ((`sd`.`product_size_id` = 'R') and (`sd`.`product_grade_id` = 'A')) then `sd`.`quantity` else '' end)) AS `Reg Flower - A lbs`,sum((case when ((`sd`.`product_size_id` = 'R') and (`sd`.`product_grade_id` = 'B')) then `sd`.`quantity` else '' end)) AS `Reg Flower - B lbs`,sum((case when ((`sd`.`product_size_id` = 'R') and (`sd`.`product_grade_id` = 'C')) then `sd`.`quantity` else '' end)) AS `Reg Flower - C lbs`,sum((case when ((`sd`.`product_size_id` = 'R') and (`sd`.`product_grade_id` is null)) then `sd`.`quantity` else '' end)) AS `Reg Flower - X lbs`,sum(if((`sd`.`product_size_id` = 'R'),`sd`.`quantity`,'')) AS `Reg Flower lbs`,sum((case when ((`sd`.`product_size_id` = 'S') and (`sd`.`product_grade_id` = 'AAA')) then `sd`.`quantity` else '' end)) AS `Small Flower - AAA lbs`,sum((case when ((`sd`.`product_size_id` = 'S') and (`sd`.`product_grade_id` = 'A')) then `sd`.`quantity` else '' end)) AS `Small Flower - A lbs`,sum((case when ((`sd`.`product_size_id` = 'S') and (`sd`.`product_grade_id` = 'B')) then `sd`.`quantity` else '' end)) AS `Small Flower - B lbs`,sum((case when ((`sd`.`product_size_id` = 'S') and (`sd`.`product_grade_id` = 'C')) then `sd`.`quantity` else '' end)) AS `Small Flower - C lbs`,sum((case when ((`sd`.`product_size_id` = 'S') and (`sd`.`product_grade_id` is null)) then `sd`.`quantity` else '' end)) AS `Small Flower - X lbs`,sum(if((`sd`.`product_size_id` = 'S'),`sd`.`quantity`,'')) AS `Small Flower lbs`,sum((case when ((`sd`.`product_size_id` = 'M') and (`sd`.`product_grade_id` = 'A')) then `sd`.`quantity` else '' end)) AS `Micros Flower - A lbs`,sum((case when ((`sd`.`product_size_id` = 'M') and (`sd`.`product_grade_id` = 'B')) then `sd`.`quantity` else '' end)) AS `Micros Flower - B lbs`,sum((case when ((`sd`.`product_size_id` = 'M') and (`sd`.`product_grade_id` is null)) then `sd`.`quantity` else '' end)) AS `Micros Flower - X lbs`,sum(if((`sd`.`product_size_id` = 'M'),`sd`.`quantity`,'')) AS `Micros Flower lbs`,sum((case when ((`sd`.`product_size_id` = 'MS') and (`sd`.`product_grade_id` = 'A')) then `sd`.`quantity` else '' end)) AS `Micro Small Flower - A lbs`,sum((case when ((`sd`.`product_size_id` = 'MS') and (`sd`.`product_grade_id` = 'B')) then `sd`.`quantity` else '' end)) AS `Micro Small Flower - B lbs`,sum((case when ((`sd`.`product_size_id` = 'MS') and (`sd`.`product_grade_id` is null)) then `sd`.`quantity` else '' end)) AS `Micro Small Flower - X lbs`,sum(if((`sd`.`product_size_id` = 'MS'),`sd`.`quantity`,'')) AS `Micro Small Flower lbs`,sum(if((`sd`.`category_type_id` = 'SK-CTP-5844'),`sd`.`quantity`,0)) AS `Shake lbs`,sum(if((`sd`.`category_type_id` = 'SK-CTP-56d3'),`sd`.`quantity`,0)) AS `Trim lbs`,sum(if((`sd`.`category_id` = 'SK-CTG-b89a'),`sd`.`quantity`,0)) AS `Kief lbs`,sum(if((`sd`.`category_id` = 'SK-CTG-a60f'),`sd`.`quantity`,0)) AS `Waste lbs` from (((((`sorter_batch` `sb` left join `sorter_details` `sd` on((`sb`.`id` = `sd`.`sorter_batch_id`))) left join `cultivation`.`harvesting` `h` on((`sb`.`harvesting_id` = `h`.`id`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `sb`.`strain_id`))) left join `process_log` `pl` on((`pl`.`source_id` = `sb`.`source_id`))) left join `cultivation`.`flowering` `fl` on((`fl`.`id` = `h`.`flowering_id`))) where (`sb`.`process_type` like '%Machine%') group by `sb`.`id`;

-- View: sorter_machine_crop_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorter_machine_crop_batch_view` AS select `sb`.`Flowering ID` AS `Flowering ID`,max(`sb`.`Harvesting ID`) AS `Harvesting ID`,max(`sb`.`Processing ID`) AS `Processing ID`,min(`sb`.`HID`) AS `HID`,count(`sb`.`Test ID`) AS `Test Record Count`,max(`sb`.`Crop Plant Count`) AS `Crop Plant Count`,max(`sb`.`Harvested Plant Count`) AS `Harvested Plant Count`,count(`sb`.`Harvesting ID`) AS `Harvest Record Count`,max(`sb`.`Strain ID`) AS `Strain ID`,max(`sb`.`Plant Strain`) AS `Plant Strain`,max(`sb`.`Processing Batch METRC`) AS `Processing Batch METRC`,max(`sb`.`Source METRC`) AS `Source METRC`,max(`sb`.`Input lbs`) AS `Input lbs`,max(`sb`.`Bin Count Recieved`) AS `Bin Count Recieved`,sum(`sb`.`Sorted Flower lbs`) AS `Sorted Flower lbs`,sum(`sb`.`Big Flower - AAA lbs`) AS `Big Flower - AAA lbs`,sum(`sb`.`Big Flower - A lbs`) AS `Big Flower - A lbs`,sum(`sb`.`Big Flower - B lbs`) AS `Big Flower - B lbs`,sum(`sb`.`Big Flower - X lbs`) AS `Big Flower - X lbs`,sum(`sb`.`Reg Flower - A lbs`) AS `Reg Flower - A lbs`,sum(`sb`.`Reg Flower - B lbs`) AS `Reg Flower - B lbs`,sum(`sb`.`Reg Flower - C lbs`) AS `Reg Flower - C lbs`,sum(`sb`.`Reg Flower - X lbs`) AS `Reg Flower - X lbs`,sum(`sb`.`Small Flower - AAA lbs`) AS `Small Flower - AAA lbs`,sum(`sb`.`Small Flower - A lbs`) AS `Small Flower - A lbs`,sum(`sb`.`Small Flower - B lbs`) AS `Small Flower - B lbs`,sum(`sb`.`Small Flower - C lbs`) AS `Small Flower - C lbs`,sum(`sb`.`Small Flower - X lbs`) AS `Small Flower - X lbs`,sum(`sb`.`Micros Flower - A lbs`) AS `Micros Flower - A lbs`,sum(`sb`.`Micros Flower - B lbs`) AS `Micros Flower - B lbs`,sum(`sb`.`Micros Flower - X lbs`) AS `Micros Flower - X lbs`,sum(`sb`.`Micro Small Flower - A lbs`) AS `Micro Small Flower - A lbs`,sum(`sb`.`Micro Small Flower - B lbs`) AS `Micro Small Flower - B lbs`,sum(`sb`.`Micro Small Flower - X lbs`) AS `Micro Small Flower - X lbs`,sum(`sb`.`Shake lbs`) AS `Shake lbs`,sum(`sb`.`Trim lbs`) AS `Trim lbs`,sum(`sb`.`Kief lbs`) AS `Kief lbs` from `sorter_machine_batch_view` `sb` group by `sb`.`Flowering ID`;

-- View: sorter_machine_harvest_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorter_machine_harvest_batch_view` AS select min(`sb`.`Flowering ID`) AS `Flowering ID`,min(`sb`.`Crop Plant Count`) AS `Crop Plant Count`,`sb`.`Harvesting ID` AS `Harvesting ID`,max(`sb`.`Processing ID`) AS `Processing ID`,min(`sb`.`HID`) AS `HID`,count(`sb`.`Flowering ID`) AS `Flowering ID Record Count`,count(`sb`.`Test ID`) AS `Test Record Count`,`sb`.`Harvested Plant Count` AS `Harvested Plant Count`,max(`sb`.`Strain ID`) AS `Strain ID`,max(`sb`.`Plant Strain`) AS `Plant Strain`,max(`sb`.`Processing Batch METRC`) AS `Processing Batch METRC`,max(`sb`.`Source METRC`) AS `Source METRC`,max(`sb`.`Input lbs`) AS `Input lbs`,max(`sb`.`Bin Count Recieved`) AS `Bin Count Recieved`,sum(`sb`.`Sorted Flower lbs`) AS `Sorted Flower lbs`,sum(`sb`.`Big Flower - AAA lbs`) AS `Big Flower - AAA lbs`,sum(`sb`.`Big Flower - A lbs`) AS `Big Flower - A lbs`,sum(`sb`.`Big Flower - B lbs`) AS `Big Flower - B lbs`,sum(`sb`.`Big Flower - X lbs`) AS `Big Flower - X lbs`,sum(`sb`.`Reg Flower - A lbs`) AS `Reg Flower - A lbs`,sum(`sb`.`Reg Flower - B lbs`) AS `Reg Flower - B lbs`,sum(`sb`.`Reg Flower - C lbs`) AS `Reg Flower - C lbs`,sum(`sb`.`Reg Flower - X lbs`) AS `Reg Flower - X lbs`,sum(`sb`.`Small Flower - AAA lbs`) AS `Small Flower - AAA lbs`,sum(`sb`.`Small Flower - A lbs`) AS `Small Flower - A lbs`,sum(`sb`.`Small Flower - B lbs`) AS `Small Flower - B lbs`,sum(`sb`.`Small Flower - C lbs`) AS `Small Flower - C lbs`,sum(`sb`.`Small Flower - X lbs`) AS `Small Flower - X lbs`,sum(`sb`.`Micros Flower - A lbs`) AS `Micros Flower - A lbs`,sum(`sb`.`Micros Flower - B lbs`) AS `Micros Flower - B lbs`,sum(`sb`.`Micros Flower - X lbs`) AS `Micros Flower - X lbs`,sum(`sb`.`Micro Small Flower - A lbs`) AS `Micro Small Flower - A lbs`,sum(`sb`.`Micro Small Flower - B lbs`) AS `Micro Small Flower - B lbs`,sum(`sb`.`Micro Small Flower - X lbs`) AS `Micro Small Flower - X lbs`,sum(`sb`.`Big Flower lbs`) AS `Big Flower lbs`,sum(`sb`.`Reg Flower lbs`) AS `Reg Flower lbs`,sum(`sb`.`Small Flower lbs`) AS `Small Flower lbs`,sum(`sb`.`Micros Flower lbs`) AS `Micro Flower lbs`,sum(`sb`.`Micro Small Flower lbs`) AS `Micro Small Flower lbs`,sum(`sb`.`Shake lbs`) AS `Shake lbs`,sum(`sb`.`Trim lbs`) AS `Trim lbs`,sum(`sb`.`Kief lbs`) AS `Kief lbs` from `sorter_machine_batch_view` `sb` group by `sb`.`Harvesting ID`;

-- View: sorting_active
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `sorting_active` AS select `bb`.`metrc_tag` AS `metrc_tag`,`bb`.`date` AS `date`,`bb`.`harvesting_id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`cat`.`name` AS `category`,`ct`.`name` AS `category_type`,max(`bb`.`quantity`) AS `input_quantity`,sum(`bd`.`quantity`) AS `output_quantity`,sum((case when (`bd`.`status` = 'Active') then `bd`.`quantity` else 0 end)) AS `active_output`,sum((case when (`bd`.`status` = 'Inactive') then `bd`.`quantity` else 0 end)) AS `inactive_output`,(max(`bb`.`quantity`) - sum((case when (`bd`.`status` = 'Inactive') then `bd`.`quantity` when ((`bd`.`status` = 'Active') and (`bd`.`quantity` is null)) then `bb`.`quantity` else 0 end))) AS `active_quantity`,count(`bd`.`quantity`) AS `bin_count`,`bb`.`action` AS `process_action` from (((((`sorter_batch` `bb` left join `sorter_details` `bd` on((`bb`.`id` = `bd`.`sorter_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `bb`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `bb`.`category_type_id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) where ((`bb`.`status` = 'Active') and ((`bd`.`status` in ('Active','Inactive')) or (`bd`.`id` is null))) group by `bb`.`harvesting_id`,`bb`.`metrc_tag`,`h`.`test_id`,`bb`.`action`,`h`.`harvest_id`,`bb`.`date`,`h`.`property_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`cat`.`name`,`ct`.`name`;

-- View: sorting_active_summary
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `sorting_active_summary` AS select `processing_active`.`date` AS `date`,`processing_active`.`processing_batch_source_tag` AS `processing_batch_source_tag`,`processing_active`.`metrc_tag` AS `metrc_tag`,`processing_active`.`harvest_id` AS `harvest_id`,`processing_active`.`test` AS `test`,`processing_active`.`property_id` AS `property_id`,`processing_active`.`harvest_date` AS `harvest_date`,`processing_active`.`harvest_week` AS `harvest_week`,`processing_active`.`harvest_year` AS `harvest_year`,`processing_active`.`strain_code` AS `strain_code`,`processing_active`.`strain_name` AS `strain_name`,`processing_active`.`uom` AS `uom`,`processing_active`.`quantity` AS `input_quantity`,NULL AS `output_quantity`,`processing_active`.`quantity` AS `active_quantity`,`processing_active`.`bin_count` AS `bin_count`,`processing_active`.`category` AS `category`,`processing_active`.`category_type` AS `category_type`,`processing_active`.`size` AS `size`,`processing_active`.`grade` AS `grade`,`processing_active`.`status` AS `status` from `processing_active` where ((`processing_active`.`process` = 'QC-Sorting') and (`processing_active`.`status` = 'In Queue')) union all select `sorting_active`.`date` AS `date`,`sorting_active`.`metrc_tag` AS `processing_batch_source_tag`,`sorting_active`.`metrc_tag` AS `metrc_tag`,`sorting_active`.`harvest_id` AS `harvest_id`,`sorting_active`.`test_id` AS `test`,`sorting_active`.`property_id` AS `property_id`,`sorting_active`.`harvest_date` AS `harvest_date`,`sorting_active`.`harvest_week` AS `harvest_week`,`sorting_active`.`harvest_year` AS `harvest_year`,`sorting_active`.`strain_code` AS `strain_code`,`sorting_active`.`strain_name` AS `strain_name`,'Pound' AS `uom`,`sorting_active`.`input_quantity` AS `input_quantity`,`sorting_active`.`output_quantity` AS `output_quantity`,`sorting_active`.`active_quantity` AS `active_quantity`,`sorting_active`.`bin_count` AS `bin_count`,`sorting_active`.`category` AS `category`,`sorting_active`.`category_type` AS `category_type`,NULL AS `size`,NULL AS `grade`,'In Progress' AS `status` from `sorting_active`;

-- View: sorting_prod_flat
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `sorting_prod_flat` AS select max(`td`.`flowering_id`) AS `flowering_id`,min(`td`.`start_date`) AS `start_date`,sum(`td`.`input_quantity`) AS `input_quantity`,sum(`td`.`output_quantity`) AS `output_quantity`,sum(`td`.`trim_output`) AS `trim_output`,sum(`td`.`total_flower_output_quantity`) AS `total_flower_output_quantity`,sum(`td`.`sugar_shake_output`) AS `sugar_shake_output`,sum(`td`.`big_a_flower_output`) AS `big_a_flower_output`,sum(`td`.`big_b_flower_output`) AS `big_b_flower_output`,sum(`td`.`big_c_flower_output`) AS `big_c_flower_output`,sum(`td`.`big_x_flower_output`) AS `big_x_flower_output`,sum(`td`.`mids_a_flower_output`) AS `mids_a_flower_output`,sum(`td`.`mids_b_flower_output`) AS `mids_b_flower_output`,sum(`td`.`mids_c_flower_output`) AS `mids_c_flower_output`,sum(`td`.`mids_x_flower_output`) AS `mids_x_flower_output`,sum(`td`.`smalls_a_flower_output`) AS `smalls_a_flower_output`,sum(`td`.`smalls_b_flower_output`) AS `smalls_b_flower_output`,sum(`td`.`smalls_c_flower_output`) AS `smalls_c_flower_output`,sum(`td`.`smalls_x_flower_output`) AS `smalls_x_flower_output`,sum(`td`.`microsmalls_a_flower_output`) AS `microsmalls_a_flower_output`,sum(`td`.`microsmalls_b_flower_output`) AS `microsmalls_b_flower_output`,sum(`td`.`microsmalls_c_flower_output`) AS `microsmalls_c_flower_output`,sum(`td`.`microsmalls_x_flower_output`) AS `microsmalls_x_flower_output`,sum(`td`.`regs_a_flower_output`) AS `regs_a_flower_output`,sum(`td`.`regs_b_flower_output`) AS `regs_b_flower_output`,sum(`td`.`regs_c_flower_output`) AS `regs_c_flower_output`,sum(`td`.`regs_x_flower_output`) AS `regs_x_flower_output`,sum(`td`.`kief_output`) AS `kief_output`,sum(`td`.`waste_output`) AS `waste_output`,max(`td`.`batch_status`) AS `batch_status` from `sorting_prod_flat_all` `td` group by `td`.`flowering_id`;

-- View: sorting_prod_flat_all
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorting_prod_flat_all` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,min(`bb`.`date`) AS `start_date`,(select sum(`bb_sub`.`quantity`) from `sorter_batch` `bb_sub` where (`bb_sub`.`metrc_tag` = `bb`.`metrc_tag`)) AS `input_quantity`,sum(`td`.`quantity`) AS `output_quantity`,sum((case when (`td`.`category_type_id` = 'SK-CTP-56d3') then `td`.`quantity` else 0 end)) AS `trim_output`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `sugar_shake_output`,sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) AS `total_flower_output_quantity`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `big_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `big_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `big_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `big_x_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'M') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `mids_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'M') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `mids_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'M') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `mids_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'M') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `mids_x_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `smalls_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `smalls_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `smalls_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `smalls_x_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'MS') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `microsmalls_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'MS') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `microsmalls_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'MS') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `microsmalls_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'MS') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `microsmalls_x_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `regs_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `regs_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `regs_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `regs_x_flower_output`,sum((case when (`td`.`category_id` = 'SK-CTG-b89a') then `td`.`quantity` else 0 end)) AS `kief_output`,sum((case when (`td`.`category_id` = 'SK-CTG-a60f') then `td`.`quantity` else 0 end)) AS `waste_output`,if((`bb`.`action` = 'Stopped'),'In Progress',`bb`.`action`) AS `batch_status` from ((`sorter_details` `td` left join `sorter_batch` `bb` on((`bb`.`id` = `td`.`sorter_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) where (`h`.`year_num` > 2021) group by `h`.`flowering_id`,`h`.`id`,`h`.`harvest_id`,`bb`.`action`,`bb`.`metrc_tag`;

-- View: sorting_prod_flat_all_group
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `sorting_prod_flat_all_group` AS select `td`.`flowering_id` AS `flowering_id`,`td`.`harvesting_id` AS `harvesting_id`,`td`.`harvest_id` AS `harvest_id`,min(`td`.`start_date`) AS `start_date`,sum(`td`.`input_quantity`) AS `input_quantity`,sum(`td`.`output_quantity`) AS `output_quantity`,sum(`td`.`trim_output`) AS `trim_output`,sum(`td`.`sugar_shake_output`) AS `sugar_shake_output`,sum(`td`.`total_flower_output_quantity`) AS `total_flower_output_quantity`,sum(`td`.`big_a_flower_output`) AS `big_a_flower_output`,sum(`td`.`big_b_flower_output`) AS `big_b_flower_output`,sum(`td`.`big_c_flower_output`) AS `big_c_flower_output`,sum(`td`.`big_x_flower_output`) AS `big_x_flower_output`,sum(`td`.`mids_a_flower_output`) AS `mids_a_flower_output`,sum(`td`.`mids_b_flower_output`) AS `mids_b_flower_output`,sum(`td`.`mids_c_flower_output`) AS `mids_c_flower_output`,sum(`td`.`mids_x_flower_output`) AS `mids_x_flower_output`,sum(`td`.`smalls_a_flower_output`) AS `smalls_a_flower_output`,sum(`td`.`smalls_b_flower_output`) AS `smalls_b_flower_output`,sum(`td`.`smalls_c_flower_output`) AS `smalls_c_flower_output`,sum(`td`.`smalls_x_flower_output`) AS `smalls_x_flower_output`,sum(`td`.`microsmalls_a_flower_output`) AS `microsmalls_a_flower_output`,sum(`td`.`microsmalls_b_flower_output`) AS `microsmalls_b_flower_output`,sum(`td`.`microsmalls_c_flower_output`) AS `microsmalls_c_flower_output`,sum(`td`.`microsmalls_x_flower_output`) AS `microsmalls_x_flower_output`,sum(`td`.`regs_a_flower_output`) AS `regs_a_flower_output`,sum(`td`.`regs_b_flower_output`) AS `regs_b_flower_output`,sum(`td`.`regs_c_flower_output`) AS `regs_c_flower_output`,sum(`td`.`regs_x_flower_output`) AS `regs_x_flower_output`,sum(`td`.`kief_output`) AS `kief_output`,sum(`td`.`waste_output`) AS `waste_output`,max(`td`.`batch_status`) AS `batch_status` from `sorting_prod_flat_all` `td` group by `td`.`flowering_id`,`td`.`harvesting_id`,`td`.`harvest_id`;

-- View: sorting_prod_flat_all_optimized
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `sorting_prod_flat_all_optimized` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,min(`bb`.`date`) AS `start_date`,coalesce(`bb_sub`.`input_quantity`,0) AS `input_quantity`,sum(`td`.`quantity`) AS `output_quantity`,sum((case when (`td`.`category_type_id` = 'SK-CTP-56d3') then `td`.`quantity` else 0 end)) AS `trim_output`,sum((case when (`td`.`category_type_id` = 'SK-CTP-5844') then `td`.`quantity` else 0 end)) AS `sugar_shake_output`,sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) AS `total_flower_output_quantity`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `big_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `big_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `big_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `big_x_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'M') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `mids_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'M') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `mids_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'M') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `mids_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'M') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `mids_x_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `smalls_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `smalls_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `smalls_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `smalls_x_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'MS') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `microsmalls_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'MS') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `microsmalls_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'MS') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `microsmalls_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'MS') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `microsmalls_x_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `regs_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `regs_b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `regs_c_flower_output`,sum((case when ((`td`.`product_grade_id` is null) and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `regs_x_flower_output`,sum((case when (`td`.`category_id` = 'SK-CTG-b89a') then `td`.`quantity` else 0 end)) AS `kief_output`,sum((case when (`td`.`category_id` = 'SK-CTG-a60f') then `td`.`quantity` else 0 end)) AS `waste_output`,if((`bb`.`action` = 'Stopped'),'In Progress',`bb`.`action`) AS `batch_status` from (((`sorter_details` `td` left join `sorter_batch` `bb` on((`bb`.`id` = `td`.`sorter_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join (select `sorter_batch`.`metrc_tag` AS `metrc_tag`,sum(`sorter_batch`.`quantity`) AS `input_quantity` from `sorter_batch` group by `sorter_batch`.`metrc_tag`) `bb_sub` on((`bb_sub`.`metrc_tag` = `bb`.`metrc_tag`))) where (`h`.`year_num` > 2021) group by `h`.`flowering_id`,`h`.`id`,`h`.`harvest_id`,`bb`.`action`,`bb`.`metrc_tag`;

-- View: sorting_prod_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `sorting_prod_view` AS select `h`.`flowering_id` AS `flowering_id`,`bb`.`harvesting_id` AS `harvesting_id`,`bb`.`metrc_tag` AS `metrc_tag`,'Sorting' AS `process`,`bb`.`id` AS `batch_id`,`bb`.`date` AS `date`,if((`bb`.`action` = 'Stopped'),'In Progress',`bb`.`action`) AS `batch_status`,`f`.`flowering_id` AS `flowering_id_name`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,NULL AS `flower_plant_count`,NULL AS `harvest_plant_count`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`cat`.`name` AS `input_category`,`ct`.`name` AS `input_category_type`,`p`.`product_id` AS `input_product_size`,`p`.`grade` AS `input_product_grade`,max(`bb`.`quantity`) AS `input_quantity`,`cate`.`name` AS `output_category`,`cty`.`name` AS `output_category_type`,`bd`.`product_size_id` AS `output_size`,`bd`.`product_grade_id` AS `output_grade`,sum(`bd`.`quantity`) AS `output_quantity` from (((((((((`sorter_batch` `bb` left join `sorter_details` `bd` on((`bb`.`id` = `bd`.`sorter_batch_id`))) left join `processing` `p` on((`p`.`id` = `bb`.`source_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `bb`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `bb`.`category_type_id`))) left join `product_sku`.`category` `cate` on((`cate`.`id` = `bd`.`category_id`))) left join `product_sku`.`category_type` `cty` on((`cty`.`id` = `bd`.`category_type_id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) left join `cultivation`.`flowering` `f` on((`f`.`id` = `h`.`flowering_id`))) group by `bb`.`harvesting_id`,`bb`.`metrc_tag`,`h`.`test_id`,`bb`.`action`,`h`.`harvest_id`,`bb`.`date`,`h`.`property_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`cat`.`name`,`ct`.`name`,`bb`.`id`,`h`.`flowering_id`,`bb`.`process_type`,`f`.`flowering_id`,`cate`.`name`,`cty`.`name`,`bd`.`product_size_id`,`bd`.`product_grade_id` order by `bb`.`date` desc,`bb`.`action`;

-- View: trimming_active
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `trimming_active` AS select `bb`.`metrc_tag` AS `metrc_tag`,`bb`.`date` AS `date`,`bb`.`harvesting_id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`cat`.`name` AS `category`,`ct`.`name` AS `category_type`,max(`bb`.`quantity`) AS `input_quantity`,sum(`bd`.`quantity`) AS `output_quantity`,sum((case when (`bd`.`status` = 'Active') then `bd`.`quantity` else 0 end)) AS `active_output`,sum((case when (`bd`.`status` = 'Inactive') then `bd`.`quantity` else 0 end)) AS `inactive_output`,(max(`bb`.`quantity`) - sum((case when (`bd`.`status` = 'Inactive') then `bd`.`quantity` when ((`bd`.`status` = 'Active') and (`bb`.`quantity` is null)) then `bb`.`quantity` else 0 end))) AS `active_quantity`,count(`bd`.`quantity`) AS `bin_count`,if((`bb`.`process_type` = 'T-zero Machine'),'Trimming','Hand Trimming') AS `process`,`bb`.`action` AS `process_action` from (((((`trimming_batch` `bb` left join `trimming_details` `bd` on((`bb`.`id` = `bd`.`trimming_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `bb`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `bb`.`category_type_id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) where ((`bb`.`status` = 'Active') and ((`bd`.`status` in ('Active','Inactive')) or (`bd`.`id` is null))) group by `bb`.`harvesting_id`,`bb`.`metrc_tag`,`h`.`test_id`,`bb`.`action`,`bb`.`process_type`,`h`.`harvest_id`,`bb`.`date`,`h`.`property_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`cat`.`name`,`ct`.`name`;

-- View: trimming_app_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_app_batch_view` AS select `td`.`metrc_tag` AS `metrc_tag`,max(`td`.`trimming_batch_id`) AS `trimming_batch_id`,sum((case when (`td`.`category_type_id` = 'SK-CTP-56d3') then `td`.`quantity` else 0 end)) AS `trim_output`,sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) AS `total_flower_output_quantity`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `sugar_shake_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `c_flower_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'A')) then `td`.`quantity` else 0 end)) AS `retrim_a_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'B')) then `td`.`quantity` else 0 end)) AS `retrim_b_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'C')) then `td`.`quantity` else 0 end)) AS `retrim_c_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `big_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `reg_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `sml_a_flower_output`,sum(if((`td`.`category_id` = 'SK-CTG-b89a'),`td`.`quantity`,0)) AS `kief_output` from `trimming_details` `td` where (`td`.`status` = 'Active') group by `td`.`metrc_tag`,`td`.`trimming_batch_id`;

-- View: trimming_batch_report
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_batch_report` AS select `t`.`metrc_tag` AS `metrc_tag`,`t`.`processing_batch_source_tag` AS `processing_batch_source_tag`,`h`.`id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`date` AS `harvest_date`,`h`.`property_id` AS `property`,`h`.`year_num` AS `harvest_year`,`h`.`week_num` AS `harvest_week`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `year_week`,`strain`.`strain_code` AS `strain_id`,`strain`.`name` AS `strain_name`,`h`.`harvest_type` AS `harvest_type`,(case when (`h`.`harvest_type` = 'Partial') then (select sum(`cultivation`.`harvesting`.`plant_count_harvested`) from `cultivation`.`harvesting` where ((`cultivation`.`harvesting`.`processing_metrc_id` = `t`.`processing_batch_source_tag`) and (`cultivation`.`harvesting`.`harvest_type` = 'Partial'))) else max(`h`.`plant_count_harvested`) end) AS `plant_count`,max(`t`.`date`) AS `t0_date`,max(`t`.`quantity`) AS `input_qty`,`subq`.`output_qty` AS `output_qty`,sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) AS `total_flower_output_quantity`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `big_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `reg_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `sml_a_flower_output`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `sugar_shake_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `c_flower_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'A')) then `td`.`quantity` else 0 end)) AS `retrim_a_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'B')) then `td`.`quantity` else 0 end)) AS `retrim_b_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'C')) then `td`.`quantity` else 0 end)) AS `retrim_c_output`,sum(if((`td`.`category_id` = 'SK-CTG-a60f'),`td`.`quantity`,0)) AS `total_waste_output`,sum((case when (`td`.`category_type_id` = 'SK-CTP-56d3') then `td`.`quantity` else 0 end)) AS `trim_output`,`t`.`action` AS `process_action` from (((((`trimming_batch` `t` left join `trimming_details` `td` on((`t`.`id` = `td`.`trimming_batch_id`))) left join `trimming_view` `SUM` on((`t`.`id` = `SUM`.`trimming_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`processing_metrc_id` = `t`.`processing_batch_source_tag`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `t`.`strain_id`))) left join (select `td2`.`trimming_batch_id` AS `trimming_batch_id`,sum(`td2`.`quantity`) AS `output_qty` from `trimming_details` `td2` group by `td2`.`trimming_batch_id`) `subq` on((`t`.`id` = `subq`.`trimming_batch_id`))) where (((`t`.`process_type` = 'T-zero Machine') and (`t`.`action` = 'Finished')) or ((`t`.`process_type` = 'Hand Trimming') and (`t`.`action` = 'Finished') and exists(select 1 from `trimming_batch` `t2` where ((`t2`.`processing_batch_source_tag` = `t`.`processing_batch_source_tag`) and (`t2`.`process_type` = 'T-zero Machine') and (`t2`.`action` = 'Finished'))) is false)) group by `t`.`metrc_tag`,`t`.`processing_batch_source_tag`,`h`.`id`,`h`.`harvest_id`,`h`.`test_id`,`h`.`date`,`h`.`property_id`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`strain`.`strain_code`,`strain`.`name`,`t`.`action`,`subq`.`output_qty`;

-- View: trimming_crop_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_crop_batch_view` AS select `tm`.`Flowering ID` AS `Flowering ID`,`tm`.`Harvesting ID` AS `Harvesting ID`,`tm`.`Harvesting ID` AS `Processing ID`,`tm`.`HID` AS `HID`,`tm`.`Test Record Count` AS `Test Record Count`,`tm`.`Crop Plant Count` AS `Crop Plant Count`,`tm`.`Harvested Plant Count` AS `Harvested Plant Count`,`tm`.`Harvest Record Count` AS `Harvest Record Count`,`tm`.`Strain ID` AS `Strain ID`,`tm`.`Plant Strain` AS `Plant Strain`,`tm`.`Modified On` AS `Trimming Started`,max(`tm`.`Bucked Flower lbs`) AS `Bucked Flower lbs`,if((((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`)) is null),max(`tm`.`Trimmed Flower lbs`),((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`))) AS `Total Flower from Harvest`,max(`tm`.`Trim lbs`) AS `Total Trim from Harvest`,if((((max(`tm`.`Waste lbs`) - max(`th`.`Waste lbs`)) + max(`th`.`Waste lbs`)) is null),max(`tm`.`Waste lbs`),(max(`tm`.`Waste lbs`) + max(`th`.`Waste lbs`))) AS `Total Waste from Harvest`,if(((max(`tm`.`Trimming Duration`) + max(`th`.`Trimming Duration`)) is null),max(`tm`.`Trimming Duration`),addtime(max(`tm`.`Trimming Duration`),max(`th`.`Trimming Duration`))) AS `Trimming Duration of Harvest`,if(((((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`)) / max(`tm`.`Harvested Plant Count`)) is null),(max(`tm`.`Trimmed Flower lbs`) / max(`tm`.`Harvested Plant Count`)),(((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`)) / max(`tm`.`Harvested Plant Count`))) AS `lbs per plant`,if((max(`th`.`Flowering ID`) is null),((max(`tm`.`Trimmed Flower lbs`) / max(`tm`.`Harvested Plant Count`)) * 453.59),((((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`)) / max(`tm`.`Harvested Plant Count`)) * 453.59)) AS `Grams per plant`,if((max(`th`.`Flowering ID`) is null),(((max(`tm`.`Trimmed Flower lbs`) / max(`tm`.`Harvested Plant Count`)) * 453.59) / 28),(((((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`)) / max(`tm`.`Harvested Plant Count`)) * 453.59) / 28)) AS `Ounces per plant` from (`trimming_machine_crop_batch_view` `tm` left join `trimming_hand_crop_batch_view` `th` on((`th`.`Flowering ID` = `tm`.`Flowering ID`))) group by `tm`.`Flowering ID` order by `tm`.`Modified On` desc;

-- View: trimming_detail_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_detail_view` AS select `td`.`trimming_batch_id` AS `trimming_batch_id`,max(`td`.`created_on`) AS `trim_INdate`,sum(`td`.`quantity`) AS `total_trimmed_quantity`,count(`td`.`quantity`) AS `bin_count`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B')) then `td`.`quantity` else 0 end)) AS `big_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'R')) then `td`.`quantity` else 0 end)) AS `reg_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S')) then `td`.`quantity` else 0 end)) AS `sml_a_flower_output`,sum((case when ((`td`.`process_queue_type` = 'hand trimming') and (`td`.`product_grade_id` = 'A')) then `td`.`quantity` else 0 end)) AS `retrim_a_output`,sum((case when ((`td`.`process_queue_type` = 'hand trimming') and (`td`.`product_grade_id` = 'B')) then `td`.`quantity` else 0 end)) AS `retrim_b_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`category_type_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`category_type_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`category_type_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `c_flower_output`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `sugar_shake_output`,sum(if((`td`.`category_type_id` = 'SK-CTP-56d3'),`td`.`quantity`,0)) AS `trim_output`,sum(if((`td`.`category_id` = 'SK-CTG-b89a'),`td`.`quantity`,0)) AS `kief_output`,sum(if((`td`.`category_id` = 'SK-CTG-a60f'),`td`.`quantity`,0)) AS `total_waste_output` from (`trimming_details` `td` left join `trimming_batch` `tb` on((`tb`.`id` = `td`.`trimming_batch_id`))) group by `td`.`trimming_batch_id`;

-- View: trimming_hand_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_hand_batch_view` AS select `h`.`flowering_id` AS `Flowering ID`,`h`.`id` AS `Harvesting ID`,`t`.`batch_id` AS `Processing ID`,`fl`.`flowering_id` AS `FID`,`h`.`harvest_id` AS `HID`,`h`.`date` AS `Harvest Date`,week(`h`.`date`,0) AS `Harvest Week`,year(`h`.`date`) AS `Harvest Year`,`h`.`test_id` AS `Test ID`,`h`.`harvest_type` AS `Harvest Type`,`fl`.`plant_count` AS `Crop Plant Count`,`h`.`plant_count_harvested` AS `Harvested Plant Count`,max(`strain`.`strain_code`) AS `Strain ID`,max(`strain`.`name`) AS `Plant Strain`,max(`t`.`source_metrc_tag`) AS `Processing Batch METRC`,max(`t`.`processing_batch_source_tag`) AS `Source METRC`,`t`.`id` AS `Trimming Batch ID`,`t`.`metrc_tag` AS `METRC Tag`,`t`.`process_type` AS `Trimming Type`,`t`.`category_id` AS `Product Category`,`t`.`category_type_id` AS `Product Category Type`,max(`t`.`quantity`) AS `Input Lbs`,max(`SUM`.`bin_count`) AS `Bin Count Recieved`,sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) AS `Trimmed Flower lbs`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `Reg Flower - B lbs`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `Reg Flower - C lbs`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `Big Flower - A lbs`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `Shake lbs`,sum((case when ((`td`.`category_type_id` = 'SK-CTP-daf5') and (`td`.`category_id` = 'SK-CTG-a60f')) then `td`.`quantity` else 0 end)) AS `Trimmed Waste lbs`,if((sum(`td`.`quantity`) is null),0,(max(`t`.`quantity`) - max(`td`.`quantity`))) AS `Misc Trimming Waste lbs`,(sum((case when ((`td`.`category_type_id` = 'SK-CTP-daf5') and (`td`.`category_id` = 'SK-CTG-a60f')) then `td`.`quantity` else 0 end)) + if((sum(`td`.`quantity`) is null),0,(max(`t`.`quantity`) - max(`td`.`quantity`)))) AS `Total Trimming Waste lbs`,if((sum(`td`.`quantity`) is null),0,((sum(`t`.`quantity`) - sum(`td`.`quantity`)) / sum(`t`.`quantity`))) AS `Trimmed Waste %`,count(`t`.`id`) AS `Trimmed Flower Bins`,min(`pl`.`process_start`) AS `Trimming Start`,min(`pl`.`process_stop`) AS `Trimming Stop`,timediff(min(`pl`.`process_stop`),min(`pl`.`process_start`)) AS `Trimming Duration`,max(`pl`.`process_name`) AS `Process Status`,max(`pl`.`id`) AS `Record Status`,`t`.`status` AS `Process Queue`,count(`td`.`process_queue_id`) AS `Process Queue Count`,max(`td`.`process_queue_type`) AS `Process Queue Type`,`t`.`note` AS `Notes`,`t`.`created_by` AS `Created By`,`t`.`created_on` AS `Created On`,`t`.`modified_by` AS `Modified By`,max(`t`.`modified_by`) AS `Modified On` from ((((((`trimming_batch` `t` left join `trimming_details` `td` on((`t`.`id` = `td`.`trimming_batch_id`))) left join `trimming_detail_view` `SUM` on((`t`.`id` = `SUM`.`trimming_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `t`.`harvesting_id`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `t`.`strain_id`))) left join `cultivation`.`flowering` `fl` on((`fl`.`id` = `h`.`flowering_id`))) left join `process_log` `pl` on((`pl`.`source_id` = `t`.`id`))) where (`t`.`process_type` = 'Hand Trimming') group by `t`.`id` order by `h`.`date` desc;

-- View: trimming_hand_crop_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_hand_crop_batch_view` AS select `t`.`Flowering ID` AS `Flowering ID`,max(`t`.`Harvesting ID`) AS `Harvesting ID`,max(`t`.`Processing ID`) AS `Processing ID`,max(`t`.`HID`) AS `HID`,count(`t`.`Test ID`) AS `Test Record Count`,max(`t`.`Crop Plant Count`) AS `Crop Plant Count`,max(`t`.`Harvested Plant Count`) AS `Harvested Plant Count`,count(`t`.`Harvesting ID`) AS `Harvest Record Count`,max(`t`.`Strain ID`) AS `Strain ID`,max(`t`.`Plant Strain`) AS `Plant Strain`,max(`t`.`Trimming Type`) AS `Trimming Type`,sum(`t`.`Input Lbs`) AS `Input Flower lbs`,max(`t`.`Bin Count Recieved`) AS `Bin Count Received`,sum(`t`.`Trimmed Flower lbs`) AS `Trimmed Flower lbs`,sum(`t`.`Reg Flower - B lbs`) AS `Reg Flower - B lbs`,sum(`t`.`Reg Flower - C lbs`) AS `Reg Flower - C lbs`,sum(`t`.`Big Flower - A lbs`) AS `Big Flower - A lbs`,sum(`t`.`Shake lbs`) AS `Shake lbs`,sum(`t`.`Total Trimming Waste lbs`) AS `Waste lbs`,sum(`t`.`Misc Trimming Waste lbs`) AS `Misc Trimming Waste lbs`,max(`t`.`Trimmed Waste %`) AS `Trimmed Waste %`,max(`t`.`Created On`) AS `Date Started`,max(`t`.`Trimming Duration`) AS `Trimming Duration`,max(`t`.`Modified By`) AS `Modified By`,max(`t`.`Modified On`) AS `Modified On`,max(`t`.`Process Queue`) AS `Process Status` from `trimming_hand_batch_view` `t` group by `t`.`Flowering ID`;

-- View: trimming_hand_harvest_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_hand_harvest_batch_view` AS select count(`t`.`Flowering ID`) AS `Flowering ID Record Count`,`t`.`Harvesting ID` AS `Harvesting ID`,max(`t`.`Processing ID`) AS `Processing ID`,max(`t`.`HID`) AS `HID`,count(`t`.`Test ID`) AS `Test Record Count`,`t`.`Harvested Plant Count` AS `Harvested Plant Count`,max(`t`.`Strain ID`) AS `Strain ID`,max(`t`.`Plant Strain`) AS `Plant Strain`,max(`t`.`Trimming Type`) AS `Trimming Type`,sum(`t`.`Input Lbs`) AS `Input Flower lbs`,max(`t`.`Bin Count Recieved`) AS `Bin Count Received`,sum(`t`.`Trimmed Flower lbs`) AS `Trimmed Flower lbs`,sum(`t`.`Reg Flower - B lbs`) AS `Reg Flower - B lbs`,sum(`t`.`Reg Flower - C lbs`) AS `Reg Flower - C lbs`,sum(`t`.`Big Flower - A lbs`) AS `Big Flower - A lbs`,sum(`t`.`Shake lbs`) AS `Shake lbs`,sum(`t`.`Total Trimming Waste lbs`) AS `Waste lbs`,sum(`t`.`Misc Trimming Waste lbs`) AS `Misc Trimming Waste lbs`,max(`t`.`Trimmed Waste %`) AS `Trimmed Waste %`,max(`t`.`Created On`) AS `Date Started`,max(`t`.`Trimming Duration`) AS `Trimming Duration`,max(`t`.`Modified By`) AS `Modified By`,max(`t`.`Modified On`) AS `Modified On`,max(`t`.`Process Queue`) AS `Process Status` from `trimming_hand_batch_view` `t` group by `t`.`Harvesting ID`;

-- View: trimming_hand_prod_flat
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `trimming_hand_prod_flat` AS select max(`td`.`flowering_id`) AS `flowering_id`,min(`td`.`start_date`) AS `start_date`,sum(`td`.`input_quantity`) AS `input_quantity`,sum(`td`.`output_quantity`) AS `output_quantity`,sum(`td`.`trim_output`) AS `trim_output`,sum(`td`.`total_flower_output_quantity`) AS `total_flower_output_quantity`,sum(`td`.`sugar_shake_output`) AS `sugar_shake_output`,sum(`td`.`a_flower_output`) AS `a_flower_output`,sum(`td`.`b_flower_output`) AS `b_flower_output`,sum(`td`.`c_flower_output`) AS `c_flower_output`,sum(`td`.`waste_output`) AS `waste_output`,max(`td`.`batch_status`) AS `batch_status` from `trimming_hand_prod_flat_all` `td` group by `td`.`flowering_id`;

-- View: trimming_hand_prod_flat_all
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `trimming_hand_prod_flat_all` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`bb`.`metrc_tag` AS `metrc_tag`,min(`bb`.`date`) AS `start_date`,(select sum(`bb_sub`.`quantity`) from `trimming_batch` `bb_sub` where ((`bb_sub`.`metrc_tag` = `bb`.`metrc_tag`) and (`bb_sub`.`process_type` = 'Hand Trimming')) group by `bb_sub`.`metrc_tag`) AS `input_quantity`,sum(`td`.`quantity`) AS `output_quantity`,sum((case when (`td`.`category_type_id` = 'SK-CTP-56d3') then `td`.`quantity` else 0 end)) AS `trim_output`,sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) AS `total_flower_output_quantity`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `sugar_shake_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `c_flower_output`,sum((case when (`td`.`category_id` = 'SK-CTG-a60f') then `td`.`quantity` else 0 end)) AS `waste_output`,if((`bb`.`action` = 'Stopped'),'In Progress',`bb`.`action`) AS `batch_status` from ((`trimming_batch` `bb` left join `trimming_details` `td` on((`bb`.`id` = `td`.`trimming_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) where ((`bb`.`process_type` = 'Hand Trimming') and (`h`.`year_num` > 2021)) group by `h`.`flowering_id`,`h`.`id`,`bb`.`metrc_tag`,`h`.`harvest_id`,`bb`.`action`;

-- View: trimming_hand_prod_flat_group
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `trimming_hand_prod_flat_group` AS select `td`.`flowering_id` AS `flowering_id`,`td`.`harvesting_id` AS `harvesting_id`,`td`.`harvest_id` AS `harvest_id`,min(`td`.`start_date`) AS `start_date`,sum(`td`.`input_quantity`) AS `input_quantity`,sum(`td`.`output_quantity`) AS `output_quantity`,sum(`td`.`trim_output`) AS `trim_output`,sum(`td`.`total_flower_output_quantity`) AS `total_flower_output_quantity`,sum(`td`.`sugar_shake_output`) AS `sugar_shake_output`,sum(`td`.`a_flower_output`) AS `a_flower_output`,sum(`td`.`b_flower_output`) AS `b_flower_output`,sum(`td`.`c_flower_output`) AS `c_flower_output`,sum(`td`.`waste_output`) AS `waste_output`,max(`td`.`batch_status`) AS `batch_status` from `trimming_hand_prod_flat_all` `td` group by `td`.`flowering_id`,`td`.`harvesting_id`,`td`.`harvest_id`;

-- View: trimming_harvest_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_harvest_batch_view` AS select max(`tm`.`Flowering ID`) AS `Flowering ID Record Count`,`tm`.`Harvesting ID` AS `Harvesting ID`,max(`tm`.`Harvesting ID`) AS `Processing ID`,min(`tm`.`HID`) AS `HID`,sum(`tm`.`Test Record Count`) AS `Test Record Count`,max(`tm`.`Harvested Plant Count`) AS `Harvested Plant Count`,max(`tm`.`Strain ID`) AS `Strain ID`,max(`tm`.`Plant Strain`) AS `Plant Strain`,max(`tm`.`Bucked Flower lbs`) AS `Bucked Flower lbs`,if((((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`)) is null),max(`tm`.`Trimmed Flower lbs`),((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`))) AS `Total Flower from Harvest`,max(`tm`.`Trim lbs`) AS `Total Trim from Harvest`,if((((max(`tm`.`Waste lbs`) - max(`th`.`Waste lbs`)) + max(`th`.`Waste lbs`)) is null),max(`tm`.`Waste lbs`),(max(`tm`.`Waste lbs`) + max(`th`.`Waste lbs`))) AS `Total Waste from Harvest`,if(((max(`tm`.`Trimming Duration`) + max(`th`.`Trimming Duration`)) is null),max(`tm`.`Trimming Duration`),addtime(max(`tm`.`Trimming Duration`),max(`th`.`Trimming Duration`))) AS `Trimming Duration of Harvest`,if(((((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`)) / max(`tm`.`Harvested Plant Count`)) is null),(max(`tm`.`Trimmed Flower lbs`) / max(`tm`.`Harvested Plant Count`)),(((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`)) / max(`tm`.`Harvested Plant Count`))) AS `lbs per plant`,if((max(`th`.`Flowering ID`) is null),((max(`tm`.`Trimmed Flower lbs`) / max(`tm`.`Harvested Plant Count`)) * 453.59),((((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`)) / max(`tm`.`Harvested Plant Count`)) * 453.59)) AS `Grams per plant`,if((max(`th`.`Flowering ID`) is null),(((max(`tm`.`Trimmed Flower lbs`) / max(`tm`.`Harvested Plant Count`)) * 453.59) / 28),(((((max(`tm`.`Trimmed Flower lbs`) - max(`th`.`Input Flower lbs`)) + max(`th`.`Trimmed Flower lbs`)) / max(`tm`.`Harvested Plant Count`)) * 453.59) / 28)) AS `Ounces per plant` from (`trimming_machine_crop_batch_view` `tm` left join `trimming_hand_crop_batch_view` `th` on((`th`.`Flowering ID` = `tm`.`Flowering ID`))) group by `tm`.`Harvesting ID`;

-- View: trimming_kief_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `trimming_kief_view` AS select `tb`.`metrc_tag` AS `harvest_metrc_tag`,`td`.`metrc_tag` AS `trim_metrc_tag`,`tb`.`date` AS `date`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`tb`.`strain_id` AS `strain_id`,`tb`.`process_type` AS `process_type`,max(`td`.`quantity`) AS `kief_registered_quantity`,(select sum(`w`.`quantity`) from `wholesale`.`wholesale` `w` where (((`w`.`metrc_tag` = `td`.`metrc_tag`) or (`w`.`source_metrc_tag` = `td`.`metrc_tag`)) and (`w`.`status` = 'Active') and (`w`.`category_id` = 'SK-CTG-d3f0') and (`w`.`category_type_id` = 'SK-CTP-56d3'))) AS `trim_active_quantity`,(select sum(`w`.`quantity`) from `wholesale`.`wholesale` `w` where (((`w`.`metrc_tag` = `td`.`metrc_tag`) or (`w`.`source_metrc_tag` = `td`.`metrc_tag`)) and (`w`.`status` = 'Active') and (`w`.`category_id` = 'SK-CTG-b89a'))) AS `kief_active_quantity`,(case when ((coalesce((select sum(`w`.`quantity`) from `wholesale`.`wholesale` `w` where (((`w`.`metrc_tag` = `td`.`metrc_tag`) or (`w`.`source_metrc_tag` = `td`.`metrc_tag`)) and (`w`.`status` = 'Active') and (`w`.`category_type_id` = 'SK-CTP-56d3'))),0) + coalesce((select sum(`w`.`quantity`) from `wholesale`.`wholesale` `w` where (((`w`.`metrc_tag` = `td`.`metrc_tag`) or (`w`.`source_metrc_tag` = `td`.`metrc_tag`)) and (`w`.`status` = 'Active') and (`w`.`category_id` = 'SK-CTG-b89a'))),0)) > 0) then 'Active' else 'Inactive' end) AS `status` from (((`trimming_batch` `tb` left join `trimming_details` `td` on((`tb`.`id` = `td`.`trimming_batch_id`))) left join `cultivation`.`harvesting_ref` `h` on((`h`.`id` = `tb`.`harvesting_id`))) left join `wholesale`.`wholesale` `w` on((`w`.`metrc_tag` = `td`.`metrc_tag`))) where ((`td`.`category_id` = 'SK-CTG-b89a') or (`td`.`note` like '%kief%')) group by `tb`.`metrc_tag`,`td`.`metrc_tag`,`tb`.`date`,`tb`.`harvesting_id`,`tb`.`strain_id`,`tb`.`process_type`;

-- View: trimming_machine_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_machine_batch_view` AS select `h`.`flowering_id` AS `Flowering ID`,`t`.`harvesting_id` AS `Harvesting ID`,`t`.`batch_id` AS `Processing ID`,`fl`.`flowering_id` AS `FID`,`h`.`harvest_id` AS `HID`,`h`.`date` AS `Harvest Date`,week(`h`.`date`,0) AS `Harvest Week`,year(`h`.`date`) AS `Harvest Year`,`h`.`test_id` AS `Test ID`,`h`.`harvest_type` AS `Harvest Type`,`fl`.`plant_count` AS `Crop Plant Count`,`h`.`plant_count_harvested` AS `Harvested Plant Count`,max(`strain`.`strain_code`) AS `Strain ID`,max(`strain`.`name`) AS `Plant Strain`,max(`t`.`source_metrc_tag`) AS `Processing Batch METRC`,max(`t`.`processing_batch_source_tag`) AS `Source METRC`,`t`.`id` AS `Trimming Batch ID`,`t`.`metrc_tag` AS `METRC Tag`,`t`.`process_type` AS `Trimming Type`,`t`.`category_id` AS `Product Category`,`t`.`category_type_id` AS `Product Category Type`,max(`t`.`quantity`) AS `Input Lbs`,max(`SUM`.`bin_count`) AS `Bin Count Recieved`,sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) AS `Trimmed Flower lbs`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `Reg Flower - A lbs`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`product_size_id` = 'R') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `Reg Flower - B lbs`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`product_size_id` = 'R') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `Reg Flower - C lbs`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `Big Flower - A lbs`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `Small Flower - A lbs`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `Shake lbs`,sum((case when (`td`.`category_type_id` = 'SK-CTP-56d3') then `td`.`quantity` else 0 end)) AS `Trim lbs`,sum((case when ((`td`.`category_type_id` = 'SK-CTP-daf5') and (`td`.`category_id` = 'SK-CTG-a60f')) then `td`.`quantity` else 0 end)) AS `Trimming Waste lbs`,if((sum(`td`.`quantity`) is null),0,(max(`t`.`quantity`) - max(`td`.`quantity`))) AS `Misc Trimming Waste lbs`,(sum((case when ((`td`.`category_type_id` = 'SK-CTP-daf5') and (`td`.`category_id` = 'SK-CTG-a60f')) then `td`.`quantity` else 0 end)) + if((sum(`td`.`quantity`) is null),0,(max(`t`.`quantity`) - sum(`td`.`quantity`)))) AS `Total Trimmed Waste lbs`,((sum(`t`.`quantity`) - sum(`td`.`quantity`)) / sum(`t`.`quantity`)) AS `Trimmed Waste %`,count(`t`.`id`) AS `Trimmed  Flower Bins`,min(`pl`.`process_start`) AS `Process Start`,min(`pl`.`process_stop`) AS `Process Stop`,timediff(min(`pl`.`process_stop`),min(`pl`.`process_start`)) AS `Trimming Duration`,`t`.`action` AS `Process Status`,max(`pl`.`id`) AS `Process Log`,max(`pl`.`process_name`) AS `Record Status`,`t`.`status` AS `Process Queue`,count(`td`.`process_queue_id`) AS `Process Queue Count`,max(`td`.`process_queue_type`) AS `Process Queue Type`,`t`.`note` AS `Notes`,`t`.`created_by` AS `Created By`,`t`.`created_on` AS `Created On`,`t`.`modified_by` AS `Modified By`,max(`t`.`modified_on`) AS `Modified On` from ((((((`trimming_batch` `t` left join `trimming_details` `td` on((`t`.`id` = `td`.`trimming_batch_id`))) left join `trimming_detail_view` `SUM` on((`t`.`id` = `SUM`.`trimming_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `t`.`harvesting_id`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `t`.`strain_id`))) left join `cultivation`.`flowering` `fl` on((`fl`.`id` = `h`.`flowering_id`))) left join `process_log` `pl` on((`pl`.`source_id` = `t`.`id`))) where (`t`.`process_type` = 'T-zero Machine') group by `t`.`id`;

-- View: trimming_machine_crop_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_machine_crop_batch_view` AS select `t`.`Flowering ID` AS `Flowering ID`,max(`t`.`Harvesting ID`) AS `Harvesting ID`,max(`t`.`Processing ID`) AS `Processing ID`,min(`t`.`HID`) AS `HID`,count(`t`.`Test ID`) AS `Test Record Count`,max(`t`.`Crop Plant Count`) AS `Crop Plant Count`,max(`t`.`Harvested Plant Count`) AS `Harvested Plant Count`,count(`t`.`Harvesting ID`) AS `Harvest Record Count`,max(`t`.`Strain ID`) AS `Strain ID`,max(`t`.`Plant Strain`) AS `Plant Strain`,max(`t`.`Trimming Type`) AS `Trimming Type`,sum(`t`.`Input Lbs`) AS `Bucked Flower lbs`,sum(`t`.`Bin Count Recieved`) AS `Bin Count Received`,sum(`t`.`Trimmed Flower lbs`) AS `Trimmed Flower lbs`,sum(`t`.`Reg Flower - A lbs`) AS `Reg Flower - A lbs`,sum(`t`.`Reg Flower - B lbs`) AS `Reg Flower - B lbs`,sum(`t`.`Reg Flower - C lbs`) AS `Reg Flower - C lbs`,sum(`t`.`Big Flower - A lbs`) AS `Big Flower - A lbs`,sum(`t`.`Small Flower - A lbs`) AS `Small Flower - A lbs`,sum(`t`.`Shake lbs`) AS `Shake lbs`,sum(`t`.`Trim lbs`) AS `Trim lbs`,sum(`t`.`Trimming Waste lbs`) AS `Waste lbs`,sum(`t`.`Misc Trimming Waste lbs`) AS `Misc Trimming Waste lbs`,sum(`t`.`Total Trimmed Waste lbs`) AS `Total Trimmed Waste lbs`,max(`t`.`Trimmed Waste %`) AS `Trimmed Waste %`,max(`t`.`Created On`) AS `Date Started`,max(`t`.`Trimming Duration`) AS `Trimming Duration`,max(`t`.`Modified By`) AS `Modified By`,max(`t`.`Modified On`) AS `Modified On`,max(`t`.`Process Queue`) AS `Process Action` from `trimming_machine_batch_view` `t` group by `t`.`Flowering ID`;

-- View: trimming_machine_harvest_batch_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_machine_harvest_batch_view` AS select `t`.`Harvesting ID` AS `Harvesting ID`,max(`t`.`Processing ID`) AS `Processing ID`,`t`.`HID` AS `HID`,count(`t`.`Test ID`) AS `Test Record Count`,count(`t`.`Flowering ID`) AS `Flowering ID Record Count`,`t`.`Harvested Plant Count` AS `Harvested Plant Count`,max(`t`.`Strain ID`) AS `Strain ID`,max(`t`.`Plant Strain`) AS `Plant Strain`,max(`t`.`Trimming Type`) AS `Trimming Type`,sum(`t`.`Input Lbs`) AS `Bucked Flower lbs`,sum(`t`.`Bin Count Recieved`) AS `Bin Count Received`,sum(`t`.`Trimmed Flower lbs`) AS `Trimmed Flower lbs`,sum(`t`.`Reg Flower - A lbs`) AS `Reg Flower - A lbs`,sum(`t`.`Reg Flower - B lbs`) AS `Reg Flower - B lbs`,sum(`t`.`Reg Flower - C lbs`) AS `Reg Flower - C lbs`,sum(`t`.`Big Flower - A lbs`) AS `Big Flower - A lbs`,sum(`t`.`Small Flower - A lbs`) AS `Small Flower - A lbs`,sum(`t`.`Shake lbs`) AS `Shake lbs`,sum(`t`.`Trim lbs`) AS `Trim lbs`,sum(`t`.`Trimming Waste lbs`) AS `Waste lbs`,sum(`t`.`Misc Trimming Waste lbs`) AS `Misc Trimming Waste lbs`,sum(`t`.`Total Trimmed Waste lbs`) AS `Total Trimmed Waste lbs`,max(`t`.`Trimmed Waste %`) AS `Trimmed Waste %`,max(`t`.`Created On`) AS `Date Started`,max(`t`.`Trimming Duration`) AS `Trimming Duration`,max(`t`.`Modified By`) AS `Modified By`,max(`t`.`Modified On`) AS `Modified On`,max(`t`.`Process Queue`) AS `Process Action` from `trimming_machine_batch_view` `t` group by `t`.`Harvesting ID`;

-- View: trimming_machine_prod_flat
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `trimming_machine_prod_flat` AS select max(`td`.`flowering_id`) AS `flowering_id`,min(`td`.`start_date`) AS `start_date`,sum(`td`.`input_quantity`) AS `input_quantity`,sum(`td`.`output_quantity`) AS `output_quantity`,sum(`td`.`trim_output`) AS `trim_output`,sum(`td`.`total_flower_output_quantity`) AS `total_flower_output_quantity`,sum(`td`.`sugar_shake_output`) AS `sugar_shake_output`,sum(`td`.`b_flower_output`) AS `b_flower_output`,sum(`td`.`c_flower_output`) AS `c_flower_output`,sum(`td`.`retrim_a_output`) AS `retrim_a_output`,sum(`td`.`retrim_b_output`) AS `retrim_b_output`,sum(`td`.`retrim_c_output`) AS `retrim_c_output`,sum(`td`.`big_a_flower_output`) AS `big_a_flower_output`,sum(`td`.`reg_a_flower_output`) AS `reg_a_flower_output`,sum(`td`.`sml_a_flower_output`) AS `sml_a_flower_output`,sum(`td`.`medium_a_flower_output`) AS `medium_a_flower_output`,sum(`td`.`micro_a_flower_output`) AS `micro_a_flower_output`,sum(`td`.`waste_output`) AS `waste_output`,(select count(0) from `trimming_machine_prod_flat_all` `sub` where (`sub`.`flowering_id` = `td`.`flowering_id`)) AS `record_count`,max(`td`.`batch_status`) AS `batch_status` from `trimming_machine_prod_flat_all` `td` group by `td`.`flowering_id`;

-- View: trimming_machine_prod_flat_all
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `trimming_machine_prod_flat_all` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`bb`.`metrc_tag` AS `metrc_tag`,min(`bb`.`date`) AS `start_date`,(select sum(`bb_sub`.`quantity`) from `trimming_batch` `bb_sub` where ((`bb_sub`.`metrc_tag` = `bb`.`metrc_tag`) and (`bb_sub`.`process_type` = 'T-zero Machine')) group by `bb_sub`.`metrc_tag`) AS `input_quantity`,sum((case when (`td`.`category_id` <> 'SK-CTG-b89a') then `td`.`quantity` else 0 end)) AS `output_quantity`,sum((case when (`td`.`category_type_id` = 'SK-CTP-56d3') then `td`.`quantity` else 0 end)) AS `trim_output`,sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) AS `total_flower_output_quantity`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `sugar_shake_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `c_flower_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'A')) then `td`.`quantity` else 0 end)) AS `retrim_a_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'B')) then `td`.`quantity` else 0 end)) AS `retrim_b_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'C')) then `td`.`quantity` else 0 end)) AS `retrim_c_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `big_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `reg_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `sml_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'M') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `medium_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'MS') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `micro_a_flower_output`,sum((case when (`td`.`category_id` = 'SK-CTG-a60f') then `td`.`quantity` else 0 end)) AS `waste_output`,if((`bb`.`action` = 'Stopped'),'In Progress',`bb`.`action`) AS `batch_status` from ((`trimming_batch` `bb` left join `trimming_details` `td` on((`bb`.`id` = `td`.`trimming_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) where ((`bb`.`process_type` = 'T-zero Machine') and (`h`.`year_num` > 2021)) group by `h`.`flowering_id`,`h`.`id`,`bb`.`metrc_tag`,`h`.`harvest_id`,`bb`.`action`;

-- View: trimming_machine_prod_flat_group
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `trimming_machine_prod_flat_group` AS select `td`.`flowering_id` AS `flowering_id`,`td`.`harvesting_id` AS `harvesting_id`,`td`.`harvest_id` AS `harvest_id`,min(`td`.`start_date`) AS `start_date`,sum(`td`.`input_quantity`) AS `input_quantity`,sum(`td`.`output_quantity`) AS `output_quantity`,sum(`td`.`trim_output`) AS `trim_output`,sum(`td`.`total_flower_output_quantity`) AS `total_flower_output_quantity`,sum(`td`.`sugar_shake_output`) AS `sugar_shake_output`,sum(`td`.`b_flower_output`) AS `b_flower_output`,sum(`td`.`c_flower_output`) AS `c_flower_output`,sum(`td`.`retrim_a_output`) AS `retrim_a_output`,sum(`td`.`retrim_b_output`) AS `retrim_b_output`,sum(`td`.`retrim_c_output`) AS `retrim_c_output`,sum(`td`.`big_a_flower_output`) AS `big_a_flower_output`,sum(`td`.`reg_a_flower_output`) AS `reg_a_flower_output`,sum(`td`.`sml_a_flower_output`) AS `sml_a_flower_output`,sum(`td`.`medium_a_flower_output`) AS `medium_a_flower_output`,sum(`td`.`micro_a_flower_output`) AS `micro_a_flower_output`,sum(`td`.`waste_output`) AS `waste_output`,max(`td`.`batch_status`) AS `batch_status` from `trimming_machine_prod_flat_all` `td` group by `td`.`flowering_id`,`td`.`harvesting_id`,`td`.`harvest_id`;

-- View: trimming_new_tags_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `trimming_new_tags_view` AS select `t`.`metrc_tag` AS `source_metrc_tag`,`td`.`metrc_tag` AS `metrc_tag`,max(`td`.`trimming_batch_id`) AS `trimming_batch_id`,sum((case when (`td`.`category_type_id` = 'SK-CTP-56d3') then `td`.`quantity` else 0 end)) AS `trim_output`,sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) AS `total_flower_output_quantity`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `sugar_shake_output`,(sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) + sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0))) AS `flower_shake_output_quantity`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `c_flower_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'A')) then `td`.`quantity` else 0 end)) AS `retrim_a_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'B')) then `td`.`quantity` else 0 end)) AS `retrim_b_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'C')) then `td`.`quantity` else 0 end)) AS `retrim_c_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `big_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `reg_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `sml_a_flower_output` from (`trimming_details` `td` left join `trimming_batch` `t` on((`t`.`id` = `td`.`trimming_batch_id`))) where ((cast(`td`.`created_on` as date) >= (curdate() - interval 7 day)) and (`td`.`metrc_tag` is not null) and (`td`.`metrc_tag` <> `t`.`metrc_tag`)) group by `td`.`metrc_tag`,`td`.`trimming_batch_id`;

-- View: trimming_prod_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `trimming_prod_view` AS select `h`.`flowering_id` AS `flowering_id`,`bb`.`harvesting_id` AS `harvesting_id`,`bb`.`metrc_tag` AS `metrc_tag`,if((`bb`.`process_type` = 'T-zero Machine'),'Trimming',`bb`.`process_type`) AS `process`,`bb`.`id` AS `batch_id`,`bb`.`date` AS `date`,if(((`bb`.`action` = 'Stopped') or (`bb`.`action` = 'In Progress')),'In Progress',`bb`.`action`) AS `batch_status`,`f`.`flowering_id` AS `flowering_id_name`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,NULL AS `flower_plant_count`,NULL AS `harvest_plant_count`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,`cat`.`name` AS `input_category`,`ct`.`name` AS `input_category_type`,NULL AS `input_product_size`,NULL AS `input_product_grade`,max(`bb`.`quantity`) AS `input_quantity`,`cate`.`name` AS `output_category`,`cty`.`name` AS `output_category_type`,`bd`.`product_size_id` AS `output_size`,`bd`.`product_grade_id` AS `output_grade`,sum(`bd`.`quantity`) AS `output_quantity` from ((((((((`trimming_batch` `bb` left join `trimming_details` `bd` on((`bb`.`id` = `bd`.`trimming_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`id` = `bb`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `bb`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `bb`.`category_type_id`))) left join `product_sku`.`category` `cate` on((`cate`.`id` = `bd`.`category_id`))) left join `product_sku`.`category_type` `cty` on((`cty`.`id` = `bd`.`category_type_id`))) left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) left join `cultivation`.`flowering` `f` on((`f`.`id` = `h`.`flowering_id`))) group by `bb`.`harvesting_id`,`bb`.`metrc_tag`,`bb`.`process_type`,`h`.`test_id`,`bb`.`action`,`h`.`harvest_id`,`bb`.`date`,`h`.`property_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`cat`.`name`,`ct`.`name`,`bb`.`id`,`h`.`flowering_id`,`bb`.`process_type`,`f`.`flowering_id`,`bd`.`product_size_id`,`bd`.`product_grade_id`,`cate`.`name`,`cty`.`name` order by `bb`.`date` desc,`bb`.`action`;

-- View: trimming_records_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_records_view` AS select `t`.`harvesting_id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`t`.`metrc_tag` AS `metrc_tag`,`t`.`processing_batch_source_tag` AS `processing_batch_source_tag`,`strain`.`strain_code` AS `strain_id`,`strain`.`name` AS `strain_name`,`pacstone`.`uom`.`name` AS `uom`,`t`.`quantity` AS `input_quantity`,`td`.`quantity` AS `output_quantity`,`cat`.`name` AS `cat_name`,`t`.`action` AS `process_action` from ((((((`trimming_batch` `t` left join `trimming_details` `td` on((`t`.`id` = `td`.`trimming_batch_id`))) left join `cultivation`.`harvesting_ref` `h` on((`h`.`id` = `t`.`harvesting_id`))) left join `product_sku`.`category` `cat` on((`cat`.`id` = `td`.`category_id`))) left join `product_sku`.`category_type` `ct` on((`ct`.`id` = `td`.`category_type_id`))) left join `pacstone`.`uom` on((`pacstone`.`uom`.`id` = `td`.`uom_id`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `t`.`strain_id`))) where ((`t`.`processing_batch_source_tag` = '1A4060300003092000000081') and (`cat`.`name` = 'Flower'));

-- View: trimming_t0_report
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_t0_report` AS select `t`.`metrc_tag` AS `metrc_tag`,`t`.`processing_batch_source_tag` AS `processing_batch_source_tag`,`h`.`id` AS `harvesting_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`date` AS `harvest_date`,`h`.`property_id` AS `property`,`h`.`year_num` AS `harvest_year`,`h`.`week_num` AS `harvest_week`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `year_week`,`strain`.`strain_code` AS `strain_id`,`strain`.`name` AS `strain_name`,`h`.`harvest_type` AS `harvest_type`,(case when (`h`.`harvest_type` = 'Partial') then (select sum(`cultivation`.`harvesting`.`plant_count_harvested`) from `cultivation`.`harvesting` where ((`cultivation`.`harvesting`.`processing_metrc_id` = `t`.`processing_batch_source_tag`) and (`cultivation`.`harvesting`.`harvest_type` = 'Partial'))) else max(`h`.`plant_count_harvested`) end) AS `plant_count`,max(`t`.`date`) AS `t0_date`,max(`t`.`quantity`) AS `input_qty`,`subq`.`output_qty` AS `output_qty`,sum((case when (`td`.`category_id` = 'SK-CTG-0001') then `td`.`quantity` else 0 end)) AS `total_flower_output_quantity`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `big_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'R') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `reg_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `sml_a_flower_output`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `sugar_shake_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`category_id` = 'SK-CTG-0001') and (`td`.`process_queue_id` is null)) then `td`.`quantity` else 0 end)) AS `c_flower_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'A')) then `td`.`quantity` else 0 end)) AS `retrim_a_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'B')) then `td`.`quantity` else 0 end)) AS `retrim_b_output`,sum((case when ((`td`.`process_queue_id` = 'Trimming') and (`td`.`product_grade_id` = 'C')) then `td`.`quantity` else 0 end)) AS `retrim_c_output`,sum(if((`td`.`category_id` = 'SK-CTG-a60f'),`td`.`quantity`,0)) AS `total_waste_output`,sum((case when (`td`.`category_type_id` = 'SK-CTP-56d3') then `td`.`quantity` else 0 end)) AS `trim_output`,`t`.`action` AS `process_action` from ((((`trimming_batch` `t` left join `trimming_details` `td` on((`t`.`id` = `td`.`trimming_batch_id`))) left join `cultivation`.`harvesting` `h` on((`h`.`processing_metrc_id` = `t`.`processing_batch_source_tag`))) left join `pacstone`.`plant_strain` `strain` on((`strain`.`id` = `t`.`strain_id`))) left join (select `td2`.`trimming_batch_id` AS `trimming_batch_id`,sum(`td2`.`quantity`) AS `output_qty` from `trimming_details` `td2` group by `td2`.`trimming_batch_id`) `subq` on((`t`.`id` = `subq`.`trimming_batch_id`))) where (((`t`.`process_type` = 'T-zero Machine') and (`t`.`action` = 'Finished')) or ((`t`.`process_type` = 'Hand Trimming') and (`t`.`action` = 'Finished') and exists(select 1 from `trimming_batch` `t2` where ((`t2`.`processing_batch_source_tag` = `t`.`processing_batch_source_tag`) and (`t2`.`process_type` = 'T-zero Machine') and (`t2`.`action` = 'Finished'))) is false)) group by `t`.`metrc_tag`,`t`.`processing_batch_source_tag`,`h`.`id`,`h`.`harvest_id`,`h`.`test_id`,`h`.`date`,`h`.`property_id`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`strain`.`strain_code`,`strain`.`name`,`t`.`action`,`subq`.`output_qty`;

-- View: trimming_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `trimming_view` AS select `td`.`trimming_batch_id` AS `trimming_batch_id`,max(`td`.`created_on`) AS `trim_INdate`,sum(`td`.`quantity`) AS `total_trimmed_quantity`,count(`td`.`quantity`) AS `bin_count`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'B')) then `td`.`quantity` else 0 end)) AS `big_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'R')) then `td`.`quantity` else 0 end)) AS `reg_a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`product_size_id` = 'S')) then `td`.`quantity` else 0 end)) AS `sml_a_flower_output`,sum((case when ((`td`.`process_queue_type` = 'hand trimming') and (`td`.`product_grade_id` = 'A')) then `td`.`quantity` else 0 end)) AS `retrim_a_output`,sum((case when ((`td`.`process_queue_type` = 'hand trimming') and (`td`.`product_grade_id` = 'B')) then `td`.`quantity` else 0 end)) AS `retrim_b_output`,sum((case when ((`td`.`product_grade_id` = 'A') and (`td`.`category_type_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `a_flower_output`,sum((case when ((`td`.`product_grade_id` = 'B') and (`td`.`category_type_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `b_flower_output`,sum((case when ((`td`.`product_grade_id` = 'C') and (`td`.`category_type_id` = 'SK-CTG-0001')) then `td`.`quantity` else 0 end)) AS `c_flower_output`,sum(if((`td`.`category_type_id` = 'SK-CTP-5844'),`td`.`quantity`,0)) AS `sugar_shake_output`,sum(if((`td`.`category_type_id` = 'SK-CTP-56d3'),`td`.`quantity`,0)) AS `trim_output`,sum(if((`td`.`category_id` = 'SK-CTG-b89a'),`td`.`quantity`,0)) AS `kief_output`,sum(if((`td`.`category_id` = 'SK-CTG-a60f'),`td`.`quantity`,0)) AS `total_waste_output` from (`trimming_details` `td` left join `trimming_batch` `tb` on((`tb`.`id` = `td`.`trimming_batch_id`))) group by `td`.`trimming_batch_id`;

-- View: tzero_settings_batch_log
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `tzero_settings_batch_log` AS select `tb`.`harvest_metric_id` AS `Harvest Metrc Tag`,`tb`.`bucked_weight_batch` AS `Bucked Batch Weight`,`tb`.`retrim_batch` AS `Retrim Batch`,`tb`.`machine_operator` AS `Machine Operator`,`tb`.`processing_metrc_id` AS `Processing METRC ID`,`tb`.`qty_bins` AS `Bin Quantity`,`tb`.`batch_weight` AS `Batch Weight`,`tb`.`tzero_retrim_weight` AS `T-Zero Retrim Weight`,`tb`.`lbs_per_hour` AS `lbs per hour`,`tb`.`harvest_id` AS `Harvest ID`,`tb`.`date` AS `Batch Start Date`,`tb`.`week_num` AS `Week Numbers`,`tb`.`time_start` AS `Start Time`,`tb`.`time_end` AS `Finish Time`,`tb`.`time_total` AS `Total Run Time`,`tb`.`tzero_run_number` AS `T-Zero Run Count` from `tzero_batch` `tb` where ((`tb`.`date` >= (curdate() - interval 52 week)) and (`tb`.`tzero_retrim_weight` is null));

