-- View: CustomerSalesHistory
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `CustomerSalesHistory` AS with `sku_view` as (select `product_sku`.`sku`.`kss_id` AS `kss_id`,max(`b`.`name`) AS `brand`,max(`c`.`name`) AS `category`,max(`p`.`name`) AS `package`,max(`ps`.`size`) AS `package_size`,max(`product_sku`.`sku`.`class`) AS `class`,max((case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end)) AS `strain`,max(`product_sku`.`sku`.`source_sku`) AS `source_sku` from ((((((`product_sku`.`sku` left join `pacstone`.`brand` `b` on((`product_sku`.`sku`.`brand` = `b`.`id`))) left join `product_sku`.`category` `c` on((`product_sku`.`sku`.`category` = `c`.`id`))) left join `product_sku`.`package` `p` on((`product_sku`.`sku`.`package` = `p`.`id`))) left join `product_sku`.`package_size` `ps` on((`product_sku`.`sku`.`package_size` = `ps`.`id`))) left join `pacstone`.`plant_strain` `s` on((`product_sku`.`sku`.`plant_strain` = `s`.`id`))) left join `product_sku`.`packing_group` `pg` on((`pg`.`id` = `product_sku`.`sku`.`packing_group`))) group by `product_sku`.`sku`.`kss_id`) select `i`.`InvoiceID` AS `Invoice`,`i`.`InvoiceTransID` AS `InvoiceTransID`,`i`.`Date` AS `Date`,`i`.`CustomerID` AS `CustomerID`,`c`.`Company` AS `Company`,`c`.`Chain - Customer` AS `Company Chain`,`i`.`ProductID` AS `ProductID`,regexp_replace(`i`.`ProductNumName`,'^[0-9]{4} ','') AS `ProductName`,`s`.`brand` AS `Brand`,`s`.`strain` AS `Strain`,`s`.`category` AS `Category`,`s`.`package` AS `Package`,`s`.`package_size` AS `Weight`,`s`.`class` AS `Class`,`s`.`source_sku` AS `Parent SKU`,`c`.`Address` AS `Address`,`c`.`City` AS `City`,`c`.`PostalCode` AS `ZipCode`,`c`.`CountyID` AS `County`,`c`.`PrimaryUserID` AS `Buyer`,`c`.`SalesmanUserID` AS `KSS Sales`,`c`.`IndVolume` AS `Volume`,`c`.`EthnicityID` AS `EthnicityID`,`c`.`StateLicenseNum` AS `License`,`c`.`AR Account Limit` AS `AR Limit`,`i`.`Units` AS `Units`,`i`.`FullPrice` AS `FullPrice`,`i`.`Discount` AS `Discount`,`i`.`Participation` AS `Participation`,`i`.`Vol` AS `Total`,`i`.`Status` AS `Invoice Status` from ((`kss_invoice` `i` join `kss_customer` `c` on((`i`.`CustomerID` = `c`.`id`))) left join `sku_view` `s` on((`i`.`ProductID` = `s`.`kss_id`)));

-- View: CustomerSalesHistoryDetail
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `CustomerSalesHistoryDetail` AS with `sku_view` as (select `product_sku`.`sku`.`kss_id` AS `kss_id`,max(`b`.`name`) AS `brand`,max(`c`.`name`) AS `category`,max(`p`.`name`) AS `package`,max(`ps`.`size`) AS `package_size`,max(`product_sku`.`sku`.`class`) AS `class`,if((max(`product_sku`.`sku`.`class`) = 'Retail'),max(`pg`.`quantity`),1) AS `quantity`,max((case when (`b`.`code` = 'PS') then `s`.`pacific_stone_label` when (`b`.`code` = 'TM') then `s`.`time_machine_label` end)) AS `strain`,max(`product_sku`.`sku`.`plant_strain`) AS `strain_code`,max(`product_sku`.`sku`.`source_sku`) AS `source_sku` from ((((((`product_sku`.`sku` left join `pacstone`.`brand` `b` on((`product_sku`.`sku`.`brand` = `b`.`id`))) left join `product_sku`.`category` `c` on((`product_sku`.`sku`.`category` = `c`.`id`))) left join `product_sku`.`package` `p` on((`product_sku`.`sku`.`package` = `p`.`id`))) left join `product_sku`.`package_size` `ps` on((`product_sku`.`sku`.`package_size` = `ps`.`id`))) left join `pacstone`.`plant_strain` `s` on((`product_sku`.`sku`.`plant_strain` = `s`.`id`))) left join `product_sku`.`packing_group` `pg` on((`pg`.`id` = `product_sku`.`sku`.`packing_group`))) group by `product_sku`.`sku`.`kss_id`) select `i`.`InvoiceID` AS `Invoice`,`i`.`InvoiceTransID` AS `InvoiceTransID`,`i`.`Date` AS `Date`,`i`.`CustomerID` AS `CustomerID`,`c`.`Company` AS `Company`,`c`.`Chain - Customer` AS `Company Chain`,`i`.`ProductID` AS `ProductID`,regexp_replace(`i`.`ProductNumName`,'^[0-9]{4} ','') AS `ProductName`,`s`.`brand` AS `Brand`,`s`.`strain` AS `Strain`,`s`.`strain_code` AS `StrainCode`,`s`.`category` AS `Category`,`s`.`package` AS `Package`,`s`.`package_size` AS `Weight`,`s`.`class` AS `Class`,`s`.`quantity` AS `DisplayQty`,`s`.`source_sku` AS `Parent SKU`,`c`.`Address` AS `Address`,`c`.`City` AS `City`,`c`.`PostalCode` AS `ZipCode`,`c`.`CountyID` AS `County`,`c`.`PrimaryUserID` AS `Buyer`,`c`.`SalesmanUserID` AS `KSS Sales`,`c`.`IndVolume` AS `Volume`,`c`.`EthnicityID` AS `EthnicityID`,`c`.`StateLicenseNum` AS `License`,`c`.`AR Account Limit` AS `AR Limit`,((`i`.`Units` * `s`.`package_size`) * 0.035274) AS `TotalOz`,((`i`.`Units` * `s`.`package_size`) * 0.00220462) AS `TotalLbs`,`i`.`Units` AS `Units`,`i`.`FullPrice` AS `FullPrice`,`i`.`Discount` AS `Discount`,`i`.`Participation` AS `Participation`,`i`.`Vol` AS `Total`,`i`.`Status` AS `Invoice Status` from ((`kss_invoice` `i` join `kss_customer` `c` on((`i`.`CustomerID` = `c`.`id`))) left join `sku_view` `s` on((`i`.`ProductID` = `s`.`kss_id`)));

-- View: InvoiceSalesPerYearMonthPerCustomerPerProduct
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `InvoiceSalesPerYearMonthPerCustomerPerProduct` AS select `kc`.`Chain - Customer` AS `Chain - Customer`,max(`kc`.`Company`) AS `Company`,`ki`.`ProductNumName` AS `ProductNumName`,last_day(`ki`.`Date`) AS `YearMonth`,sum(`ki`.`Vol`) AS `TotalSales`,sum(abs(`ki`.`Vol`)) AS `TotalVolActivity` from (`kss_invoice` `ki` left join `kss_customer` `kc` on((`kc`.`id` = `ki`.`CustomerID`))) group by `kc`.`Chain - Customer`,`ki`.`ProductNumName`,last_day(`ki`.`Date`);

-- View: MonthlySalesPerCustomer
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `MonthlySalesPerCustomer` AS select `si`.`Chain - Customer` AS `Chain - Customer`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 7 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 7 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 7 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 7 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 7 month))) then `si`.`ProductNumName` else 0 end)) AS `Unique SKUs 7 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 6 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 6 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 6 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 6 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 6 month))) then `si`.`ProductNumName` else 0 end)) AS `Unique SKUs 6 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 5 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 5 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 5 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 5 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 5 month))) then `si`.`ProductNumName` else 0 end)) AS `Unique SKUs 5 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 4 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 4 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 4 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 4 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 4 month))) then `si`.`ProductNumName` else 0 end)) AS `Unique SKUs 4 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 3 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 3 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 3 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 3 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 3 month))) then `si`.`ProductNumName` else 0 end)) AS `Unique SKUs 3 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 2 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 2 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 2 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 2 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 2 month))) then `si`.`ProductNumName` else 0 end)) AS `Unique SKUs 2 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 1 month))) then `si`.`TotalSales` else 0 end)) AS `Sales Last Month`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 1 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume Last Month`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 1 month))) then `si`.`ProductNumName` else 0 end)) AS `Unique SKUs Last Month`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 0 month))) then `si`.`TotalSales` else 0 end)) AS `Sales This Month`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 0 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume This Month`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 0 month))) then `si`.`ProductNumName` else 0 end)) AS `Unique SKUs This Month` from `InvoiceSalesPerYearMonthPerCustomerPerProduct` `si` group by `si`.`Chain - Customer`;

-- View: MonthlySalesPerCustomerPerProduct
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `MonthlySalesPerCustomerPerProduct` AS select `si`.`Chain - Customer` AS `Chain - Customer`,`si`.`ProductNumName` AS `ProductNumName`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 7 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 7 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 7 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 7 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 6 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 6 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 6 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 6 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 5 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 5 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 5 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 5 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 4 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 4 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 4 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 4 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 3 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 3 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 3 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 3 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 2 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 2 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 2 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 2 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 1 month))) then `si`.`TotalSales` else 0 end)) AS `Sales Last Month`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 1 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume Last Month`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 0 month))) then `si`.`TotalSales` else 0 end)) AS `Sales This Month`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 7 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume This Month` from `InvoiceSalesPerYearMonthPerCustomerPerProduct` `si` group by `si`.`Chain - Customer`,`si`.`ProductNumName`;

-- View: MonthlySalesPerProduct
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `MonthlySalesPerProduct` AS select `si`.`ProductNumName` AS `ProductNumName`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 7 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 7 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 7 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 7 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 7 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers 7 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 6 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 6 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 6 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 6 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 6 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers 6 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 5 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 5 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 5 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 5 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 5 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers 5 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 4 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 4 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 4 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 4 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 4 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers 4 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 3 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 3 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 3 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 3 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 3 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers 3 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 2 month))) then `si`.`TotalSales` else 0 end)) AS `Sales 2 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 2 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume 2 Months Ago`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 2 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers 2 Months Ago`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 1 month))) then `si`.`TotalSales` else 0 end)) AS `Sales Last Month`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 1 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume Last Month`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 1 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers Last Month`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 0 month))) then `si`.`TotalSales` else 0 end)) AS `Sales This Month`,sum((case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 0 month))) then abs(`si`.`TotalSales`) else 0 end)) AS `Volume This Month`,count(distinct (case when (`si`.`YearMonth` = last_day((convert_tz(now(),'+00:00','-07:00') - interval 0 month))) then `si`.`Chain - Customer` else 0 end)) AS `Unique Customers This Month` from `InvoiceSalesPerYearMonthPerCustomerPerProduct` `si` group by `si`.`ProductNumName`;

-- View: RecurringCustomers
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `RecurringCustomers` AS select `ki`.`CustomerNumCompany` AS `CustomerNumCompany`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 7 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 6 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 5 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 4 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 3 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 2 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 1 Month Ago` from `kss_invoice` `ki` where (`ki`.`Date` > (curdate() - interval 210 day)) group by `ki`.`CustomerNumCompany` having ((sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then abs(`ki`.`Vol`) else 0 end)) > 0));

-- View: RecurringCustomersLost
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `RecurringCustomersLost` AS select `ki`.`CustomerNumCompany` AS `CustomerNumCompany`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 7 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 6 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 5 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 4 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 3 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 2 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then `ki`.`Vol` else 0 end)) AS `Total Sales 1 Month Ago` from `kss_invoice` `ki` where (`ki`.`Date` > (curdate() - interval 210 day)) group by `ki`.`CustomerNumCompany` having ((sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then abs(`ki`.`Vol`) else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then abs(`ki`.`Vol`) else 0 end)) = 0));

-- View: RecurringCustomersProducts
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `RecurringCustomersProducts` AS select `ki`.`CustomerNumCompany` AS `CustomerNumCompany`,`ki`.`ProductNumName` AS `ProductNumName`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then 1 else 0 end)) AS `Invoices 7 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then 1 else 0 end)) AS `Invoices 6 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then 1 else 0 end)) AS `Invoices 5 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then 1 else 0 end)) AS `Invoices 4 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then 1 else 0 end)) AS `Invoices 3 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then 1 else 0 end)) AS `Invoices 2 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then 1 else 0 end)) AS `Invoices 1 Month Ago` from `kss_invoice` `ki` where (`ki`.`Date` > (curdate() - interval 210 day)) group by `ki`.`CustomerNumCompany`,`ki`.`ProductNumName` having ((sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then 1 else 0 end)) > 0));

-- View: RecurringCustomersProductsLost
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `RecurringCustomersProductsLost` AS select `ki`.`CustomerNumCompany` AS `CustomerNumCompany`,`ki`.`ProductNumName` AS `ProductNumName`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then 1 else 0 end)) AS `Invoices 7 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then 1 else 0 end)) AS `Invoices 6 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then 1 else 0 end)) AS `Invoices 5 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then 1 else 0 end)) AS `Invoices 4 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then 1 else 0 end)) AS `Invoices 3 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then 1 else 0 end)) AS `Invoices 2 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then 1 else 0 end)) AS `Invoices 1 Month Ago` from `kss_invoice` `ki` where (`ki`.`Date` > (curdate() - interval 210 day)) group by `ki`.`CustomerNumCompany`,`ki`.`ProductNumName` having ((sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then 1 else 0 end)) = 0));

-- View: RecurringProducts
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `RecurringProducts` AS select `ki`.`ProductNumName` AS `ProductNumName`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then 1 else 0 end)) AS `Invoices 7 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then 1 else 0 end)) AS `Invoices 6 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then 1 else 0 end)) AS `Invoices 5 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then 1 else 0 end)) AS `Invoices 4 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then 1 else 0 end)) AS `Invoices 3 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then 1 else 0 end)) AS `Invoices 2 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then 1 else 0 end)) AS `Invoices 1 Month Ago` from `kss_invoice` `ki` where (`ki`.`Date` > (curdate() - interval 210 day)) group by `ki`.`ProductNumName` having ((sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then 1 else 0 end)) > 0));

-- View: RecurringProductsLost
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `RecurringProductsLost` AS select `ki`.`ProductNumName` AS `ProductNumName`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then 1 else 0 end)) AS `Invoices 7 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then 1 else 0 end)) AS `Invoices 6 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then 1 else 0 end)) AS `Invoices 5 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then 1 else 0 end)) AS `Invoices 4 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then 1 else 0 end)) AS `Invoices 3 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then 1 else 0 end)) AS `Invoices 2 Months Ago`,sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then 1 else 0 end)) AS `Invoices 1 Month Ago` from `kss_invoice` `ki` where (`ki`.`Date` > (curdate() - interval 210 day)) group by `ki`.`ProductNumName` having ((sum((case when (month(`ki`.`Date`) = month((curdate() - interval 7 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 6 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 5 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 4 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 3 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 2 month))) then 1 else 0 end)) > 0) and (sum((case when (month(`ki`.`Date`) = month((curdate() - interval 1 month))) then 1 else 0 end)) = 0));

-- View: SalesPerParentSKU
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `SalesPerParentSKU` AS with `kss_to_parent` as (select `s`.`kss_id` AS `kss_id`,max(`s`.`source_sku`) AS `source_sku` from `product_sku`.`sku` `s` where (`s`.`kss_id` is not null) group by `s`.`kss_id`) select `ki`.`id` AS `id`,`ki`.`Supplier` AS `Supplier`,`ki`.`InvoiceNum` AS `InvoiceNum`,`ki`.`Status` AS `Status`,`ki`.`Date` AS `Date`,`ki`.`ProductNumName` AS `ProductNumName`,`ki`.`CustomerNumCompany` AS `CustomerNumCompany`,`ki`.`PromotionName` AS `PromotionName`,`ki`.`FullPrice` AS `FullPrice`,`ki`.`Discount` AS `Discount`,`ki`.`Vol` AS `Vol`,`ki`.`Participation` AS `Participation`,`ki`.`Units` AS `Units`,`ki`.`InvoiceID` AS `InvoiceID`,`ki`.`InvoiceTransID` AS `InvoiceTransID`,`ki`.`ProductID` AS `ProductID`,`ki`.`CustomerID` AS `CustomerID`,`ki`.`created_on` AS `created_on`,`ki`.`modified_on` AS `modified_on`,`ki`.`is_new` AS `is_new`,`ps`.`sku` AS `sku`,`ps`.`name` AS `name` from ((`kss_invoice` `ki` left join `kss_to_parent` `s` on((`s`.`kss_id` = `ki`.`ProductID`))) left join `product_sku`.`parent_sku` `ps` on((`ps`.`id` = `s`.`source_sku`)));

-- View: doi_inventory
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `doi_inventory` AS select `i`.`id` AS `id`,`i`.`Location` AS `Location`,`sku`.`SupplierID` AS `Brand`,`i`.`ProductID` AS `ProductID`,`sku`.`ProductName` AS `ProductName`,`sv`.`strain_code` AS `strain_id`,`sv`.`strain_name` AS `strain_name`,`i`.`ExpirationDate` AS `ExpirationDate`,`i`.`BatchCode` AS `BatchCode`,`i`.`Inventory` AS `Inventory`,`i`.`BinLotID` AS `BinLotID`,`d`.`UnitsCase` AS `UnitsCase`,`d`.`SalesTrend` AS `SalesTrend`,`d`.`UpcomingOrders` AS `UpcomingOrders`,`d`.`ALAvail` AS `ALAvail`,`d`.`ALDOI` AS `ALDOI`,`d`.`SVAvail` AS `SVAvail`,`d`.`SVDOI` AS `SVDOI`,`d`.`TotalAvailableUnits` AS `TotalAvailableUnits`,`d`.`MonthlySalesUnits` AS `MonthlySalesUnits`,`d`.`SalesHist` AS `SalesHist`,`d`.`KSSDOI` AS `KSSDOI`,`d`.`KSSMonthsofInv` AS `KSSMonthsofInv`,`d`.`TargetDOI` AS `TargetDOI`,`d`.`TargetUnits` AS `TargetUnits`,`d`.`ToBuyorSell` AS `ToBuyorSell`,`sku`.`CaseEquiv` AS `CaseEquiv`,`sku`.`CasePrice` AS `CasePrice`,`sku`.`CasesperLayer` AS `CasesPerLayer`,`sku`.`CasesperPallet` AS `CasesPerPallet`,`sku`.`Ounces` AS `Ounces`,`sku`.`PackageID` AS `PackageID`,`sku`.`Price` AS `Price`,`sku`.`ProductTypeID` AS `ProductTypeID`,`sku`.`Rank` AS `Rank`,`sku`.`SellByCaseOnly` AS `SellByCaseOnly`,`sku`.`ShelfLifeDays` AS `ShelfLifeDays`,`sku`.`Status` AS `Status`,`sku`.`Weight` AS `Weight` from (((`kss_inventory` `i` left join `kss_sku` `sku` on((`i`.`ProductID` = `sku`.`id`))) left join `kss_doi` `d` on((`i`.`ProductID` = `d`.`ProductID`))) left join `product_sku`.`sku_view` `sv` on((`i`.`ProductID` = `sv`.`kss_id`))) where (`i`.`Inventory` > 0.00);

-- View: inventory_sku
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `inventory_sku` AS select `kss_i`.`id` AS `id`,`kss_i`.`Location` AS `Location`,`kss_i`.`ProductID` AS `ProductID`,`kss_i`.`ProductNumName` AS `ProductNumName`,`kss_i`.`BatchCode` AS `BatchCode`,`kss_i`.`Inventory` AS `Inventory`,`kss_i`.`ExpirationDate` AS `Expires`,(to_days(curdate()) - to_days(`kss_i`.`ExpirationDate`)) AS `DaysExpire`,`ps_sku`.`strain_code` AS `strain_id`,`ps_sku`.`strain_name` AS `strain_name`,`ps_sku`.`sku` AS `sku`,`ps_sku`.`name` AS `ps_name`,`ps_sku`.`category_name` AS `ps_category`,`ps_sku`.`package_size_code` AS `package_size`,`ps_sku`.`strain_category` AS `strain_type`,`kss_sku`.`id` AS `Product_ID`,`kss_sku`.`BrandID` AS `BrandID`,`kss_sku`.`ProductName` AS `ProductName`,`kss_sku`.`ProductTypeID` AS `ProductTypeID`,`kss_sku`.`PackageID` AS `PackageID`,`kss_sku`.`SupplierID` AS `SupplierID`,`kss_sku`.`Price` AS `Price`,`kss_sku`.`Class` AS `Class`,`kss_sku`.`Unit Net Weight` AS `Weight`,`kss_sku`.`Status` AS `Status`,`kss_sku`.`WholesaleUnitsperCase` AS `CaseUnits` from ((`kss_inventory` `kss_i` left join `kss_sku` on((`kss_i`.`ProductID` = `kss_sku`.`id`))) left join `product_sku`.`sku_view` `ps_sku` on((`kss_i`.`ProductID` = `ps_sku`.`kss_id`))) where (`kss_i`.`Inventory` > 0.00) order by `ps_sku`.`sku`;

-- View: invoice_sku
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `invoice_sku` AS select `i`.`id` AS `id`,`i`.`Supplier` AS `Supplier`,`i`.`InvoiceNum` AS `InvoiceNum`,`i`.`Status` AS `Status`,`i`.`Date` AS `Date`,`i`.`ProductNumName` AS `ProductNumName`,substring_index(`i`.`CustomerNumCompany`,' ',1) AS `CustomerNum`,`c`.`Company` AS `CustomerName`,`i`.`PromotionName` AS `PromotionName`,`i`.`FullPrice` AS `FullPrice`,`i`.`Discount` AS `Discount`,`i`.`Vol` AS `Vol`,`i`.`Participation` AS `Participation`,`i`.`Units` AS `Units`,`sku`.`id` AS `ProductNum`,`sku`.`ProductTypeID` AS `ProductTypeID`,`sv`.`strain_code` AS `strain_id`,`sv`.`strain_name` AS `strain_name`,`sku`.`BrandID` AS `BrandID`,`sku`.`CaseEquiv` AS `CaseEquiv`,`sku`.`CasePrice` AS `CasePrice`,`sku`.`Ounces` AS `Ounces`,`sku`.`PackageID` AS `PackageID`,`sku`.`WholesaleUnitsperCase` AS `sku_case_units`,`sku`.`Weight` AS `Weight`,(`i`.`Units` / `sku`.`WholesaleUnitsperCase`) AS `Cases` from (((`kss_invoice` `i` left join `kss_sku` `sku` on((`i`.`ProductNumName` = `sku`.`ProductNumName`))) left join `product_sku`.`sku_view` `sv` on((`sku`.`id` = `sv`.`kss_id`))) left join `kss_customer` `c` on((substring_index(`i`.`CustomerNumCompany`,' ',1) = `c`.`CustomerID`))) order by `i`.`Date`;

-- View: kss_customer_view
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `kss_customer_view` AS select `kc`.`id` AS `id`,`kc`.`Company` AS `name`,`kc`.`Address` AS `Address`,`kc`.`PostalCode` AS `Zip`,`kc`.`City` AS `City`,'CA' AS `State`,'US' AS `Country`,`kc`.`TerritoryID` AS `Territory`,`kc`.`SalesRepFullName` AS `Representative`,`kc`.`Email` AS `email`,`kc`.`Phone` AS `Phone`,`kc`.`PrimaryUserID` AS `PrimaryUserID`,`kc`.`RouteDayOfWeek` AS `Delviery Day`,`kc`.`AccountStatus` AS `Active`,`kc`.`CustomerAccountType` AS `Tags`,max(`ki`.`Date`) AS `last invoice`,sum(`ki`.`FullPrice`) AS `account` from (`kss_customer` `kc` left join `kss_invoice` `ki` on((`kc`.`id` = `ki`.`CustomerID`))) group by `kc`.`id`;

-- View: kss_doi_jsonArray
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `kss_doi_jsonArray` AS select json_array('id','Supplier','Strain','ProductID','ProductName','UnitsCase','SalesTrend','UpcomingOrders','ALAvail','ALDOI','SVAvail','SVDOI','TotalAvailableUnits','SalesHist','MonthlySalesUnits','KSSDOI','KSSMonthsofInv','TargetDOI','TargetUnits','ToBuyorSell','created_on','modified_on') AS `Name_exp_1` union select json_array(`kd`.`id`,`kd`.`Supplier`,`kd`.`Strain`,`kd`.`ProductID`,`kd`.`ProductName`,`kd`.`UnitsCase`,`kd`.`SalesTrend`,`kd`.`UpcomingOrders`,`kd`.`ALAvail`,`kd`.`ALDOI`,`kd`.`SVAvail`,`kd`.`SVDOI`,`kd`.`TotalAvailableUnits`,`kd`.`SalesHist`,`kd`.`MonthlySalesUnits`,`kd`.`KSSDOI`,`kd`.`KSSMonthsofInv`,`kd`.`TargetDOI`,`kd`.`TargetUnits`,`kd`.`ToBuyorSell`,`kd`.`created_on`,`kd`.`modified_on`) AS `Name_exp_2` from `kss_doi` `kd`;

-- View: kss_inventory_active
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `kss_inventory_active` AS select `kss_inventory`.`id` AS `id`,`kss_inventory`.`Location` AS `Location`,`kss_inventory`.`ProductNumName` AS `ProductNumName`,`kss_inventory`.`ExpirationDate` AS `ExpirationDate`,`kss_inventory`.`BatchCode` AS `BatchCode`,`kss_inventory`.`Inventory` AS `Inventory`,`kss_inventory`.`BinLotID` AS `BinLotID`,`kss_inventory`.`ProductID` AS `ProductID`,`kss_inventory`.`ReceiveDate` AS `ReceiveDate`,`kss_inventory`.`PalletTag` AS `PalletTag`,`kss_inventory`.`Status` AS `Status` from `kss_inventory` where (`kss_inventory`.`Status` = 'Active');

-- View: kss_inventory_batchcode_inconsistent_expiration
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `kss_inventory_batchcode_inconsistent_expiration` AS select `kss_inventory`.`BatchCode` AS `BatchCode`,max(`kss_inventory`.`ExpirationDate`) AS `MAX(ExpirationDate)`,min(`kss_inventory`.`ExpirationDate`) AS `MIN(ExpirationDate)` from `kss_inventory` group by `kss_inventory`.`BatchCode` having (max(`kss_inventory`.`ExpirationDate`) <> min(`kss_inventory`.`ExpirationDate`));

-- View: kss_inventory_inconsistent_expiration
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `kss_inventory_inconsistent_expiration` AS select `kss_inventory`.`id` AS `id`,`kss_inventory`.`Location` AS `Location`,`kss_inventory`.`ProductNumName` AS `ProductNumName`,`kss_inventory`.`ExpirationDate` AS `ExpirationDate`,`kss_inventory`.`BatchCode` AS `BatchCode`,`kss_inventory`.`Inventory` AS `Inventory`,`kss_inventory`.`BinLotID` AS `BinLotID`,`kss_inventory`.`ProductID` AS `ProductID` from `kss_inventory` where `kss_inventory`.`BatchCode` in (select `kss_inventory_batchcode_inconsistent_expiration`.`BatchCode` from `kss_inventory_batchcode_inconsistent_expiration`) order by `kss_inventory`.`BatchCode`,`kss_inventory`.`ExpirationDate`;

-- View: kss_inventory_jsonArray
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `kss_inventory_jsonArray` AS select json_array('id','Location','ProductNumName','ExpirationDate','BatchCode','Inventory','BinLotID','ProductID','ReceiveDate','PalletTag','Status','created_on','modified_on') AS `Name_exp_1` union select json_array(`ki`.`id`,`ki`.`Location`,`ki`.`ProductNumName`,`ki`.`ExpirationDate`,`ki`.`BatchCode`,`ki`.`Inventory`,`ki`.`BinLotID`,`ki`.`ProductID`,`ki`.`ReceiveDate`,`ki`.`PalletTag`,`ki`.`Status`,`ki`.`created_on`,`ki`.`modified_on`) AS `Name_exp_2` from `kss_inventory` `ki`;

-- View: kss_inventory_reconcile
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `kss_inventory_reconcile` AS select `kss`.`id` AS `id`,`kss`.`Location` AS `Location`,`kss`.`ProductNumName` AS `ProductNumName`,`kss`.`PalletTag` AS `PalletTag`,`kss`.`ReceiveDate` AS `kss_receive_date`,`kss`.`ExpirationDate` AS `ExpirationDate`,`kss`.`BatchCode` AS `BatchCode`,`kss`.`Inventory` AS `Inventory`,`kss`.`BinLotID` AS `BinLotID`,`kss`.`ProductID` AS `ProductID`,`kss`.`BinLotID` AS `EBinLotID`,`pi`.`packed_date` AS `packed_date`,`od`.`date` AS `shipped_date`,`s`.`test_result_date` AS `test_result_date`,(`s`.`test_result_date` + interval 1 year) AS `test_expiration_date` from ((((`kss_inventory` `kss` left join `transfers`.`order_distributor_item` `odi` on((`kss`.`PalletTag` = `odi`.`metrc_id`))) left join `transfers`.`order_distributor` `od` on((`odi`.`id_order` = `od`.`id`))) left join `packing`.`product_inventory` `pi` on((`pi`.`id` = `odi`.`packing_id`))) left join `lab_testing`.`sample` `s` on((`s`.`lab_sample_id` = `odi`.`sample_id`))) where ((`kss`.`Inventory` > 0) and (`kss`.`PalletTag` is not null));

-- View: kss_sales
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `kss_sales` AS select `kss_invoice`.`InvoiceID` AS `Invoice`,`kss_invoice`.`InvoiceTransID` AS `InvoiceTransID`,`kss_invoice`.`Date` AS `Date`,`kss_invoice`.`Status` AS `Invoice Status`,`kss_invoice`.`CustomerID` AS `CustomerID`,`kss_customer`.`Company` AS `Company`,`kss_customer`.`Chain - Customer` AS `Company Chain`,`kss_invoice`.`ProductID` AS `ProductID`,`kss_sku`.`ProductName` AS `ProductName`,`sku_view`.`brand_name` AS `Brand`,`sku_view`.`strain_name` AS `Strain`,`sku_view`.`category_name` AS `Category`,`sku_view`.`package_name` AS `Package`,`sku_view`.`package_size_code` AS `Weight`,`sku_view`.`class` AS `Class`,`kss_customer`.`Address` AS `Address`,`kss_customer`.`City` AS `City`,`kss_customer`.`PostalCode` AS `ZipCode`,`kss_customer`.`CountyID` AS `County`,`kss_customer`.`PrimaryUserID` AS `Buyer`,`kss_customer`.`SalesmanUserID` AS `KSS Sales`,`kss_customer`.`IndVolume` AS `Volume`,`kss_customer`.`EthnicityID` AS `EthnicityID`,`kss_customer`.`StateLicenseNum` AS `License`,`kss_customer`.`AR Account Limit` AS `AR Limit`,`kss_invoice`.`Units` AS `Units`,`kss_invoice`.`FullPrice` AS `FullPrice`,`kss_invoice`.`Discount` AS `Discount`,`kss_invoice`.`Vol` AS `Total`,`kss_invoice`.`Participation` AS `Participation` from (((`kss_invoice` join `kss_customer` on((`kss_invoice`.`CustomerID` = `kss_customer`.`CustomerID`))) join `kss_sku` on((`kss_invoice`.`ProductID` = `kss_sku`.`ProductID`))) join `product_sku`.`sku_view` on((`kss_invoice`.`ProductID` = `sku_view`.`kss_id`)));

-- View: kss_sales_customer_reps
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `kss_sales_customer_reps` AS select `kss_customer`.`id` AS `id`,`kss_customer`.`CustomerID` AS `CustomerID`,`kss_customer`.`Company` AS `Company`,`kss_customer`.`ChainID` AS `ChainID`,`sales_territory`.`sales_rep_name` AS `sales_rep_name`,`sales_territory`.`sales_rep_id` AS `sales_rep_id`,`kss_customer`.`Phone` AS `Phone`,`kss_customer`.`Email` AS `Email`,`kss_customer`.`CountyID` AS `CountyID`,`kss_customer`.`TerritoryID` AS `TerritoryID`,`kss_customer`.`AccountStatus` AS `AccountStatus`,`kss_customer`.`SalesmanUserID` AS `SalesmanUserID`,`kss_customer`.`Chain - Customer` AS `Chain - Customer`,`kss_customer`.`PrimaryUserID` AS `PrimaryUserID`,`kss_customer`.`Address` AS `Address`,`kss_customer`.`City` AS `City`,`kss_customer`.`PostalCode` AS `PostalCode`,`kss_customer`.`IndVolume` AS `IndVolume`,`kss_customer`.`EthnicityID` AS `EthnicityID`,`kss_customer`.`CustomerAccountType` AS `CustomerAccountType`,`kss_customer`.`CustomerTypeID` AS `CustomerTypeID`,`kss_customer`.`OpenDate` AS `OpenDate`,`kss_customer`.`LocationID` AS `LocationID`,`kss_customer`.`AreaID` AS `AreaID`,`kss_customer`.`JurisdictionID` AS `JurisdictionID`,`kss_customer`.`StateLicenseNum` AS `StateLicenseNum`,`kss_customer`.`AR Account Limit` AS `AR Account Limit`,`kss_customer`.`Distro Accounts Count of Doors` AS `Distro Accounts Count of Doors` from (`kss_customer` left join `sales_territory` on((`kss_customer`.`CountyID` = `sales_territory`.`county`)));

-- View: kss_sku_basic_view
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `kss_sku_basic_view` AS select `kss_sku`.`id` AS `KSS id`,`kss_sku`.`SupplierName` AS `Brand Name`,`kss_sku`.`Brand` AS `BrandStrainPackage`,`kss_sku`.`Package` AS `CaseQTY&PackageSizeType`,`kss_sku`.`ProductType` AS `Category & Size`,`kss_sku`.`ProductName` AS `ProductName`,`kss_sku`.`Class` AS `Class`,`kss_sku`.`WholesaleUnitsperCase` AS `CaseQTY`,`kss_sku`.`Unit Net Weight` AS `UnitWeight`,`kss_sku`.`Status` AS `Status`,`kss_sku`.`UPC` AS `UPC`,`kss_sku`.`Rank` AS `KSS Rank`,`kss_sku`.`Price` AS `Price`,`kss_sku`.`CasePrice` AS `CasePrice`,`kss_sku`.`ProductMasterID` AS `ProductMasterID`,`kss_sku`.`modified_on` AS `modified_on`,`kss_sku`.`UpdatedBy` AS `UpdatedBy`,`kss_sku`.`TimeCreated` AS `TimeCreated`,`kss_sku`.`created_on` AS `created_on` from `kss_sku` order by `kss_sku`.`Brand` desc;

-- View: kss_sku_clean
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `kss_sku_clean` AS select `kss_sku`.`id` AS `id`,`kss_sku`.`BrandID` AS `BrandID`,`kss_sku`.`PackageID` AS `PackageID`,`kss_sku`.`ProductID` AS `ProductID`,`kss_sku`.`ProductName` AS `ProductName`,`kss_sku`.`ProductMasterID` AS `ProductMasterID`,`kss_sku`.`Class` AS `Class`,`kss_sku`.`ProductTypeID` AS `ProductTypeID`,`kss_sku`.`WholesaleUnitsperCase` AS `WholesaleUnitsPerCase`,`kss_sku`.`Unit Net Weight` AS `Unit Net Weight`,`kss_sku`.`Status` AS `Status`,`kss_sku`.`SupplierID` AS `SupplierID`,`kss_sku`.`SupplierProductNum` AS `SupplierProductNum`,`kss_sku`.`UPC` AS `UPC`,`kss_sku`.`CasesperPallet` AS `CasesPerPallet`,`kss_sku`.`Price` AS `Price`,`kss_sku`.`CasePrice` AS `CasePrice`,`kss_sku`.`modified_on` AS `modified_on`,`kss_sku`.`UpdatedBy` AS `UpdatedBy`,`kss_sku`.`TimeCreated` AS `TimeCreated`,`kss_sku`.`created_on` AS `created_on` from `kss_sku`;

-- View: kss_sku_unreferenced
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `kss_sku_unreferenced` AS select `kss_sku`.`id` AS `id`,`kss_sku`.`BrandID` AS `BrandID`,`kss_sku`.`CaseEquiv` AS `CaseEquiv`,`kss_sku`.`CasePrice` AS `CasePrice`,`kss_sku`.`CasesperLayer` AS `CasesPerLayer`,`kss_sku`.`CasesperPallet` AS `CasesPerPallet`,`kss_sku`.`CaseUPC` AS `CaseUPC`,`kss_sku`.`CodeDateFormat` AS `CodeDateFormat`,`kss_sku`.`CodeDateType` AS `CodeDateType`,`kss_sku`.`CommissionGroupID` AS `CommissionGroupID`,`kss_sku`.`ConsumerImageURL` AS `ConsumerImageURL`,`kss_sku`.`CreatedBy` AS `CreatedBy`,`kss_sku`.`Height` AS `Height`,`kss_sku`.`InSeason` AS `InSeason`,`kss_sku`.`IsTax` AS `IsTax`,`kss_sku`.`Length` AS `Length`,`kss_sku`.`Ounces` AS `Ounces`,`kss_sku`.`PackageDescription` AS `PackageDescription`,`kss_sku`.`PackageID` AS `PackageID`,`kss_sku`.`PickUpByUnits` AS `PickUpByUnits`,`kss_sku`.`Premise` AS `Premise`,`kss_sku`.`Price` AS `Price`,`kss_sku`.`ProductID` AS `ProductID`,`kss_sku`.`ProductImageURL` AS `ProductImageURL`,`kss_sku`.`ProductMasterID` AS `ProductMasterID`,`kss_sku`.`ProductName` AS `ProductName`,`kss_sku`.`ProductNumName` AS `ProductNumName`,`kss_sku`.`ProductTypeID` AS `ProductTypeID`,`kss_sku`.`Rank` AS `Rank`,`kss_sku`.`SalesReportDefault` AS `SalesReportDefault`,`kss_sku`.`SeasonalEndMonthDay` AS `SeasonalEndMonthDay`,`kss_sku`.`SeasonalStartMonthDay` AS `SeasonalStartMonthDay`,`kss_sku`.`SellByCaseOnly` AS `SellByCaseOnly`,`kss_sku`.`ShelfLifeDays` AS `ShelfLifeDays`,`kss_sku`.`StateProductNum` AS `StateProductNum`,`kss_sku`.`Status` AS `Status`,`kss_sku`.`SupplierID` AS `SupplierID`,`kss_sku`.`SupplierProductName` AS `SupplierProductName`,`kss_sku`.`SupplierProductNum` AS `SupplierProductNum`,`kss_sku`.`TimeCreated` AS `TimeCreated`,`kss_sku`.`TimeUpdated` AS `TimeUpdated`,`kss_sku`.`TrackBatchCodes` AS `TrackBatchCodes`,`kss_sku`.`TrackCodeDates` AS `TrackCodeDates`,`kss_sku`.`TrackVintages` AS `TrackVintages`,`kss_sku`.`UnitUPC` AS `UnitUPC`,`kss_sku`.`UPC` AS `UPC`,`kss_sku`.`UpdatedBy` AS `UpdatedBy`,`kss_sku`.`Weight` AS `Weight`,`kss_sku`.`WholesaleUnitsperCase` AS `WholesaleUnitsPerCase`,`kss_sku`.`Width` AS `Width`,`kss_sku`.`Metrc` AS `Metrc`,`kss_sku`.`Unit Net Weight` AS `Unit Net Weight`,`kss_sku`.`Consignment` AS `Consignment`,`kss_sku`.`Supplier ID` AS `Supplier ID`,`kss_sku`.`Class` AS `Class` from `kss_sku` where `kss_sku`.`id` in (select `product_sku`.`sku`.`kss_id` from `product_sku`.`sku`) is false;

-- View: kss_sku_view_simple
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `kss_sku_view_simple` AS select `ks`.`id` AS `id`,`ks`.`ProductNumName` AS `ProductNumName`,`ks`.`Status` AS `status`,`ks`.`Class` AS `Class`,`ks`.`PackageID` AS `PackageID`,`ks`.`SupplierID` AS `SupplierID`,`ks`.`SupplierName` AS `SupplierName`,`ks`.`Unit Net Weight` AS `unit_net_weight` from `kss_sku` `ks`;

-- View: sales_team
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `sales_team` AS select `pacstone`.`employee`.`employee_id` AS `id`,`pacstone`.`employee`.`id` AS `uid`,`pacstone`.`employee`.`first_name` AS `first_name`,`pacstone`.`employee`.`last_name` AS `last_name`,`pacstone`.`employee`.`full_name` AS `full_name`,`pacstone`.`employee`.`preferred_name` AS `preferred_name`,`pacstone`.`employee`.`account` AS `email`,`pacstone`.`employee`.`status` AS `status`,`pacstone`.`employee`.`primary_org` AS `org`,`pacstone`.`employee`.`position` AS `position` from `pacstone`.`employee` where ((`pacstone`.`employee`.`primary_org` = '30 Sales & Marketing') and (`pacstone`.`employee`.`status` = 'ACTIVE'));

