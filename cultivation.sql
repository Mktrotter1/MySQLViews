-- View: active_veg_batch
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `active_veg_batch` AS select `vb`.`metrc_plant_tag` AS `metrc_plant_tag`,`vb`.`plant_count` AS `plant_count`,`b`.`name` AS `batch_name`,`b`.`property_id` AS `property_id`,`b`.`date` AS `date`,`b`.`week` AS `week`,`b`.`year` AS `year`,`b`.`year_week` AS `year_week`,`b`.`license_id` AS `license_id`,`b`.`strain_id` AS `strain_id`,`b`.`test_id` AS `test_id`,`c`.`name` AS `canopy_name`,`vb`.`plant_class` AS `plant_class`,`v`.`location_string` AS `location_string` from (((`veg_batch` `vb` left join `veg` `v` on((`v`.`id` = `vb`.`veg_id`))) left join `pacstone`.`batch` `b` on((convert(`b`.`id` using utf8mb4) = `v`.`batch_id`))) left join `pacstone`.`canopy` `c` on((`b`.`location_id` = convert(`c`.`location_id` using utf8mb4)))) where (`vb`.`status` = 'Active');

-- View: active_veg_batch2
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `active_veg_batch2` AS select `vb`.`metrc_plant_tag` AS `metrc_plant_tag`,`vb`.`plant_count` AS `plant_count`,`b`.`name` AS `batch_name`,`b`.`property_id` AS `property_id`,`b`.`date` AS `date`,`b`.`week` AS `week`,`b`.`year` AS `year`,`b`.`year_week` AS `year_week`,`b`.`license_id` AS `license_id`,`b`.`strain_id` AS `strain_id`,`b`.`test_id` AS `test_id`,`c`.`name` AS `canopy_name`,`vb`.`plant_class` AS `plant_class`,`v`.`location_string` AS `location_string` from (((`veg_batch` `vb` left join `veg` `v` on((`v`.`id` = `vb`.`veg_id`))) left join `pacstone`.`batch` `b` on((convert(`b`.`id` using utf8mb4) = `v`.`batch_id`))) left join `pacstone`.`canopy` `c` on((`b`.`location_id` = convert(`c`.`location_id` using utf8mb4)))) where (`vb`.`status` = 'Active');

-- View: clone_inventory
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `clone_inventory` AS select `cl`.`metrc_package_tag` AS `metrc_package_tag`,`cl`.`quantity` AS `quantity`,`b`.`name` AS `batch_name`,`b`.`property_id` AS `property_id`,`b`.`date` AS `date`,`b`.`week` AS `week`,`b`.`year` AS `year`,`b`.`year_week` AS `year_week`,`b`.`license_id` AS `license_id`,`b`.`strain_id` AS `strain_id`,`b`.`test_id` AS `test_id`,`l`.`location_string` AS `location_string`,`cl`.`location_name` AS `room`,`cl`.`hardening_date` AS `hardening_date` from ((`clones` `cl` left join `pacstone`.`batch` `b` on((convert(`b`.`id` using utf8mb4) = `cl`.`batch_id`))) left join `pacstone`.`location` `l` on((`cl`.`location_id` = convert(`l`.`id` using utf8mb4)))) where (`cl`.`status` = 'Active');

-- View: crop_totals
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `crop_totals` AS with `cte` as (select `harvesting`.`crop_id` AS `crop_id`,sum(if(regexp_like(`harvesting`.`harvest_id`,'-M$'),0,`harvesting`.`plant_count_harvested`)) AS `plant_count_harvested_sum`,sum(if(regexp_like(`harvesting`.`harvest_id`,'-M$'),0,`harvesting`.`plant_count_received`)) AS `plant_count_received_sum`,sum(`harvesting`.`wet`) AS `wet_sum`,sum(`harvesting`.`waste`) AS `waste_sum`,count(0) AS `harvesting_record_count`,sum(if(regexp_like(`harvesting`.`harvest_id`,'-M$'),0,1)) AS `harvesting_full_record_count`,sum(if(regexp_like(`harvesting`.`harvest_id`,'-M$'),1,0)) AS `harvesting_manicure_record_count` from `harvesting` group by `harvesting`.`crop_id`) select `c`.`id` AS `crop_id`,`c`.`label` AS `label`,`c`.`strain` AS `strain`,`c`.`harvest_year` AS `harvest_year`,`c`.`harvest_week` AS `harvest_week`,`c`.`harvest_year_week` AS `harvest_year_week`,`c`.`property` AS `property`,`cte`.`plant_count_harvested_sum` AS `plant_count_harvested_sum`,`cte`.`plant_count_received_sum` AS `plant_count_received_sum`,`cte`.`wet_sum` AS `wet_sum`,`cte`.`waste_sum` AS `waste_sum`,`cte`.`harvesting_record_count` AS `harvesting_record_count`,`cte`.`harvesting_full_record_count` AS `harvesting_full_record_count`,`cte`.`harvesting_manicure_record_count` AS `harvesting_manicure_record_count` from (`crop` `c` join `cte` on((`c`.`id` = `cte`.`crop_id`)));

-- View: crop_totals_flower
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `crop_totals_flower` AS select `c`.`id` AS `crop_id`,`c`.`label` AS `label`,`c`.`strain` AS `strain`,`c`.`harvest_year` AS `harvest_year`,`c`.`harvest_week` AS `harvest_week`,`c`.`harvest_year_week` AS `harvest_year_week`,`c`.`property` AS `property`,`h`.`plant_count_harvested_sum` AS `plant_count_harvested_sum`,`h`.`plant_count_received_sum` AS `plant_count_received_sum`,`h`.`wet_sum` AS `wet_sum`,`h`.`waste_sum` AS `waste_sum`,`h`.`harvesting_record_count` AS `harvesting_record_count`,`h`.`harvesting_manicure_record_count` AS `harvesting_manicure_record_count`,`f`.`flowering_plant_count_sum_all` AS `flowering_plant_count_sum_all`,`f`.`flowering_plant_count_sum_w/o_M` AS `flowering_plant_count_sum_w/o_M`,`f`.`flowering_record_count` AS `flowering_record_count`,`f`.`flowering_manicure_record_count` AS `flowering_manicure_record_count` from ((`crop` `c` join `harvesting_by_crop` `h` on((`h`.`crop_id_h` = `c`.`id`))) join `flowering_by_crop` `f` on((`f`.`crop_id_f` = `c`.`id`)));

-- View: cultivation_inventory
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `cultivation_inventory` AS select `t`.`metrc_plant_tag` AS `metrc_plant_tag`,`t`.`plant_count` AS `plant_count`,`t`.`batch_name` AS `batch_name`,`t`.`property_id` AS `property_id`,`t`.`date` AS `date`,`t`.`week` AS `week`,`t`.`year` AS `year`,`t`.`year_week` AS `year_week`,`t`.`license_id` AS `license_id`,`t`.`strain_id` AS `strain_id`,`t`.`test_id` AS `test_id`,`t`.`canopy_name` AS `canopy_name`,`t`.`location_string` AS `location_string`,`ps`.`category` AS `category` from ((select `active_veg_batch`.`metrc_plant_tag` AS `metrc_plant_tag`,`active_veg_batch`.`plant_count` AS `plant_count`,`active_veg_batch`.`batch_name` AS `batch_name`,`active_veg_batch`.`property_id` AS `property_id`,`active_veg_batch`.`date` AS `date`,`active_veg_batch`.`week` AS `week`,`active_veg_batch`.`year` AS `year`,`active_veg_batch`.`year_week` AS `year_week`,`active_veg_batch`.`license_id` AS `license_id`,`active_veg_batch`.`strain_id` AS `strain_id`,`active_veg_batch`.`test_id` AS `test_id`,`active_veg_batch`.`canopy_name` AS `canopy_name`,`active_veg_batch`.`location_string` AS `location_string` from `active_veg_batch` union select NULL AS `NULL`,`flower_view`.`plant_count` AS `plant_count`,`flower_view`.`flowering_id` AS `flowering_id`,`flower_view`.`property_id` AS `property_id`,`flower_view`.`date` AS `date`,`flower_view`.`week_num` AS `week_num`,`flower_view`.`year_num` AS `year_num`,concat(`flower_view`.`year_num`,right(concat('0',`flower_view`.`week_num`),2)) AS `CONCAT(year_num,week_num)`,`flower_view`.`license_id` AS `license_id`,`flower_view`.`strain_id` AS `strain_id`,`flower_view`.`test_id` AS `test_id`,`flower_view`.`canopy` AS `canopy_name`,`flower_view`.`location_string` AS `location_string` from `flower_view` union select `clone_inventory`.`metrc_package_tag` AS `metrc_package_tag`,`clone_inventory`.`quantity` AS `quantity`,`clone_inventory`.`batch_name` AS `batch_name`,`clone_inventory`.`property_id` AS `property_id`,`clone_inventory`.`date` AS `date`,`clone_inventory`.`week` AS `week`,`clone_inventory`.`year` AS `year`,`clone_inventory`.`year_week` AS `year_week`,`clone_inventory`.`license_id` AS `license_id`,`clone_inventory`.`strain_id` AS `strain_id`,`clone_inventory`.`test_id` AS `test_id`,NULL AS `NULL`,`clone_inventory`.`location_string` AS `location_string` from `clone_inventory`) `t` left join `pacstone`.`plant_strain` `ps` on((convert(`ps`.`id` using utf8mb4) = `t`.`strain_id`)));

-- View: cultivation_overview
CREATE ALGORITHM=UNDEFINED DEFINER=`muro`@`%` SQL SECURITY DEFINER VIEW `cultivation_overview` AS select `clo`.`date` AS `clone_date`,`clo`.`strain_id` AS `clone_strain`,`clo`.`quantity` AS `clone_plants`,`bat`.`name` AS `veg_batch_group_name`,`bat`.`strain_id` AS `batch_group_strain`,`bat`.`week` AS `batch_week`,coalesce(`vgb_sum`.`plant_count`,0) AS `vgb_plant_count_sum`,sum((case when (`vgb`.`action` = 'Transferred') then `vgb`.`plant_count` else 0 end)) AS `transferred_plant_count_sum`,sum((case when (`vgb`.`action` = 'Plant Waste') then `vgb`.`plant_count` else 0 end)) AS `wasted_plant_count_sum`,`ptr`.`strain_id` AS `received_strain`,`pto`.`strain_id` AS `order_strain`,`pto`.`plant_count` AS `order_plants`,`flw`.`flowering_id` AS `flowering_name`,`flw`.`week_num` AS `flowering_week`,`flw`.`strain_id` AS `flowering_strain`,`flw`.`plant_count` AS `flowering_plants`,`hrv`.`harvest_id` AS `harvest_name`,`hrv`.`week_num` AS `harvest_week`,`hrv`.`strain_id` AS `harvest_strain`,`hrv`.`plant_count_harvested` AS `harvested_plants`,`hrv`.`plant_count_received` AS `harvested_plants_received` from (((((((((`harvesting` `hrv` left join `flowering` `flw` on((`hrv`.`flowering_id` = `flw`.`id`))) left join `transfers`.`plant_transfer_order` `pto` on((`flw`.`transfer_order_id` = `pto`.`id`))) left join `transfers`.`plant_tags_received` `ptr` on((`pto`.`id` = `ptr`.`transfer_order_id`))) left join `transfers`.`plant_transfer_trip_detail` `ttd` on((`ptr`.`transfer_trip_detail_id` = `ttd`.`id`))) left join `veg_batch` `vgb` on((`ttd`.`inventory_id` = `vgb`.`id`))) left join `veg` on((`vgb`.`veg_id` = `veg`.`id`))) left join (select `vgb`.`veg_id` AS `veg_id`,sum(`vgb`.`plant_count`) AS `plant_count` from `veg_batch` `vgb` group by `vgb`.`veg_id`) `vgb_sum` on((`veg`.`id` = `vgb_sum`.`veg_id`))) left join `pacstone`.`batch` `bat` on((`veg`.`batch_id` = convert(`bat`.`id` using utf8mb4)))) left join `clones` `clo` on((convert(`bat`.`id` using utf8mb4) = `clo`.`batch_id`))) where (`flw`.`harvest_date` >= (now() - interval 1 year)) group by `clo`.`date`,`clo`.`strain_id`,`clo`.`quantity`,`hrv`.`harvest_id`,`bat`.`name`,`bat`.`strain_id`,`bat`.`week`,`vgb_sum`.`plant_count`,`ptr`.`strain_id`,`pto`.`strain_id`,`pto`.`plant_count`,`flw`.`flowering_id`,`flw`.`week_num`,`flw`.`strain_id`,`flw`.`plant_count`,`hrv`.`week_num`,`hrv`.`strain_id`,`hrv`.`plant_count_harvested`,`hrv`.`plant_count_received` order by `clo`.`date`;

-- View: flower_historical_records
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `flower_historical_records` AS select `f`.`flowering_id` AS `flowering_id`,`c`.`name` AS `canopy`,`c`.`location_string` AS `location_string`,`f`.`property_id` AS `property_id`,`f`.`test_id` AS `test_id`,`f`.`date` AS `date`,`f`.`week_num` AS `week_num`,`f`.`year_num` AS `year_num`,`f`.`license_id` AS `license_id`,`f`.`strain_id` AS `strain_id`,`f`.`location_3` AS `location_3`,`f`.`location_5` AS `location_5`,`f`.`plant_count` AS `plant_count`,`f`.`harvest_date` AS `harvest_date`,`f`.`harvest_id` AS `harvest_id`,`f`.`status` AS `status` from (`flowering` `f` left join `pacstone`.`canopy` `c` on((`f`.`canopy_id` = convert(`c`.`id` using utf8mb4)))) where (year(`f`.`date`) > 2020);

-- View: flower_schedule
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `flower_schedule` AS select `f`.`flowering_id` AS `flowering_id`,`f`.`canopy_id` AS `canopy_id`,`f`.`property_id` AS `property_id`,`f`.`test_id` AS `test_id`,`f`.`date` AS `date`,`f`.`week_num` AS `week_num`,`f`.`year_num` AS `year_num`,`f`.`license_id` AS `license_id`,`f`.`strain_id` AS `strain_id`,`f`.`location_3` AS `location_3`,`f`.`location_5` AS `location_5`,`f`.`plant_count` AS `plant_count`,`f`.`harvest_date` AS `harvest_date`,week(`f`.`harvest_date`,0) AS `harvest_week`,`f`.`harvest_id` AS `harvest_id`,`f`.`status` AS `status` from `flowering` `f` where (((year(`f`.`date`) > 2021) and (`f`.`harvest_date` > now())) or (`f`.`harvest_date` is null));

-- View: flower_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `flower_view` AS select `f`.`flowering_id` AS `flowering_id`,`c`.`name` AS `canopy`,`c`.`location_string` AS `location_string`,`f`.`property_id` AS `property_id`,`f`.`test_id` AS `test_id`,`f`.`date` AS `date`,`f`.`week_num` AS `week_num`,`f`.`year_num` AS `year_num`,`f`.`license_id` AS `license_id`,`f`.`strain_id` AS `strain_id`,`f`.`location_3` AS `location_3`,`f`.`location_5` AS `location_5`,`f`.`plant_count` AS `plant_count`,`f`.`harvest_date` AS `harvest_date`,`f`.`harvest_id` AS `harvest_id`,`f`.`status` AS `status` from (`flowering` `f` left join `pacstone`.`canopy` `c` on((`f`.`canopy_id` = convert(`c`.`id` using utf8mb4)))) where ((year(`f`.`date`) > 2019) and (`f`.`status` = 'Active'));

-- View: flowering_base
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `flowering_base` AS select `f`.`id` AS `id`,`f`.`flowering_id` AS `flowering_id`,`f`.`plant_count` AS `plant_count`,`f`.`action` AS `action` from `flowering` `f` where ((`f`.`action` <> 'Deleted') and (`f`.`action` <> 'Duplicated'));

-- View: flowering_by_crop
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `flowering_by_crop` AS select `flowering`.`crop_id` AS `crop_id_f`,sum(`flowering`.`plant_count`) AS `flowering_plant_count_sum_all`,sum(if(regexp_like(`flowering`.`harvest_id`,'-M$'),0,`flowering`.`plant_count`)) AS `flowering_plant_count_sum_w/o_M`,count(0) AS `flowering_record_count`,sum(if(regexp_like(`flowering`.`harvest_id`,'-M$'),1,0)) AS `flowering_manicure_record_count` from `flowering` where (`flowering`.`action` <> 'Deleted') group by `flowering`.`crop_id`;

-- View: harvest_base
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `harvest_base` AS select `h`.`id` AS `id`,`h`.`harvest_id` AS `harvest_id`,concat(`h`.`property_id`,'-',right(concat('0',`h`.`week_num`),2),'-',`h`.`year_num`,'-',`h`.`strain_id`,'-',right(`h`.`license_id`,5)) AS `harvest_base_name`,`h`.`property_id` AS `property_id`,`h`.`date` AS `date`,`h`.`week_num` AS `week_num`,`h`.`year_num` AS `year_num`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `year_week`,`h`.`license_id` AS `license_id`,`h`.`strain_id` AS `strain_id`,`h`.`test_id` AS `test_id`,`h`.`plant_count_harvested` AS `plant_count_harvested`,`h`.`wet` AS `wet_weight`,`h`.`waste` AS `wet_waste_weight`,`h`.`harvest_type` AS `harvest_type`,`h`.`processing_metrc_id` AS `processing_metrc_id`,`h`.`status` AS `status` from `harvesting` `h` where ((`h`.`action` <> 'Deleted') and (`h`.`action` <> 'Duplicated')) order by `h`.`year_num` desc,`h`.`week_num` desc,`h`.`strain_id` desc,`h`.`property_id` desc;

-- View: harvest_prod_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `harvest_prod_view` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`id` AS `harvesting_id`,`h`.`processing_metrc_id` AS `metrc_tag`,'Harvest' AS `process`,`h`.`id` AS `batch_id`,`h`.`date` AS `date`,'Finished' AS `batch_status`,`f`.`flowering_id` AS `flowering_id_name`,`h`.`harvest_id` AS `harvest_id`,`h`.`test_id` AS `test_id`,`h`.`property_id` AS `property_id`,`h`.`date` AS `harvest_date`,`h`.`week_num` AS `harvest_week`,`h`.`year_num` AS `harvest_year`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `harvest_year_week`,`h`.`harvest_type` AS `harvest_type`,`h`.`license_id` AS `license_id`,`h`.`strain_id` AS `strain_id`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name`,'Fresh Cannabis Plant' AS `category`,if(((`h`.`harvest_type` = 'Manicure') or (`h`.`harvest_type` = 'Fresh Frozen')),'Buds','Plants') AS `category_type`,NULL AS `product_size`,NULL AS `product_grade`,if(((`h`.`harvest_type` = 'Manicure') or (`h`.`harvest_type` = 'Fresh Frozen')),NULL,sum(`f`.`plant_count`)) AS `flower_plant_count`,if(((`h`.`harvest_type` = 'Manicure') or (`h`.`harvest_type` = 'Fresh Frozen')),NULL,sum(`h`.`plant_count_harvested`)) AS `harvest_plant_count`,NULL AS `input_quantity`,sum(`h`.`wet`) AS `output_quantity` from ((`harvesting` `h` left join `pacstone`.`plant_strain` `s` on((`s`.`id` = `h`.`strain_id`))) left join `flowering` `f` on((`f`.`id` = `h`.`flowering_id`))) where (`h`.`wet` > 0) group by `h`.`id`,`h`.`processing_metrc_id`,`h`.`test_id`,`h`.`harvest_id`,`h`.`date`,`h`.`property_id`,`h`.`strain_id`,`h`.`date`,`h`.`week_num`,`h`.`year_num`,`h`.`harvest_type`,`s`.`strain_code`,`s`.`name`,`h`.`id`,`h`.`flowering_id`,`f`.`flowering_id` order by `h`.`date`;

-- View: harvest_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `harvest_view` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`property_id` AS `property_id`,`h`.`test_id` AS `test_id`,`h`.`date` AS `date`,`h`.`week_num` AS `week_num`,`h`.`year_num` AS `year_num`,`h`.`license_id` AS `license_id`,`h`.`strain_id` AS `strain_id`,`h`.`plant_count_harvested` AS `plant_count_harvested`,`h`.`plant_count_received` AS `plant_count_received`,`h`.`wet` AS `wet`,`h`.`waste` AS `waste`,`h`.`harvest_metrc_id` AS `harvest_metrc_id`,`h`.`processing_metrc_id` AS `processing_metrc_id`,`h`.`metrc_harvest_name` AS `metrc_name`,`f`.`plant_count` AS `planted_count` from (`harvesting` `h` left join `flowering` `f` on((`h`.`flowering_id` = `f`.`id`))) where (year(`h`.`date`) > 2019);

-- View: harvest_view_detail
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `harvest_view_detail` AS select `h`.`flowering_id` AS `flowering_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`property_id` AS `property_id`,`h`.`test_id` AS `test_id`,`h`.`date` AS `date`,`h`.`week_num` AS `week_num`,`h`.`year_num` AS `year_num`,`h`.`license_id` AS `license_id`,`h`.`strain_id` AS `strain_id`,`h`.`plant_count_harvested` AS `plant_count_harvested`,`h`.`plant_count_received` AS `plant_count_received`,`h`.`wet` AS `wet`,`h`.`waste` AS `waste`,`h`.`harvest_metrc_id` AS `harvest_metrc_id`,`h`.`processing_metrc_id` AS `processing_metrc_id`,`h`.`metrc_harvest_name` AS `metrc_name`,`f`.`plant_count` AS `planted_count`,`f`.`date` AS `date_planted`,`f`.`harvest_date` AS `date_harvested`,(to_days(`f`.`harvest_date`) - to_days(`f`.`date`)) AS `flowering_days` from (`harvesting` `h` left join `flowering` `f` on((`h`.`flowering_id` = `f`.`id`))) where (year(`h`.`date`) > 2019);

-- View: harvest_weight_csv
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `harvest_weight_csv` AS select max(`f`.`transfer_order_id`) AS `transfer_order_id`,max(`f`.`id`) AS `flowering_id`,max(`h`.`id`) AS `harvesting_id`,max(`f`.`flowering_id`) AS `flowering_name`,max(`h`.`harvest_id`) AS `harvest_name`,nullif((sum(`h`.`wet`) / sum(`h`.`plant_count_harvested`)),0) AS `ave_by_plant`,`p`.`metrc_id` AS `metrc_transfer_tag`,`m`.`metrc_id` AS `metrc_plant_tag`,(case when (`subquery`.`total_wet` > 0) then round(nullif((((rand() * ((1.082 * `subquery`.`total_wet`) - (0.98 * `subquery`.`total_wet`))) + (0.98 * `subquery`.`total_wet`)) / sum(`h`.`plant_count_harvested`)),0),3) else 1.0 end) AS `weight_by_plant`,'Pounds' AS `uom`,'Harvest Storage' AS `location`,max(`h`.`metrc_harvest_name`) AS `metrc_harvest_name`,NULL AS `blank`,max(`h`.`date`) AS `harvest_date` from ((((`pacstone`.`metrc_tag_list` `m` left join `flowering` `f` on((`f`.`transfer_order_id` = `m`.`plant_transfer_order_id`))) left join `harvesting` `h` on((`f`.`id` = `h`.`flowering_id`))) left join `harvest_metrc_packages` `p` on((`h`.`id` = `p`.`harvesting_id`))) left join (select `h`.`metrc_harvest_name` AS `metrc_harvest_name`,sum(`h`.`wet`) AS `total_wet`,sum(`h`.`plant_count_harvested`) AS `total_plants` from `harvesting` `h` where (`h`.`date` >= (curdate() - interval 6 day)) group by `h`.`metrc_harvest_name`) `subquery` on((`h`.`metrc_harvest_name` = `subquery`.`metrc_harvest_name`))) where ((`m`.`table_from` = 'plant_tags_received') and (`m`.`status` is null) and (`m`.`action` is null) and (`h`.`date` >= (curdate() - interval 6 day)) and (`h`.`wet` > 0) and (`h`.`harvest_type` <> 'Manicure')) group by `m`.`metrc_id`,`f`.`transfer_order_id`,`h`.`flowering_id`,`h`.`date`,`subquery`.`total_wet`,`h`.`metrc_harvest_name`,`h`.`wet`,`h`.`plant_count_harvested`,`p`.`metrc_id`,`h`.`id` order by `h`.`date` desc,`m`.`metrc_id`;

-- View: harvest_weight_ref
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `harvest_weight_ref` AS select max(`rec`.`transfer_order_id`) AS `transfer_order_id`,max(`f`.`id`) AS `flowering_id`,max(`h`.`id`) AS `harvesting_id`,max(`f`.`flowering_id`) AS `flowering_name`,max(`h`.`harvest_id`) AS `harvest_name`,nullif((sum(`h`.`wet`) / sum(`h`.`plant_count_harvested`)),0) AS `ave_by_plant`,`p`.`metrc_id` AS `harvest_metrc_tag`,`m`.`metrc_id` AS `metrc_id`,(case when (`subquery`.`total_wet` > 0) then round(nullif((((rand() * ((1.082 * `subquery`.`total_wet`) - (0.98 * `subquery`.`total_wet`))) + (0.98 * `subquery`.`total_wet`)) / sum(`h`.`plant_count_harvested`)),0),3) else 1.0 end) AS `weight_by_plant`,'Pounds' AS `uom`,'Harvest Storage' AS `location`,max(`h`.`metrc_harvest_name`) AS `metrc_harvest_name`,NULL AS `blank`,max(`h`.`date`) AS `harvest_date` from (((((`pacstone`.`metrc_tag_list` `m` left join `transfers`.`plant_tags_received` `rec` on((`m`.`source_id` = `rec`.`id`))) left join `flowering` `f` on((`f`.`transfer_order_id` = `rec`.`transfer_order_id`))) left join `harvesting` `h` on((`f`.`id` = `h`.`flowering_id`))) left join `harvest_metrc_packages` `p` on((`h`.`id` = `p`.`harvesting_id`))) left join (select `h`.`metrc_harvest_name` AS `metrc_harvest_name`,sum(`h`.`wet`) AS `total_wet`,sum(`h`.`plant_count_harvested`) AS `total_plants` from `harvesting` `h` where (`h`.`date` >= (curdate() - interval 10 day)) group by `h`.`metrc_harvest_name`) `subquery` on((`h`.`metrc_harvest_name` = `subquery`.`metrc_harvest_name`))) where ((`m`.`table_from` = 'plant_tags_received') and (`m`.`status` is null) and (`h`.`date` >= (curdate() - interval 10 day)) and (`h`.`harvest_type` <> 'Manicure')) group by `m`.`metrc_id`,`rec`.`id`,`f`.`transfer_order_id`,`h`.`flowering_id`,`h`.`date`,`subquery`.`total_wet`,`h`.`metrc_harvest_name`,`h`.`wet`,`h`.`plant_count_harvested`,`p`.`metrc_id`,`h`.`id` order by `h`.`date` desc,`m`.`metrc_id`;

-- View: harvesting_by_crop
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `harvesting_by_crop` AS select `harvesting`.`crop_id` AS `crop_id_h`,sum(if(regexp_like(`harvesting`.`harvest_id`,'-M$'),0,`harvesting`.`plant_count_harvested`)) AS `plant_count_harvested_sum`,sum(if(regexp_like(`harvesting`.`harvest_id`,'-M$'),0,`harvesting`.`plant_count_received`)) AS `plant_count_received_sum`,sum(`harvesting`.`wet`) AS `wet_sum`,sum(`harvesting`.`waste`) AS `waste_sum`,count(0) AS `harvesting_record_count`,sum(if(regexp_like(`harvesting`.`harvest_id`,'-M$'),1,0)) AS `harvesting_manicure_record_count` from `harvesting` where (`harvesting`.`action` <> 'Deleted') group by `harvesting`.`crop_id`;

-- View: harvesting_ref
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `harvesting_ref` AS select `h`.`id` AS `id`,`h`.`crop_id` AS `crop_id`,`h`.`harvest_id` AS `harvest_id`,`h`.`metrc_harvest_name` AS `metrc_harvest_name`,`c`.`label` AS `crop_name`,`h`.`property_id` AS `property_id`,`h`.`date` AS `date`,`h`.`week_num` AS `week_num`,`h`.`year_num` AS `year_num`,concat(`h`.`year_num`,right(concat('0',`h`.`week_num`),2)) AS `year_week`,`h`.`license_id` AS `license_id`,`h`.`strain_id` AS `strain_id`,`h`.`test_id` AS `test_id`,`h`.`harvest_metrc_id` AS `harvest_metrc_id`,`h`.`processing_metrc_id` AS `processing_metrc_id`,`h`.`plant_count_harvested` AS `plant_count_harvested`,`h`.`wet` AS `wet`,`h`.`waste` AS `waste`,`h`.`plant_count_received` AS `plant_count_received`,`h`.`status` AS `status`,`h`.`harvest_type` AS `harvest_type` from (`harvesting` `h` left join `crop` `c` on((`c`.`id` = `h`.`crop_id`))) where (((`h`.`action` <> 'Deleted') and (`h`.`action` <> 'Duplicated')) or (`h`.`action` is null));

-- View: last_eight_week_plant_count
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `last_eight_week_plant_count` AS select `schedule_view`.`year_num` AS `year_num`,`schedule_view`.`week_num` AS `week_num`,`schedule_view`.`strain_id` AS `strain_id`,max(`schedule_view`.`transfer_type`) AS `transfer_type`,max(`schedule_view`.`year_week`) AS `year_week`,sum(`schedule_view`.`plant_count`) AS `total_plant_count`,max(`schedule_view`.`strain_category`) AS `strain_category` from `schedule_view` where ((`schedule_view`.`transfer_type` = 'Veg to Flower') and (((`schedule_view`.`year_num` = year((now() - interval 1 week))) and (`schedule_view`.`week_num` between week((now() - interval 8 week),3) and (week(now(),3) - 1))) or ((`schedule_view`.`year_num` = (year((now() - interval 1 week)) - 1)) and (`schedule_view`.`week_num` > (52 - (8 - week(now(),3)))) and (`schedule_view`.`week_num` <= 52)))) group by `schedule_view`.`year_num`,`schedule_view`.`week_num`,`schedule_view`.`strain_id` order by `year_week` desc;

-- View: last_week_plant_count
CREATE ALGORITHM=UNDEFINED DEFINER=`nieko`@`%` SQL SECURITY DEFINER VIEW `last_week_plant_count` AS select `schedule_view`.`strain_id` AS `strain_id`,max(`schedule_view`.`transfer_type`) AS `transfer_type`,max(`schedule_view`.`year_num`) AS `year_num`,max(`schedule_view`.`week_num`) AS `week_num`,max(`schedule_view`.`year_week`) AS `year_week`,sum(`schedule_view`.`plant_count`) AS `total_plant_count`,max(`schedule_view`.`strain_category`) AS `strain_category` from `schedule_view` where ((`schedule_view`.`transfer_type` = 'Veg to Flower') and (`schedule_view`.`week_num` = week((now() - interval 1 week),3)) and (`schedule_view`.`year_num` = year((now() - interval 1 week)))) group by `schedule_view`.`strain_id`;

-- View: metrc_flowering_tags
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `metrc_flowering_tags` AS select `m`.`id` AS `id`,`m`.`source_id` AS `source_id`,`m`.`metrc_id` AS `metrc_id`,`m`.`created_on` AS `created_on` from `pacstone`.`metrc_tag_list` `m` where ((`m`.`table_from` = 'plant_tags_received') and (cast(`m`.`created_on` as date) >= (curdate() - 5)));

-- View: processing_report_test_view
CREATE ALGORITHM=UNDEFINED DEFINER=`marc`@`%` SQL SECURITY DEFINER VIEW `processing_report_test_view` AS select `h`.`harvest_id` AS `harvest_id`,`h`.`processing_metrc_id` AS `processing_metrc_id`,`b`.`plant_count` AS `plant_count`,`b`.`wet_weight` AS `wet_weight` from (`harvesting` `h` join (select sum(`hh`.`plant_count_harvested`) AS `plant_count`,sum(`hh`.`wet`) AS `wet_weight`,`hh`.`harvest_id` AS `bhid`,`hh`.`processing_metrc_id` AS `bpmid` from `harvesting` `hh` group by `hh`.`harvest_id`,`hh`.`processing_metrc_id`) `b` on(((`b`.`bhid` = `h`.`harvest_id`) and (`b`.`bpmid` = `h`.`processing_metrc_id`)))) group by `h`.`harvest_id`,`h`.`processing_metrc_id`;

-- View: schedule_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `schedule_view` AS select `ps`.`id` AS `schedule_id`,`psd`.`id` AS `detail_id`,`ps`.`transfer_type` AS `transfer_type`,`ps`.`year_num` AS `year_num`,`ps`.`week_num` AS `week_num`,concat(`ps`.`year_num`,right(concat('0',`ps`.`week_num`),2)) AS `year_week`,`c`.`name` AS `name`,`c`.`capacity` AS `capacity`,`c`.`location_string` AS `location_string`,`c`.`property_id` AS `property_id`,`c`.`cannabis_license_id` AS `cannabis_license_id`,`psd`.`strain_id` AS `strain_id`,`psd`.`date` AS `date`,`psd`.`plant_count` AS `plant_count`,`psd`.`priority` AS `priority`,`psd`.`action` AS `status`,`s`.`category` AS `strain_category` from (((`plant_schedule` `ps` left join `plant_schedule_detail` `psd` on((`ps`.`id` = `psd`.`plant_schedule_id`))) left join `pacstone`.`canopy` `c` on((`psd`.`canopy_id` = convert(`c`.`id` using utf8mb4)))) left join `pacstone`.`plant_strain` `s` on((`psd`.`strain_id` = convert(`s`.`id` using utf8mb4)))) where (`psd`.`action` <> 'Deleted');

-- View: veg_active_inventory
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `veg_active_inventory` AS select `b`.`name` AS `name`,`b`.`date` AS `date`,`b`.`property_id` AS `property_id`,`b`.`week` AS `week`,`b`.`year` AS `year`,`b`.`year_week` AS `year_week`,`b`.`strain_id` AS `strain_id`,`b`.`license_id` AS `license_id`,`b`.`test_id` AS `test_id`,`b`.`location_string` AS `location_string`,`v`.`plant_count` AS `plant_count`,`v`.`flat_plant_count` AS `plants_per_batch`,`v`.`flats` AS `total_batch_count`,`v`.`action` AS `action` from (`veg` `v` left join `pacstone`.`batch` `b` on((`v`.`batch_id` = convert(`b`.`id` using utf8mb4)))) where (`v`.`status` = 'Active');

-- View: veg_batch_class
CREATE ALGORITHM=UNDEFINED DEFINER=`mark`@`%` SQL SECURITY DEFINER VIEW `veg_batch_class` AS select `vb`.`id` AS `id`,`vb`.`veg_id` AS `veg_id`,`vb`.`metrc_plant_tag` AS `metrc_plant_tag`,`vb`.`plant_count` AS `plant_count`,`vb`.`note` AS `veg_batch_note`,`vb`.`action` AS `veg_batch_action`,`vb`.`created_on` AS `created_on`,`vb`.`plant_class` AS `plant_class`,`v`.`batch_id` AS `batch_id`,`b`.`name` AS `veg_batch_name`,`b`.`property_id` AS `property_id`,`b`.`week` AS `week`,`b`.`year` AS `year`,`b`.`strain_id` AS `strain_id`,`b`.`license_id` AS `license_id`,`b`.`location_id` AS `location_id`,`b`.`location_string` AS `location_string` from ((`veg_batch` `vb` left join `veg` `v` on((`v`.`id` = `vb`.`veg_id`))) left join `pacstone`.`batch` `b` on((`v`.`batch_id` = `b`.`id`))) where (`vb`.`plant_class` is not null);

-- View: veg_dead_plants
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `veg_dead_plants` AS select `b`.`name` AS `veg_name`,`b`.`date` AS `veg_date`,`b`.`property_id` AS `property_id`,`b`.`week` AS `week`,`b`.`year` AS `year`,`b`.`year_week` AS `year_week`,`b`.`strain_id` AS `strain_id`,`b`.`license_id` AS `license_id`,`b`.`location_string` AS `location_string`,`vb`.`metrc_plant_tag` AS `metrc_plant_tag`,`vb`.`plant_count` AS `plant_count`,`vb`.`item` AS `item`,`vb`.`modified_type` AS `reason`,cast(`vb`.`modified_on` as date) AS `reported_date`,week(`vb`.`modified_on`,0) AS `reported_week` from ((`veg_batch` `vb` left join `veg` `v` on((`v`.`id` = `vb`.`veg_id`))) left join `pacstone`.`batch` `b` on((`v`.`batch_id` = convert(`b`.`id` using utf8mb4)))) where ((`vb`.`action` = 'Plant Waste') and (`vb`.`metrc_plant_tag` is not null) and (`vb`.`modified_on` > (curdate() - interval 22 day)));

-- View: veg_historical_records
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `veg_historical_records` AS select `vb`.`metrc_plant_tag` AS `metrc_plant_tag`,`vb`.`plant_count` AS `plant_count`,`b`.`name` AS `batch_name`,`b`.`property_id` AS `property_id`,`b`.`date` AS `date`,`b`.`week` AS `week`,`b`.`year` AS `year`,`b`.`year_week` AS `year_week`,`b`.`license_id` AS `license_id`,`b`.`strain_id` AS `strain_id`,`b`.`test_id` AS `test_id`,`c`.`name` AS `canopy_name`,`vb`.`plant_class` AS `plant_class`,`v`.`location_string` AS `location_string` from (((`veg_batch` `vb` left join `veg` `v` on((`v`.`id` = `vb`.`veg_id`))) left join `pacstone`.`batch` `b` on((convert(`b`.`id` using utf8mb4) = `v`.`batch_id`))) left join `pacstone`.`canopy` `c` on((`b`.`location_id` = convert(`c`.`location_id` using utf8mb4))));

-- View: waste_view
CREATE ALGORITHM=UNDEFINED DEFINER=`lizeth`@`%` SQL SECURITY DEFINER VIEW `waste_view` AS select `w`.`id` AS `id`,`w`.`source_id` AS `source_id`,`w`.`date` AS `date`,`w`.`metrc_id` AS `metrc_id`,`w`.`stage_id` AS `stage_id`,`w`.`source_metrc_id` AS `source_metrc_id`,`w`.`metrc_item_id` AS `metrc_item_id`,`w`.`metrc_item_name` AS `metrc_item_name`,`w`.`waste_method_name` AS `waste_method_name`,`w`.`mixed_material` AS `mixed_material`,`w`.`uom` AS `uom`,`w`.`quantity` AS `quantity`,`w`.`reason_name` AS `reason_name`,`w`.`note` AS `note`,`w`.`status` AS `status`,`w`.`action` AS `action`,`w`.`user` AS `user`,`w`.`created_by` AS `created_by`,`w`.`created_on` AS `created_on`,`w`.`modified_by` AS `modified_by`,`w`.`modified_on` AS `modified_on`,`w`.`flag` AS `flag`,`w`.`trigger` AS `trigger`,`w`.`reason_detail` AS `reason_detail`,`w`.`clone_id` AS `clone_id`,`w`.`veg_id` AS `veg_id`,`w`.`flowering_id` AS `flowering_id`,`w`.`harvest_id` AS `harvest_id`,`w`.`batch_id` AS `batch_id`,`s`.`id` AS `strain_id`,`s`.`strain_code` AS `strain_code`,`s`.`name` AS `strain_name` from (`cultivation_waste` `w` left join `pacstone`.`plant_strain` `s` on((`w`.`metrc_item_name` like concat('%',`s`.`name`,'%')))) where (`w`.`quantity` > 0) order by `w`.`date` desc;

